word32 fn00721290(word32 dwArg04, word32 dwArg08, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006EA9D0
//      fn0073D660
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn00721290_entry:
l00721290:
	word32 esi_10 = dwArg04
	word32 eax_11 = Mem9[dwArg04 + 4<32>:word32]
	branch eax_11 != 0xA23B20<32> l007212A6
l007212A6:
	word32 eax_39
	word32 edx_548
	word32 ecx_547
	branch fn006D5670(eax_11, 0xA23B20<32>, out ecx_547, out edx_548) != 0<32> l007212C9
l007212C9:
	eax_39 = fn00717A20(Mem20[dwArg04 + 0xC<32>:word32], Mem20[dwArg04 + 8<32>:word32], out edx)
l007212B8:
	eax_39 = fn00720070(dwArg04, out edx)
l007212D9:
	esi_10 = eax_39
l007212A1:
	Mem63[dwArg04:word32] = Mem15[dwArg04:word32] + 1<32>
l007212DB:
	branch esi_10 == 0<32> l00721368
l007212E3:
	word32 eax_83 = fn007203E0(dwArg08, out edx)
	branch eax_83 == 0<32> l00721342
l007212F6:
	word32 eax_93 = Mem75[0x00A6DBB4<p32>:word32]
	branch eax_83 != eax_93 l00721316
l00721316:
	branch esi_10 != eax_93 l00721331
l00721331:
	word32 ecx_549
	word32 eax_102 = fn00717740(Mem75[eax_83 + 8<32>:word32] + Mem75[esi_10 + 8<32>:word32], out ecx_549, out edx)
	branch eax_102 != 0<32> l0072136E
l0072136E:
	word32 eax_111 = Mem75[esi_10 + 8<32>:word32]
	word32 ecx_112 = Mem75[eax_102 + 0xC<32>:word32]
	word32 edx_113 = Mem75[esi_10 + 0xC<32>:word32]
	branch eax_111 * 2<32> <u 0x10<32> l0072138C
l0072138C:
	branch eax_111 * 2<32> <=u 0<32> l007213A1
l00721390:
	word32 edx_126 = edx_113 - ecx_112
	word32 ebp_128 = eax_111 * 2<32>
l00721394:
	Mem133[ecx_112:byte] = Mem131[edx_126 + ecx_112:byte]
	ecx_112 = ecx_112 + 1<32>
	ebp_128 = ebp_128 - 1<32>
	branch ebp_128 != 0<32> l00721394
l0072137F:
	memcpy(ecx_112, edx_113, eax_111 * 2<32>)
l007213A1:
	word32 eax_151 = Mem150[eax_83 + 8<32>:word32]
	word32 ecx_160 = Mem150[eax_102 + 0xC<32>:word32] + Mem150[esi_10 + 8<32>:word32] * 2<32>
	word32 edx_161 = Mem150[eax_83 + 0xC<32>:word32]
	branch eax_151 * 2<32> <u 0x10<32> l007213C4
l007213C4:
	branch eax_151 * 2<32> <=u 0<32> l007213DD
l007213C8:
	edx_161 = edx_161 - ecx_160
	word32 ebp_169 = eax_151 * 2<32>
l007213D0:
	Mem177[ecx_160:byte] = Mem175[edx_161 + ecx_160:byte]
	ecx_160 = ecx_160 + 1<32>
	ebp_169 = ebp_169 - 1<32>
	branch ebp_169 != 0<32> l007213D0
l007213B7:
	memcpy(ecx_160, edx_161, eax_151 * 2<32>)
l007213DD:
	word32 v21_195 = Mem194[esi_10:word32] + 0xFFFFFFFF<32>
	Mem196[esi_10:word32] = v21_195
	word32 esp_201 = fp - 0xC<32>
	branch v21_195 != 0<32> l007213EF
l007213E3:
	word32 ecx_203 = Mem196[esi_10 + 4<32>:word32]
	word32 esp_215
	call Mem196[ecx_203 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_203,edx:edx_217,Stack +0004:esi_65,Stack +0008:dwArg04,Stack +0018:dwArg04,Stack +001C:dwArg08
		defs: edx:edx_217,esp:esp_215
	esp_201 = esp_215 + 4<32>
l007213EF:
	word32 v22_225 = Mem224[eax_83:word32] + 0xFFFFFFFF<32>
	Mem226[eax_83:word32] = v22_225
	branch v22_225 != 0<32> l00721400
l007213F4:
	word32 eax_229 = Mem226[eax_83 + 4<32>:word32]
	word32 ecx_230 = Mem226[eax_229 + 0x18<32>:word32]
	Mem233[esp_201 - 4<i32>:word32] = eax_83
	word32 ecx_241
	call ecx_230 (retsize: 4;)
		uses: eax:eax_229,ecx:ecx_241,edx:edx_240,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: ecx:ecx_241,edx:edx_240
l00721400:
	edxOut = edx_161
	return eax_102
l00721342:
	word32 v16_258 = Mem75[esi_10:word32] + 0xFFFFFFFF<32>
	Mem259[esi_10:word32] = v16_258
	word32 esp_264 = fp - 0xC<32>
	branch v16_258 != 0<32> l00721353
l00721347:
	word32 ecx_262 = Mem259[esi_10 + 4<32>:word32]
	word32 esp_271
	call Mem259[ecx_262 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_262,edx:edx_273,Stack +0004:esi_65,Stack +0008:dwArg04,Stack +0018:dwArg04,Stack +001C:dwArg08
		defs: edx:edx_273,esp:esp_271
	esp_264 = esp_271 + 4<32>
l00721353:
	branch eax_83 == 0<32> l00721368
l00721357:
	word32 v18_284 = Mem283[eax_83:word32] + 0xFFFFFFFF<32>
	Mem285[eax_83:word32] = v18_284
	branch v18_284 != 0<32> l00721368
l0072135C:
	word32 eax_288 = Mem285[eax_83 + 4<32>:word32]
	word32 ecx_289 = Mem285[eax_288 + 0x18<32>:word32]
	Mem292[esp_264 - 4<i32>:word32] = eax_83
	word32 ecx_300
	call ecx_289 (retsize: 4;)
		uses: eax:eax_288,ecx:ecx_300,edx:edx_299,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: ecx:ecx_300,edx:edx_299
l00721368:
	edxOut = edx
	return 0<32>
l0072131A:
	word32 v15_316 = Mem75[esi_10:word32] + 0xFFFFFFFF<32>
	Mem317[esi_10:word32] = v15_316
	branch v15_316 != 0<32> l0072132B
l0072131F:
	word32 edx_320 = Mem317[esi_10 + 4<32>:word32]
	word32 ecx_327
	call Mem317[edx_320 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_327,edx:edx_320,Stack +0004:esi_65,Stack +0008:dwArg04,Stack +0018:dwArg04,Stack +001C:dwArg08
		defs: ecx:ecx_327,edx:edx_326
l0072132B:
	edxOut = edx
	return eax_83
l007212FF:
	word32 v13_342 = Mem75[eax_83:word32] + 0xFFFFFFFF<32>
	Mem343[eax_83:word32] = v13_342
	branch v13_342 != 0<32> l00721310
l00721304:
	word32 eax_346 = Mem343[eax_83 + 4<32>:word32]
	word32 ecx_353
	call Mem343[eax_346 + 0x18<32>:word32] (retsize: 4;)
		uses: eax:eax_346,ecx:ecx_353,edx:edx_352,Stack +0004:eax_83,Stack +0008:dwArg04,Stack +0018:dwArg04,Stack +001C:dwArg08
		defs: ecx:ecx_353,edx:edx_352
l00721310:
	edxOut = edx
	return esi_10
fn00721290_exit:


word32 fn00723330(word32 eax, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00723540
// MayUse:  eax:[0..31] Stack +0004:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx Top
// Preserved: ebp ebx edi esi esp
fn00723330_entry:
l00723330:
	word32 ebp_10 = dwArg04
	word32 ebx_19 = eax
l00723340:
	word32 eax_26 = tolower(CONVERT(Mem21[ebx_19:byte], byte, int32))
	word32 eax_32 = tolower(CONVERT(Mem25[ebp_10:byte], byte, int32))
	ebx_19 = ebx_19 + 1<32>
	ebp_10 = ebp_10 + 1<32>
	branch eax_26 == 0<32> l00723362
l0072335E:
	branch eax_26 == eax_32 l00723340
l00723362:
	return eax_26 - eax_32
fn00723330_exit:


word32 fn00723370(word32 dwArg04, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00723540
// MayUse:  Stack +0004:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ecx edx Top
// Preserved: ebp ebx edi esi esp
fn00723370_entry:
l00723370:
	branch dwArg04 != 0<32> l0072337D
l0072337D:
	word32 edi_14 = Mem13[dwArg04 + 0x3C<32>:word32]
	word32 eax_18 = 4<32>
	word32 ecx_19 = 0x8D9B3C<32>
	word32 edx_126 = edi_14 + dwArg04
l00723390:
	word32 eax_81
	branch Mem23[edx_126:word32] != Mem23[ecx_19:word32] l007233A8
l00723396:
	eax_18 = eax_18 - 4<32>
	ecx_19 = ecx_19 + 4<32>
	edx_126 = edx_126 + 4<32>
	branch eax_18 >=u 4<32> l00723390
l007233A4:
	branch eax_18 == 0<32> l00723405
l007233A8:
	word32 esi_44 = Mem23[edx_126:byte] - Mem23[ecx_19:byte]
	branch esi_44 != 0<32> l007233F7
l007233B2:
	word32 eax_48 = eax_18 - 1<32>
	word32 ecx_49 = ecx_19 + 1<32>
	edx_126 = edx_126 + 1<32>
	branch eax_48 == 0<32> l00723405
l007233BF:
	esi_44 = Mem23[edx_126:byte] - Mem23[ecx_49:byte]
	branch esi_44 != 0<32> l007233F7
l007233C9:
	edx_126 = edx_126 + 1<32>
	branch eax_48 == 1<32> l00723405
l007233D6:
	esi_44 = Mem23[edx_126 + 1<32>:byte] - Mem23[ecx_49 + 1<32>:byte]
	branch esi_44 != 0<32> l007233F7
l007233E0:
	edx_126 = edx_126 + 2<32>
	branch eax_48 == 2<32> l00723405
l007233ED:
	esi_44 = Mem23[edx_126 + 2<32>:byte] - Mem23[ecx_49 + 2<32>:byte]
	branch esi_44 == 0<32> l00723405
l00723405:
	eax_81 = 0<32>
l007233F7:
	eax_81 = 1<32>
	branch esi_44 > 0<32> l00723407
l00723400:
	eax_81 = 0xFFFFFFFF<32>
l00723407:
	branch eax_81 != 0<32> l007234C5
l0072340F:
	word32 eax_115
	word32 ecx_114
	word16 ax_109 = Mem23[edi_14 + 0x18<32> + dwArg04:word16]
	branch ax_109 != 0x10B<16> l00723426
l00723426:
	branch ax_109 != 0x20B<16> l007234C5
l00723430:
	ecx_114 = 0x6C<32>
	eax_115 = 0x78<32>
l0072341A:
	ecx_114 = 0x5C<32>
	eax_115 = 0x68<32>
l0072343A:
	branch Mem23[ecx_114 + 0x18<32> + edi_14 + dwArg04:word32] <u 2<32> l007234C5
l00723448:
	edx_126 = eax_115 + 0x18<32> + edi_14
	word32 eax_128 = edx_126 + dwArg04
	branch Mem23[edx_126 + 4<32> + dwArg04:word32] == 0<32> l007234C5
l00723456:
	word32 edi_131 = Mem23[eax_128:word32] + dwArg04 + 0xC<32>
	branch Mem23[edi_131:word32] == 0<32> l007234C5
l0072345F:
l00723465:
	word32 esi_139 = Mem136[edi_131 + 0<32>:word32] + dwArg04
	word32 eax_141 = esi_139
	edx_126 = esi_139 + 1<32>
l00723470:
	eax_141 = eax_365 + 1<32>
	eax_365 = eax_141
	branch Mem136[eax_365:byte] != 0<8> l00723470
l00723479:
	branch eax_141 - (esi_139 + 1<32>) <u 6<32> l007234BD
l00723480:
	edx_126 = <invalid>
	branch strncmp(esi_139, 0x8D3ED8<32>, 6<32>) != 0<32> l007234BD
l00723491:
	byte al_179 = Mem162[esi_139 + 6<32>:byte]
	word32 ecx_182 = esi_139 + 6<32> + 1<32>
	branch al_179 == 0<8> l007234B6
l0072349B:
l007234A0:
	branch al_179 == 0x2E<8> l007234B6
l007234A4:
	branch al_179 < 0x30<8> l007234BD
l007234A8:
	branch al_179 > 0x39<8> l007234BD
l007234BD:
	edi_131 = edi_131 + 0x14<32>
	branch Mem194[edi_131:word32] != 0<32> l00723465
l007234C5:
	edxOut = edx_126
	return 0<32>
l007234AC:
	al_179 = Mem162[ecx_182 + 0<32>:byte]
	ecx_182 = ecx_182 + 1<32>
	branch al_179 != 0<8> l007234A0
l007234B6:
	edxOut = edx_126
	return esi_139
l00723379:
	edxOut = edx
	return 0<32>
fn00723370_exit:


word32 fn007234D0(word32 edx, word32 ebx, word32 ebp, word32 esi, word32 edi, selector es, selector ds, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00657290
// MayUse:  cs:[0..15] ds:[0..15] ebp:[0..31] ebx:[0..31] edi:[0..31] edx:[0..31] es:[0..15] esi:[0..31] fs:[0..15] gs:[0..15] ss:[0..15] Stack +0004:[0..31]
// LiveOut: eax
// Trashed: SCZDOP eax ecx Top
// Preserved: esi esp
fn007234D0_entry:
l007234D0:
	word32 eax_7 = Mem0[0x00A14188<p32>:word32] ^ fp - 0x10C<32>
	word32 eax_23 = GetFullPathNameA(dwArg04, 0x104<32>, fp - 0x108<32>, fp - 0x10C<32>)
	branch eax_23 != 0<32> l0072351C
l0072351C:
	word32 ecx_107
	return fn00694B8E(LoadLibraryExA(dwArg04, 0<32>, 8<32>), eax_7 ^ fp - 0x10C<32>, edx, ebx, ebp, esi, edi, es, ds, esi, out ecx_107)
l00723506:
	word32 ecx_108
	return fn00694B8E(eax_23, eax_7 ^ fp - 0x10C<32>, edx, ebx, ebp, esi, edi, es, ds, esi, out ecx_108)
fn007234D0_exit:


word32 fn00723540(word32 ebx, word32 ebp, word32 esi, word32 edi, selector es, selector ds, word32 dwArg0C, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0074F9E0
// MayUse:  cs:[0..15] ds:[0..15] ebp:[0..31] ebx:[0..31] edi:[0..31] es:[0..15] esi:[0..31] fs:[0..15] gs:[0..15] ss:[0..15] Stack +000C:[0..31]
// LiveOut: eax edx
// Trashed: SCZDOP eax ebp ebx ecx edi edx Top
// Preserved: esi esp
fn00723540_entry:
l00723540:
	word32 eax_7 = Mem0[0x00A14188<p32>:word32] ^ fp - 0x308<32>
	fn00724FE0(fp - 0x108<32>, 0x102<32>, 0x8D9BC8<32>)
	word32 ebp_45
	word32 ebx_46
	word32 eax_44 = fn00657290(ebx, ebp, dwArg0C, edi, es, ds, dwArg0C, 0<32>, out ebx_46, out ebp_45)
	branch eax_44 != 0<32> l0072368E
l0072368E:
	fn00724FE0(fp - 0x308<32>, 0x100<32>, 0x8D9B80<32>)
	word32 edx_83
	word32 eax_81 = fn00723370(eax_44, out edx_83)
	branch eax_81 == 0<32> l00723710
l007236B6:
	branch fn00723330(fp - 0x308<32>, eax_81) == 0<32> l00723710
l00723710:
	word32 ecx_442
	word32 eax_132 = fn00694B8E(GetProcAddress(eax_44, fp - 0x108<32>), eax_7 ^ fp - 0x308<32>, edx_83, ebx_46, ebp_45, esi, edi, es, ds, esi, out ecx_442)
	edxOut = edx_83
	return eax_132
l007236C7:
	fn00724FE0(fp - 0x308<32>, 0x100<32>, 0x8D9B44<32>)
	word32 edx_166
	word32 ecx_443
	fn006E0F80(Mem150[0x00A16F8C<p32>:word32], fp - 0x308<32>, out ecx_443, out edx_166)
	FreeLibrary(eax_44)
	word32 ecx_444
	word32 eax_183 = fn00694B8E(0<32>, eax_7 ^ fp - 0x308<32>, edx_166, ebx_46, ebp_45, esi, edi, es, ds, esi, out ecx_444)
	edxOut = edx_166
	return eax_183
l00723590:
	word32 eax_210 = FormatMessageA(0x1000<32>, 0<32>, GetLastError(), 0<32>, fp - 0x208<32>, 0x100<32>, 0<32>)
	branch eax_210 != 0<32> l007235D8
l007235D8:
	branch eax_210 < 2<32> l007235F8
l007235DD:
	word32 eax_218 = fp - 0x208<32> + eax_210
	branch Mem209[fp - 0x20A<32> + eax_210:byte] != 0xD<8> l007235F8
l007235EE:
	branch Mem209[eax_218 - 1<32>:byte] != 0xA<8> l007235F8
l007235F4:
	Mem222[eax_218 - 2<32>:byte] = 0<8>
l007235F8:
	word32 eax_233 = fp - 0x308<32>
l00723631:
	eax_233 = eax_445 + 1<32>
	eax_445 = eax_233
	branch Mem235[eax_445:byte] != 0<8> l00723631
l0072363A:
	word32 eax_245 = eax_233 - (fp - 0x307<32>)
	strncpy(fp - 0x308<32> + eax_245, fp - 0x208<32>, 0x100<32> - eax_245)
l007235BB:
	fn00724FE0(fp - 0x308<32>, 0x100<32>, 0x8D9BA4<32>)
l00723662:
	word32 edx_322
	word32 ecx_440
	fn006E0F80(Mem278[0x00A16F8C<p32>:word32], fp - 0x308<32>, out ecx_440, out edx_322)
	word32 ecx_441
	word32 eax_333 = fn00694B8E(0<32>, eax_7 ^ fp - 0x308<32>, edx_322, ebx_46, ebp_45, esi, edi, es, ds, esi, out ecx_441)
	edxOut = edx_322
	return eax_333
fn00723540_exit:


word32 fn00723740(ptr32 & ecxOut, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00723860
// MayUse: 
// LiveOut: eax ecx edx
// Trashed: SCZO eax ecx edx Top
// Preserved: ebp ebx edi esi esp
fn00723740_entry:
l00723740:
	word32 esi_10 = Mem9[0x00A6DBC8<p32>:word32]
	branch esi_10 != 0<32> l007237E8
l00723751:
	word32 edi_21
	word32 ebx_17 = Mem15[0x00A6DBC4<p32>:word32]
	branch ebx_17 == 0<32> l007237C0
l007237C0:
	edi_21 = 0x10<32>
l0072375B:
	edi_21 = ebx_17 * 2<32>
	branch ebx_17 * 2<32> <=u ebx_17 l00723810
l00723766:
	branch ebx_17 * 2<32> >u 0x9249249<32> l00723810
l00723772:
	ecx = Mem15[0x00A6DBC0<p32>:word32]
	word32 eax_39 = realloc(ecx, (edi_21 * 8<32> - edi_21) * 4<32>)
	branch eax_39 == 0<32> l00723810
l00723794:
	Mem46[0x00A6DBC0<p32>:word32] = eax_39
	word32 edx_47 = ebx_17
	branch ebx_17 >=u edi_21 l007237D6
l0072379F:
	word32 ebp_56 = edi_21 - 1<32>
	ecx = eax_39 + 0x14<32> + (ebx_17 * 8<32> - ebx_17) * 4<32>
l007237B0:
	word32 esi_64
	Mem62[ecx - 0x14<32>:word32] = 0<32>
	branch edx_47 >=u ebp_56 l007237C7
l007237C7:
	esi_64 = 0<32>
l007237BB:
	esi_64 = ecx + 8<32>
l007237C9:
	Mem70[ecx:word32] = esi_64
	edx_47 = edx_47 + 1<32>
	ecx = ecx + 0x1C<32>
	branch edx_47 <u edi_21 l007237B0
l007237D5:
l007237D6:
	edx = ebx_17 * 8<32> - ebx_17
	Mem93[0x00A6DBC4<p32>:word32] = edi_21
	esi_10 = eax_39 + edx * 4<32>
l007237E8:
	word32 ebx_96 = Mem95[esi_10 + 0x14<32>:word32]
	Mem102[0x00A6DBC8<p32>:word32] = ebx_96
	word32 eax_103 = malloc(0x40000<32>)
	Mem107[esi_10:word32] = eax_103
	word32 edi_97 = esi_10 + 0x14<32>
	branch eax_103 != 0<32> l00723816
l00723816:
	Mem110[0x00A6DBD0<p32>:word32] = Mem107[0x00A6DBD0<p32>:word32] + 1<32>
	Mem115[esi_10 + 0x10<32>:word32] = 0<32>
	Mem116[esi_10 + 4<32>:word32] = eax_103
	Mem117[esi_10 + 8<32>:word32] = 0x40<32>
	branch (eax_103 & 0xFFF<32>) == 0<32> l00723849
l00723838:
	Mem122[esi_10 + 8<32>:word32] = 0x3F<32>
	Mem123[esi_10 + 4<32>:word32] = eax_103 - (eax_103 & 0xFFF<32>) + 0x1000<32>
l00723849:
	Mem127[esi_10 + 0xC<32>:word32] = Mem125[esi_10 + 8<32>:word32]
	ecxOut = eax_103 & 0xFFF<32>
	edxOut = edx
	return esi_10
l00723808:
	Mem136[edi_97:word32] = ebx_96
	Mem137[0x00A6DBC8<p32>:word32] = esi_10
l00723810:
	ecxOut = ecx
	edxOut = edx
	return 0<32>
fn00723740_exit:


word32 fn00723860(word32 dwArg04, ptr32 & ecxOut, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006DDD80
//      fn006EA9D0
//      fn006EC9B0
//      fn006ECAC0
//      fn006F1AA0
//      fn006F2090
//      fn006FEEB0
//      fn007105C0
//      fn00710690
//      fn00710CB0
//      fn00711280
//      fn00711330
//      fn00711400
//      fn00711F50
//      fn007120F0
//      fn00723B60
//      fn00727340
//      fn00727380
//      fn007273D0
//      fn00727420
//      fn007279E0
//      fn00727D50
//      fn00728650
//      fn00728E40
//      fn00729300
//      fn00729810
//      fn00729F50
//      fn0072CC90
//      fn0072CEE0
//      fn0072D130
//      fn0072D3D0
//      fn0072DD60
//      fn0072E920
//      fn007331D0
//      fn00734BB0
//      fn007379B0
//      fn0073B660
//      fn0073E590
//      fn007406A0
//      fn007514B0
//      fn00752DC0
//      fn00755020
// MayUse:  Stack +0004:[0..31]
// LiveOut: eax ecx edx
// Trashed: SCZO eax ecx edx Top
// Preserved: ebx edi esi esp
fn00723860_entry:
l00723860:
	word32 eax_134
	word32 edi_13 = dwArg04
	branch dwArg04 >=u 0x101<32> l007239A6
l00723875:
	word32 eax_17 = dwArg04 - 1<32> >>u 3<32>
	ecx = Mem12[eax_17 * 8<32> + 0xA23BE0<32>:word32]
	edx = Mem12[ecx + 8<32>:word32]
	branch ecx == edx l007238CA
l007238CA:
	word32 esi_23 = Mem12[0x00A6DBCC<p32>:word32]
	branch esi_23 != 0<32> l007238F7
l007238D4:
	word32 eax_27 = fn00723740(out ecx, out edx)
	Mem37[0x00A6DBCC<p32>:word32] = eax_27
	esi_23 = eax_27
	branch eax_27 == 0<32> l007239A6
l007239A6:
	branch dwArg04 != 0<32> l007239AF
l007239AA:
	edi_13 = 1<32>
l007239AF:
	eax_134 = malloc(edi_13)
l007238E9:
	Mem52[eax_27 + 0x18<32>:word32] = 0<32>
	Mem53[eax_27 + 0x14<32>:word32] = 0<32>
l007238F7:
	word32 ecx_56 = Mem55[esi_23 + 0x10<32>:word32]
	branch ecx_56 == 0<32> l00723906
l00723906:
	word32 edi_62 = esi_23 - Mem55[0x00A6DBC0<p32>:word32]
	word32 edx_66 = SLICE(edi_62 *s64 0x92492493<32>, word32, 32) + edi_62
	ecx_56 = Mem55[esi_23 + 4<32>:word32]
	Mem71[ecx_56 + 0x10<32>:word32] = (edx_66 >> 4<32> >>u 0x1F<32>) + (edx_66 >> 4<32>)
	Mem72[ecx_56 + 0x14<32>:word32] = 0xFFFF<32>
	Mem74[esi_23 + 4<32>:word32] = Mem72[esi_23 + 4<32>:word32] + 0x1000<32>
l007238FE:
	Mem77[esi_23 + 0x10<32>:word32] = Mem55[ecx_56 + 8<32>:word32]
l00723935:
	word32 v15_80 = Mem79[esi_23 + 8<32>:word32] + 0xFFFFFFFF<32>
	Mem81[esi_23 + 8<32>:word32] = v15_80
	branch v15_80 != 0<32> l0072394F
l0072393B:
	word32 esi_84 = Mem81[esi_23 + 0x14<32>:word32]
	Mem87[0x00A6DBCC<p32>:word32] = esi_84
	branch esi_84 == 0<32> l0072394F
l00723948:
	Mem89[esi_84 + 0x18<32>:word32] = 0<32>
l0072394F:
	word32 eax_94 = Mem93[eax_17 * 8<32> + 0xA23BE0<32>:word32]
	Mem97[ecx_56 + 8<32>:word32] = eax_94
	Mem98[ecx_56 + 0xC<32>:word32] = eax_94
	Mem99[eax_94 + 8<32>:word32] = ecx_56
	Mem100[eax_94 + 0xC<32>:word32] = ecx_56
	Mem102[ecx_56:word32] = 1<32>
	branch Mem100[ecx_56 + 0x14<32>:word32] != eax_17 l00723979
l00723979:
	word32 edx_104 = eax_17 * 8<32> + 8<32>
	Mem106[ecx_56 + 0x18<32>:word32] = edx_104 + 0x20<32> + edx_104
	Mem115[ecx_56 + 0x1C<32>:word32] = 0x1000<32> - edx_104
	Mem118[ecx_56 + 0x14<32>:word32] = eax_17
	word32 eax_109 = ecx_56 + 0x20<32>
	word32 edx_116 = edx_104 + eax_109
	Mem121[ecx_56 + 4<32>:word32] = edx_116
	Mem122[edx_116:word32] = 0<32>
	ecxOut = ecx_56
	edxOut = edx_116
	return eax_109
l0072396D:
	word32 eax_125 = Mem102[ecx_56 + 4<32>:word32]
	word32 edx_126 = Mem102[eax_125:word32]
	Mem131[ecx_56 + 4<32>:word32] = edx_126
	ecxOut = ecx_56
	edxOut = edx_126
	return eax_125
l00723888:
	eax_134 = Mem12[ecx + 4<32>:word32]
	Mem136[ecx:word32] = Mem12[ecx:word32] + 1<32>
	word32 esi_137 = Mem136[eax_134:word32]
	Mem140[ecx + 4<32>:word32] = esi_137
	branch esi_137 != 0<32> l007239B9
l007239B9:
	ecxOut = ecx
	edxOut = edx
	return eax_134
l0072389B:
	word32 esi_150 = Mem140[ecx + 0x18<32>:word32]
	branch esi_150 >u Mem140[ecx + 0x1C<32>:word32] l007238BD
l007238BD:
	word32 ecx_153 = Mem140[ecx + 0xC<32>:word32]
	Mem158[edx + 0xC<32>:word32] = ecx_153
	Mem159[ecx_153 + 8<32>:word32] = edx
	ecxOut = ecx_153
	edxOut = edx
	return eax_134
l007238A3:
	Mem163[ecx + 4<32>:word32] = esi_150 + ecx
	word32 edx_164 = esi_150 + 8<32> + eax_17 * 8<32>
	Mem167[ecx + 0x18<32>:word32] = edx_164
	word32 ecx_168 = Mem167[ecx + 4<32>:word32]
	Mem171[ecx_168:word32] = 0<32>
	ecxOut = ecx_168
	edxOut = edx_164
	return eax_134
fn00723860_exit:


word32 fn007239C0(word32 dwArg04, ptr32 & ecxOut, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E8430
//      fn006EC4F0
//      fn006FEFD0
//      fn00717740
//      fn0071F9C0
//      fn00723B60
//      fn00727170
//      fn0072A350
//      fn0072E790
//      fn00737950
//      fn007379B0
//      fn0073B790
//      fn0073B7F0
//      fn0073E590
//      fn007406A0
//      fn00752DC0
// MayUse:  Stack +0004:[0..31]
// LiveOut: eax ecx edx
// Trashed: SCZO eax ecx edx Top
// Preserved: edi esi esp
fn007239C0_entry:
l007239C0:
	word32 ecx_164 = dwArg04
	branch dwArg04 == 0<32> l00723AA9
l007239CC:
	eax = dwArg04 & 0xFFFFF000<32>
	word32 edx_11 = Mem0[(dwArg04 & 0xFFFFF000<32>) + 0x10<32>:word32]
	branch edx_11 >=u Mem0[0x00A6DBC4<p32>:word32] l00723B47
l007239E4:
	word32 esi_20 = Mem18[0x00A6DBC0<p32>:word32]
	edx_11 = Mem18[esi_20 + (edx_11 * 8<32> - edx_11) * 4<32>:word32]
	branch dwArg04 - edx_11 >=u 0x40000<32> l00723B47
l00723A06:
	branch edx_11 == 0<32> l00723B47
l00723B47:
	free(dwArg04)
	ecxOut = dwArg04
	edxOut = edx_11
	return dwArg04 & 0xFFFFF000<32>
l00723A0E:
	edx = Mem18[(dwArg04 & 0xFFFFF000<32>) + 4<32>:word32]
	Mem42[dwArg04:word32] = edx
	Mem43[(dwArg04 & 0xFFFFF000<32>) + 4<32>:word32] = dwArg04
	branch edx == 0<32> l00723B28
l00723B28:
	Mem46[dwArg04 & 0xFFFFF000<32>:word32] = Mem43[dwArg04 & 0xFFFFF000<32>:word32] + 0xFFFFFFFF<32>
	word32 ecx_49 = Mem46[Mem46[(dwArg04 & 0xFFFFF000<32>) + 0x14<32>:word32] * 8<32> + 0xA23BE0<32>:word32]
	word32 edx_50 = Mem46[ecx_49 + 0xC<32>:word32]
	Mem51[(dwArg04 & 0xFFFFF000<32>) + 8<32>:word32] = ecx_49
	Mem52[(dwArg04 & 0xFFFFF000<32>) + 0xC<32>:word32] = edx_50
	Mem55[ecx_49 + 0xC<32>:word32] = dwArg04 & 0xFFFFF000<32>
	Mem56[edx_50 + 8<32>:word32] = dwArg04 & 0xFFFFF000<32>
	ecxOut = ecx_49
	edxOut = edx_50
	return dwArg04 & 0xFFFFF000<32>
l00723A1E:
	word32 v12_59 = Mem43[dwArg04 & 0xFFFFF000<32>:word32] + 0xFFFFFFFF<32>
	Mem60[dwArg04 & 0xFFFFF000<32>:word32] = v12_59
	branch v12_59 != 0<32> l00723AA7
l00723A27:
	word32 ecx_63 = Mem60[(dwArg04 & 0xFFFFF000<32>) + 8<32>:word32]
	word32 edx_64 = Mem60[(dwArg04 & 0xFFFFF000<32>) + 0xC<32>:word32]
	Mem65[ecx_63 + 0xC<32>:word32] = edx_64
	Mem66[edx_64 + 8<32>:word32] = ecx_63
	word32 ecx_67 = Mem66[(dwArg04 & 0xFFFFF000<32>) + 0x10<32>:word32]
	edx = ecx_67 * 8<32> - ecx_67
	Mem72[(dwArg04 & 0xFFFFF000<32>) + 8<32>:word32] = Mem66[esi_20 + 0x10<32> + edx * 4<32>:word32]
	word32 esi_71 = esi_20 + edx * 4<32>
	Mem75[esi_71 + 8<32>:word32] = Mem72[esi_71 + 8<32>:word32] + 1<32>
	ecx_164 = Mem75[esi_71 + 8<32>:word32]
	Mem78[esi_71 + 0x10<32>:word32] = dwArg04 & 0xFFFFF000<32>
	branch ecx_164 != Mem75[esi_71 + 0xC<32>:word32] l00723AAA
l00723AAA:
	branch ecx_164 != 1<32> l00723ACD
l00723ACD:
	eax = Mem78[esi_71 + 0x14<32>:word32]
	branch eax == 0<32> l00723AA7
l00723AD4:
	branch ecx_164 <=u Mem78[eax + 8<32>:word32] l00723AA7
l00723AD9:
	word32 edx_88 = Mem78[esi_71 + 0x18<32>:word32]
	branch edx_88 == 0<32> l00723AE5
l00723AE5:
	Mem92[0x00A6DBCC<p32>:word32] = eax
l00723AE0:
	Mem93[edx_88 + 0x14<32>:word32] = eax
l00723AEA:
	edx = Mem95[esi_71 + 0x14<32>:word32]
	Mem98[edx + 0x18<32>:word32] = Mem95[esi_71 + 0x18<32>:word32]
	branch Mem98[esi_71 + 0x14<32>:word32] == 0<32> l00723B15
l00723AF9:
l00723B00:
	word32 eax_105 = Mem104[esi_71 + 0x14<32>:word32]
	branch ecx_164 <=u Mem104[eax_105 + 8<32>:word32] l00723B15
l00723B08:
	Mem109[esi_71 + 0x18<32>:word32] = eax_105
	edx = Mem109[eax_105 + 0x14<32>:word32]
	Mem113[esi_71 + 0x14<32>:word32] = edx
	branch edx != 0<32> l00723B00
l00723B15:
	Mem118[Mem116[esi_71 + 0x18<32>:word32] + 0x14<32>:word32] = esi_71
	eax = Mem118[esi_71 + 0x14<32>:word32]
	branch eax == 0<32> l00723AA7
l00723B22:
	Mem127[eax + 0x18<32>:word32] = esi_71
	ecxOut = ecx_164
	edxOut = edx
	return eax
l00723AAE:
	word32 eax_130 = Mem78[0x00A6DBCC<p32>:word32]
	Mem133[esi_71 + 0x14<32>:word32] = eax_130
	Mem134[esi_71 + 0x18<32>:word32] = 0<32>
	branch eax_130 == 0<32> l00723AC4
l00723AC1:
	Mem136[eax_130 + 0x18<32>:word32] = esi_71
l00723AC4:
	Mem142[0x00A6DBCC<p32>:word32] = esi_71
	ecxOut = ecx_164
	edxOut = edx
	return eax_130
l00723A5C:
	word32 eax_145 = Mem78[esi_71 + 0x18<32>:word32]
	branch eax_145 != 0<32> l00723A6E
l00723A6E:
	Mem150[eax_145 + 0x14<32>:word32] = Mem78[esi_71 + 0x14<32>:word32]
l00723A63:
	edx = Mem78[esi_71 + 0x14<32>:word32]
	Mem152[0x00A6DBCC<p32>:word32] = edx
l00723A74:
	word32 eax_155 = Mem154[esi_71 + 0x14<32>:word32]
	branch eax_155 == 0<32> l00723A81
l00723A7B:
	edx = Mem154[esi_71 + 0x18<32>:word32]
	Mem160[eax_155 + 0x18<32>:word32] = edx
l00723A81:
	eax = Mem161[0x00A6DBC8<p32>:word32]
	ecx_164 = Mem161[esi_71:word32]
	Mem169[esi_71 + 0x14<32>:word32] = eax
	Mem170[0x00A6DBC8<p32>:word32] = esi_71
	free(ecx_164)
	Mem175[0x00A6DBD0<p32>:word32] = Mem170[0x00A6DBD0<p32>:word32] - 1<32>
	Mem177[esi_71:word32] = 0<32>
l00723AA7:
l00723AA9:
	ecxOut = ecx_164
	edxOut = edx
	return eax
fn007239C0_exit:


word32 fn00723B60(word32 dwArg04, word32 dwArg08, ptr32 & ecxOut, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006EC4F0
//      fn006FEF90
//      fn00727420
//      fn0073B6B0
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax ecx edx
// Trashed: SCZO eax ecx edx Top
// Preserved: ebx edi esi esp
fn00723B60_entry:
l00723B60:
	branch dwArg04 != 0<32> l00723B78
l00723B78:
	word32 eax_118
	word32 ecx_13 = Mem6[(dwArg04 & 0xFFFFF000<32>) + 0x10<32>:word32]
	branch ecx_13 >=u Mem6[0x00A6DBC4<p32>:word32] l00723BFB
l00723B8A:
	ecx_13 = Mem6[Mem6[0x00A6DBC0<p32>:word32] + (ecx_13 * 8<32> - ecx_13) * 4<32>:word32]
	edx = dwArg04 - ecx_13
	branch edx >=u 0x40000<32> l00723BFB
l00723BA8:
	branch ecx_13 == 0<32> l00723BFB
l00723BFB:
	branch dwArg08 == 0<32> l00723C10
l00723C10:
	eax_118 = realloc(dwArg04, 1<32>)
	branch eax_118 != 0<32> l00723BD0
l00723C20:
	ecxOut = ecx_13
	edxOut = edx
	return dwArg04
l00723C03:
	word32 eax_50 = realloc(dwArg04, dwArg08)
	ecxOut = ecx_13
	edxOut = edx
	return eax_50
l00723BAC:
	word32 edi_60 = Mem57[(dwArg04 & 0xFFFFF000<32>) + 0x14<32>:word32] * 8<32> + 8<32>
	branch dwArg08 >u edi_60 l00723BD4
l00723BBF:
	ecx_13 = edi_60 * 3<32>
	edx = dwArg08 * 4<32>
	branch dwArg08 * 4<32> <=u edi_60 * 3<32> l00723BD2
l00723BD2:
	edi_60 = dwArg08
l00723BD4:
	word32 ecx_177
	word32 edx_101
	word32 eax_76 = fn00723860(dwArg08, out ecx_177, out edx_101)
	branch eax_76 == 0<32> l00723BF5
l00723BE4:
	memcpy(eax_76, dwArg04, edi_60)
	fn007239C0(dwArg04, out ecx_177, out edx_101)
l00723BF5:
	ecxOut = ecx_177
	edxOut = edx_101
	return eax_76
l00723BCD:
	eax_118 = dwArg04
l00723BD0:
	ecxOut = ecx_13
	edxOut = edx
	return eax_118
l00723B69:
	word32 ecx_129
	word32 edx_130
	word32 eax_128 = fn00723860(dwArg08, out ecx_129, out edx_130)
	ecxOut = ecx_129
	edxOut = edx_130
	return eax_128
fn00723B60_exit:


word32 fn00724FB0(word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00716A00
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31] Stack +0010:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx Top
// Preserved: edi esi esp
fn00724FB0_entry:
l00724FB0:
	word32 eax_24
	call vsnprintf (retsize: 4;)
		uses: eax:dwArg10,ecx:dwArg0C,Stack +0004:dwArg04,Stack +0008:dwArg08,Stack +000C:dwArg0C,Stack +0010:dwArg10,Stack +0020:dwArg04,Stack +0024:dwArg08,Stack +0028:dwArg0C,Stack +002C:dwArg10
		defs: eax:eax_24
	Mem30[dwArg04 - 1<32> + dwArg08:byte] = 0<8>
	return eax_24
fn00724FB0_exit:


word32 fn00724FE0(word32 dwArg04, word32 dwArg08, word32 dwArg0C)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E5590
//      fn006E5710
//      fn006E5920
//      fn006E5C60
//      fn006E7660
//      fn006E8060
//      fn006FF4A0
//      fn00723540
//      fn007272E0
//      fn00727910
//      fn0072F830
//      fn0073BBE0
//      fn00747960
//      fn00748310
//      fn00748E50
//      fn0074F280
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut: ecx
// Trashed: SCZO eax ecx Top
// Preserved: edi esi esp
fn00724FE0_entry:
l00724FE0:
	word32 ecx_24
	call vsnprintf (retsize: 4;)
		uses: eax:fp + 0x10<32>,ecx:dwArg0C,Stack +0004:dwArg04,Stack +0008:dwArg08,Stack +000C:dwArg0C,Stack +0010:fp + 0x10<32>,Stack +0020:dwArg04,Stack +0024:dwArg08,Stack +0028:dwArg0C
		defs: ecx:ecx_24
	Mem30[dwArg04 - 1<32> + dwArg08:byte] = 0<8>
	return ecx_24
fn00724FE0_exit:


word32 fn00725010(word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00708DC0
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn00725010_entry:
l00725010:
	word32 edx_331
	word32 ecx_330
	word32 eax_13 = fn006FEF30(0xA249B8<32>, out ecx_330, out edx_331)
	branch eax_13 == 0<32> l00725146
l00725146:
	return 0<32>
l0072502B:
	word32 edi_112
	Mem31[eax_13 + 0x24<32>:word32] = 0<32>
	Mem33[dwArg04:word32] = Mem31[dwArg04:word32] + 1<32>
	Mem38[eax_13 + 8<32>:word32] = dwArg04
	Mem40[dwArg08:word32] = Mem38[dwArg08:word32] + 1<32>
	Mem41[eax_13 + 0xC<32>:word32] = dwArg08
	word32 ecx_42 = Mem41[dwArg04 + 0x34<32>:word32]
	Mem43[eax_13 + 0x1C<32>:word32] = ecx_42
	Mem45[ecx_42:word32] = Mem43[ecx_42:word32] + 1<32>
	Mem50[eax_13 + 0x10<32>:word32] = 0<32>
	Mem51[eax_13 + 0x14<32>:word32] = 0<32>
	word32 edi_52 = Mem51[dwArg04 + 0x1C<32>:word32]
	word32 edx_333
	word32 ecx_332
	branch fn006DFE20(edi_52, out ecx_332, out edx_333) < 1<32> l007250A8
l00725064:
	word32 eax_69 = fn006DFE60(edi_52, 0<32>)
	edi_112 = eax_69
	word32 eax_75 = Mem67[eax_69 + 4<32>:word32]
	branch eax_75 == 0xA1B450<32> l007250AD
l0072507A:
	word32 ecx_334
	word32 edx_335
	branch fn006D5670(eax_75, 0xA1B450<32>, out ecx_334, out edx_335) != 0<32> l007250AD
l0072508C:
	word32 eax_94 = Mem82[eax_69 + 4<32>:word32]
	branch eax_94 == 0xA23B20<32> l007250AD
l00725096:
	word32 ecx_336
	word32 edx_337
	branch fn006D5670(eax_94, 0xA23B20<32>, out ecx_336, out edx_337) != 0<32> l007250AD
l007250A8:
	edi_112 = 0xA163B8<32>
l007250AD:
	Mem117[edi_112:word32] = Mem114[edi_112:word32] + 1<32>
	word32 eax_118 = Mem117[0x00A6DBD4<p32>:word32]
	Mem124[eax_13 + 0x18<32>:word32] = edi_112
	Mem125[eax_13 + 0x20<32>:word32] = 0<32>
	Mem126[eax_13 + 0x28<32>:word32] = 0<32>
	branch eax_118 != 0<32> l007250F0
l007250C2:
	word32 ecx_340
	word32 edx_341
	eax_118 = fn006F1A70(out ecx_340, out edx_341)
	Mem144[0x00A6DBD4<p32>:word32] = eax_118
	branch eax_118 != 0<32> l007250F0
l007250F0:
	word32 edx_339
	word32 ecx_338
	word32 eax_158 = fn006FBCC0(dwArg08, eax_118, out ecx_338, out edx_339)
	branch eax_158 == 0<32> l00725104
l007250FE:
	Mem167[eax_158:word32] = Mem152[eax_158:word32] + 1<32>
	Mem169[eax_13 + 0x28<32>:word32] = eax_158
l00725104:
	branch Mem171[eax_13 - 8<32>:word32] == 0xFFFFFFFE<32> l0072511A
l0072510D:
	fn006E86F0(0x8D0E04<32>)
l0072511A:
	Mem186[eax_13 - 8<32>:word32] = 0xFFFFFFFD<32>
	Mem188[eax_13 - 0x10<32>:word32] = Mem186[0x00A1D558<p32>:word32]
	word32 eax_190 = Mem188[Mem188[0x00A1D558<p32>:word32] + 4<32>:word32]
	Mem191[eax_13 - 0xC<32>:word32] = eax_190
	Mem192[eax_190:word32] = eax_13 - 0x10<32>
	Mem194[Mem192[0x00A1D558<p32>:word32] + 4<32>:word32] = eax_13 - 0x10<32>
	return eax_13
l007250D8:
	word32 v18_206 = Mem144[eax_13:word32] + 0xFFFFFFFF<32>
	Mem207[eax_13:word32] = v18_206
	branch v18_206 != 0<32> l007250E9
l007250DD:
	word32 eax_210 = Mem207[eax_13 + 4<32>:word32]
	call Mem207[eax_210 + 0x18<32>:word32] (retsize: 4;)
		uses: eax:eax_210,Stack +0004:eax_13,Stack +001C:dwArg04,Stack +0020:dwArg08
l007250E9:
	return 0<32>
fn00725010_exit:


word32 fn00725150(word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00708DC0
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx edx Top
// Preserved: edi esi esp
fn00725150_entry:
l00725150:
	branch Mem6[dwArg04 + 4<32>:word32] == 0xA249B8<32> l00725172
l00725172:
	word32 esi_13 = dwArg08
	branch dwArg08 != 0xA163B8<32> l00725183
l00725183:
	branch dwArg08 == 0<32> l007251CC
l00725187:
	word32 eax_19 = Mem12[dwArg08 + 4<32>:word32]
	branch eax_19 == 0xA16588<32> l007251A3
l00725191:
	word32 ecx_187
	word32 edx_188
	branch fn006D5670(eax_19, 0xA16588<32>, out ecx_187, out edx_188) == 0<32> l007251CC
l007251CC:
	word32 ecx_185
	word32 edx_186
	fn006E0F80(Mem37[0x00A18720<p32>:word32], 0x8DA264<32>, out ecx_185, out edx_186)
	return 0xFFFFFFFF<32>
l007251A3:
	Mem64[dwArg08:word32] = Mem62[dwArg08:word32] + 1<32>
l0072517F:
	esi_13 = 0<32>
l007251A6:
	word32 eax_72 = Mem71[dwArg04 + 0x10<32>:word32]
	branch eax_72 == 0<32> l007251C4
l007251AD:
	Mem77[eax_72:word32] = Mem71[eax_72:word32] + 0xFFFFFFFF<32>
	word32 eax_78 = Mem77[dwArg04 + 0x10<32>:word32]
	branch Mem77[eax_78:word32] != 0<32> l007251C4
l007251B8:
	word32 ecx_81 = Mem77[eax_78 + 4<32>:word32]
	word32 edx_93
	call Mem77[ecx_81 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_81,edx:edx_93,Stack +0004:eax_78,Stack +0014:dwArg04,Stack +0018:dwArg08
		defs: edx:edx_93
l007251C4:
	Mem100[dwArg04 + 0x10<32>:word32] = esi_13
	return 0<32>
l0072515E:
	word32 edx_184
	fn006E1DC0(out edx_184)
	return 0xFFFFFFFF<32>
fn00725150_exit:


word32 fn007251F0(word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00708DC0
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx edx Top
// Preserved: edi esi esp
fn007251F0_entry:
l007251F0:
	branch Mem6[dwArg04 + 4<32>:word32] == 0xA249B8<32> l00725215
l00725215:
	word32 esi_13 = dwArg08
	branch dwArg08 != 0xA163B8<32> l00725226
l00725226:
	word32 eax_16 = Mem12[dwArg08 + 4<32>:word32]
	branch eax_16 == 0xA16588<32> l00725263
l00725230:
	word32 ecx_178
	word32 edx_179
	branch fn006D5670(eax_16, 0xA16588<32>, out ecx_178, out edx_179) != 0<32> l00725263
l00725263:
	Mem37[dwArg08:word32] = Mem35[dwArg08:word32] + 1<32>
l00725242:
	word32 ecx_180
	word32 edx_181
	fn006E15D0(Mem22[0x00A18720<p32>:word32], 0x8DA27C<32>, out ecx_180, out edx_181)
	return 0xFFFFFFFF<32>
l00725222:
	esi_13 = 0<32>
l00725266:
	word32 eax_68 = Mem67[dwArg04 + 0x14<32>:word32]
	branch eax_68 == 0<32> l00725284
l0072526D:
	Mem73[eax_68:word32] = Mem67[eax_68:word32] + 0xFFFFFFFF<32>
	word32 eax_74 = Mem73[dwArg04 + 0x14<32>:word32]
	branch Mem73[eax_74:word32] != 0<32> l00725284
l00725278:
	word32 ecx_77 = Mem73[eax_74 + 4<32>:word32]
	word32 edx_89
	call Mem73[ecx_77 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_77,edx:edx_89,Stack +0004:eax_74,Stack +0014:dwArg04,Stack +0018:dwArg08
		defs: edx:edx_89
l00725284:
	Mem96[dwArg04 + 0x14<32>:word32] = esi_13
	return 0<32>
l007251FE:
	word32 edx_177
	fn006E1DC0(out edx_177)
	return 0xFFFFFFFF<32>
fn007251F0_exit:


word32 fn00725DA0(word32 dwArg04, ptr32 & ecxOut, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00704B00
// MayUse:  Stack +0004:[0..31]
// LiveOut: eax ecx edx
// Trashed: SCZO eax ecx edi edx Top
// Preserved: esi esp
fn00725DA0_entry:
l00725DA0:
	word32 edx_135
	branch fn00704700(dwArg04, out edx_135) != 0<32> l00725DC5
l00725DC5:
	word32 ecx_27
	word32 edx_28
	word32 eax_26 = fn006FEF30(0xA250F8<32>, out ecx_27, out edx_28)
	branch eax_26 != 0<32> l00725DDC
l00725DDC:
	Mem36[eax_26 + 8<32>:word32] = 0<32>
	Mem38[dwArg04:word32] = Mem36[dwArg04:word32] + 1<32>
	Mem39[eax_26 + 0xC<32>:word32] = dwArg04
	branch Mem39[eax_26 - 8<32>:word32] == 0xFFFFFFFE<32> l00725DFF
l00725DF2:
	fn006E86F0(0x8D0E04<32>)
l00725DFF:
	Mem53[eax_26 - 8<32>:word32] = 0xFFFFFFFD<32>
	Mem55[eax_26 - 0x10<32>:word32] = Mem53[0x00A1D558<p32>:word32]
	word32 ecx_56 = Mem55[0x00A1D558<p32>:word32]
	word32 eax_57 = Mem55[ecx_56 + 4<32>:word32]
	Mem58[eax_26 - 0xC<32>:word32] = eax_57
	Mem59[eax_57:word32] = eax_26 - 0x10<32>
	word32 edx_60 = Mem59[0x00A1D558<p32>:word32]
	Mem66[edx_60 + 4<32>:word32] = eax_26 - 0x10<32>
	ecxOut = ecx_56
	edxOut = edx_60
	return eax_26
l00725DD9:
	ecxOut = ecx_27
	edxOut = edx_28
	return eax_26
l00725DB2:
	word32 edx_80
	ecxOut = fn006E1DC0(out edx_80)
	edxOut = edx_80
	return 0<32>
fn00725DA0_exit:


word32 fn00726150(word32 dwArg04, word32 dwArg08, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00728FE0
//      fn00729510
//      fn00729810
//      fn00729D20
//      fn0072A740
//      fn0072A940
//      fn0072AC20
//      fn0072B830
//      fn0072BF10
//      fn0072C160
//      fn0072C510
//      fn0072DD60
//      fn00748140
//      fn00748190
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn00726150_entry:
l00726150:
	word32 esi_344
	word32 ecx_343
	word32 edx_18
	word32 eax_17 = fn006ECC50(dwArg08, out ecx_343, out edx_18, out esi_344)
	branch dwArg04 == 0<32> l00726255
l0072616E:
	word32 eax_28 = Mem15[dwArg04 + 4<32>:word32]
	branch eax_28 == 0xA1B450<32> l0072618E
l00726178:
	word32 ecx_345
	branch fn006D5670(eax_28, 0xA1B450<32>, out ecx_345, out edx_18) == 0<32> l00726255
l0072618E:
	branch eax_17 == 0<32> l00726255
l00726196:
	branch Mem50[eax_17:byte] != 0x5F<8> l00726255
l0072619F:
	branch Mem50[eax_17 + 1<32>:byte] != 0x5F<8> l00726255
l00726255:
	Mem59[dwArg08:word32] = Mem57[dwArg08:word32] + 1<32>
	edxOut = edx_18
	return dwArg08
l007261A9:
	word32 ecx_346
	word32 edx_347
	word32 esi_348
	word32 eax_79 = fn006ECC50(dwArg04, out ecx_346, out edx_347, out esi_348)
	word32 ebp_109 = eax_79
	word32 eax_85 = eax_17
l007261C0:
	eax_85 = eax_350 + 1<32>
	eax_350 = eax_85
	branch Mem76[eax_350:byte] != 0<8> l007261C0
l007261C9:
	word32 eax_98 = eax_85 - (eax_17 + 1<32>)
	branch Mem76[eax_98 - 1<32> + eax_17:byte] != 0x5F<8> l007261D9
l007261D2:
	branch Mem76[eax_98 - 2<32> + eax_17:byte] == 0x5F<8> l007261EF
l007261D9:
	branch Mem76[eax_79:byte] != 0x5F<8> l007261E9
l007261DF:
l007261E0:
	ebp_109 = ebp_109 + 1<32>
	branch Mem76[ebp_109:byte] == 0x5F<8> l007261E0
l007261E9:
	branch Mem76[ebp_109:byte] != 0<8> l007261F9
l007261F9:
	word32 ecx_118 = ebp_109
	word32 esi_119 = ebp_109 + 1<32>
l00726200:
	ecx_118 = ecx_351 + 1<32>
	ecx_351 = ecx_118
	branch Mem76[ecx_351:byte] != 0<8> l00726200
l00726209:
	word32 ecx_133 = ecx_118 - esi_119
	word32 edx_162
	word32 ecx_349
	word32 eax_161 = fn006EC9B0(0<32>, ecx_133 + 1<32> + eax_98, out ecx_349, out edx_162)
	branch eax_161 != 0<32> l00726227
l00726227:
	Mem178[eax_161 + 0x14<32>:byte] = 0x5F<8>
	strncpy(eax_161 + 0x15<32>, ebp_109, ecx_133)
	word32 eax_182 = eax_17
	word32 edx_183 = eax_161 + 0x15<32> + ecx_133 - eax_17
l00726242:
	byte cl_187 = Mem186[eax_182:byte]
	Mem189[edx_183 + eax_182:byte] = cl_187
	eax_182 = eax_182 + 1<32>
	branch cl_187 != 0<8> l00726242
l0072624E:
	edxOut = edx_183
	return eax_161
l00726222:
	edxOut = edx_162
	return eax_161
l007261EF:
	Mem216[dwArg08:word32] = Mem76[dwArg08:word32] + 1<32>
	edxOut = eax_17 + 1<32>
	return dwArg08
fn00726150_exit:


word32 fn00726260(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00728E40
// MayUse:  Stack +0004:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn00726260_entry:
l00726260:
	word32 ecx_347
	word32 edx_348
	word32 eax_12 = fn006FDCC0(out ecx_347, out edx_348)
	branch eax_12 != 0<32> l00726270
l00726270:
	word32 esp_115 = fp - 0x14<32>
	word32 ecx_349
	word32 edx_350
	branch fn006F2750(dwArg04, out ecx_349, out edx_350) <= 0<32> l007262FC
l0072628A:
	word32 ebx_218 = 0<32>
l00726290:
	word32 esp_45 = esp_115 - 4<i32>
	Mem47[esp_45:word32] = ebx_218
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_361
	word32 edx_362
	word32 eax_55 = fn007050A0(stackArg4, out ecx_361, out edx_362)
	esp_115 = esp_45 + 4<32>
	branch eax_55 == 0<32> l00726326
l007262A3:
	word32 eax_66 = Mem47[Mem47[Mem47[esp_45 + 0x1C<32>:word32] + 0xC<32>:word32] + ebx_218 * 4<32>:word32]
	Mem69[esp_45:word32] = Mem47[eax_66 + 4<32>:word32]
	Mem71[esp_45 - 4<i32>:word32] = eax_66
	Mem73[esp_45 - 8<i32>:word32] = 2<32>
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 edx_353
	word32 esi_354
	word32 ecx_352
	word32 eax_76 = fn006DFF80(stackArg4, out ecx_352, out edx_353, out esi_354)
	esp_115 = esp_45 + 4<32>
	branch eax_76 == 0<32> l00726315
l007262C2:
	Mem86[esp_45:word32] = eax_55
	Mem88[esp_45 - 4<32>:word32] = eax_76
	Mem90[esp_45 - 8<i32>:word32] = eax_12
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 stackArg12 = <invalid>
	esp_115 = esp_45 + 4<32>
	word32 ecx_92
	word32 edx_357
	word32 edi_359
	word32 ebx_358
	branch fn006FBD90(stackArg4, dwArg04, stackArg12, out ecx_92, out edx_357, out ebx_358, out edi_359) < 0<32> l00726304
l00726304:
	word32 v17_101 = Mem90[eax_76:word32] + 0xFFFFFFFF<32>
	Mem102[eax_76:word32] = v17_101
	branch v17_101 != 0<32> l00726315
l00726309:
	word32 edx_105 = Mem102[eax_76 + 4<32>:word32]
	word32 eax_106 = Mem102[edx_105 + 0x18<32>:word32]
	Mem108[esp_45:word32] = eax_76
	word32 esp_109
	call eax_106 (retsize: 4;)
		uses: ecx:ecx_92,edx:edx_105,Stack +0008:dwArg04
		defs: esp:esp_109
	esp_115 = esp_109 + 4<32>
l00726315:
	word32 v19_119 = Mem118[eax_55:word32] + 0xFFFFFFFF<32>
	Mem120[eax_55:word32] = v19_119
	branch v19_119 != 0<32> l00726326
l0072631A:
	word32 ecx_123 = Mem120[eax_55 + 4<32>:word32]
	word32 edx_124 = Mem120[ecx_123 + 0x18<32>:word32]
	Mem127[esp_115 - 4<i32>:word32] = eax_55
	word32 esp_132
	call edx_124 (retsize: 4;)
		uses: ecx:ecx_123,Stack +0008:dwArg04
		defs: esp:esp_132
	esp_115 = esp_132 + 4<32>
l00726326:
	word32 v16_142 = Mem141[eax_12:word32] + 0xFFFFFFFF<32>
	Mem143[eax_12:word32] = v16_142
	branch v16_142 != 0<32> l00726338
l0072632C:
	word32 eax_146 = Mem143[eax_12 + 4<32>:word32]
	word32 ecx_147 = Mem143[eax_146 + 0x18<32>:word32]
	Mem150[esp_115 - 4<i32>:word32] = eax_12
	call ecx_147 (retsize: 4;)
		uses: eax:eax_146,ecx:ecx_147,Stack +0008:dwArg04
l00726338:
	return 0<32>
l007262D1:
	word32 v15_178 = Mem90[eax_76:word32] + 0xFFFFFFFF<32>
	Mem179[eax_76:word32] = v15_178
	branch v15_178 != 0<32> l007262E2
l007262D6:
	word32 edx_182 = Mem179[eax_76 + 4<32>:word32]
	word32 eax_183 = Mem179[edx_182 + 0x18<32>:word32]
	Mem185[esp_45:word32] = eax_76
	word32 esp_186
	call eax_183 (retsize: 4;)
		uses: ecx:ecx_92,edx:edx_182,Stack +0008:dwArg04
		defs: esp:esp_186
	esp_115 = esp_186 + 4<32>
l007262E2:
	word32 v18_196 = Mem195[eax_55:word32] + 0xFFFFFFFF<32>
	Mem197[eax_55:word32] = v18_196
	branch v18_196 != 0<32> l007262F3
l007262E7:
	word32 ecx_200 = Mem197[eax_55 + 4<32>:word32]
	word32 edx_201 = Mem197[ecx_200 + 0x18<32>:word32]
	Mem204[esp_115 - 4<i32>:word32] = eax_55
	word32 esp_209
	call edx_201 (retsize: 4;)
		uses: ecx:ecx_200,Stack +0008:dwArg04
		defs: esp:esp_209
	esp_115 = esp_209 + 4<32>
l007262F3:
	ebx_218 = ebx_218 + 1<32>
	branch ebx_218 < Mem220[esp_115 + 0x10<32>:word32] l00726290
l007262FC:
	return eax_12
l0072626D:
	return eax_12
fn00726260_exit:


word32 fn00726340(word32 dwArg04, word32 dwArg10)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00728E40
// MayUse:  Stack +0004:[0..31] Stack +0010:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ebp ebx ecx edx Top
// Preserved: edi esi esp
fn00726340_entry:
l00726340:
	word32 ebp_12 = dwArg10
	word32 ecx_443
	word32 edx_444
	word32 eax_15 = fn006FDCC0(out ecx_443, out edx_444)
	branch eax_15 != 0<32> l00726362
l00726362:
	word32 esp_149 = fp - 0x18<32>
	word32 edx_445
	branch fn006FC050(dwArg04, fp - 4<32>, fp - 8<32>, fp + 0x10<32>, out edx_445) == 0<32> l0072642D
l00726388:
l00726390:
	word32 eax_56 = Mem54[Mem54[esp_149 + 0x28<32>:word32] + 8<32>:word32]
	branch (eax_56 >> 0xB<32> & 7<32>) == Mem54[esp_149 + 0x20<32>:word32] l007263AD
l007263A5:
	branch (Mem54[esp_149 + 0x24<32>:word32] & eax_56) == 0<32> l00726409
l007263AD:
	word32 esp_67 = esp_149 - 4<i32>
	Mem70[esp_67:word32] = ebp_12
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_447
	word32 edx_448
	word32 eax_80 = fn007050A0(stackArg4, out ecx_447, out edx_448)
	branch eax_80 == 0<32> l00726437
l00726437:
	word32 v18_90 = Mem70[eax_15:word32] + 0xFFFFFFFF<32>
	Mem91[eax_15:word32] = v18_90
	branch v18_90 != 0<32> l00726489
l0072643C:
	word32 edx_94 = Mem91[eax_15 + 4<32>:word32]
	word32 eax_95 = Mem91[edx_94 + 0x18<32>:word32]
	Mem97[esp_67:word32] = eax_15
	call eax_95 (retsize: 4;)
		uses: edx:edx_94,Stack +0008:dwArg04,Stack +0014:dwArg10
	return 0<32>
l007263BC:
	word32 eax_116 = Mem70[esp_67 + 0x14<32>:word32]
	Mem119[esp_67:word32] = Mem70[eax_116 + 4<32>:word32]
	Mem121[esp_67 - 4<i32>:word32] = eax_116
	Mem123[esp_67 - 8<i32>:word32] = 2<32>
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	ebp_12 = ebp_12 + 1<32>
	word32 ecx_451
	word32 esi_453
	word32 edx_452
	word32 eax_127 = fn006DFF80(stackArg4, out ecx_451, out edx_452, out esi_453)
	branch eax_127 == 0<32> l00726452
l007263D8:
	Mem138[esp_67:word32] = eax_80
	Mem140[esp_67 - 4<32>:word32] = eax_127
	Mem142[esp_67 - 8<i32>:word32] = eax_15
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 stackArg12 = <invalid>
	esp_149 = esp_67 + 4<32>
	word32 edi_459
	word32 edx_457
	word32 ebx_458
	word32 ecx_456
	branch fn006FBD90(stackArg4, dwArg04, stackArg12, out ecx_456, out edx_457, out ebx_458, out edi_459) < 0<32> l00726452
l00726452:
	word32 v17_155 = Mem154[eax_80:word32] + 0xFFFFFFFF<32>
	Mem156[eax_80:word32] = v17_155
	word32 esp_161 = esp_149
	branch v17_155 != 0<32> l00726463
l00726457:
	word32 ecx_159 = Mem156[eax_80 + 4<32>:word32]
	word32 edx_160 = Mem156[ecx_159 + 0x18<32>:word32]
	Mem163[esp_149 - 4<i32>:word32] = eax_80
	word32 esp_168
	call edx_160 (retsize: 4;)
		uses: ecx:ecx_159,Stack +0008:dwArg04,Stack +0014:dwArg10
		defs: esp:esp_168
	esp_161 = esp_168 + 4<32>
l00726463:
	word32 v19_178 = Mem177[eax_15:word32] + 0xFFFFFFFF<32>
	Mem179[eax_15:word32] = v19_178
	branch v19_178 != 0<32> l00726474
l00726468:
	word32 eax_182 = Mem179[eax_15 + 4<32>:word32]
	word32 ecx_183 = Mem179[eax_182 + 0x18<32>:word32]
	Mem186[esp_161 - 4<i32>:word32] = eax_15
	word32 esp_191
	call ecx_183 (retsize: 4;)
		uses: eax:eax_182,Stack +0008:dwArg04,Stack +0014:dwArg10
		defs: esp:esp_191
	esp_161 = esp_191 + 4<32>
l00726474:
	branch eax_127 == 0<32> l00726489
l00726478:
	word32 v20_204 = Mem203[eax_127:word32] + 0xFFFFFFFF<32>
	Mem205[eax_127:word32] = v20_204
	branch v20_204 != 0<32> l00726489
l0072647D:
	word32 edx_208 = Mem205[eax_127 + 4<32>:word32]
	word32 eax_209 = Mem205[edx_208 + 0x18<32>:word32]
	Mem212[esp_161 - 4<i32>:word32] = eax_127
	call eax_209 (retsize: 4;)
		uses: edx:edx_208,Stack +0008:dwArg04,Stack +0014:dwArg10
l00726489:
	return 0<32>
l007263E7:
	word32 v15_238 = Mem142[eax_80:word32] + 0xFFFFFFFF<32>
	Mem239[eax_80:word32] = v15_238
	branch v15_238 != 0<32> l007263F8
l007263EC:
	word32 eax_242 = Mem239[eax_80 + 4<32>:word32]
	word32 ecx_243 = Mem239[eax_242 + 0x18<32>:word32]
	Mem245[esp_67:word32] = eax_80
	word32 esp_246
	call ecx_243 (retsize: 4;)
		uses: eax:eax_242,Stack +0008:dwArg04,Stack +0014:dwArg10
		defs: esp:esp_246
	esp_149 = esp_246 + 4<32>
l007263F8:
	word32 v16_256 = Mem255[eax_127:word32] + 0xFFFFFFFF<32>
	Mem257[eax_127:word32] = v16_256
	branch v16_256 != 0<32> l00726409
l007263FD:
	word32 edx_260 = Mem257[eax_127 + 4<32>:word32]
	word32 eax_261 = Mem257[edx_260 + 0x18<32>:word32]
	Mem264[esp_149 - 4<i32>:word32] = eax_127
	word32 esp_269
	call eax_261 (retsize: 4;)
		uses: edx:edx_260,Stack +0008:dwArg04,Stack +0014:dwArg10
		defs: esp:esp_269
	esp_149 = esp_269 + 4<32>
l00726409:
	word32 esp_279 = esp_149 - 4<i32>
	Mem280[esp_279:word32] = esp_149 + 0x28<32>
	word32 ecx_281 = Mem280[esp_279 + 0x20<32>:word32]
	Mem284[esp_279 - 4<i32>:word32] = esp_279 + 0x14<32>
	Mem287[esp_279 - 8<i32>:word32] = esp_279 + 0x18<32>
	Mem289[esp_279 - 12<i32>:word32] = ecx_281
	esp_149 = esp_279 + 4<32>
	word32 edx_449
	branch fn006FC050(Mem289[esp_279 - 12<i32>:word32], Mem289[esp_279 - 8<i32>:word32], Mem289[esp_279 - 4<i32>:word32], Mem289[esp_279:word32], out edx_449) != 0<32> l00726390
l0072642D:
	return eax_15
l0072635C:
	return eax_15
fn00726340_exit:


word32 fn007264A0(word32 edi, word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00726930
// MayUse:  edi:[0..31] Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ebp ebx ecx edx esi Top
// Preserved: esp
fn007264A0_entry:
l007264A0:
	word32 edx_225
	word32 ecx_224
	word32 eax_22 = fn006DFD20(dwArg08, out ecx_224, out edx_225)
	word32 esi_26 = eax_22
	branch eax_22 == 0<32> l0072651B
l007264BF:
	word32 eax_35 = Mem30[edi + 8<32>:word32]
	branch dwArg08 <= 0<32> l007264FC
l007264CA:
	word32 edx_37 = eax_22 + 0xC<32>
	word32 ecx_38 = dwArg04 + 1<32>
	word32 esi_39 = dwArg08
l007264D2:
	word32 eax_48 = Mem41[Mem41[edi + 0xC<32>:word32] + ((CONVERT(Mem41[ecx_38 + 1<32>:byte], byte, word32) << 8<32>) + CONVERT(Mem41[ecx_38:byte], byte, word32)) * 4<32>:word32]
	Mem50[eax_48:word32] = Mem41[eax_48:word32] + 1<32>
	Mem52[edx_37:word32] = eax_48
	edx_37 = edx_37 + 4<32>
	ecx_38 = ecx_38 + 3<32>
	esi_39 = esi_39 - 1<32>
	branch esi_39 != 0<32> l007264D2
l007264F4:
	esi_26 = dwArg08
l007264FC:
	word32 edx_227
	word32 ecx_226
	branch fn006F2A10(edi, dwArg04, out ecx_226, out edx_227) == 0<32> l00726522
l00726522:
	word32 v16_85 = Mem68[esi_26:word32] + 0xFFFFFFFF<32>
	Mem86[esi_26:word32] = v16_85
	branch v16_85 != 0<32> l00726533
l00726527:
	word32 eax_89 = Mem86[esi_26 + 4<32>:word32]
	word32 ecx_90 = Mem86[eax_89 + 0x18<32>:word32]
	call ecx_90 (retsize: 4;)
		uses: eax:eax_89,ecx:ecx_90,Stack +0004:esi_64,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +001C:dwArg04,Stack +0020:dwArg08
l00726533:
	memset(dwArg04, 9<32>, dwArg08 * 3<32>)
	Mem118[dwArg08 * 3<32> + 1<32> + dwArg04:byte] = SLICE(eax_35, byte, 0)
	Mem119[dwArg08 * 3<32> + dwArg04:byte] = 0x64<8>
	Mem121[dwArg08 * 3<32> + 2<32> + dwArg04:byte] = SLICE(eax_35 >> 8<32>, byte, 0)
	return 1<32>
l0072650A:
	word32 v15_131 = Mem68[esi_26:word32] + 0xFFFFFFFF<32>
	Mem132[esi_26:word32] = v15_131
	branch v15_131 != 0<32> l0072651B
l0072650F:
	word32 ecx_135 = Mem132[esi_26 + 4<32>:word32]
	call Mem132[ecx_135 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_135,Stack +0004:esi_64,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +001C:dwArg04,Stack +0020:dwArg08
l0072651B:
	return 0<32>
fn007264A0_exit:


word32 fn00726570(word32 edi, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00726930
// MayUse:  edi:[0..31] Stack +0004:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ebp ebx ecx edx esi Top
// Preserved: esp
fn00726570_entry:
l00726570:
	word32 ecx_15 = Mem13[dwArg04 + 0xC<32>:word32]
	word32 eax_16 = Mem13[ecx_15 + ((CONVERT(Mem0[edi + 2<32>:byte], byte, word32) << 8<32>) + CONVERT(Mem0[edi + 1<32>:byte], byte, word32)) * 4<32>:word32]
	word32 esi_23 = CONVERT(Mem19[edi + 6<32>:byte], byte, word32)
	word32 ecx_24 = Mem19[ecx_15 + ((CONVERT(Mem0[edi + 5<32>:byte], byte, word32) << 8<32>) + CONVERT(Mem19[edi + 4<32>:byte], byte, word32)) * 4<32>:word32]
	branch esi_23 >u 0x42<32> l007266CB
l007265A9:
	word32 eax_111
	switch (CONVERT(Mem19[esi_23 + 0x726711<32>:byte], byte, word32)) { l007265B7 l007265C8 l00726640 l007265E3 l007265EC l007265F5 l007265FE l007265DA l007265D1 l007266CB l007266CB l007266CB l007266CB l007266CB l007266CB l007266CB l007266CB l007266CB l007266CB l007266CB l007266CB l007266CB l007266CB l007266CB l007266CB l007266CB l007266CB l007266CB l007266CB l007266CB l007266CB l007266CB l007266CB l007266CB l007266CB l007266CB l007266CB l007266CB l007266CB l007266CB l007266CB l007266CB l007266CB l00726607 l00726610 l00726619 l00726622 l0072662B }
l0072662B:
	eax_111 = fn007020D0(eax_16, ecx_24)
l00726622:
	eax_111 = fn00702130(eax_16, ecx_24)
l00726619:
	eax_111 = fn00702190(eax_16, ecx_24)
l00726610:
	eax_111 = fn00702250(eax_16, ecx_24)
l00726607:
	eax_111 = fn007021F0(eax_16, ecx_24)
l007266CB:
	word32 edx_498
	word32 ecx_497
	fn006E15D0(Mem19[0x00A18720<p32>:word32], 0x8DA5F0<32>, out ecx_497, out edx_498)
	return 0<32>
l007265D1:
	eax_111 = fn007024B0(eax_16, ecx_24)
l007265DA:
	eax_111 = fn00702450(eax_16, ecx_24)
l007265FE:
	word32 edx_500
	word32 ecx_499
	eax_111 = fn00704220(eax_16, ecx_24, out ecx_499, out edx_500)
l007265F5:
	eax_111 = fn007022B0(eax_16, ecx_24)
l007265EC:
	eax_111 = fn007023D0(eax_16, ecx_24)
l007265E3:
	eax_111 = fn00702510(eax_16, ecx_24)
l007265C8:
	eax_111 = fn00704560(eax_16, ecx_24)
l00726632:
l007265B7:
	eax_111 = fn00702570()
l00726635:
	branch eax_111 != 0<32> l00726645
l00726645:
	word32 edx_501
	word32 eax_209 = fn00704080(eax_111, out edx_501)
	branch eax_209 != 0xFFFFFFFF<32> l00726681
l00726681:
	branch eax_209 <= 0x14<32> l00726658
l00726686:
	word32 v19_219 = Mem201[eax_111:word32] + 0xFFFFFFFF<32>
	Mem220[eax_111:word32] = v19_219
	branch v19_219 != 0<32> l00726697
l0072668B:
	word32 eax_223 = Mem220[eax_111 + 4<32>:word32]
	call Mem220[eax_223 + 0x18<32>:word32] (retsize: 4;)
		uses: eax:eax_223,Stack +0004:eax_193,Stack +0008:dwArg04,Stack +0014:dwArg04
l00726697:
	return 0<32>
l00726653:
	word32 ecx_504
	word32 edx_505
	fn006E1160(out ecx_504, out edx_505)
l00726658:
	word32 ebx_259 = Mem257[dwArg04 + 8<32>:word32]
	byte bl_297 = SLICE(ebx_259, byte, 0)
	word32 edx_507
	word32 ecx_506
	branch fn006F2A10(dwArg04, dwArg04, out ecx_506, out edx_507) == 0<32> l0072669C
l0072669C:
	word32 v16_277 = Mem264[eax_111:word32] + 0xFFFFFFFF<32>
	Mem278[eax_111:word32] = v16_277
	branch v16_277 != 0<32> l007266AD
l007266A1:
	word32 ecx_281 = Mem278[eax_111 + 4<32>:word32]
	call Mem278[ecx_281 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_281,Stack +0004:eax_193,Stack +0008:dwArg04,Stack +0018:dwArg04
l007266AD:
	Mem294[edi:word32] = 0x9090909<32>
	Mem298[edi + 5<32>:byte] = bl_297
	Mem307[edi + 6<32>:byte] = SLICE(ebx_259 >> 8<32>, byte, 0)
	Mem308[edi + 4<32>:byte] = 0x64<8>
	return 1<32>
l0072666A:
	word32 v15_312 = Mem264[eax_111:word32] + 0xFFFFFFFF<32>
	Mem313[eax_111:word32] = v15_312
	branch v15_312 != 0<32> l0072667B
l0072666F:
	word32 edx_316 = Mem313[eax_111 + 4<32>:word32]
	call Mem313[edx_316 + 0x18<32>:word32] (retsize: 4;)
		uses: edx:edx_316,Stack +0004:eax_193,Stack +0008:dwArg04,Stack +0018:dwArg04
l0072667B:
	return 0<32>
l0072663B:
	word32 ecx_502
	word32 edx_503
	fn006E1160(out ecx_502, out edx_503)
l00726640:
	return 0<32>
fn00726570_exit:


word32 fn00726760(word32 ebx, word32 esi, selector es, selector ds, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00726930
// MayUse:  cs:[0..15] ds:[0..15] ebx:[0..31] es:[0..15] esi:[0..31] fs:[0..15] gs:[0..15] ss:[0..15] Stack +0004:[0..31]
// LiveOut: eax
// Trashed: SCZDOP eax ebp ebx ecx edi edx Top
// Preserved: esp
fn00726760_entry:
l00726760:
	word32 esp_38
	word32 eax_39
	word32 edx_15 = Mem13[dwArg04 + 0xC<32>:word32]
	word32 ecx_10 = CONVERT(Mem0[esi + 3<32>:byte], byte, word32)
	word32 edi_19 = Mem18[edx_15 + ((CONVERT(Mem0[esi + 2<32>:byte], byte, word32) << 8<32>) + CONVERT(Mem0[esi + 1<32>:byte], byte, word32)) * 4<32>:word32]
	branch ecx_10 == 0xB<32> l007267B7
l007267B7:
	word32 edx_302
	word32 ecx_301
	branch fn006DEA90(edi_19, out ecx_301, out edx_302) != 1<32> l007267D4
l007267C5:
	eax_39 = fn00702910(edi_19)
	esp_38 = fp - 0xC<32>
l00726784:
	branch ecx_10 == 0xD<32> l007267AF
l007267AF:
	word32 edi_304
	word32 edx_303
	eax_39 = fn006DDDB0(ecx_10 - 0xD<32>, edx_15, ebx, esi, edi_19, es, ds, edi_19, out edx_303, out edi_304)
	esp_38 = fp - 8<32>
l00726789:
	branch ecx_10 == 0xF<32> l007267A7
l007267A7:
	eax_39 = fn007029D0(edi_19)
	esp_38 = fp - 12<i32>
l007267CB:
	word32 esp_81 = esp_38 + 4<32>
	branch eax_39 != 0<32> l007267DE
l007267DE:
	Mem87[esp_81 - 4<i32>:word32] = ebx
	word32 ebx_89 = Mem87[dwArg04 + 8<32>:word32]
	Mem91[esp_81 - 8<i32>:word32] = eax_39
	Mem93[esp_81 - 12<i32>:word32] = dwArg04
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	byte bl_130 = SLICE(ebx_89, byte, 0)
	word32 ecx_310
	word32 edx_311
	branch fn006F2A10(stackArg4, dwArg04, out ecx_310, out edx_311) == 0<32> l00726807
l00726807:
	word32 v15_112 = Mem93[eax_39:word32] + 0xFFFFFFFF<32>
	Mem113[eax_39:word32] = v15_112
	branch v15_112 != 0<32> l00726818
l0072680C:
	word32 eax_116 = Mem113[eax_39 + 4<32>:word32]
	word32 ecx_117 = Mem113[eax_116 + 0x18<32>:word32]
	Mem119[esp_81 - 8<32>:word32] = eax_39
	call ecx_117 (retsize: 4;)
		uses: eax:eax_116,Stack +0008:dwArg04
l00726818:
	Mem132[esi + 2<32>:byte] = bl_130
	Mem140[esi:byte] = 9<8>
	Mem141[esi + 1<32>:byte] = 0x64<8>
	Mem143[esi + 3<32>:byte] = SLICE(ebx_89 >> 8<32>, byte, 0)
	return 1<32>
l007267F0:
	word32 v14_147 = Mem93[eax_39:word32] + 0xFFFFFFFF<32>
	Mem148[eax_39:word32] = v14_147
	branch v14_147 != 0<32> l00726801
l007267F5:
	word32 ecx_151 = Mem148[eax_39 + 4<32>:word32]
	word32 edx_152 = Mem148[ecx_151 + 0x18<32>:word32]
	Mem154[esp_81 - 8<32>:word32] = eax_39
	call edx_152 (retsize: 4;)
		uses: ecx:ecx_151,Stack +0008:dwArg04
l00726801:
	return 0<32>
l007267D4:
	word32 edx_308
	word32 ecx_307
	fn006E1160(out ecx_307, out edx_308)
	return 0<32>
l0072678E:
	word32 edx_306
	word32 ecx_305
	fn006E15D0(Mem18[0x00A18720<p32>:word32], 0x8DA620<32>, out ecx_305, out edx_306)
	return 0<32>
fn00726760_exit:


word32 fn00726840(word32 ebx, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00726930
// MayUse:  ebx:[0..31] Stack +0004:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ebp ecx edi edx esi Top
// Preserved: esp
fn00726840_entry:
l00726840:
	word32 ebp_10 = dwArg04
	word32 eax_20 = fn006DECD0(dwArg04 * 4<32>)
	word32 dwLoc04_163 = 0<32>
	branch eax_20 != 0<32> l00726872
l00726872:
	memset(eax_20, 0<32>, dwArg04 * 4<32>)
	word32 eax_39 = 0<32>
	branch dwArg04 <= 0<32> l007268DF
l00726884:
	byte cl_45 = Mem44[eax_39 + ebx:byte]
	word32 edi_46 = CONVERT(cl_45, byte, word32)
	branch edi_46 >u 0x7A<32> l007268CD
l00726892:
	switch (CONVERT(Mem44[edi_46 + 0x7268AF<32>:byte], byte, word32)) { l007268A0 l007268CD l007268CD l007268CD l007268CD l007268CD l007268CD l007268CD l007268CD l007268CD l007268CD l007268CD l007268CD l007268CD l007268CD l007268CD l007268CD l007268A0 l007268A0 l007268A0 l007268A0 l007268CD l007268CD l007268CD l007268CD l007268CD l007268A0 l007268A0 l007268A0 l007268A0 }
l007268A0:
	word32 ecx_56
	branch cl_45 == 0x71<8> l007268AF
l007268A5:
	branch cl_45 == 0x77<8> l007268AF
l007268AF:
	ecx_56 = 0<32>
l007268AA:
	ecx_56 = eax_39 + 3<32>
l007268B1:
	Mem80[eax_20 + (CONVERT(Mem44[(eax_39 + 1<32>) + ebx:byte], byte, word32) + ((CONVERT(Mem44[(eax_39 + 2<32>) + ebx:byte], byte, word32) << 8<32>) + ecx_56)) * 4<32>:word32] = 1<32>
	ebp_10 = dwArg04
l007268CD:
	word32 ecx_95 = CONVERT(CONVERT(edi_46 >= 0x5A<32>, bool, int8), int8, uint32)
	eax_39 = eax_39 + ((ecx_95 + 1<32>) + ecx_95)
	branch eax_39 < ebp_10 l00726884
l007268DF:
	word32 eax_103 = 0<32>
	branch ebp_10 <= 0<32> l007268FA
l007268E5:
	Mem113[eax_20 + eax_103 * 4<32>:word32] = Mem108[eax_20 + eax_103 * 4<32>:word32] + dwLoc04_163
	eax_103 = eax_103 + 1<32>
	dwLoc04_163 = Mem113[eax_20 + eax_103 * 4<32>:word32]
	branch eax_103 < ebp_10 l007268E5
l007268FA:
	return eax_20
l00726866:
	word32 edx_246
	word32 ecx_245
	fn006E1210(out ecx_245, out edx_246)
	return 0<32>
fn00726840_exit:


word32 fn00726930(word32 eax, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00728BE0
// MayUse:  eax:[0..31] Stack +0004:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn00726930_entry:
l00726930:
	word32 ebp_12 = dwArg04
	branch fn006E0FC0() != 0<32> l00726F7C
l00726952:
	branch memchr(eax + 0x14<32>, 0xFF<32>, Mem21[eax + 8<32>:word32]) != 0<32> l00726F7C
l00726978:
	word32 eax_44 = fn006ECC00(dwArg04)
	word32 edi_49 = eax_44
	branch eax_44 > 0x7FBC<32> l00726F7C
l00726993:
	word32 eax_56 = fn006DECD0(eax_44)
	branch eax_56 == 0<32> l00726F7C
l007269A4:
	word32 eax_72 = memcpy(eax_56, dwArg04 + 0x14<32>, eax_44)
	word32 esp_455 = fp - 0x30<32>
	branch Mem71[eax_44 - 1<32> + eax_72:byte] != 0x53<8> l00726F6F
l007269BF:
	word32 eax_80 = fn006DECD0(eax_44 * 4<32>)
	word32 esi_447 = eax_80
	esp_455 = fp - 0x30<32>
	branch eax_80 == 0<32> l00726F6F
l007269DD:
	word32 eax_94 = fn00726840(eax_72, eax_44)
	word32 esp_112 = fp - 0x30<32>
	branch eax_94 == 0<32> l00726F66
l007269F2:
	word32 ebp_104 = 0<32>
	branch eax_44 <= 0<32> l00726ECA
l007269FC:
	word32 edi_107 = eax_94
l00726A04:
	byte cl_111 = Mem110[eax_72 + ebp_104:byte]
	word32 esi_113 = Mem110[esp_112 + 0x10<32>:word32]
	word32 edx_114 = CONVERT(cl_111, byte, word32)
	Mem117[esp_112 + 0x20<32>:word32] = edx_114
	Mem118[esp_112 + 0x1C<32>:word32] = esi_113
	Mem119[esp_112 + 0x10<32>:word32] = 0<32>
	branch edx_114 >u 0x8F<32> l00726EAA
l00726A2C:
	word32 eax_652
	word32 esp_651
	switch (CONVERT(Mem119[edx_114 + 0x727051<32>:byte], byte, word32)) { l00726D56 l00726A3A l00726D56 l00726EAA l00726D56 l00726EAA l00726EAA l00726EAA l00726D17 l00726D17 l00726EAA l00726D17 l00726D17 l00726D17 l00726D17 l00726D17 l00726D17 l00726EAA l00726EAA l00726EAA l00726EAA l00726EAA l00726EAA l00726EAA l00726EAA l00726EAA l00726EAA l00726EAA l00726EAA l00726EAA l00726EAA l00726EAA l00726EAA l00726EAA l00726EAA l00726EAA l00726EAA l00726EAA l00726EAA l00726EAA l00726EAA l00726EAA l00726EAA l00726EAA l00726EAA l00726EAA l00726EAA l00726EAA l00726EAA l00726EAA l00726EAA l00726D17 l00726D17 l00726D17 l00726D17 l00726D17 l00726EAA l00726EAA l00726EAA l00726EAA l00726EAA l00726EAA l00726EAA l00726EAA l00726EAA l00726EAA l00726EAA l00726EAA l00726EAA l00726EAA l00726EAA l00726EAA l00726E8A l00726EAA l00726EAA l00726EAA l00726EAA l00726EAA l00726EAA l00726EAA l00726EAA l00726EAA l00726E04 l00726EAA l00726EAA l00726EAA l00726EAA l00726EAA l00726EAA l00726B9A l00726AE8 l00726C0C l00726C0C l00726EAA l00726EAA l00726A9C l00726EAA l00726EAA l00726EAA l00726E04 l00726D7C l00726D7C l00726E04 l00726EAA l00726EAA l00726AE8 l00726EAA l00726EAA l00726E04 l00726E04 l00726E04 l00726E04 l00726EAA l00726EAA l00726EAA l00726EAA l00726EAA l00726EAA l00726EAA l00726EAA l00726EAA l00726EAA l00726EAA l00726EAA l00726EAA l00726EAA l00726EAA l00726EAA l00726EAA l00726EAA l00726EAA l00726EAA l00726F51 }
l00726D7C:
	word32 edx_127
	branch cl_111 == 0x71<8> l00726D8B
l00726D81:
	branch cl_111 == 0x77<8> l00726D8B
l00726D8B:
	edx_127 = 0<32>
l00726D86:
	edx_127 = ebp_104 + 3<32>
l00726D8D:
	word32 eax_145 = CONVERT(Mem119[eax_72 + 1<32> + ebp_104:byte], byte, word32) + ((CONVERT(Mem119[(eax_72 + 2<32>) + ebp_104:byte], byte, word32) << 8<32>) + edx_127)
	byte dl_146 = Mem119[eax_145 + eax_72:byte]
	word32 esi_147 = CONVERT(dl_146, byte, word32)
	branch esi_147 == 0x6F<32> l00726DAE
l00726DA9:
	branch esi_147 != 0x70<32> l00726E00
l00726E00:
	edx_114 = Mem119[esp_112 + 0x20<32>:word32]
l00726DAE:
	branch esi_147 != Mem119[esp_112 + 0x20<32>:word32] l00726DEC
l00726DEC:
	word32 eax_163 = eax_145 - ebp_104
	Mem169[eax_72 + 2<32> + ebp_104:byte] = SLICE(eax_163 >> 8<32>, byte, 0)
	Mem171[eax_72 + 1<32> + ebp_104:byte] = SLICE(eax_163, byte, 0)
l00726DB4:
	word32 ecx_177
	branch dl_146 == 0x71<8> l00726DC3
l00726DB9:
	branch dl_146 == 0x77<8> l00726DC3
l00726DC3:
	ecx_177 = 0<32>
l00726DBE:
	ecx_177 = eax_145 + 3<32>
l00726DC5:
	word32 eax_195 = (CONVERT(Mem119[eax_72 + 2<32> + eax_145:byte], byte, word32) << 8<32>) + CONVERT(Mem119[(eax_72 + 1<32>) + eax_145:byte], byte, word32) - ebp_104 - 3<32> + ecx_177
	Mem200[eax_72 + 2<32> + ebp_104:byte] = SLICE(eax_195 >> 8<32>, byte, 0)
	Mem202[eax_72 + 1<32> + ebp_104:byte] = SLICE(eax_195, byte, 0)
l00726A9C:
	word32 eax_206 = (CONVERT(Mem119[eax_72 + 2<32> + ebp_104:byte], byte, word32) << 8<32>) + CONVERT(Mem119[(eax_72 + 1<32>) + ebp_104:byte], byte, word32)
	byte al_218 = SLICE(eax_206, byte, 0)
	branch eax_206 >u 9<32> l00726EAA
l00726AB7:
	branch Mem119[eax_72 + 3<32> + ebp_104:byte] != 0xC<8> l00726EAA
l00726AC2:
	branch Mem119[edi_107 + ebp_104 * 4<32>:word32] != Mem119[(edi_107 + 0xC<32>) + ebp_104 * 4<32>:word32] l00726EAA
l00726ACF:
	Mem223[eax_72 + 2<32> + ebp_104:byte] = SLICE(eax_206 >> 8<32>, byte, 0)
	Mem224[eax_72 + 1<32> + ebp_104:byte] = al_218 ^ 1<8>
	Mem225[eax_72 + 3<32> + ebp_104:byte] = 9<8>
l00726C0C:
	word32 esi_232 = (CONVERT(Mem119[eax_72 + 2<32> + ebp_104:byte], byte, word32) << 8<32>) + CONVERT(Mem119[(eax_72 + 1<32>) + ebp_104:byte], byte, word32)
	word32 eax_235 = ebp_104 - esi_232 * 3<32>
	branch eax_235 < 0<32> l00726C97
l00726C24:
	branch esi_232 > Mem119[esp_112 + 0x1C<32>:word32] l00726C97
l00726C2A:
	branch edx_114 != 0x66<32> l00726C3F
l00726C3F:
	branch edx_114 != 0x67<32> l00726C97
l00726C44:
	branch Mem119[eax_72 + 3<32> + ebp_104:byte] != 0x6A<8> l00726C97
l00726C4B:
	branch Mem119[edi_107 + eax_235 * 4<32>:word32] != Mem119[(edi_107 + 0x14<32>) + (esi_232 * 3<32> + eax_235) * 4<32>:word32] l00726C97
l00726C59:
	word32 ecx_257 = (CONVERT(Mem119[eax_72 + 5<32> + ebp_104:byte], byte, word32) << 8<32>) + CONVERT(Mem119[(eax_72 + 4<32>) + ebp_104:byte], byte, word32)
	branch ecx_257 == 6<32> l00726C72
l00726C6D:
	branch ecx_257 != 7<32> l00726C97
l00726C2F:
	branch Mem119[edi_107 + eax_235 * 4<32>:word32] == Mem119[(edi_107 + 8<32>) + (esi_232 * 3<32> + eax_235) * 4<32>:word32] l00726C72
l00726C72:
	word32 edi_269 = Mem119[esp_112 + 0x38<32>:word32]
	word32 esp_274 = esp_112 - 4<i32>
	Mem276[esp_274:word32] = esi_232
	Mem278[esp_274 - 4<i32>:word32] = eax_235 + eax_72
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	esp_112 = esp_274 + 4<32>
	branch fn007264A0(edi_269, stackArg4, dwArg04) == 0<32> l00726C93
l00726C93:
	edi_107 = Mem278[esp_274 + 0x1C<32>:word32]
l00726C86:
	Mem294[esp_274 + 0x14<32>:word32] = 1<32>
l00726C3D:
l00726C97:
	branch Mem297[eax_72 + 3<32> + ebp_104:byte] != 0x5C<8> l00726EAA
l00726CA2:
	branch Mem297[edi_107 + ebp_104 * 4<32>:word32] != Mem297[(edi_107 + 0x14<32>) + ebp_104 * 4<32>:word32] l00726EAA
l00726CAF:
	branch esi_232 != (CONVERT(Mem297[(eax_72 + 5<32>) + ebp_104:byte], byte, word32) << 8<32>) + CONVERT(Mem297[(eax_72 + 4<32>) + ebp_104:byte], byte, word32) l00726EAA
l00726CC6:
	branch esi_232 != 1<32> l00726CDD
l00726CDD:
	branch esi_232 != 2<32> l00726CF8
l00726CF8:
	branch esi_232 != 3<32> l00726EAA
l00726D01:
	Mem317[eax_72 + ebp_104:byte] = 3<8>
	Mem318[eax_72 + 1<32> + ebp_104:byte] = 2<8>
	Mem319[eax_72 + 2<32> + ebp_104:word32] = 0x9090909<32>
l00726CE2:
	Mem321[eax_72 + ebp_104:byte] = 2<8>
	Mem322[eax_72 + 1<32> + ebp_104:word32] = 0x9090909<32>
	Mem324[eax_72 + 5<32> + ebp_104:byte] = 9<8>
l00726CCB:
	Mem326[eax_72 + ebp_104:word32] = 0x9090909<32>
	Mem328[eax_72 + 4<32> + ebp_104:word16] = 0x909<16>
l00726AE8:
	word32 esp_340 = esp_112 - 4<i32>
	Mem341[esp_340:word32] = Mem119[Mem119[esp_112 + 0x3C<32>:word32] + 0xC<32> + ((CONVERT(Mem119[(eax_72 + 2<32>) + ebp_104:byte], byte, word32) << 8<32>) + CONVERT(Mem119[(eax_72 + 1<32>) + ebp_104:byte], byte, word32)) * 4<32>:word32]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 edx_1365
	word32 esi_1366
	word32 ecx_1364
	word32 eax_346 = fn006ECC50(stackArg4, out ecx_1364, out edx_1365, out esi_1366)
	esp_112 = esp_340 + 4<32>
	branch eax_346 == 0<32> l00726EAA
l00726B10:
	word32 edi_355 = 0x8ABDD0<32>
	word32 esi_356 = eax_346
	word32 ecx_357 = 5<32>
	bool v25_987 = false
l00726B1E:
	branch ecx_357 == 0<32> l00726B20
l00726B1E_1:
	v25_987 = Mem341[esi_1380:byte] != Mem341[edi_1381:byte]
	esi_356 = esi_1380 + 1<i32>
	edi_355 = edi_1381 + 1<i32>
	ecx_357 = ecx_357 - 1<32>
	esi_1380 = esi_356
	edi_1381 = edi_355
	branch Mem341[esi_1380:byte] != Mem341[edi_1381:byte] l00726B1E
l00726B20:
	branch v25_987 l00726EAA
l00726B26:
	word32 edx_376 = Mem341[esp_340 + 0x3C<32>:word32]
	word32 ecx_377 = Mem341[edx_376 + 8<32>:word32]
	Mem381[esp_340 + 0x14<32>:word32] = 0<32>
	word32 eax_378 = 0<32>
	branch ecx_377 <= 0<32> l00726B56
l00726B37:
	word32 edx_382 = Mem381[edx_376 + 0xC<32>:word32]
l00726B40:
	branch Mem381[edx_382:word32] == 0xA163B8<32> l00726B52
l00726B48:
	eax_378 = eax_378 + 1<32>
	edx_382 = edx_382 + 4<32>
	branch eax_378 < ecx_377 l00726B40
l00726B52:
	Mem399[esp_340 + 0x14<32>:word32] = eax_378
l00726B56:
	branch eax_378 != ecx_377 l00726B79
l00726B5A:
	word32 eax_407 = Mem406[esp_340 + 0x3C<32>:word32]
	Mem409[esp_340:word32] = 0xA163B8<32>
	Mem411[esp_340 - 4<i32>:word32] = eax_407
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 edx_1375
	word32 ecx_1374
	branch fn006F2A10(stackArg4, dwArg04, out ecx_1374, out edx_1375) == 0xFFFFFFFF<32> l00726F51
l00726F51:
	word32 esp_445 = esp_112 - 4<i32>
	Mem446[esp_445:word32] = Mem443[esp_112 + 0x18<32>:word32]
	free(Mem446[esp_445:(ptr32 void)])
	esi_447 = Mem446[esp_445 + 0x28<32>:word32]
	ebp_12 = Mem446[esp_445 + 0x38<32>:word32]
	esp_112 = esp_445 + 4<32>
l00726F66:
	word32 esp_452 = esp_112 - 4<i32>
	Mem454[esp_452:word32] = esi_447
	free(Mem454[esp_452:(ptr32 void)])
	esp_455 = esp_452 + 4<32>
l00726F6F:
	branch eax_72 == 0<32> l00726F7C
l00726F73:
	word32 esp_464 = esp_455 - 4<i32>
	Mem465[esp_464:word32] = eax_72
	free(Mem465[esp_464:(ptr32 void)])
l00726F7C:
	Mem474[ebp_12:word32] = Mem471[ebp_12:word32] + 1<32>
	return ebp_12
l00726B75:
	eax_378 = Mem411[esp_340 + 0x14<32>:word32]
l00726B79:
	word32 edx_490 = Mem489[esp_112 + 0x1C<32>:word32]
	Mem498[eax_72 + ebp_104:byte] = 0x64<8>
	Mem500[eax_72 + 2<32> + ebp_104:byte] = SLICE(eax_378 >> 8<32>, byte, 0)
	Mem502[eax_72 + 1<32> + ebp_104:byte] = SLICE(eax_378, byte, 0)
	Mem503[esp_112 + 0x10<32>:word32] = edx_490 + 1<32>
l00726B9A:
	word32 eax_508 = (CONVERT(Mem119[eax_72 + 2<32> + ebp_104:byte], byte, word32) << 8<32>) + CONVERT(Mem119[(eax_72 + 1<32>) + ebp_104:byte], byte, word32)
	Mem510[esp_112 + 0x10<32>:word32] = esi_113 + 1<32>
	branch Mem119[eax_72 + 3<32> + ebp_104:byte] != 0x6F<8> l00726EAA
l00726BBB:
	branch Mem510[eax_72 + 6<32> + ebp_104:byte] != 1<8> l00726EAA
l00726BC6:
	branch Mem510[edi_107 + ebp_104 * 4<32>:word32] != Mem510[(edi_107 + 0x18<32>) + ebp_104 * 4<32>:word32] l00726EAA
l00726BD3:
	word32 esp_520 = esp_112 - 4<i32>
	Mem521[esp_520:word32] = Mem510[Mem510[Mem510[esp_112 + 0x38<32>:word32] + 0xC<32>:word32] + eax_508 * 4<32>:word32]
	esp_112 = esp_520 + 4<32>
	word32 ecx_1367
	word32 edx_1368
	branch fn006DEA90(Mem521[esp_520:word32], out ecx_1367, out edx_1368) == 0<32> l00726EAA
l00726BEE:
	Mem534[eax_72 + ebp_104:word32] = 0x9090909<32>
	Mem536[eax_72 + 4<32> + ebp_104:word16] = 0x909<16>
	Mem538[eax_72 + 6<32> + ebp_104:byte] = 9<8>
	Mem539[esp_520 + 0x14<32>:word32] = 0<32>
l00726E04:
	word32 ecx_547
	byte dl_613 = SLICE(edx_114, byte, 0)
	branch cl_111 == 0x71<8> l00726E13
l00726E09:
	branch cl_111 == 0x77<8> l00726E13
l00726E13:
	ecx_547 = 0<32>
l00726E0E:
	ecx_547 = ebp_104 + 3<32>
l00726E15:
	word32 ecx_575
	word32 eax_565 = CONVERT(Mem119[eax_72 + 1<32> + ebp_104:byte], byte, word32) + ((CONVERT(Mem119[(eax_72 + 2<32>) + ebp_104:byte], byte, word32) << 8<32>) + ecx_547)
	byte cl_566 = Mem119[eax_565 + eax_72:byte]
	branch cl_566 == 0x71<8> l00726E42
l00726E2E:
	branch cl_566 != 0x6E<8> l00726EAA
l00726E33:
	branch cl_566 == 0x71<8> l00726E42
l00726E38:
	branch cl_566 == 0x77<8> l00726E42
l00726E42:
	ecx_575 = 0<32>
l00726E3D:
	ecx_575 = eax_565 + 3<32>
l00726E44:
	word32 eax_590 = CONVERT(Mem119[eax_72 + 1<32> + eax_565:byte], byte, word32) + ((CONVERT(Mem119[(eax_72 + 2<32>) + eax_565:byte], byte, word32) << 8<32>) + ecx_575)
	branch edx_114 != 0x6E<32> l00726E61
l00726E61:
	branch edx_114 == 0x71<32> l00726E74
l00726E66:
	branch edx_114 == 0x77<32> l00726E74
l00726E6B:
	eax_590 = eax_590 + (0xFFFFFFFD<32> - ebp_104)
l00726E5A:
	dl_613 = 0x71<8> (alias)
l00726E74:
	byte al_624 = SLICE(eax_590, byte, 0)
	branch eax_590 < 0<32> l00726EAA
l00726E78:
	Mem618[eax_72 + ebp_104:byte] = dl_613
	Mem623[eax_72 + 2<32> + ebp_104:byte] = SLICE(eax_590 >> 8<32>, byte, 0)
	Mem625[eax_72 + 1<32> + ebp_104:byte] = al_624
l00726E8A:
	word32 eax_626 = ebp_104 + 4<32>
	branch eax_626 >= Mem119[esp_112 + 0x14<32>:word32] l00726EAA
l00726E93:
	branch Mem119[eax_72 + 4<32> + ebp_104:byte] != 0x53<8> l00726EAA
l00726E9A:
	branch Mem119[edi_107 + ebp_104 * 4<32>:word32] != Mem119[edi_107 + eax_626 * 4<32>:word32] l00726EAA
l00726EA2:
	Mem634[eax_72 + 1<32> + ebp_104:word32] = 0x9090909<32>
l00726D17:
	branch esi_113 < 2<32> l00726EAA
l00726D20:
	branch Mem119[edi_107 - 0x18<32> + ebp_104 * 4<32>:word32] != Mem119[edi_107 + ebp_104 * 4<32>:word32] l00726EAA
l00726D2D:
	word32 esp_646 = esp_112 - 4<i32>
	Mem647[esp_646:word32] = Mem119[esp_112 + 0x38<32>:word32]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	eax_652 = fn00726570(eax_72 - 6<32> + ebp_104, stackArg4)
	esp_651 = esp_646 + 4<32>
l00726A3A:
	branch Mem119[eax_72 + 1<32> + ebp_104:byte] != 0x6F<8> l00726EAA
l00726A45:
	branch Mem119[eax_72 + 4<32> + ebp_104:byte] != 1<8> l00726EAA
l00726A51:
	branch Mem119[edi_107 + ebp_104 * 4<32>:word32] != Mem119[(edi_107 + 0x10<32>) + ebp_104 * 4<32>:word32] l00726EAA
l00726A5E:
	word32 eax_668 = (CONVERT(Mem119[eax_72 + 3<32> + ebp_104:byte], byte, word32) << 8<32>) + CONVERT(Mem119[(eax_72 + 2<32>) + ebp_104:byte], byte, word32)
	branch Mem119[eax_668 + 4<32> + ebp_104 + eax_72:byte] != 1<8> l00726EAA
l00726A7A:
	Mem676[eax_72 + ebp_104:byte] = 0x70<8>
	Mem678[eax_72 + 2<32> + ebp_104:byte] = SLICE(eax_668 + 1<32> >> 8<32>, byte, 0)
	Mem680[eax_72 + 1<32> + ebp_104:byte] = SLICE(eax_668 + 1<32>, byte, 0)
	Mem681[eax_72 + 3<32> + ebp_104:byte] = 1<8>
	Mem682[eax_72 + 4<32> + ebp_104:byte] = 9<8>
l00726D56:
	branch esi_113 < 1<32> l00726EAA
l00726D5F:
	branch Mem119[edi_107 - 0xC<32> + ebp_104 * 4<32>:word32] != Mem119[edi_107 + ebp_104 * 4<32>:word32] l00726EAA
l00726D6C:
	word32 esp_694 = esp_112 - 4<i32>
	Mem695[esp_694:word32] = Mem119[esp_112 + 0x38<32>:word32]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	eax_652 = fn00726760(eax_72, eax_72 - 3<32> + ebp_104, es, ds, stackArg4)
	esp_651 = esp_694
l00726D3B:
	esp_112 = esp_651 + 0<32>
	branch eax_652 == 0<32> l00726EAA
l00726D46:
	Mem714[esp_112 + 0x10<32>:word32] = 1<32>
	ebp_104 = ebp_104 - 2<32>
l00726EAA:
	ebp_104 = ebp_104 + ((0<32> - (Mem718[eax_72 + ebp_104:byte] <u 0x5A<8>) & 0xFFFFFFFE<32>) + 3<32>)
	branch ebp_104 < Mem718[esp_112 + 0x14<32>:word32] l00726A00
l00726A00:
	edi_107 = Mem718[esp_112 + 0x18<32>:word32]
l00726EC2:
	esi_447 = Mem718[esp_112 + 0x24<32>:word32]
	edi_49 = Mem718[esp_112 + 0x14<32>:word32]
l00726ECA:
	word32 eax_742 = 0<32>
	word32 edx_743 = 0<32>
	branch edi_49 <= 0<32> l00726EF6
l00726ED2:
	Mem752[esi_447 + eax_742 * 4<32>:word32] = eax_742 - edx_743
	byte cl_755 = Mem752[eax_742 + eax_72:byte]
	branch cl_755 != 9<8> l00726EE5
l00726EE2:
	edx_743 = edx_743 + 1<32>
l00726EE5:
	eax_742 = eax_742 + ((0<32> - (cl_755 <u 0x5A<8>) & 0xFFFFFFFE<32>) + 3<32>)
	branch eax_742 < edi_49 l00726ED2
l00726EF6:
	word32 edi_772 = 0<32>
	word32 ebp_773 = 0<32>
	byte cl_795 = 0<8>
	branch Mem779[esp_112 + 0x2C<32>:word32] <= 0<32> l00726F25
l00726F02:
	ebp_773 = ebp_773 + CONVERT(Mem785[edi_772 + Mem785[esp_112 + 0x28<32>:word32]:byte], byte, word32)
	word32 eax_792 = Mem785[esi_447 + ebp_773 * 4<32>:word32]
	Mem798[edi_772 + Mem785[esp_112 + 0x28<32>:word32]:byte] = SLICE(eax_792, byte, 0) - cl_795
	edi_772 = edi_772 + 2<32>
	cl_795 = SLICE(eax_792, byte, 0) (alias)
	branch edi_772 < Mem798[esp_112 + 0x2C<32>:word32] l00726F02
l00726F25:
	word32 ebp_803 = 0<32>
	word32 eax_804 = 0<32>
	branch Mem806[esp_112 + 0x14<32>:word32] <= 0<32> l00726FFD
l00726F33:
	word32 edi_812 = CONVERT(Mem811[eax_804 + eax_72:byte], byte, word32)
	branch edi_812 >u 0x7A<32> l00726FCB
l00726F43:
	word32 ecx_827
	switch (edi_812 - 9<32>) { l00726F8A l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FA3 l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726FA3 l00726FA3 l00726FA3 l00726F8F l00726FCB l00726FCB l00726FCB l00726FCB l00726FCB l00726F8F l00726FA3 l00726FA3 l00726FA3 }
l00726F8F:
	ecx_827 = Mem811[esi_447 + ((CONVERT(Mem811[(eax_804 + 2<32>) + eax_72:byte], byte, word32) << 8<32>) + CONVERT(Mem811[(eax_804 + 1<32>) + eax_72:byte], byte, word32)) * 4<32>:word32]
l00726FA3:
	ecx_827 = Mem811[esi_447 + 0xC<32> + (CONVERT(Mem811[(eax_804 + 1<32>) + eax_72:byte], byte, word32) + ((CONVERT(Mem811[(eax_804 + 2<32>) + eax_72:byte], byte, word32) << 8<32>) + eax_804)) * 4<32>:word32] - Mem811[esi_447 + eax_804 * 4<32>:word32] - 3<32>
l00726FBE:
	Mem848[eax_804 + 1<32> + eax_72:byte] = SLICE(ecx_827, byte, 0)
	Mem850[eax_804 + 2<32> + eax_72:byte] = SLICE(ecx_827 >> 8<32>, byte, 0)
l00726FCB:
	word32 ecx_860 = CONVERT(CONVERT(edi_812 >= 0x5A<32>, bool, int8), int8, uint32)
	word32 ecx_861 = ecx_860 + 1<32> + ecx_860
	word32 edi_862 = ecx_861
	branch ecx_861 == 0<32> l00726FF3
l00726FDD:
l00726FE0:
	Mem874[eax_72 + ebp_803:byte] = Mem869[eax_804 + eax_72:byte]
	edi_862 = edi_862 - 1<32>
	ebp_803 = ebp_803 + 1<32>
	eax_804 = eax_804 + 1<32>
	branch edi_862 != 0<32> l00726FE0
l00726F8A:
	eax_804 = eax_804 + 1<32>
l00726FF3:
	branch eax_804 < Mem891[esp_112 + 0x14<32>:word32] l00726F33
l00726FFD:
	word32 esp_896 = esp_112 - 4<i32>
	Mem904[esp_896:word32] = ebp_803
	Mem914[esp_896 - 4<i32>:word32] = eax_72
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 edx_1371
	word32 ecx_1370
	word32 eax_959 = fn006EC9B0(stackArg4, dwArg04, out ecx_1370, out edx_1371)
	free(esi_447)
	free(eax_72)
	free(eax_94)
	return eax_959
fn00726930_exit:


void fn00727170(word32 esi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00727290
//      fn00728E40
//      fn0072C160
// MayUse:  esi:[0..31]
// LiveOut:
// Trashed: SCZO eax ecx edx Top
// Preserved: ebp ebx edi esp
fn00727170_entry:
l00727170:
	word32 edi_11 = Mem9[esi + 0x24<32>:word32]
	branch edi_11 == 0<32> l007271A2
l0072717B:
l00727180:
	word32 eax_21 = Mem20[edi_11 + 0xC<32>:word32]
	branch eax_21 == 0<32> l00727190
l00727187:
	word32 edx_342
	word32 ecx_341
	fn007239C0(eax_21, out ecx_341, out edx_342)
l00727190:
	word32 ebx_39 = Mem38[edi_11:word32]
	word32 ecx_339
	word32 edx_340
	fn007239C0(edi_11, out ecx_339, out edx_340)
	edi_11 = ebx_39
	branch ebx_39 != 0<32> l00727180
l007271A1:
l007271A2:
	word32 esp_101 = fp - 8<i32>
	word32 eax_61 = Mem60[esi:word32]
	branch eax_61 == 0<32> l007271BB
l007271A8:
	Mem65[esi:word32] = 0<32>
	word32 v12_66 = Mem65[eax_61:word32] + 0xFFFFFFFF<32>
	Mem67[eax_61:word32] = v12_66
	branch v12_66 != 0<32> l007271BB
l007271AF:
	word32 ecx_70 = Mem67[eax_61 + 4<32>:word32]
	word32 esp_80
	call Mem67[ecx_70 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_70,Stack +0004:eax_61
		defs: esp:esp_80
	esp_101 = esp_80 + 4<32>
l007271BB:
	word32 eax_90 = Mem89[esi + 4<32>:word32]
	branch eax_90 == 0<32> l007271D6
l007271C2:
	Mem94[esi + 4<32>:word32] = 0<32>
	word32 v15_95 = Mem94[eax_90:word32] + 0xFFFFFFFF<32>
	Mem96[eax_90:word32] = v15_95
	branch v15_95 != 0<32> l007271D6
l007271CA:
	word32 ecx_99 = Mem96[eax_90 + 4<32>:word32]
	word32 edx_100 = Mem96[ecx_99 + 0x18<32>:word32]
	Mem103[esp_101 - 4<i32>:word32] = eax_90
	word32 esp_107
	call edx_100 (retsize: 4;)
		uses: ecx:ecx_99
		defs: esp:esp_107
	esp_101 = esp_107 + 4<32>
l007271D6:
	word32 eax_117 = Mem116[esi + 8<32>:word32]
	branch eax_117 == 0<32> l007271F1
l007271DD:
	Mem121[esi + 8<32>:word32] = 0<32>
	word32 v16_122 = Mem121[eax_117:word32] + 0xFFFFFFFF<32>
	Mem123[eax_117:word32] = v16_122
	branch v16_122 != 0<32> l007271F1
l007271E5:
	word32 ecx_126 = Mem123[eax_117 + 4<32>:word32]
	word32 edx_127 = Mem123[ecx_126 + 0x18<32>:word32]
	Mem130[esp_101 - 4<i32>:word32] = eax_117
	word32 esp_134
	call edx_127 (retsize: 4;)
		uses: ecx:ecx_126
		defs: esp:esp_134
	esp_101 = esp_134 + 4<32>
l007271F1:
	word32 eax_144 = Mem143[esi + 0xC<32>:word32]
	branch eax_144 == 0<32> l0072720C
l007271F8:
	Mem148[esi + 0xC<32>:word32] = 0<32>
	word32 v17_149 = Mem148[eax_144:word32] + 0xFFFFFFFF<32>
	Mem150[eax_144:word32] = v17_149
	branch v17_149 != 0<32> l0072720C
l00727200:
	word32 ecx_153 = Mem150[eax_144 + 4<32>:word32]
	word32 edx_154 = Mem150[ecx_153 + 0x18<32>:word32]
	Mem157[esp_101 - 4<i32>:word32] = eax_144
	word32 esp_161
	call edx_154 (retsize: 4;)
		uses: ecx:ecx_153
		defs: esp:esp_161
	esp_101 = esp_161 + 4<32>
l0072720C:
	word32 eax_171 = Mem170[esi + 0x10<32>:word32]
	branch eax_171 == 0<32> l00727227
l00727213:
	Mem175[esi + 0x10<32>:word32] = 0<32>
	word32 v18_176 = Mem175[eax_171:word32] + 0xFFFFFFFF<32>
	Mem177[eax_171:word32] = v18_176
	branch v18_176 != 0<32> l00727227
l0072721B:
	word32 ecx_180 = Mem177[eax_171 + 4<32>:word32]
	word32 edx_181 = Mem177[ecx_180 + 0x18<32>:word32]
	Mem184[esp_101 - 4<i32>:word32] = eax_171
	word32 esp_188
	call edx_181 (retsize: 4;)
		uses: ecx:ecx_180
		defs: esp:esp_188
	esp_101 = esp_188 + 4<32>
l00727227:
	word32 eax_198 = Mem197[esi + 0x18<32>:word32]
	branch eax_198 == 0<32> l00727242
l0072722E:
	Mem202[esi + 0x18<32>:word32] = 0<32>
	word32 v19_203 = Mem202[eax_198:word32] + 0xFFFFFFFF<32>
	Mem204[eax_198:word32] = v19_203
	branch v19_203 != 0<32> l00727242
l00727236:
	word32 ecx_207 = Mem204[eax_198 + 4<32>:word32]
	word32 edx_208 = Mem204[ecx_207 + 0x18<32>:word32]
	Mem211[esp_101 - 4<i32>:word32] = eax_198
	word32 esp_215
	call edx_208 (retsize: 4;)
		uses: ecx:ecx_207
		defs: esp:esp_215
	esp_101 = esp_215 + 4<32>
l00727242:
	word32 eax_225 = Mem224[esi + 0x14<32>:word32]
	branch eax_225 == 0<32> l0072725D
l00727249:
	Mem229[esi + 0x14<32>:word32] = 0<32>
	word32 v20_230 = Mem229[eax_225:word32] + 0xFFFFFFFF<32>
	Mem231[eax_225:word32] = v20_230
	branch v20_230 != 0<32> l0072725D
l00727251:
	word32 ecx_234 = Mem231[eax_225 + 4<32>:word32]
	word32 edx_235 = Mem231[ecx_234 + 0x18<32>:word32]
	Mem238[esp_101 - 4<i32>:word32] = eax_225
	word32 esp_242
	call edx_235 (retsize: 4;)
		uses: ecx:ecx_234
		defs: esp:esp_242
	esp_101 = esp_242 + 4<32>
l0072725D:
	word32 eax_252 = Mem251[esi + 0x1C<32>:word32]
	branch eax_252 == 0<32> l00727278
l00727264:
	Mem256[esi + 0x1C<32>:word32] = 0<32>
	word32 v21_257 = Mem256[eax_252:word32] + 0xFFFFFFFF<32>
	Mem258[eax_252:word32] = v21_257
	branch v21_257 != 0<32> l00727278
l0072726C:
	word32 ecx_261 = Mem258[eax_252 + 4<32>:word32]
	word32 edx_262 = Mem258[ecx_261 + 0x18<32>:word32]
	Mem265[esp_101 - 4<i32>:word32] = eax_252
	call edx_262 (retsize: 4;)
		uses: ecx:ecx_261
l00727278:
	word32 ecx_343
	word32 edx_344
	fn007239C0(esi, out ecx_343, out edx_344)
	return
fn00727170_exit:


void fn00727290(word32 edi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0072A5D0
//      fn0072B360
//      fn0072C160
//      fn0072C510
//      fn0072E660
// MayUse:  edi:[0..31]
// LiveOut:
// Trashed: SCZO eax ecx edx esi Top
// Preserved: esp
fn00727290_entry:
l00727290:
	Mem7[edi + 0x14<32>:word32] = Mem0[edi + 0x14<32>:word32] + 0xFFFFFFFF<32>
	fn00727170(Mem11[edi + 0x18<32>:word32])
	word32 eax_20 = Mem11[edi + 0x1C<32>:word32]
	word32 esi_21 = Mem11[eax_20 + 8<32>:word32]
	branch esi_21 < 1<32> l007272D7
l007272D7:
	Mem25[edi + 0x18<32>:word32] = 0<32>
l007272A8:
	word32 edx_105
	word32 eax_31 = fn0072E9C0(Mem11[Mem11[eax_20 + 0xC<32>:word32] + (esi_21 - 1<32>) * 4<32>:word32], out edx_105)
	word32 ecx_36 = Mem29[edi + 0x1C<32>:word32]
	Mem41[edi + 0x18<32>:word32] = eax_31
	word32 ecx_106
	word32 edx_107
	branch fn00703390(ecx_36, esi_21 - 1<32>, out ecx_106, out edx_107) >= 0<32> l007272DE
l007272DE:
	return
l007272C8:
	fn006E86F0(0x8DA64C<32>)
	return
fn00727290_exit:


word32 fn007272E0(word32 ebx, word32 ebp, word32 esi, word32 edi, selector es, selector ds, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00729D20
//      fn0072DD60
// MayUse:  cs:[0..15] ds:[0..15] ebp:[0..31] ebx:[0..31] edi:[0..31] es:[0..15] esi:[0..31] fs:[0..15] gs:[0..15] ss:[0..15] Stack +0004:[0..31]
// LiveOut: eax
// Trashed: SCZDOP eax ecx edx Top
// Preserved: esp
fn007272E0_entry:
l007272E0:
	word32 ecx_10 = Mem8[dwArg04 + 0x18<32>:word32]
	word32 eax_7 = Mem0[0x00A14188<p32>:word32] ^ fp - 0x104<32>
	Mem12[ecx_10 + 0x2C<32>:word32] = Mem8[ecx_10 + 0x2C<32>:word32] + 1<32>
	word32 ecx_15 = Mem12[Mem12[dwArg04 + 0x18<32>:word32] + 0x2C<32>:word32]
	fn00724FE0(fp - 0x104<32>, 0x100<32>, 0x8DA664<32>)
	word32 edx_37
	word32 ecx_81
	word32 ecx_82
	return fn00694B8E(fn006ECAC0(fp - 0x104<32>, out ecx_81, out edx_37), eax_7 ^ fp - 0x104<32>, edx_37, ebx, ebp, esi, edi, es, ds, ecx_15, out ecx_82)
fn007272E0_exit:


word32 fn00727340(word32 eax)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00728030
//      fn0072D130
//      fn0072D3D0
//      fn0072D830
// MayUse:  eax:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx edx esi Top
// Preserved: esp
fn00727340_entry:
l00727340:
	word32 esi_8 = Mem6[eax + 0x18<32>:word32]
	word32 ecx_69
	word32 edx_70
	word32 eax_11 = fn00723860(0x20<32>, out ecx_69, out edx_70)
	branch eax_11 != 0<32> l0072735B
l0072735B:
	Mem25[eax_11:word32] = 0<32>
	Mem26[eax_11 + 4<32>:word32] = 0<32>
	Mem27[eax_11 + 8<32>:word32] = 0<32>
	Mem28[eax_11 + 0xC<32>:word32] = 0<32>
	Mem29[eax_11 + 0x10<32>:word32] = 0<32>
	Mem30[eax_11 + 0x14<32>:word32] = 0<32>
	Mem31[eax_11 + 0x18<32>:word32] = 0<32>
	Mem32[eax_11 + 0x1C<32>:word32] = 0<32>
	Mem34[eax_11:word32] = Mem32[esi_8 + 0x24<32>:word32]
	Mem35[esi_8 + 0x24<32>:word32] = eax_11
	return eax_11
l00727352:
	word32 ecx_71
	word32 edx_72
	fn006E1210(out ecx_71, out edx_72)
	return 0<32>
fn00727340_exit:


word32 fn00727380(word32 edi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00728E40
// MayUse:  edi:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx edx esi Top
// Preserved: esp
fn00727380_entry:
l00727380:
	word32 esi_8 = Mem6[edi + 0x18<32>:word32]
	word32 ecx_71
	word32 edx_72
	word32 eax_11 = fn00723860(0x20<32>, out ecx_71, out edx_72)
	branch eax_11 != 0<32> l0072739B
l0072739B:
	Mem25[eax_11:word32] = 0<32>
	Mem26[eax_11 + 4<32>:word32] = 0<32>
	Mem27[eax_11 + 8<32>:word32] = 0<32>
	Mem28[eax_11 + 0xC<32>:word32] = 0<32>
	Mem29[eax_11 + 0x10<32>:word32] = 0<32>
	Mem30[eax_11 + 0x14<32>:word32] = 0<32>
	Mem31[eax_11 + 0x18<32>:word32] = 0<32>
	Mem32[eax_11 + 0x1C<32>:word32] = 0<32>
	Mem34[eax_11:word32] = Mem32[esi_8 + 0x24<32>:word32]
	Mem35[esi_8 + 0x24<32>:word32] = eax_11
	Mem37[Mem35[edi + 0x18<32>:word32] + 0x28<32>:word32] = eax_11
	return eax_11
l00727392:
	word32 ecx_73
	word32 edx_74
	fn006E1210(out ecx_73, out edx_74)
	return 0<32>
fn00727380_exit:


word32 fn007273D0(word32 edi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00728030
//      fn00729810
//      fn00729F50
//      fn0072A350
// MayUse:  edi:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx edx esi Top
// Preserved: esp
fn007273D0_entry:
l007273D0:
	word32 esi_8 = Mem6[edi + 0x18<32>:word32]
	word32 ecx_74
	word32 edx_75
	word32 eax_11 = fn00723860(0x20<32>, out ecx_74, out edx_75)
	branch eax_11 != 0<32> l007273EB
l007273EB:
	Mem25[eax_11:word32] = 0<32>
	Mem26[eax_11 + 4<32>:word32] = 0<32>
	Mem27[eax_11 + 8<32>:word32] = 0<32>
	Mem28[eax_11 + 0xC<32>:word32] = 0<32>
	Mem29[eax_11 + 0x10<32>:word32] = 0<32>
	Mem30[eax_11 + 0x14<32>:word32] = 0<32>
	Mem31[eax_11 + 0x18<32>:word32] = 0<32>
	Mem32[eax_11 + 0x1C<32>:word32] = 0<32>
	Mem34[eax_11:word32] = Mem32[esi_8 + 0x24<32>:word32]
	Mem35[esi_8 + 0x24<32>:word32] = eax_11
	Mem38[Mem35[Mem35[edi + 0x18<32>:word32] + 0x28<32>:word32] + 0x10<32>:word32] = eax_11
	Mem40[Mem38[edi + 0x18<32>:word32] + 0x28<32>:word32] = eax_11
	return eax_11
l007273E2:
	word32 ecx_76
	word32 edx_77
	fn006E1210(out ecx_76, out edx_77)
	return 0<32>
fn007273D0_exit:


word32 fn00727420(word32 esi, ptr32 & ecxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00727670
//      fn00727810
//      fn00727880
//      fn00727D50
//      fn00728030
//      fn00729300
//      fn0072A5D0
//      fn0072AC20
//      fn0072B040
//      fn0072C160
//      fn0072CA10
// MayUse:  esi:[0..31]
// LiveOut: eax ecx
// Trashed: SCZO eax ebx ecx edi edx Top
// Preserved: esp
fn00727420_entry:
l00727420:
	word32 dwLoc0C_112
	word32 eax_50
	word32 ecx_6 = Mem0[esi + 0xC<32>:word32]
	branch ecx_6 != 0<32> l00727456
l00727456:
	word32 eax_16 = Mem14[esi + 8<32>:word32]
	branch Mem14[esi + 4<32>:word32] != eax_16 l0072749A
l0072745E:
	branch eax_16 * 0x14<32> >u 0x7FFFFFFF<32> l0072743D
l00727470:
	branch eax_16 * 0x28<32> == 0<32> l0072743D
l00727474:
	Mem34[esi + 8<32>:word32] = eax_16 * 2<32>
	word32 ecx_160
	word32 edx_161
	word32 eax_35 = fn00723B60(ecx_6, eax_16 * 0x28<32>, out ecx_160, out edx_161)
	branch eax_35 == 0<32> l0072743D
l00727487:
	Mem47[esi + 0xC<32>:word32] = eax_35
	dwLoc0C_112 = eax_16 * 0x28<32> - eax_16 * 0x14<32>
	eax_50 = eax_35 + eax_16 * 0x14<32>
l00727429:
	word32 ecx_157
	word32 edx_158
	eax_50 = fn00723860(0x140<32>, out ecx_157, out edx_158)
	Mem64[esi + 0xC<32>:word32] = eax_50
	branch eax_50 != 0<32> l00727448
l00727448:
	Mem66[esi + 8<32>:word32] = 0x10<32>
	dwLoc0C_112 = 0x140<32>
l0072748F:
	memset(eax_50, 0<32>, dwLoc0C_112)
l0072749A:
	word32 eax_81 = Mem80[esi + 4<32>:word32]
	Mem86[esi + 4<32>:word32] = eax_81 + 1<32>
	ecxOut = eax_81 + 1<32>
	return eax_81
l0072743D:
	word32 ecx_95
	word32 edx_159
	fn006E1210(out ecx_95, out edx_159)
	ecxOut = ecx_95
	return 0xFFFFFFFF<32>
fn00727420_exit:


word32 fn007274B0(word32 ecx, word32 edx)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00728540
// MayUse:  ecx:[0..31] edx:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx edx Top
// Preserved: esp
fn007274B0_entry:
l007274B0:
	branch edx >u 0x8E<32> l00727578
l007274BE:
	word32 edx_20
	word32 eax_21
	switch (CONVERT(Mem0[edx + 0x7275DF<32>:byte], byte, word32)) { l007274CC l0072759B l0072759B l007274D0 l0072759B l00727578 l00727578 l00727578 l00727578 l0072759B l0072759B l0072759B l0072759B l00727578 l0072759B l00727578 l00727578 l007274D6 l007274CC l007274CC l007274CC l007274CC l007274CC l007274CC l007274CC l007274CC l007274CC l007274CC l007274CC l007274D0 l0072759B l0072759B l007274CC l00727578 l00727578 l00727578 l00727578 l00727578 l00727578 l007274D6 l007274DC l007274DC l007274E2 l00727578 l00727578 l00727578 l00727578 l00727578 l00727578 l007274CC l007274D6 l007274D6 l007274DC l00727578 l007274CC l007274CC l007274CC l007274CC l007274CC l007274DC l007274D6 l007274CC l007274CC l007274CC l007274CC l007274CC l007274CC l0072759B l00727578 l007274CC l007274CC l0072759B l007274D6 l007274CC l007274CC l007274CC l007274CC l007274CC l007274CC l0072759B l007274CC l007274D0 l007274CC l007274CC l007274DC l0072759B l0072759B l007274CC l007274D6 l007274CC l0072759B l007274E8 l007274D0 l00727578 l007274D6 l007274CC l007274CC l0072759B l007274EC l007274D0 l007274D0 l007274EF l007274EF l007274D0 l0072759B l007274CC l0072759B l007274D0 l00727578 l0072759B l0072759B l0072759B l0072759B l00727578 l00727578 l007274D0 l00727578 l00727578 l0072759B l0072759B l007274F7 l007274F7 l00727578 l007274D0 l007274CC l0072759B l00727578 l00727578 l00727578 l007274FD l00727502 l007274FD l0072756C l007274FD l007274D0 l007274D0 l007274CC l00727578 l00727578 l00727529 l00727529 l00727553 }
l00727553:
	int64 edx_eax_12 = CONVERT(ecx, word32, int64)
	edx_20 = (SLICE(edx_eax_12, word32, 0) + (SLICE(edx_eax_12, word32, 32) & 0xFF<32>) >> 8<32>) * 2<32>
	eax_21 = 0xFFFFFFFE<32>
l00727529:
	int64 edx_eax_24 = CONVERT(ecx, word32, int64)
	edx_20 = (SLICE(edx_eax_24, word32, 0) + (SLICE(edx_eax_24, word32, 32) & 0xFF<32>) >> 8<32>) * 2<32>
	eax_21 = 0xFFFFFFFF<32>
l0072753E:
	word32 eax_37 = eax_21 - edx_20
	word32 ecx_39 = ecx & 0x800000FF<32>
	branch (ecx & 0x800000FF<32>) >= 0<32> l00727550
l00727548:
	ecx_39 = ((ecx & 0x800000FF<32>) - 1<32> | 0xFFFFFF00<32>) + 1<32>
l00727550:
	return eax_37 - ecx_39
l0072756C:
	return CONVERT(CONVERT(ecx != 3<32>, bool, int8), int8, uint32) + 0xFFFFFFFE<32>
l00727502:
	int64 edx_eax_61 = CONVERT(ecx, word32, int64)
	word32 eax_67 = (SLICE(edx_eax_61, word32, 0) + (SLICE(edx_eax_61, word32, 32) & 0xFF<32>) >> 8<32>) * 2<32>
	word32 eax_70 = ecx & 0x800000FF<32>
	branch (ecx & 0x800000FF<32>) >= 0<32> l00727524
l0072751D:
	eax_70 = ((ecx & 0x800000FF<32>) - 1<32> | 0xFFFFFF00<32>) + 1<32>
l00727524:
	return -eax_70 - eax_67
l007274FD:
	return -ecx
l007274F7:
	return 3<32>
l007274EF:
	return 1<32> - ecx
l007274EC:
	return ecx
l007274E8:
	return ecx - 1<32>
l007274E2:
	return 0xFFFFFFFC<32>
l007274DC:
	return 0xFFFFFFFD<32>
l007274D6:
	return 0xFFFFFFFE<32>
l00727578:
	word32 esp_107
	word32 eax_109
	call _iob_func (retsize: 4;)
		uses: ecx:ecx,edx:edx,Stack +0004:0x8DA684<32>,Stack +0008:edx
		defs: eax:eax_109,esp:esp_107
	Mem116[esp_107 - 4<i32>:word32] = eax_109 + 0x40<32>
	fprintf(Mem116[esp_107 - 4<i32>:(ptr32 FILE)], Mem116[esp_107:(ptr32 charconst )], 0<32>)
	Mem119[esp_107 - 8<i32>:word32] = 0x8DA66C<32>
	fn006E86F0(Mem119[esp_107 - 8<i32>:word32])
l007274D0:
	return 1<32>
l0072759B:
	return 0<32>
l007274CC:
	return 0xFFFFFFFF<32>
fn007274B0_exit:


word32 fn00727670(word32 eax, word32 ebx)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn007279E0
//      fn00728030
//      fn00728420
//      fn00729300
//      fn00729810
//      fn00729D20
//      fn00729F50
//      fn0072A350
//      fn0072AC20
//      fn0072B360
//      fn0072B830
//      fn0072BBE0
//      fn0072C510
//      fn0072CA10
//      fn0072CC90
//      fn0072CEE0
//      fn0072D130
//      fn0072D3D0
//      fn0072D830
//      fn0072D920
//      fn0072DD60
// MayUse:  eax:[0..31] ebx:[0..31]
// LiveOut: eax
// Trashed: SCZO bl eax ecx edx Top
// Preserved: edi esi esp
fn00727670_entry:
	byte bl_35 = SLICE(ebx, byte, 0)
l00727670:
	word32 ecx_106
	word32 eax_15 = fn00727420(Mem9[Mem9[eax + 0x18<32>:word32] + 0x28<32>:word32], out ecx_106)
	branch eax_15 >= 0<32> l00727688
l00727688:
	word32 esi_24 = Mem9[Mem9[eax + 0x18<32>:word32] + 0x28<32>:word32]
	word32 eax_26 = Mem9[esi_24 + 0xC<32>:word32]
	Mem30[eax_26 + eax_15 * 0x14<32>:word32] = Mem9[eax_26 + eax_15 * 0x14<32>:word32] & 0xFFFFFFFB<32>
	Mem36[eax_26 + eax_15 * 0x14<32> + 4<32>:byte] = bl_35
	branch ebx != 0x53<32> l007276AA
l007276A6:
	Mem39[esi_24 + 0x14<32>:word32] = Mem36[esi_24 + 0x14<32>:word32] | 2<32>
l007276AA:
	word32 edx_44 = Mem43[eax + 0x18<32>:word32]
	branch Mem43[edx_44 + 0xDC<32>:word32] != 0<32> l007276D4
l007276BB:
	Mem48[edx_44 + 0xDC<32>:word32] = 1<32>
	word32 edi_49 = Mem48[eax + 0x18<32>:word32]
	Mem54[Mem48[Mem48[edi_49 + 0x28<32>:word32] + 0xC<32>:word32] + 0x10<32> + eax_15 * 0x14<32>:word32] = Mem48[edi_49 + 0xD8<32>:word32]
l007276D4:
	return 1<32>
l00727683:
	return 0<32>
fn00727670_exit:


word32 fn007276E0(word32 eax, word32 dwArg04, ptr32 & ecxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00728FB0
//      fn00728FE0
//      fn00729040
//      fn00729300
//      fn0072A350
//      fn0072A740
//      fn0072A940
//      fn0072AC20
//      fn0072B040
//      fn0072BB20
//      fn0072BD40
//      fn0072C160
//      fn0072C510
// MayUse:  eax:[0..31] Stack +0004:[0..31]
// LiveOut: eax ecx
// Trashed: SCZO eax ebp ebx ecx edi edx esi FPU -1 Top
// Preserved: esp
fn007276E0_entry:
l007276E0:
	word32 eax_62
	word32 ecx_356
	word32 eax_14 = Mem11[eax + 4<32>:word32]
	branch eax_14 == 0xA1E4B8<32> l0072770D
l007276F5:
	word32 edx_463
	word32 ecx_462
	branch fn006D5670(eax_14, 0xA1E4B8<32>, out ecx_462, out edx_463) != 0<32> l0072770D
l0072770D:
	real64 rLoc1_328 = Mem35[eax + 8<32>:real64]
	byte bLoc01_331 = SLICE(rLoc1_328, byte, 56)
	branch SLICE(rLoc1_328, byte, 0) != 0<8> l00727738
l0072771B:
	branch bLoc01_331 != 0<8> l00727738
l00727738:
l00727722:
	word32 esi_467
	word32 edx_466
	eax_62 = fn006DFF80(3<32>, out ecx_356, out edx_466, out esi_467)
l00727707:
l0072773C:
	word32 esi_465
	word32 edx_464
	eax_62 = fn006DFF80(2<32>, out ecx_356, out edx_464, out esi_465)
l00727747:
	branch eax_62 != 0<32> l00727756
l00727756:
	word32 ecx_133
	word32 esp_171
	word32 ebx_136
	word32 esp_130
	word32 edx_469
	word32 ecx_468
	word32 eax_119 = fn006FBCC0(dwArg04, dwArg04, out ecx_468, out edx_469)
	branch eax_119 != 0<32> l007277E5
l007277E5:
	esp_130 = fp - 0x1C<32>
	word32 edx_470
	word32 edi_472
	word32 esi_471
	ebx_136 = fn007051A0(edi, eax_119, out ecx_133, out edx_470, out esi_471, out edi_472)
l00727766:
	word32 eax_140 = fn006FCF20(dwArg04)
	ebx_136 = eax_140
	word32 edx_473
	word32 eax_149 = fn007050A0(eax_140, out ecx_133, out edx_473)
	branch eax_149 != 0<32> l00727799
l00727799:
	word32 edi_476
	word32 ebx_475
	word32 edx_474
	word32 eax_166 = fn006FBD90(dwArg04, dwArg04, eax_149, out ecx_133, out edx_474, out ebx_475, out edi_476)
	esp_171 = fp - 0x18<32>
	branch eax_166 >= 0<32> l007277D5
l007277D5:
	word32 v19_175 = Mem164[eax_149:word32] + 0xFFFFFFFF<32>
	Mem176[eax_149:word32] = v19_175
	branch v19_175 != 0<32> l007277F0
l007277DA:
	word32 eax_179 = Mem176[eax_149 + 4<32>:word32]
	call Mem176[eax_179 + 0x18<32>:word32] (retsize: 4;)
		uses: eax:eax_179,Stack +0004:eax_149,Stack +0008:dwArg04,Stack +0024:dwArg04
		defs: ecx:ecx_186,esp:esp_183
l007277ED:
	esp_171 = esp_130 + 4<32>
l007277F0:
	word32 v18_196 = Mem194[eax_62:word32] + 0xFFFFFFFF<32>
	Mem197[eax_62:word32] = v18_196
	branch v18_196 != 0<32> l00727801
l007277F5:
	word32 edx_200 = Mem197[eax_62 + 4<32>:word32]
	word32 eax_201 = Mem197[edx_200 + 0x18<32>:word32]
	Mem204[esp_171 - 4<i32>:word32] = eax_62
	call eax_201 (retsize: 4;)
		uses: eax:eax_201,edx:edx_200,Stack +0008:dwArg04
		defs: ecx:ecx_216
l00727801:
	ecxOut = ecx_133
	return ebx_136
l007277A8:
	word32 v17_235 = Mem164[eax_62:word32] + 0xFFFFFFFF<32>
	Mem236[eax_62:word32] = v17_235
	branch v17_235 != 0<32> l007277B9
l007277AD:
	word32 edx_239 = Mem236[eax_62 + 4<32>:word32]
	word32 eax_240 = Mem236[edx_239 + 0x18<32>:word32]
	word32 esp_243
	call eax_240 (retsize: 4;)
		uses: eax:eax_240,edx:edx_239,Stack +0004:eax_92,Stack +0008:dwArg04,Stack +0024:dwArg04
		defs: eax:eax_244,ecx:ecx_246,esp:esp_243
	esp_171 = esp_243 + 4<32>
l007277B9:
	word32 v20_253 = Mem252[eax_149:word32] + 0xFFFFFFFF<32>
	Mem254[eax_149:word32] = v20_253
	branch v20_253 != 0<32> l007277CA
l007277BE:
	word32 ecx_257 = Mem254[eax_149 + 4<32>:word32]
	word32 edx_258 = Mem254[ecx_257 + 0x18<32>:word32]
	Mem261[esp_171 - 4<i32>:word32] = eax_149
	call edx_258 (retsize: 4;)
		uses: eax:eax_264,ecx:ecx_257,Stack +0008:dwArg04
		defs: ecx:ecx_270
l0072777D:
	word32 v15_275 = Mem147[eax_62:word32] + 0xFFFFFFFF<32>
	Mem276[eax_62:word32] = v15_275
	branch v15_275 != 0<32> l007277CA
l007277CA:
	ecxOut = ecx_133
	return 0xFFFFFFFF<32>
l00727782:
	word32 eax_293 = Mem276[eax_62 + 4<32>:word32]
	word32 ecx_300
	call Mem276[eax_293 + 0x18<32>:word32] (retsize: 4;)
		uses: eax:eax_293,Stack +0004:eax_92,Stack +0008:dwArg04,Stack +0024:dwArg04
		defs: ecx:ecx_300
	ecxOut = ecx_300
	return 0xFFFFFFFF<32>
l0072774D:
	ecxOut = ecx_356
	return 0xFFFFFFFF<32>
fn007276E0_exit:


word32 fn00727810(word32 eax, byte bArg04, word32 dwArg08, ptr32 & ecxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00727EF0
//      fn00727F90
//      fn00728030
//      fn00728420
//      fn00728FB0
//      fn00728FE0
//      fn00729040
//      fn00729300
//      fn00729810
//      fn00729D20
//      fn00729F50
//      fn0072A350
//      fn0072A740
//      fn0072A940
//      fn0072AC20
//      fn0072B040
//      fn0072B360
//      fn0072BB20
//      fn0072BBE0
//      fn0072BD40
//      fn0072BDC0
//      fn0072C510
//      fn0072D3D0
//      fn0072D830
//      fn0072D920
//      fn0072DD60
// MayUse:  eax:[0..31] Stack +0004:[0..7] Stack +0008:[0..31]
// LiveOut: eax ecx
// Trashed: SCZO eax ecx edx Top
// Preserved: edi esi esp
fn00727810_entry:
l00727810:
	word32 ecx_17
	word32 eax_15 = fn00727420(Mem9[Mem9[eax + 0x18<32>:word32] + 0x28<32>:word32], out ecx_17)
	branch eax_15 >= 0<32> l00727828
l00727828:
	word32 eax_26 = Mem9[Mem9[Mem9[eax + 0x18<32>:word32] + 0x28<32>:word32] + 0xC<32>:word32]
	Mem31[eax_26 + eax_15 * 0x14<32>:word32] = Mem9[eax_26 + eax_15 * 0x14<32>:word32] | 4<32>
	word32 eax_33 = eax_26 + eax_15 * 0x14<32>
	Mem34[eax_33 + 4<32>:byte] = bArg04
	Mem36[eax_33 + 8<32>:word32] = dwArg08
	word32 edx_37 = Mem36[eax + 0x18<32>:word32]
	branch Mem36[edx_37 + 0xDC<32>:word32] != 0<32> l00727876
l0072785D:
	Mem41[edx_37 + 0xDC<32>:word32] = 1<32>
	word32 edi_42 = Mem41[eax + 0x18<32>:word32]
	Mem46[Mem41[Mem41[edi_42 + 0x28<32>:word32] + 0xC<32>:word32] + 0x10<32> + eax_15 * 0x14<32>:word32] = Mem41[edi_42 + 0xD8<32>:word32]
l00727876:
	ecxOut = eax_15 * 0x14<32>
	return 1<32>
l00727823:
	ecxOut = ecx_17
	return 0<32>
fn00727810_exit:


word32 fn00727880(word32 eax, byte bArg04, word32 dwArg08, word32 dwArg0C)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn007279E0
//      fn00728030
//      fn00729300
//      fn00729810
//      fn00729F50
//      fn0072CC90
//      fn0072CEE0
//      fn0072D130
//      fn0072D3D0
//      fn0072D830
//      fn0072D920
//      fn0072DD60
// MayUse:  eax:[0..31] Stack +0004:[0..7] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx edx Top
// Preserved: edi esi esp
fn00727880_entry:
l00727880:
	word32 ecx_112
	word32 eax_15 = fn00727420(Mem9[Mem9[eax + 0x18<32>:word32] + 0x28<32>:word32], out ecx_112)
	branch eax_15 >= 0<32> l00727898
l00727898:
	word32 edx_40
	word32 eax_26 = Mem9[Mem9[Mem9[eax + 0x18<32>:word32] + 0x28<32>:word32] + 0xC<32>:word32]
	Mem31[eax_26 + eax_15 * 0x14<32>:word32] = Mem9[eax_26 + eax_15 * 0x14<32>:word32] | 4<32>
	word32 eax_33 = eax_26 + eax_15 * 0x14<32>
	Mem35[eax_33 + 4<32>:byte] = bArg04
	Mem37[eax_33 + 0xC<32>:word32] = dwArg08
	word32 edx_38 = Mem37[eax_33:word32]
	branch dwArg0C == 0<32> l007278CA
l007278CA:
	edx_40 = edx_38 | 2<32>
l007278C5:
	edx_40 = edx_38 | 1<32>
l007278CD:
	Mem48[eax_33:word32] = edx_40
	word32 eax_50 = Mem48[eax + 0x18<32>:word32]
	branch Mem48[eax_50 + 0xDC<32>:word32] != 0<32> l007278FA
l007278DB:
	Mem54[eax_50 + 0xDC<32>:word32] = 1<32>
	word32 edi_55 = Mem54[eax + 0x18<32>:word32]
	Mem60[Mem54[Mem54[edi_55 + 0x28<32>:word32] + 0xC<32>:word32] + 0x10<32> + eax_15 * 0x14<32>:word32] = Mem54[edi_55 + 0xD8<32>:word32]
l007278FA:
	return 1<32>
l00727893:
	return 0<32>
fn00727880_exit:


word32 fn00727910(word32 ecx, word32 ebx, word32 ebp, word32 esi, word32 edi, selector es, selector ds)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00729040
// MayUse:  cs:[0..15] ds:[0..15] ebp:[0..31] ebx:[0..31] ecx:[0..31] edi:[0..31] es:[0..15] esi:[0..31] fs:[0..15] gs:[0..15] ss:[0..15]
// LiveOut: eax
// Trashed: SCZDOP eax ecx edx Top
// Preserved: ebx edi esp
fn00727910_entry:
l00727910:
	word32 eax_7 = Mem0[0x00A14188<p32>:word32] ^ fp - 0x164<32>
	word32 dwLoc016C_193 = edi
	word32 ecx_222
	word32 edx_129
	word32 eax_159 = fn007475E0(Mem15[Mem10[esi + 0x18<32>:word32]:word32], out ecx_222, out edx_129)
	branch eax_159 != 0<32> l007279C5
l00727941:
	word32 edx_37 = Mem25[esi + 0x18<32>:word32]
	word32 eax_38 = Mem25[edx_37 + 0xC<32>:word32]
	word32 edi_49
	word32 edx_224
	word32 eax_47 = fn006DDDB0(eax_38, edx_37, ecx, esi, eax_159, es, ds, eax_38, out edx_224, out edi_49)
	word32 edx_59 = Mem40[Mem40[esi + 0x18<32>:word32] + 0x10<32>:word32]
	word32 edi_69
	word32 edx_225
	fn006DDDB0(eax_47 + 0x14<32>, edx_59, ecx, esi, edi_49, es, ds, edx_59, out edx_225, out edi_69)
	word32 eax_83 = Mem82[esi + 0x18<32>:word32]
	word32 edx_85 = Mem82[Mem82[eax_83:word32] + 0xC<32>:word32]
	word32 edi_90
	word32 edx_226
	word32 eax_88 = fn006DDDB0(eax_83, edx_85, ecx, esi, edi_69, es, ds, edx_85, out edx_226, out edi_90)
	word32 edx_100 = Mem87[Mem87[esi + 0x18<32>:word32]:word32]
	word32 eax_109 = Mem108[edx_100 + 8<32>:word32]
	word32 edi_114
	word32 edx_227
	fn006DDDB0(eax_109, edx_100, ecx, esi, edi_90, es, ds, eax_109, out edx_227, out edi_114)
	edx_129 = Mem111[Mem111[esi + 0x18<32>:word32] + 4<32>:word32] + 0x14<32>
	fn00724FE0(fp - 0x154<32>, 0x15E<32>, 0x8DA698<32>)
	fn006E86F0(fp - 0x154<32>)
	dwLoc016C_193 = eax_88 + 0x14<32>
	eax_159 = edi_114
l007279C5:
	word32 ecx_223
	return fn00694B8E(eax_159, eax_7 ^ fp - 356<i32>, edx_129, ebx, ebp, esi, dwLoc016C_193, es, ds, ebx, out ecx_223)
fn00727910_exit:


word32 fn007279E0(word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0072B360
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn007279E0_entry:
l007279E0:
	word32 esi_11 = Mem10[dwArg04 + 0x18<32>:word32]
	word32 edx_312
	word32 ecx_311
	word32 eax_17 = fn00723860(0x20<32>, out ecx_311, out edx_312)
	branch eax_17 != 0<32> l00727A05
l00727A05:
	Mem32[eax_17:word32] = 0<32>
	Mem33[eax_17 + 4<32>:word32] = 0<32>
	Mem34[eax_17 + 8<32>:word32] = 0<32>
	Mem35[eax_17 + 0xC<32>:word32] = 0<32>
	Mem36[eax_17 + 0x10<32>:word32] = 0<32>
	Mem37[eax_17 + 0x14<32>:word32] = 0<32>
	Mem38[eax_17 + 0x18<32>:word32] = 0<32>
	Mem39[eax_17 + 0x1C<32>:word32] = 0<32>
	Mem41[eax_17:word32] = Mem39[esi_11 + 0x24<32>:word32]
	Mem45[esi_11 + 0x24<32>:word32] = eax_17
	word32 ebx_46 = Mem45[dwArg04 + 0x18<32>:word32]
	word32 edx_314
	word32 ecx_313
	word32 eax_49 = fn00723860(0x20<32>, out ecx_313, out edx_314)
	branch eax_49 != 0<32> l00727A46
l00727A46:
	Mem65[eax_49:word32] = 0<32>
	Mem66[eax_49 + 4<32>:word32] = 0<32>
	Mem67[eax_49 + 8<32>:word32] = 0<32>
	Mem68[eax_49 + 0xC<32>:word32] = 0<32>
	Mem69[eax_49 + 0x10<32>:word32] = 0<32>
	Mem70[eax_49 + 0x14<32>:word32] = 0<32>
	Mem71[eax_49 + 0x18<32>:word32] = 0<32>
	Mem72[eax_49 + 0x1C<32>:word32] = 0<32>
	Mem74[eax_49:word32] = Mem72[ebx_46 + 0x24<32>:word32]
	Mem75[ebx_46 + 0x24<32>:word32] = eax_49
	branch fn0072B360(dwArg04, Mem75[dwArg08 + 4<32>:word32]) == 0<32> l00727AF6
l00727A7C:
	branch fn00727880(dwArg04, 0x6F<32>, dwArg04, dwArg08) == 0<32> l00727AF6
l00727A8F:
	branch fn00727670(dwArg04, 1<32>) == 0<32> l00727AF6
l00727A9F:
	branch fn0072B360(dwArg04, dwArg04) == 0<32> l00727AF6
l00727AB4:
	branch fn00727880(dwArg04, 0x6E<32>, dwArg04, dwArg08) == 0<32> l00727AF6
l00727AC7:
	Mem154[Mem140[Mem140[dwArg04 + 0x18<32>:word32] + 0x28<32>:word32] + 0x10<32>:word32] = eax_49
	Mem157[Mem154[dwArg04 + 0x18<32>:word32] + 0x28<32>:word32] = eax_49
	branch fn00727670(dwArg04, 1<32>) == 0<32> l00727AF6
l00727AE1:
	branch fn0072B360(dwArg04, dwArg04) != 0<32> l00727AFD
l00727AFD:
	Mem185[Mem172[Mem172[dwArg04 + 0x18<32>:word32] + 0x28<32>:word32] + 0x10<32>:word32] = eax_17
	Mem190[Mem185[dwArg04 + 0x18<32>:word32] + 0x28<32>:word32] = eax_17
	return 1<32>
l00727AF6:
	return 0<32>
l00727A3A:
	word32 ecx_317
	word32 edx_318
	fn006E1210(out ecx_317, out edx_318)
	return 0<32>
l007279FA:
	word32 ecx_315
	word32 edx_316
	fn006E1210(out ecx_315, out edx_316)
	return 0<32>
fn007279E0_exit:


word32 fn00727B20(word32 eax)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0072B360
// MayUse:  eax:[0..31]
// LiveOut: eax
// Trashed: SCZO eax Top
// Preserved: esp
fn00727B20_entry:
l00727B20:
	branch eax >u 4<32> l00727B47
l00727B47:
	return 0<32>
l00727B28:
	switch (eax + 0xFFFFFFFF<32>) { l00727B2F l00727B35 l00727B3B l00727B41 }
l00727B41:
	return 0xB<32>
l00727B3B:
	return 0xA<32>
l00727B35:
	return 0xC<32>
l00727B2F:
	return 0xF<32>
fn00727B20_exit:


word32 fn00727B60(word32 eax, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0072B360
// MayUse:  eax:[0..31] Stack +0004:[0..31]
// LiveOut: eax
// Trashed: SCZO eax Top
// Preserved: esp
fn00727B60_entry:
l00727B60:
	branch eax >u 0xC<32> l00727BD0
l00727BD0:
	return 0<32>
l00727B68:
	switch (eax + 0xFFFFFFFF<32>) { l00727B6F l00727B75 l00727B7B l00727B81 l00727BA0 l00727BA6 l00727BAC l00727BB2 l00727BB8 l00727BBE l00727BC4 l00727BCA }
l00727BCA:
	return 0x1A<32>
l00727BC4:
	return 0x40<32>
l00727BBE:
	return 0x41<32>
l00727BB8:
	return 0x42<32>
l00727BB2:
	return 0x3F<32>
l00727BAC:
	return 0x3E<32>
l00727BA6:
	return 0x13<32>
l00727BA0:
	return 0x16<32>
l00727B81:
	word32 eax_21 = Mem0[dwArg04 + 0xC<32>:word32]
	branch eax_21 == 0<32> l00727B9A
l00727B8C:
	branch (Mem0[eax_21:word32] & 0x2000<32>) == 0<32> l00727B9A
l00727B9A:
	return 0x15<32>
l00727B94:
	return 0x1B<32>
l00727B7B:
	return 0x14<32>
l00727B75:
	return 0x18<32>
l00727B6F:
	return 0x17<32>
fn00727B60_exit:


void fn00727C10(word32 eax)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00728030
// MayUse:  eax:[0..31]
// LiveOut:
// Trashed: SCZO eax Top
// Preserved: esp
fn00727C10_entry:
l00727C10:
	branch eax >u 0xA<32> l00727C58
l00727C58:
	return
l00727C18:
	switch (eax + 0xFFFFFFFF<32>) { l00727C1F l00727C25 l00727C2B l00727C2E l00727C34 l00727C3A l00727C40 l00727C46 l00727C4C l00727C52 }
l00727C52:
	return
l00727C4C:
	return
l00727C46:
	return
l00727C40:
	return
l00727C3A:
	return
l00727C34:
	return
l00727C2E:
	return
l00727C2B:
	return
l00727C25:
	return
l00727C1F:
	return
fn00727C10_exit:


word32 fn00727C90(word32 ecx, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0072B830
// MayUse:  ecx:[0..31] Stack +0004:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx Top
// Preserved: esp
fn00727C90_entry:
l00727C90:
	branch ecx >u 0xC<32> l00727D00
l00727D00:
	word32 ecx_78
	word32 edx_79
	fn006E15D0(Mem9[0x00A18720<p32>:word32], 0x8DA6EC<32>, out ecx_78, out edx_79)
	return 0<32>
l00727C98:
	switch (ecx - 1<32>) { l00727C9F l00727CA5 l00727CAB l00727CB1 l00727CD0 l00727CD6 l00727CDC l00727CE2 l00727CE8 l00727CEE l00727CF4 l00727CFA }
l00727CFA:
	return 0x1C<32>
l00727CF4:
	return 0x4D<32>
l00727CEE:
	return 0x4E<32>
l00727CE8:
	return 0x4F<32>
l00727CE2:
	return 0x4C<32>
l00727CDC:
	return 0x4B<32>
l00727CD6:
	return 0x43<32>
l00727CD0:
	return 0x3B<32>
l00727CB1:
	word32 eax_34 = Mem0[dwArg04 + 0xC<32>:word32]
	branch eax_34 == 0<32> l00727CCA
l00727CBC:
	branch (Mem0[eax_34:word32] & 0x2000<32>) == 0<32> l00727CCA
l00727CCA:
	return 0x3A<32>
l00727CC4:
	return 0x1D<32>
l00727CAB:
	return 0x39<32>
l00727CA5:
	return 0x38<32>
l00727C9F:
	return 0x37<32>
fn00727C90_exit:


word32 fn00727D50(word32 eax, word32 edi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0072B360
// MayUse:  eax:[0..31] edi:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ebp ebx ecx edx esi Top
// Preserved: esp
fn00727D50_entry:
l00727D50:
	word32 esi_21 = Mem19[edi + 0x18<32>:word32]
	byte bLoc08_320 = SLICE(CONVERT(CONVERT(Mem7[eax + 4<32>:word32] != 1<32>, bool, int8), int8, uint32) + 0x6F<32>, byte, 0)
	word32 edx_324
	word32 ecx_323
	word32 eax_29 = fn00723860(0x20<32>, out ecx_323, out edx_324)
	branch eax_29 != 0<32> l00727D89
l00727D89:
	word32 eax_58
	Mem42[eax_29:word32] = 0<32>
	Mem43[eax_29 + 4<32>:word32] = 0<32>
	Mem44[eax_29 + 8<32>:word32] = 0<32>
	Mem45[eax_29 + 0xC<32>:word32] = 0<32>
	Mem46[eax_29 + 0x10<32>:word32] = 0<32>
	Mem47[eax_29 + 0x14<32>:word32] = 0<32>
	Mem48[eax_29 + 0x18<32>:word32] = 0<32>
	Mem49[eax_29 + 0x1C<32>:word32] = 0<32>
	Mem51[eax_29:word32] = Mem49[esi_21 + 0x24<32>:word32]
	Mem52[esi_21 + 0x24<32>:word32] = eax_29
	word32 ecx_53 = Mem52[eax + 8<32>:word32]
	branch ecx_53 != 0<32> l00727DBB
l00727DBB:
	eax_58 = Mem56[ecx_53:word32]
l00727DB7:
	eax_58 = 0<32>
l00727DBD:
	word32 eax_63 = eax_58 + 0xFFFFFFFF<32>
	word32 ebx_175 = 0<32>
	branch eax_63 <= 0<32> l00727EB5
l00727DCE:
	word32 dwLoc10_251 = ecx_53 + 4<32>
l00727DD5:
	branch fn0072B360(edi, Mem74[dwLoc10_251:word32]) == 0<32> l00727D80
l00727DE9:
	word32 ecx_327
	word32 eax_100 = fn00727420(Mem81[Mem81[edi + 0x18<32>:word32] + 0x28<32>:word32], out ecx_327)
	branch eax_100 < 0<32> l00727D80
l00727DF8:
	word32 eax_111 = Mem81[Mem81[Mem81[edi + 0x18<32>:word32] + 0x28<32>:word32] + 0xC<32>:word32]
	Mem116[eax_111 + eax_100 * 0x14<32>:word32] = Mem81[eax_111 + eax_100 * 0x14<32>:word32] | 6<32>
	word32 eax_118 = eax_111 + eax_100 * 0x14<32>
	Mem119[eax_118 + 4<32>:byte] = bLoc08_320
	Mem120[eax_118 + 0xC<32>:word32] = eax_29
	word32 eax_121 = Mem120[edi + 0x18<32>:word32]
	branch Mem120[eax_121 + 0xDC<32>:word32] != 0<32> l00727E43
l00727E24:
	Mem125[eax_121 + 0xDC<32>:word32] = 1<32>
	word32 eax_126 = Mem125[edi + 0x18<32>:word32]
	Mem130[Mem125[Mem125[eax_126 + 0x28<32>:word32] + 0xC<32>:word32] + 0x10<32> + eax_100 * 0x14<32>:word32] = Mem125[eax_126 + 0xD8<32>:word32]
l00727E43:
	word32 ecx_328
	word32 eax_141 = fn00727420(Mem132[Mem132[edi + 0x18<32>:word32] + 0x28<32>:word32], out ecx_328)
	branch eax_141 < 0<32> l00727D80
l00727E56:
	word32 eax_152 = Mem132[Mem132[Mem132[edi + 0x18<32>:word32] + 0x28<32>:word32] + 0xC<32>:word32]
	Mem156[eax_152 + eax_141 * 0x14<32>:word32] = Mem132[eax_152 + eax_141 * 0x14<32>:word32] & 0xFFFFFFFB<32>
	Mem159[eax_152 + eax_141 * 0x14<32> + 4<32>:byte] = 1<8>
	word32 edx_160 = Mem159[edi + 0x18<32>:word32]
	branch Mem159[edx_160 + 0xDC<32>:word32] != 0<32> l00727E9B
l00727E7C:
	Mem164[edx_160 + 0xDC<32>:word32] = 1<32>
	word32 eax_165 = Mem164[edi + 0x18<32>:word32]
	Mem169[Mem164[Mem164[eax_165 + 0x28<32>:word32] + 0xC<32>:word32] + 0x10<32> + eax_141 * 0x14<32>:word32] = Mem164[eax_165 + 0xD8<32>:word32]
l00727E9B:
	dwLoc10_251 = dwLoc10_251 + 4<32>
	ebx_175 = ebx_175 + 1<32>
	branch ebx_175 < eax_63 l00727DD5
l00727EAD:
l00727EB5:
	branch fn0072B360(edi, Mem182[ecx_53 + 4<32> + eax_63 * 4<32>:word32]) == 0<32> l00727D80
l00727ECB:
	Mem214[Mem191[Mem191[edi + 0x18<32>:word32] + 0x28<32>:word32] + 0x10<32>:word32] = eax_29
	Mem218[Mem214[edi + 0x18<32>:word32] + 0x28<32>:word32] = eax_29
	return 1<32>
l00727D7B:
	word32 ecx_325
	word32 edx_326
	fn006E1210(out ecx_325, out edx_326)
l00727D80:
	return 0<32>
fn00727D50_exit:


word32 fn00727EF0(word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0072B360
// MayUse:  Stack +0008:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn00727EF0_entry:
l00727EF0:
	word32 dwArg08_149
	word32 eax_8 = Mem6[dwArg08 + 4<32>:word32]
	word32 edi_12 = 0<32>
	branch eax_8 != 0<32> l00727F05
l00727F05:
	dwArg08_149 = Mem11[eax_8:word32]
l00727EFF:
	dwArg08_149 = 0<32>
l00727F0B:
	branch Mem19[dwArg08 + 8<32>:word32] != 2<32> l00727F2B
l00727F11:
	word32 ecx_237
	word32 eax_32 = fn00727810(dwArg04, 0x5C<32>, dwArg08_149, out ecx_237)
	branch eax_32 != 0<32> l00727F2B
l00727F2B:
	word32 ebx_48 = Mem46[dwArg08 + 4<32>:word32]
l00727F33:
	word32 eax_60
	branch ebx_48 != 0<32> l00727F3B
l00727F3B:
	eax_60 = Mem59[ebx_48:word32]
l00727F37:
	eax_60 = 0<32>
l00727F3D:
	branch edi_12 >= eax_60 l00727F5D
l00727F5D:
	branch Mem59[dwArg08 + 8<32>:word32] != 1<32> l00727F81
l00727F63:
	word32 ecx_238
	branch fn00727810(dwArg04, 0x67<32>, dwArg04, out ecx_238) != 0<32> l00727F81
l00727F81:
	return 1<32>
l00727F41:
	branch fn0072B360(dwArg04, dwArg04) == 0<32> l00727F7A
l00727F7A:
	return 0<32>
l00727F55:
	edi_12 = edi_12 + 1<32>
l00727F28:
	return eax_32
fn00727EF0_exit:


word32 fn00727F90(word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0072B360
// MayUse:  Stack +0008:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn00727F90_entry:
l00727F90:
	word32 dwArg08_149
	word32 eax_8 = Mem6[dwArg08 + 4<32>:word32]
	word32 edi_12 = 0<32>
	branch eax_8 != 0<32> l00727FA5
l00727FA5:
	dwArg08_149 = Mem11[eax_8:word32]
l00727F9F:
	dwArg08_149 = 0<32>
l00727FAB:
	branch Mem19[dwArg08 + 8<32>:word32] != 2<32> l00727FCB
l00727FB1:
	word32 ecx_237
	word32 eax_32 = fn00727810(dwArg04, 0x5C<32>, dwArg08_149, out ecx_237)
	branch eax_32 != 0<32> l00727FCB
l00727FCB:
	word32 ebx_48 = Mem46[dwArg08 + 4<32>:word32]
l00727FD3:
	word32 eax_60
	branch ebx_48 != 0<32> l00727FDB
l00727FDB:
	eax_60 = Mem59[ebx_48:word32]
l00727FD7:
	eax_60 = 0<32>
l00727FDD:
	branch edi_12 >= eax_60 l00727FFD
l00727FFD:
	branch Mem59[dwArg08 + 8<32>:word32] != 1<32> l00728021
l00728003:
	word32 ecx_238
	branch fn00727810(dwArg04, 0x66<32>, dwArg04, out ecx_238) != 0<32> l00728021
l00728021:
	return 1<32>
l00727FE1:
	branch fn0072B360(dwArg04, dwArg04) == 0<32> l0072801A
l0072801A:
	return 0<32>
l00727FF5:
	edi_12 = edi_12 + 1<32>
l00727FC8:
	return eax_32
fn00727F90_exit:


word32 fn00728030(word32 eax, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0072B360
// MayUse:  eax:[0..31] Stack +0004:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn00728030_entry:
l00728030:
	word32 esi_20 = 0<32>
	word32 dwLoc04_416 = 0<32>
	branch fn0072B360(eax, Mem14[dwArg04 + 4<32>:word32]) != 0<32> l0072805C
l0072805C:
	word32 dwLoc08_460
	word32 eax_36 = Mem25[dwArg04 + 8<32>:word32]
	branch eax_36 != 0<32> l00728069
l00728069:
	word32 eax_39 = Mem25[eax_36:word32]
	dwLoc08_460 = eax_39
	branch eax_39 <= 1<32> l0072809D
l0072809D:
	esi_20 = eax_39
l00728074:
	word32 eax_46 = fn00727340(eax)
	dwLoc04_416 = eax_46
	branch eax_46 == 0<32> l00728053
l00728083:
	branch fn0072B360(eax, dwArg04) == 0<32> l00728053
l00728097:
	esi_20 = eax_39
l00728063:
	dwLoc08_460 = 0<32>
l0072809F:
	word32 ebp_252 = 1<32>
	branch esi_20 <= 1<32> l007281F7
l007280AD:
l007280B0:
	word32 ecx_558
	word32 eax_92 = fn00727420(Mem84[Mem84[eax + 0x18<32>:word32] + 0x28<32>:word32], out ecx_558)
	branch eax_92 < 0<32> l0072827F
l007280C3:
	word32 eax_103 = Mem84[Mem84[Mem84[eax + 0x18<32>:word32] + 0x28<32>:word32] + 0xC<32>:word32]
	Mem107[eax_103 + eax_92 * 0x14<32>:word32] = Mem84[eax_103 + eax_92 * 0x14<32>:word32] & 0xFFFFFFFB<32>
	Mem110[eax_103 + eax_92 * 0x14<32> + 4<32>:byte] = 4<8>
	word32 edx_111 = Mem110[eax + 0x18<32>:word32]
	branch Mem110[edx_111 + 0xDC<32>:word32] != 0<32> l00728108
l007280E9:
	Mem115[edx_111 + 0xDC<32>:word32] = 1<32>
	word32 eax_116 = Mem115[eax + 0x18<32>:word32]
	Mem120[Mem115[Mem115[eax_116 + 0x28<32>:word32] + 0xC<32>:word32] + 0x10<32> + eax_92 * 0x14<32>:word32] = Mem115[eax_116 + 0xD8<32>:word32]
l00728108:
	word32 ecx_555
	word32 eax_131 = fn00727420(Mem122[Mem122[eax + 0x18<32>:word32] + 0x28<32>:word32], out ecx_555)
	branch eax_131 < 0<32> l0072827F
l0072811B:
	word32 eax_142 = Mem122[Mem122[Mem122[eax + 0x18<32>:word32] + 0x28<32>:word32] + 0xC<32>:word32]
	Mem146[eax_142 + eax_131 * 0x14<32>:word32] = Mem122[eax_142 + eax_131 * 0x14<32>:word32] & 0xFFFFFFFB<32>
	Mem149[eax_142 + eax_131 * 0x14<32> + 4<32>:byte] = 3<8>
	word32 edx_150 = Mem149[eax + 0x18<32>:word32]
	branch Mem149[edx_150 + 0xDC<32>:word32] != 0<32> l00728160
l00728141:
	Mem154[edx_150 + 0xDC<32>:word32] = 1<32>
	word32 eax_155 = Mem154[eax + 0x18<32>:word32]
	Mem159[Mem154[Mem154[eax_155 + 0x28<32>:word32] + 0xC<32>:word32] + 0x10<32> + eax_131 * 0x14<32>:word32] = Mem154[eax_155 + 0xD8<32>:word32]
l00728160:
	fn00727C10(Mem161[Mem161[dwArg04 + 8<32>:word32] + ebp_252 * 4<32>:word32])
	word32 ecx_556
	branch fn00727810(eax, 0x6A<32>, dwArg04, out ecx_556) == 0<32> l0072827F
l00728180:
	branch fn00727880(eax, 0x6F<32>, dwArg04, 0<32>) == 0<32> l0072827F
l0072819B:
	branch fn007273D0(eax) == 0<32> l0072827F
l007281A8:
	branch fn00727670(eax, 1<32>) == 0<32> l0072827F
l007281BC:
	branch ebp_252 >= dwLoc08_460 - 1<32> l007281E4
l007281C7:
	branch fn0072B360(eax, dwArg04) == 0<32> l0072827F
l007281E4:
	ebp_252 = ebp_252 + 1<32>
	branch ebp_252 < dwLoc08_460 l007280B0
l007281F3:
	esi_20 = dwLoc08_460
l007281F7:
	branch fn0072B360(eax, dwArg04) == 0<32> l0072827F
l0072820B:
	fn00727C10(Mem270[Mem270[dwArg04 + 8<32>:word32] + esi_20 * 4<32>:word32])
	word32 ecx_557
	branch fn00727810(eax, 0x6A<32>, dwArg04, out ecx_557) == 0<32> l0072827F
l00728227:
	branch esi_20 <= 1<32> l00728298
l0072822C:
	word32 eax_314 = fn00727340(eax)
	branch eax_314 == 0<32> l0072827F
l00728239:
	branch fn00727880(eax, 0x6E<32>, dwArg04, 0<32>) == 0<32> l0072827F
l0072824C:
	Mem343[Mem328[Mem328[eax + 0x18<32>:word32] + 0x28<32>:word32] + 0x10<32>:word32] = dwLoc04_416
	Mem345[Mem343[eax + 0x18<32>:word32] + 0x28<32>:word32] = dwLoc04_416
	branch fn00727670(eax, 2<32>) == 0<32> l0072827F
l0072826F:
	branch fn00727670(eax, 1<32>) != 0<32> l00728289
l00728289:
	Mem370[Mem345[Mem345[eax + 0x18<32>:word32] + 0x28<32>:word32] + 0x10<32>:word32] = eax_314
	Mem372[Mem370[eax + 0x18<32>:word32] + 0x28<32>:word32] = eax_314
l00728298:
	return 1<32>
l0072827F:
	return 0<32>
l00728053:
	return 0<32>
fn00728030_exit:


word32 fn007282B0(word32 ecx)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0072CC90
//      fn0072D130
// MayUse:  ecx:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx edx Top
// Preserved: edi esi esp
fn007282B0_entry:
l007282B0:
	word32 eax_6 = Mem0[ecx:word32]
	branch eax_6 == 0xD<32> l007282F6
l007282F6:
	word32 ecx_132
	word32 edx_133
	return fn006DEA90(Mem0[ecx + 4<32>:word32], out ecx_132, out edx_133)
l007282B7:
	branch eax_6 == 0xE<32> l007282E9
l007282E9:
	word32 ecx_134
	word32 edx_135
	return fn006DEA90(Mem0[ecx + 4<32>:word32], out ecx_134, out edx_135)
l007282BC:
	branch eax_6 != 0x11<32> l007282E5
l007282C1:
	word32 esi_47 = Mem42[ecx + 4<32>:word32] + 0x14<32>
	word32 edi_48 = 0x8DA718<32>
	word32 ecx_49 = 0xA<32>
	bool v16_81 = false
l007282D5:
	branch ecx_49 == 0<32> l007282D7
l007282D5_1:
	v16_81 = Mem46[esi_136:byte] != Mem46[edi_137:byte]
	esi_47 = esi_136 + 1<i32>
	edi_48 = edi_137 + 1<i32>
	ecx_49 = ecx_49 - 1<32>
	esi_136 = esi_47
	edi_137 = edi_48
	branch Mem46[esi_136:byte] != Mem46[edi_137:byte] l007282D5
l007282D7:
	branch v16_81 l007282E5
l007282E5:
	return 0xFFFFFFFF<32>
l007282DB:
	return CONVERT(CONVERT(Mem46[0x00A6DBF4<p32>:word32] == 0<32>, bool, int8), int8, uint32)
fn007282B0_exit:


word32 fn00728310(word32 eax, word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00729300
//      fn00729F50
//      fn0072CEE0
//      fn0072D130
//      fn0072D3D0
//      fn0072DD60
// MayUse:  eax:[0..31] Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx edx Top
// Preserved: esp
fn00728310_entry:
l00728310:
	word32 ecx_6 = Mem0[eax + 0x18<32>:word32]
	branch Mem0[ecx_6 + 0x30<32>:word32] < 0x14<32> l00728330
l00728330:
	word32 ecx_10 = Mem0[ecx_6 + 0x30<32>:word32]
	Mem12[ecx_6 + 0x30<32>:word32] = ecx_10 + 1<32>
	Mem14[ecx_6 + 0x34<32> + ecx_10 * 8<32>:word32] = dwArg04
	Mem16[ecx_6 + 0x38<32> + ecx_10 * 8<32>:word32] = dwArg08
	return 1<32>
l00728319:
	word32 ecx_55
	word32 edx_56
	fn006E0F80(Mem0[0x00A18720<p32>:word32], 0x8DA724<32>, out ecx_55, out edx_56)
	return 0<32>
fn00728310_exit:


word32 fn00728360(word32 eax, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00729510
//      fn00729810
//      fn00729D20
//      fn0072A740
//      fn0072A940
//      fn0072AC20
//      fn0072B360
//      fn0072B830
//      fn0072BF10
//      fn0072C160
//      fn0072C510
//      fn0072D3D0
//      fn0072D920
//      fn0072DD60
// MayUse:  eax:[0..31] Stack +0004:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx edx Top
// Preserved: ebx edi esi esp
fn00728360_entry:
l00728360:
	word32 edx_17 = Mem12[eax:word32]
	word32 eax_26 = fn006E1AB0(edx_17, 0<32>, ebp, esi, eax, es, ds, edx_17, Mem12[Mem12[eax + 0x18<32>:word32] + 0xD8<32>:word32])
	word32 ebx_113 = 0<32>
	word32 esi_31 = eax_26
	branch eax_26 != 0<32> l0072838E
l00728382:
	Mem37[0x00A163B8<p32>:word32] = Mem21[0x00A163B8<p32>:word32] + 1<32>
	esi_31 = 0xA163B8<32>
l0072838E:
	word32 eax_117
	word32 edx_247
	word32 esi_248
	word32 eax_60 = fn006EA200(out edx_247, out esi_248)
	eax_117 = eax_60
	branch eax_60 == 0<32> l007283DD
l007283B4:
	word32 edx_249
	word32 esi_250
	eax_117 = fn006EA200(out edx_249, out esi_250)
	ebx_113 = eax_117
	branch eax_117 == 0<32> l007283DD
l007283CD:
	word32 ecx_251
	word32 edx_252
	eax_117 = fn006E0E90(Mem76[0x00A178F4<p32>:word32], eax_117, out ecx_251, out edx_252)
l007283DD:
	word32 v14_104 = Mem103[esi_31:word32] + 0xFFFFFFFF<32>
	Mem105[esi_31:word32] = v14_104
	word32 esp_110 = fp - 0xC<32>
	branch v14_104 != 0<32> l007283EE
l007283E2:
	word32 edx_108 = Mem105[esi_31 + 4<32>:word32]
	word32 eax_109 = Mem105[edx_108 + 0x18<32>:word32]
	word32 esp_116
	call eax_109 (retsize: 4;)
		uses: eax:eax_109,edx:edx_108,Stack +0004:esi_47,Stack +0018:dwArg04
		defs: eax:eax_117,esp:esp_116
	esp_110 = esp_116 + 4<32>
l007283EE:
	branch eax_60 == 0<32> l00728403
l007283F2:
	word32 v15_129 = Mem128[eax_60:word32] + 0xFFFFFFFF<32>
	Mem130[eax_60:word32] = v15_129
	branch v15_129 != 0<32> l00728403
l007283F7:
	word32 ecx_133 = Mem130[eax_60 + 4<32>:word32]
	word32 edx_134 = Mem130[ecx_133 + 0x18<32>:word32]
	Mem137[esp_110 - 4<i32>:word32] = eax_60
	word32 esp_143
	call edx_134 (retsize: 4;)
		uses: eax:eax_140,ecx:ecx_133,Stack +0008:dwArg04
		defs: esp:esp_143
	esp_110 = esp_143 + 4<32>
l00728403:
	branch ebx_113 == 0<32> l00728418
l00728407:
	word32 v16_156 = Mem155[ebx_113:word32] + 0xFFFFFFFF<32>
	Mem157[ebx_113:word32] = v16_156
	branch v16_156 != 0<32> l00728418
l0072840C:
	word32 eax_160 = Mem157[ebx_113 + 4<32>:word32]
	word32 ecx_161 = Mem157[eax_160 + 0x18<32>:word32]
	Mem164[esp_110 - 4<i32>:word32] = ebx_113
	call ecx_161 (retsize: 4;)
		uses: eax:eax_160,Stack +0008:dwArg04
l00728418:
	return 0<32>
fn00728360_exit:


word32 fn00728420(word32 ecx)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0072BDC0
// MayUse:  ecx:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ebx ecx esi Top
// Preserved: esp
fn00728420_entry:
l00728420:
	word32 esi_33 = 0<32>
	branch ecx >u 6<32> l00728437
l0072842B:
	switch (ecx - 1<32>) { l00728432 l00728452 l00728459 l00728432 l00728452 l00728460 }
l00728460:
	word32 edx_162
	word32 ecx_161
	fn006E15D0(Mem14[0x00A18720<p32>:word32], 0x8DA758<32>, out ecx_161, out edx_162)
	return 0<32>
l00728459:
	esi_33 = 0x3D<32>
l00728452:
	esi_33 = 0x3C<32>
l00728432:
	esi_33 = 0x19<32>
l00728437:
	branch ecx != 4<32> l0072847E
l0072847E:
	branch ecx != 5<32> l00728496
l00728483:
	word32 eax_64 = fn00727670(edi, 3<32>)
	branch eax_64 != 0<32> l00728496
l00728493:
	return eax_64
l0072843D:
	word32 ecx_163
	word32 eax_81 = fn00727810(edi, 0x63<32>, 2<32>, out ecx_163)
	branch eax_81 != 0<32> l00728496
l00728496:
	return fn00727670(edi, esi_33) == 0<32>
l0072844F:
	return eax_81
fn00728420_exit:


word32 fn007284C0(word32 dwArg08, word32 dwArg0C)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn007284C0
//      fn0072A350
// MayUse:  Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut: ebp
// Trashed: SCZO eax ebp ebx ecx edi edx Top
// Preserved: esi esp
fn007284C0_entry:
l007284C0:
	word32 eax_8 = Mem6[dwArg08 + 0x14<32>:word32]
	branch (SLICE(eax_8, byte, 0) & 1<8>) != 0<8> l0072852F
l007284CC:
	Mem14[dwArg08 + 0x14<32>:word32] = eax_8 | 1<32>
	word32 eax_15 = Mem14[dwArg08 + 0x10<32>:word32]
	branch eax_15 == 0<32> l007284EE
l007284DF:
	fn007284C0(eax_15, dwArg0C)
l007284EE:
	word32 ebx_41 = 0<32>
	branch Mem43[dwArg08 + 4<32>:word32] <= 0<32> l00728520
l007284F5:
	word32 edi_51 = 0<32>
l007284F8:
	branch (Mem55[Mem55[dwArg08 + 0xC<32>:word32] + edi_51:byte] & 3<8>) == 0<8> l00728514
l00728502:
	fn007284C0(dwArg04, dwArg08)
l00728514:
	ebx_41 = ebx_41 + 1<32>
	edi_51 = edi_51 + 0x14<32>
	branch ebx_41 < Mem87[dwArg08 + 4<32>:word32] l007284F8
l0072851F:
l00728520:
	Mem100[Mem96[dwArg0C + 0xC<32>:word32] + Mem96[dwArg0C + 8<32>:word32] * 4<32>:word32] = dwArg08
	Mem102[dwArg0C + 8<32>:word32] = Mem100[dwArg0C + 8<32>:word32] + 1<32>
l0072852F:
	return ebp
fn007284C0_exit:


word32 fn00728540(word32 dwArg08, word32 dwArg0C, word32 dwArg10, ptr32 & ebpOut, ptr32 & esiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00728540
//      fn00728610
// MayUse:  Stack +0008:[0..31] Stack +000C:[0..31] Stack +0010:[0..31]
// LiveOut: eax ebp esi
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn00728540_entry:
l00728540:
	word32 eax_11 = Mem9[dwArg08 + 0x14<32>:word32]
	branch (SLICE(eax_11, byte, 0) & 1<8>) != 0<8> l007285F9
l00728552:
	word32 ebp_19 = dwArg0C
	branch Mem17[dwArg08 + 0x18<32>:word32] >= dwArg0C l007285F9
l007285F9:
	ebpOut = <invalid>
	esiOut = <invalid>
	return dwArg10
l0072855F:
	word32 dwArg08_180
	Mem32[dwArg08 + 0x14<32>:word32] = eax_11 | 1<32>
	Mem42[dwArg08 + 0x18<32>:word32] = dwArg0C
	word32 edi_121 = dwArg10
	word32 dwLoc04_179 = 1<32>
	dwArg08_180 = dwArg08
	branch Mem32[dwArg08 + 4<32>:word32] <= 0<32> l007285D4
l00728579:
	dwArg08_180 = 0<32>
l00728580:
	word32 esi_49 = Mem48[dwArg08 + 0xC<32>:word32]
	ebp_19 = ebp_19 + fn007274B0(Mem48[esi_49 + 8<32>:word32], CONVERT(Mem48[esi_49 + 4<32>:byte], byte, word32))
	branch ebp_19 <= edi_121 l0072859A
l00728597_1:
	edi_121 = ebp_19
l0072859A:
	branch (Mem48[esi_49:byte] & 3<8>) == 0<8> l007285BF
l0072859F:
	word32 ebp_277
	word32 esi_278
	edi_121 = fn00728540(Mem48[esi_49 + 0xC<32>:word32], 0<32>, dwArg0C, out ebp_277, out esi_278)
	byte al_96 = Mem85[esi_49 + 4<32>:byte]
	branch al_96 == 0x71<8> l007285ED
l007285BB:
	branch al_96 == 0x6E<8> l007285ED
l007285BF:
	dwLoc04_179 = dwLoc04_279 + 1<32>
	dwLoc04_279 = dwLoc04_179
	branch dwLoc04_279 + 0<32> < Mem106[dwArg08 + 4<32>:word32] l00728580
l007285D4:
	word32 eax_114 = Mem113[dwArg08 + 0x10<32>:word32]
	branch eax_114 == 0<32> l007285ED
l007285DB:
	word32 ebp_275
	word32 esi_276
	edi_121 = fn00728540(eax_114, dwArg08_180, dwArg0C, out ebp_275, out esi_276)
l007285ED:
	Mem151[dwArg08 + 0x14<32>:word32] = Mem149[dwArg08 + 0x14<32>:word32] & 0xFFFFFFFE<32>
	ebpOut = <invalid>
	esiOut = <invalid>
	return edi_121
fn00728540_exit:


word32 fn00728610(word32 edi, ptr32 & ebpOut, ptr32 & esiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00728BE0
// MayUse:  edi:[0..31]
// LiveOut: eax ebp esi
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn00728610_entry:
l00728610:
	word32 eax_12 = Mem0[Mem0[edi + 0x18<32>:word32] + 0x24<32>:word32]
	branch eax_12 == 0<32> l00728633
l0072861A:
l00728620:
	Mem15[eax_96 + 0x14<32>:word32] = Mem13[eax_96 + 0x14<32>:word32] & 0xFFFFFFFE<32>
	Mem18[eax_96 + 0x18<32>:word32] = 0x80000000<32>
	eax_12 = Mem18[eax_96:word32]
	eax_96 = eax_12
	branch eax_12 != 0<32> l00728620
l0072862F:
	branch eax_96 != 0<32> l00728636
l00728636:
	word32 ebp_38
	word32 esi_42
	word32 eax_37 = fn00728540(eax_96, 0<32>, 0<32>, out ebp_38, out esi_42)
	ebpOut = ebp_38
	esiOut = esi_42
	return eax_37
l00728633:
	ebpOut = ebp
	esiOut = esi
	return 0<32>
fn00728610_exit:


word32 fn00728650(word32 esi, word32 edi, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0072A350
// MayUse:  edi:[0..31] esi:[0..31] Stack +0004:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx edx Top
// Preserved: esp
fn00728650_entry:
l00728650:
	Mem8[esi:word32] = 0<32>
	Mem9[esi + 4<32>:word32] = 0<32>
	Mem10[esi + 8<32>:word32] = 0<32>
	Mem11[esi + 0xC<32>:word32] = 0<32>
	Mem12[esi + 0x10<32>:word32] = 0<32>
	Mem13[esi + 0x14<32>:word32] = 0<32>
	Mem14[esi + 0x1C<32>:word32] = 0<32>
	Mem20[esi + 0x18<32>:word32] = dwArg04
	word32 ecx_110
	word32 edx_111
	word32 eax_22 = fn006EC9B0(0<32>, 0x80<32>, out ecx_110, out edx_111)
	Mem29[esi:word32] = eax_22
	branch eax_22 == 0<32> l007286A2
l00728682:
	word32 ecx_112
	word32 edx_113
	word32 eax_36 = fn006EC9B0(0<32>, dwArg04, out ecx_112, out edx_113)
	Mem43[esi + 0x10<32>:word32] = eax_36
	branch eax_36 == 0<32> l007286A2
l00728695:
	branch edi <=u 0x3FFFFFFF<32> l007286A5
l007286A5:
	word32 ecx_114
	word32 edx_115
	word32 eax_51 = fn00723860(edi * 4<32>, out ecx_114, out edx_115)
	Mem61[esi + 0xC<32>:word32] = eax_51
	branch eax_51 == 0<32> l0072869D
l007286BC:
	return 1<32>
l0072869D:
	word32 ecx_116
	word32 edx_117
	fn006E1210(out ecx_116, out edx_117)
l007286A2:
	return 0<32>
fn00728650_exit:


word32 fn007286D0(word32 esi, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn007288B0
// MayUse:  esi:[0..31] Stack +0004:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ebp ebx ecx edi edx Top
// Preserved: esp
fn007286D0_entry:
l007286D0:
	word32 ecx_9 = Mem0[dwArg04 + 0x10<32>:word32] - Mem0[esi + 0x18<32>:word32]
	word32 ebx_102 = Mem12[esi + 4<32>:word32] - Mem12[esi + 0x1C<32>:word32]
	word32 dwLoc08_341 = ecx_9
	branch ebx_102 != 0<32> l00728702
l00728702:
	branch ebx_102 <= 0xFF<32> l007287A4
l0072870E:
	word32 edx_31 = SLICE(ebx_102 *s64 0x80808081<32>, word32, 32) + ebx_102
	word32 edi_35 = (edx_31 >> 7<32> >>u 0x1F<32>) + (edx_31 >> 7<32>)
	word32 eax_37 = Mem23[esi + 0x14<32>:word32] + edi_35 * 2<32>
	word32 edx_40 = Mem38[Mem38[esi + 0x10<32>:word32] + 8<32>:word32]
	branch eax_37 < edx_40 l00728774
l0072873A:
	branch edx_40 > 0x3FFFFFFF<32> l00728762
l00728742:
	branch edx_40 * 2<32> < eax_37 l0072874B
l00728749:
	eax_37 = edx_40 * 2<32>
l0072874B:
	word32 ecx_465
	word32 edx_466
	branch fn006EC4F0(esi + 0x10<32>, eax_37, out ecx_465, out edx_466) >= 0<32> l00728770
l00728770:
l00728774:
	word32 eax_80 = Mem76[esi + 0x14<32>:word32] + 0x14<32> + Mem76[esi + 0x10<32>:word32]
	branch edi_35 <= 0<32> l00728795
l00728782:
	word32 edx_81 = edi_35
l00728784:
	Mem83[eax_80:byte] = 0xFF<8>
	word32 eax_84 = eax_80 + 1<32>
	Mem85[eax_84:byte] = 0<8>
	eax_80 = eax_84 + 1<32>
	edx_81 = edx_81 - 1<32>
	branch edx_81 != 0<32> l00728784
l00728795:
	Mem106[esi + 0x14<32>:word32] = Mem94[esi + 0x14<32>:word32] + edi_35 * 2<32>
	ebx_102 = ebx_102 + edi_35 *s 0xFFFFFF01<32>
l00728759:
	return 0<32>
l007286EE:
	branch ecx_9 != 0<32> l007287A4
l007287A4:
	byte bl_198 = SLICE(ebx_102, byte, 0)
	byte cl_307 = SLICE(ecx_9, byte, 0)
	branch ecx_9 <= 0xFF<32> l0072884A
l007287B0:
	word32 edx_132 = SLICE(ecx_9 *s64 0x80808081<32>, word32, 32) + ecx_9
	word32 edi_136 = (edx_132 >> 7<32> >>u 0x1F<32>) + (edx_132 >> 7<32>)
	word32 eax_138 = Mem129[esi + 0x14<32>:word32] + edi_136 * 2<32>
	word32 edx_142 = Mem140[Mem140[esi + 0x10<32>:word32] + 8<32>:word32]
	branch eax_138 < edx_142 l00728807
l007287DC:
	branch edx_142 > 0x3FFFFFFF<32> l00728762
l00728762:
	word32 ecx_463
	word32 edx_464
	fn006E1210(out ecx_463, out edx_464)
l007287E8:
	branch edx_142 * 2<32> < eax_138 l007287F1
l007287EF:
l007287F1:
	word32 ecx_467
	word32 edx_468
	branch fn006EC4F0(esi + 0x10<32>, dwArg04, out ecx_467, out edx_468) < 0<32> l00728767
l00728803:
l00728807:
	word32 eax_196 = Mem192[esi + 0x14<32>:word32] + 0x14<32> + Mem192[esi + 0x10<32>:word32]
	Mem199[eax_196:byte] = bl_198
	Mem201[eax_196 + 1<32>:byte] = 0xFF<8>
	word32 eax_202 = eax_196 + 2<32>
	ebx_102 = 0<32>
	branch edi_136 <= 1<32> l00728837
l00728823:
	word32 edx_207 = edi_136 - 1<32>
l00728826:
	Mem209[eax_202:byte] = 0<8>
	word32 eax_210 = eax_202 + 1<32>
	Mem211[eax_210:byte] = 0xFF<8>
	eax_202 = eax_210 + 1<32>
	edx_207 = edx_207 - 1<32>
	branch edx_207 != 0<32> l00728826
l00728837:
	Mem232[esi + 0x14<32>:word32] = Mem220[esi + 0x14<32>:word32] + edi_136 * 2<32>
	word32 ecx_228 = ecx_9 + edi_136 *s 0xFFFFFF01<32>
	cl_307 = SLICE(ecx_228, byte, 0) (alias)
	dwLoc08_341 = ecx_228
l0072884A:
	byte bl_300 = SLICE(ebx_102, byte, 0)
	branch Mem236[esi + 0x14<32>:word32] + 2<32> < Mem236[Mem236[esi + 0x10<32>:word32] + 8<32>:word32] l00728875
l0072885D:
	word32 ecx_469
	word32 edx_470
	branch fn006EC4F0(esi + 0x10<32>, dwArg04, out ecx_469, out edx_470) < 0<32> l00728767
l00728767:
	return 0<32>
l00728871:
	cl_307 = SLICE(dwLoc08_341, byte, 0) (alias)
l00728875:
	word32 eax_289 = Mem288[esi + 0x14<32>:word32]
	word32 edx_292 = Mem288[esi + 0x10<32>:word32] + 0x14<32> + eax_289
	Mem297[esi + 0x14<32>:word32] = eax_289 + 2<32>
	branch ebx_102 == 0<32> l0072888C
l0072888C:
	Mem299[edx_292:byte] = 0<8>
l00728888:
	Mem301[edx_292:byte] = bl_300
l0072888F:
	Mem313[edx_292 + 1<32>:byte] = cl_307
	word32 edx_316 = Mem313[esi + 4<32>:word32]
	Mem321[esi + 0x18<32>:word32] = Mem313[dwArg04 + 0x10<32>:word32]
	Mem322[esi + 0x1C<32>:word32] = edx_316
	return 1<32>
l007286F6:
	return 1<32>
fn007286D0_exit:


word32 fn007288B0(word32 eax, word32 edi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0072A350
// MayUse:  eax:[0..31] edi:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ebp ebx ecx edx esi Top
// Preserved: esp
fn007288B0_entry:
l007288B0:
	word32 ebp_39
	word32 edx_17 = Mem13[Mem13[eax:word32] + 8<32>:word32]
	word32 ecx_113 = 0<32>
	word32 ebx_22 = 0<32>
	word32 eax_23 = Mem13[edi:word32] >>u 2<32> & 1<32>
	word32 dwLoc08_193 = 0<32>
	branch eax_23 != 0<32> l007288DA
l007288DA:
	ebp_39 = (CONVERT(CONVERT(Mem27[edi + 8<32>:word32] <= 0xFFFF<32>, bool, int8), int8, uint32) - 1<32> & 3<32>) + 3<32>
l007288D3:
	ebp_39 = 1<32>
l007288F5:
	branch eax_23 == 0<32> l00728907
l007288F9:
	word32 ebx_48 = Mem27[edi + 8<32>:word32]
	dwLoc08_193 = ebx_48
	ecx_113 = ebx_48
	ebx_22 = ebx_48 >> 0x10<32>
l00728907:
	byte bl_127 = SLICE(ebx_22, byte, 0)
	branch Mem55[edi + 0x10<32>:word32] == 0<32> l0072892B
l0072890D:
	branch fn007286D0(eax, edi) != 0<32> l00728923
l00728923:
	ecx_113 = dwLoc08_193
l0072892B:
	branch Mem83[eax + 4<32>:word32] + ebp_39 < edx_17 l00728951
l00728934:
	branch edx_17 > 0x3FFFFFFF<32> l0072891A
l0072893C:
	word32 edx_263
	word32 ecx_262
	branch fn006EC4F0(eax, edx_17 * 2<32>, out ecx_262, out edx_263) < 0<32> l0072891A
l0072894D:
	ecx_113 = dwLoc08_193
l00728951:
	word32 edx_116 = Mem115[eax + 4<32>:word32]
	word32 eax_118 = Mem115[eax:word32] + 0x14<32> + edx_116
	Mem122[eax + 4<32>:word32] = edx_116 + ebp_39
	branch ebp_39 != 6<32> l0072897D
l00728964:
	Mem124[eax_118:byte] = 0x8F<8>
	Mem128[eax_118 + 1<32>:byte] = bl_127
	Mem135[eax_118 + 2<32>:byte] = SLICE(ebx_22 >> 8<32>, byte, 0)
	eax_118 = eax_118 + 3<32>
	ecx_113 = ecx_113 & 0xFFFF<32>
l0072897D:
	Mem149[eax_118:byte] = Mem146[edi + 4<32>:byte]
	byte cl_154 = SLICE(ecx_113, byte, 0)
	word32 eax_150 = eax_118 + 1<32>
	branch (Mem149[edi:byte] & 4<8>) == 0<8> l00728992
l0072898A:
	Mem157[eax_150:byte] = cl_154
	Mem165[eax_150 + 1<32>:byte] = SLICE(ecx_113 >> 8<32>, byte, 0)
l00728992:
	return 1<32>
l0072891A:
	return 0<32>
fn007288B0_exit:


void fn007289A0(word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0072A350
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut:
// Trashed: SCZO eax ecx edx Top
// Preserved: ebp ebx edi esi esp
fn007289A0_entry:
l007289A0:
	word32 dwLoc04_208 = 0<32>
l007289B0:
	word32 ebp_22 = Mem20[dwArg04 + 8<32>:word32]
	word32 ebx_23 = 0<32>
	word32 ebp_24 = ebp_22 - 1<32>
	branch ebp_22 < 1<32> l00728A0C
l007289BE:
l007289C0:
	word32 edi_34 = Mem30[Mem30[dwArg04 + 0xC<32>:word32] + ebp_24 * 4<32>:word32]
	word32 edx_35 = 0<32>
	branch Mem30[edi_34 + 4<32>:word32] <= 0<32> l00728A02
l007289D1:
	word32 eax_38 = Mem30[edi_34 + 0xC<32>:word32]
	word32 esi_39 = Mem30[edi_34 + 4<32>:word32]
l007289D7:
	word32 ecx_53
	branch (Mem30[eax_38:byte] & 4<8>) != 0<8> l007289E3
l007289E3:
	ecx_53 = (CONVERT(CONVERT(Mem30[eax_38 + 8<32>:word32] <= 0xFFFF<32>, bool, int8), int8, uint32) - 1<32> & 3<32>) + 3<32>
l007289DC:
	ecx_53 = 1<32>
l007289F8:
	edx_35 = edx_35 + ecx_53
	eax_38 = eax_38 + 0x14<32>
	esi_39 = esi_39 - 1<32>
	branch esi_39 != 0<32> l007289D7
l00728A02:
	Mem74[edi_34 + 0x1C<32>:word32] = ebx_23
	ebx_23 = ebx_23 + edx_35
	ebp_24 = ebp_24 - 1<32>
	branch ebp_24 >= 0<32> l007289C0
l00728A0C:
	word32 esi_175 = Mem87[Mem87[dwArg08 + 0x18<32>:word32] + 0x24<32>:word32]
	word32 eax_181 = 0<32>
	word32 dwLoc08_218 = 0<32>
	branch esi_175 == 0<32> l00728A9A
l00728A20:
	word32 ebx_129 = Mem97[esi_175 + 0x1C<32>:word32]
	word32 ebp_161 = 0<32>
	branch Mem97[esi_175 + 4<32>:word32] <= 0<32> l00728A90
l00728A2A:
	word32 edi_102 = 0<32>
l00728A30:
	word32 edx_125
	word32 eax_109 = Mem108[esi_175 + 0xC<32>:word32]
	byte cl_113 = Mem108[eax_109 + edi_102:byte]
	word32 eax_112 = eax_109 + edi_102
	branch (cl_113 & 4<8>) != 0<8> l00728A44
l00728A44:
	edx_125 = (CONVERT(CONVERT(Mem108[eax_112 + 8<32>:word32] <= 0xFFFF<32>, bool, int8), int8, uint32) - 1<32> & 3<32>) + 3<32>
l00728A3D:
	edx_125 = 1<32>
l00728A59:
	word32 edx_143
	ebx_129 = ebx_129 + edx_125
	branch (cl_113 & 1<8>) == 0<8> l00728A68
l00728A68:
	branch (cl_113 & 2<8>) == 0<8> l00728A85
l00728A6D:
	edx_143 = Mem108[Mem108[eax_112 + 0xC<32>:word32] + 0x1C<32>:word32] - ebx_129
l00728A60:
	edx_143 = Mem108[Mem108[eax_112 + 0xC<32>:word32] + 0x1C<32>:word32]
l00728A75:
	Mem150[eax_112 + 8<32>:word32] = edx_143
	branch edx_143 <= 0xFFFF<32> l00728A85
l00728A80:
	dwLoc08_218 = dwLoc08_218 + 1<32>
l00728A85:
	ebp_161 = ebp_161 + 1<32>
	edi_102 = edi_102 + 0x14<32>
	branch ebp_161 < Mem170[esi_175 + 4<32>:word32] l00728A30
l00728A90:
	esi_175 = Mem174[esi_175:word32]
	branch esi_175 != 0<32> l00728A20
l00728A96:
	eax_181 = dwLoc08_218
l00728A9A:
	branch dwLoc04_208 == eax_181 l00728AA9
l00728AA9:
	return
fn007289A0_exit:
l00728AA0:
	dwLoc04_208 = eax_181


word32 fn00728AC0(word32 ebx, word32 edi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00728BE0
// MayUse:  ebx:[0..31] edi:[0..31]
// LiveOut: eax
// Trashed: SCZO ecx edx esi Top
// Preserved: esp
fn00728AC0_entry:
l00728AC0:
	word32 ecx_150
	word32 edx_151
	word32 eax_22 = fn006DFD20(fn006FCF20(edi), out ecx_150, out edx_151)
	branch eax_22 != 0<32> l00728AE6
l00728AE6:
	word32 edx_152
	branch fn006FC050(edi, fp - 4<32>, fp - 0xC<32>, fp - 8<32>, out edx_152) == 0<32> l00728B3D
l00728B02:
	word32 ecx_59 = Mem55[dwLoc0C + 0xC<32>:word32]
	word32 eax_58 = Mem55[dwLoc08 + 8<32>:word32]
	Mem62[ecx_59:word32] = Mem60[ecx_59:word32] + 1<32>
	Mem68[eax_22 + 0xC<32> + (eax_58 - ebx) * 4<32>:word32] = ecx_59
	dwLoc0C = ecx_59
	word32 edx_153
	branch fn006FC050(edi, fp - 4<32>, fp - 0xC<32>, fp - 8<32>, out edx_153) != 0<32> l00728B02
l00728B3D:
	return
l00728AE1:
	return
fn00728AC0_exit:


word32 fn00728B50(word32 edi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00728BE0
// MayUse:  edi:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx edx esi Top
// Preserved: esp
fn00728B50_entry:
l00728B50:
	word32 edx_6 = Mem0[edi + 0x18<32>:word32]
	word32 ecx_7 = Mem0[edx_6:word32]
	word32 eax_8 = Mem0[ecx_7 + 0x1C<32>:word32]
	word32 esi_106 = 0<32>
	branch eax_8 == 2<32> l00728B65
l00728B60:
	esi_106 = 2<32>
l00728B65:
	branch eax_8 != 0<32> l00728B82
l00728B69:
	branch Mem11[ecx_7 + 0x20<32>:word32] != eax_8 l00728B71
l00728B6E:
	esi_106 = esi_106 | 1<32>
l00728B71:
	byte al_31 = Mem11[ecx_7 + 0x24<32>:byte]
	branch (al_31 & 1<8>) == 0<8> l00728B7B
l00728B78:
	esi_106 = esi_106 | 0x10<32>
l00728B7B:
	branch (al_31 & 8<8>) == 0<8> l00728B82
l00728B7F:
	esi_106 = esi_106 | 0x20<32>
l00728B82:
	byte cl_52 = Mem11[ecx_7 + 0x24<32>:byte]
	branch (cl_52 & 0x10<8>) == 0<8> l00728B8D
l00728B8A:
	esi_106 = esi_106 | 4<32>
l00728B8D:
	branch (cl_52 & 0x20<8>) == 0<8> l00728B95
l00728B92:
	esi_106 = esi_106 | 8<32>
l00728B95:
	branch (cl_52 & 8<8>) == 0<8> l00728B9D
l00728B9A:
	esi_106 = esi_106 | 0x20<32>
l00728B9D:
	word32 esi_107 = esi_106 | Mem11[Mem11[edi + 0xC<32>:word32]:word32] & 0xE000<32>
	word32 eax_120 = fn006FCF20(Mem11[edx_6 + 0x18<32>:word32])
	branch eax_120 >= 0<32> l00728BBF
l00728BBF:
	branch eax_120 != 0<32> l00728BD9
l00728BC1:
	word32 eax_135 = fn006FCF20(Mem105[Mem105[edi + 0x18<32>:word32] + 0x14<32>:word32])
	branch eax_135 < 0<32> l00728BBA
l00728BD4:
	branch eax_135 != 0<32> l00728BD9
l00728BD6:
	esi_107 = esi_107 | 0x40<32>
l00728BD9:
	return esi_107
l00728BBA:
	return 0xFFFFFFFF<32>
fn00728B50_exit:


word32 fn00728BE0(word32 esi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0072A350
// MayUse:  esi:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn00728BE0_entry:
l00728BE0:
	word32 eax_27 = fn00728AC0(0<32>, Mem17[Mem0[esi + 0x18<32>:word32] + 8<32>:word32])
	branch eax_27 == 0<32> l00728E2F
l00728E2F:
	return
l00728C0F:
	word32 eax_47 = fn007035C0(eax_27)
	word32 v12_53 = Mem45[eax_27:word32] + 0xFFFFFFFF<32>
	Mem54[eax_27:word32] = v12_53
	word32 esp_52 = fp - 0x30<32>
	word32 ebp_270 = eax_47
	branch v12_53 != 0<32> l00728C2B
l00728C1F:
	word32 ecx_58 = Mem54[eax_27 + 4<32>:word32]
	word32 esp_62
	call Mem54[ecx_58 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_58,Stack +0004:eax_27
		defs: esp:esp_62
	esp_52 = esp_62 + 4<32>
l00728C2B:
	word32 eax_81 = fn00728AC0(0<32>, Mem71[Mem71[esi + 0x18<32>:word32] + 0xC<32>:word32])
	word32 edi_87 = Mem71[Mem71[esi + 0x18<32>:word32] + 0x10<32>:word32]
	Mem88[esp_52 + 0x14<32>:word32] = eax_81
	word32 eax_90 = fn00728AC0(0<32>, edi_87)
	Mem98[esp_52 + 0x10<32>:word32] = eax_90
	word32 ebx_113 = 0<32>
	word32 esp_107 = esp_52
	word32 edi_304 = eax_90
	branch eax_47 == 0<32> l00728D96
l00728C55:
	branch Mem98[esp_52 + 0x14<32>:word32] == 0<32> l00728D80
l00728C5F:
	branch eax_90 == 0<32> l00728D80
l00728C67:
	word32 eax_108 = fn00728AC0(0<32>, Mem98[Mem98[esi + 0x18<32>:word32] + 0x14<32>:word32])
	Mem116[esp_52 + 0xC<32>:word32] = eax_108
	esp_107 = esp_52
	ebx_113 = eax_108
	branch eax_108 == 0<32> l00728D7C
l00728C80:
	Mem119[esp_52 - 4<i32>:word32] = eax_108
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 esp_120 = esp_52 - 4<i32>
	word32 ecx_645
	word32 edx_646
	word32 eax_132 = fn00728AC0(fn006DFE20(stackArg4, out ecx_645, out edx_646), Mem119[Mem119[esi + 0x18<32>:word32] + 0x18<32>:word32])
	Mem139[esp_120 + 0x24<32>:word32] = eax_132
	esp_107 = esp_120 + 4<32>
	branch eax_132 == 0<32> l00728D78
l00728CA2:
	Mem143[esp_120:word32] = Mem139[esi:word32]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_648
	word32 edx_649
	word32 eax_145 = fn006ECAC0(stackArg4, out ecx_648, out edx_649)
	Mem153[esp_120 + 0x20<32>:word32] = eax_145
	esp_107 = esp_120 + 4<32>
	branch eax_145 == 0<32> l00728D78
l00728CB9:
	Mem158[esp_120:word32] = Mem153[Mem153[esi + 0x18<32>:word32] + 0x10<32>:word32]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	Mem168[esp_120 + 0x30<32>:word32] = fn006FCF20(stackArg4)
	word32 eax_170 = fn00728B50(esi)
	Mem177[esp_120 + 0x2C<32>:word32] = eax_170
	esp_107 = esp_120 + 4<32>
	branch eax_170 < 0<32> l00728D78
l00728CDF:
	word32 ebx_180 = Mem177[esp_120 + 0x38<32>:word32]
	word32 eax_181 = Mem177[ebx_180:word32]
	Mem183[esp_120:word32] = Mem177[esp_120 + 0x18<32>:word32]
	Mem185[esp_120 - 4<32>:word32] = eax_47
	Mem187[esp_120 - 8<32>:word32] = eax_181
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 eax_190 = fn00726930(Mem187[ebx_180 + 0x10<32>:word32], stackArg4)
	Mem198[esp_120 + 0x28<32>:word32] = eax_190
	esp_107 = esp_120 + 4<32>
	branch eax_190 == 0<32> l00728D78
l00728CFF:
	Mem201[esp_120:word32] = eax_47
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 eax_203 = fn006F4F00(stackArg4)
	esp_107 = esp_120 + 4<32>
	branch eax_203 == 0<32> l00728D78
l00728D0E:
	word32 v16_213 = Mem201[eax_47:word32] + 0xFFFFFFFF<32>
	Mem214[eax_47:word32] = v16_213
	branch v16_213 != 0<32> l00728D20
l00728D14:
	word32 ecx_217 = Mem214[eax_47 + 4<32>:word32]
	word32 edx_218 = Mem214[ecx_217 + 0x18<32>:word32]
	Mem220[esp_120:word32] = eax_47
	word32 esp_221
	call edx_218 (retsize: 4;)
		uses: ecx:ecx_217
		defs: esp:esp_221
	esp_107 = esp_221 + 4<32>
l00728D20:
	word32 eax_231 = Mem230[esi + 0x18<32>:word32]
	word32 edx_232 = Mem230[eax_231 + 0xD4<32>:word32]
	word32 eax_235 = Mem230[eax_231 + 4<32>:word32]
	word32 esp_237 = esp_107 - 4<i32>
	Mem238[esp_237:word32] = Mem230[ebx_180 + 0x10<32>:word32]
	word32 ecx_239 = Mem238[esp_237 + 0x20<32>:word32]
	Mem241[esp_237 - 4<i32>:word32] = edx_232
	word32 edx_242 = Mem241[esp_237 + 0x10<32>:word32]
	Mem244[esp_237 - 8<i32>:word32] = eax_235
	word32 eax_245 = Mem244[esp_237 + 0x24<32>:word32]
	Mem247[esp_237 - 12<i32>:word32] = ecx_239
	word32 ecx_248 = Mem247[esp_237 + 0x14<32>:word32]
	Mem250[esp_237 - 16<i32>:word32] = edx_242
	word32 edx_251 = Mem250[esp_237 + 0x18<32>:word32]
	Mem253[esp_237 - 20<i32>:word32] = eax_245
	word32 eax_254 = Mem253[esp_237 + 0x28<32>:word32]
	Mem256[esp_237 - 24<i32>:word32] = ecx_248
	word32 ecx_257 = Mem256[esp_237 + 0x2C<32>:word32]
	Mem259[esp_237 - 28<i32>:word32] = edx_251
	Mem262[esp_237 - 32<i32>:word32] = eax_203
	Mem264[esp_237 - 36<i32>:word32] = eax_254
	Mem267[esp_237 - 40<i32>:word32] = ecx_257
	word32 esi_275
	word32 eax_269 = fn00728610(esi, out ebp_270, out esi_275)
	word32 edx_280 = Mem267[esp_237 + 0x30<32>:word32]
	Mem282[esp_237 - 44<i32>:word32] = eax_269
	word32 ecx_284 = Mem282[Mem282[esi_275 + 0x18<32>:word32] + 0x20<32>:word32]
	Mem286[esp_237 - 48<i32>:word32] = edx_280
	Mem288[esp_237 - 52<i32>:word32] = ecx_284
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 stackArg8 = <invalid>
	word32 stackArg12 = <invalid>
	word32 stackArg16 = <invalid>
	word32 stackArg20 = <invalid>
	word32 stackArg24 = <invalid>
	word32 stackArg28 = <invalid>
	word32 stackArg32 = <invalid>
	word32 stackArg36 = <invalid>
	word32 stackArg40 = <invalid>
	word32 stackArg44 = <invalid>
	word32 stackArg48 = <invalid>
	word32 stackArg52 = <invalid>
	word32 stackArg56 = <invalid>
	word32 edx_667
	Mem298[esp_237 + 0x1C<32>:word32] = fn00734BB0(stackArg4, stackArg8, stackArg12, stackArg16, stackArg20, stackArg24, stackArg28, stackArg32, stackArg36, stackArg40, stackArg44, stackArg48, stackArg52, stackArg56, out edx_667)
	esp_107 = esp_237 + 4<32>
l00728D78:
	ebx_113 = Mem300[esp_107 + 0xC<32>:word32]
l00728D7C:
	edi_304 = Mem303[esp_107 + 0x10<32>:word32]
l00728D80:
	branch ebp_270 == 0<32> l00728D96
l00728D84:
	word32 v23_312 = Mem311[ebp_270:word32] + 0xFFFFFFFF<32>
	Mem313[ebp_270:word32] = v23_312
	branch v23_312 != 0<32> l00728D96
l00728D8A:
	word32 edx_316 = Mem313[ebp_270 + 4<32>:word32]
	word32 eax_317 = Mem313[edx_316 + 0x18<32>:word32]
	Mem320[esp_107 - 4<i32>:word32] = ebp_270
	word32 esp_330
	call eax_317 (retsize: 4;)
		uses: edx:edx_316
		defs: esp:esp_330
	esp_107 = esp_330 + 4<32>
l00728D96:
	word32 eax_340 = Mem339[esp_107 + 0x14<32>:word32]
	branch eax_340 == 0<32> l00728DAF
l00728D9E:
	word32 v17_344 = Mem339[eax_340:word32] + 0xFFFFFFFF<32>
	Mem345[eax_340:word32] = v17_344
	branch v17_344 != 0<32> l00728DAF
l00728DA3:
	word32 ecx_348 = Mem345[eax_340 + 4<32>:word32]
	word32 edx_349 = Mem345[ecx_348 + 0x18<32>:word32]
	Mem351[esp_107 - 4<i32>:word32] = eax_340
	word32 esp_357
	call edx_349 (retsize: 4;)
		uses: ecx:ecx_348
		defs: esp:esp_357
	esp_107 = esp_357 + 4<32>
l00728DAF:
	branch edi_304 == 0<32> l00728DC4
l00728DB3:
	word32 v18_370 = Mem369[edi_304:word32] + 0xFFFFFFFF<32>
	Mem371[edi_304:word32] = v18_370
	branch v18_370 != 0<32> l00728DC4
l00728DB8:
	word32 eax_374 = Mem371[edi_304 + 4<32>:word32]
	word32 ecx_375 = Mem371[eax_374 + 0x18<32>:word32]
	Mem378[esp_107 - 4<i32>:word32] = edi_304
	word32 esp_383
	call ecx_375 (retsize: 4;)
		uses: eax:eax_374
		defs: esp:esp_383
	esp_107 = esp_383 + 4<32>
l00728DC4:
	word32 eax_393 = Mem392[esp_107 + 0x1C<32>:word32]
	branch eax_393 == 0<32> l00728DDD
l00728DCC:
	word32 v19_397 = Mem392[eax_393:word32] + 0xFFFFFFFF<32>
	Mem398[eax_393:word32] = v19_397
	branch v19_397 != 0<32> l00728DDD
l00728DD1:
	word32 edx_401 = Mem398[eax_393 + 4<32>:word32]
	Mem403[esp_107 - 4<i32>:word32] = eax_393
	word32 esp_410
	call Mem403[edx_401 + 0x18<32>:word32] (retsize: 4;)
		uses: edx:edx_401
		defs: esp:esp_410
	esp_107 = esp_410 + 4<32>
l00728DDD:
	word32 eax_420 = Mem419[esp_107 + 0x20<32>:word32]
	branch eax_420 == 0<32> l00728DF6
l00728DE5:
	word32 v20_424 = Mem419[eax_420:word32] + 0xFFFFFFFF<32>
	Mem425[eax_420:word32] = v20_424
	branch v20_424 != 0<32> l00728DF6
l00728DEA:
	word32 ecx_428 = Mem425[eax_420 + 4<32>:word32]
	word32 edx_429 = Mem425[ecx_428 + 0x18<32>:word32]
	Mem431[esp_107 - 4<i32>:word32] = eax_420
	word32 esp_437
	call edx_429 (retsize: 4;)
		uses: ecx:ecx_428
		defs: esp:esp_437
	esp_107 = esp_437 + 4<32>
l00728DF6:
	branch ebx_113 == 0<32> l00728E0B
l00728DFA:
	word32 v21_450 = Mem449[ebx_113:word32] + 0xFFFFFFFF<32>
	Mem451[ebx_113:word32] = v21_450
	branch v21_450 != 0<32> l00728E0B
l00728DFF:
	word32 eax_454 = Mem451[ebx_113 + 4<32>:word32]
	word32 ecx_455 = Mem451[eax_454 + 0x18<32>:word32]
	Mem458[esp_107 - 4<i32>:word32] = ebx_113
	word32 esp_463
	call ecx_455 (retsize: 4;)
		uses: eax:eax_454
		defs: esp:esp_463
	esp_107 = esp_463 + 4<32>
l00728E0B:
	word32 eax_473 = Mem472[esp_107 + 0x24<32>:word32]
	branch eax_473 == 0<32> l00728E24
l00728E13:
	word32 v22_477 = Mem472[eax_473:word32] + 0xFFFFFFFF<32>
	Mem478[eax_473:word32] = v22_477
	branch v22_477 != 0<32> l00728E24
l00728E18:
	word32 edx_481 = Mem478[eax_473 + 4<32>:word32]
	Mem483[esp_107 - 4<i32>:word32] = eax_473
	call Mem483[edx_481 + 0x18<32>:word32] (retsize: 4;)
		uses: edx:edx_481
l00728E24:
	return
fn00728BE0_exit:


word32 fn00728E40(word32 eax, word32 ecx, word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0072A5D0
//      fn0072B360
//      fn0072C160
//      fn0072C510
//      fn0072E660
// MayUse:  eax:[0..31] ecx:[0..31] Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn00728E40_entry:
l00728E40:
	word32 ecx_391
	word32 edx_392
	word32 eax_22 = fn00723860(0xE0<32>, out ecx_391, out edx_392)
	branch eax_22 != 0<32> l00728E69
l00728E69:
	memset(eax_22, 0<32>, 0xE0<32>)
	Mem42[eax_22 + 0x20<32>:word32] = 0<32>
	word32 eax_49 = fn00747580(Mem42[ecx + 4<32>:word32], dwArg04)
	Mem56[eax_22:word32] = eax_49
	branch eax_49 == 0<32> l00728FA3
l00728E93:
	Mem59[eax:word32] = Mem56[eax:word32] + 1<32>
	word32 edx_61 = Mem59[eax_22:word32]
	Mem62[eax_22 + 4<32>:word32] = eax
	word32 eax_67 = fn00726260(Mem62[edx_61 + 0x14<32>:word32])
	word32 ecx_72 = Mem65[eax_22:word32]
	Mem77[eax_22 + 0x10<32>:word32] = eax_67
	word32 eax_84 = fn00726340(Mem77[ecx_72 + 0xC<32>:word32], 0<32>)
	Mem91[eax_22 + 0x14<32>:word32] = eax_84
	branch Mem82[eax_22 + 0x10<32>:word32] == 0<32> l00728FA3
l00728EC5:
	branch eax_84 == 0<32> l00728FA3
l00728ECD:
	word32 eax_114 = fn00726340(Mem104[Mem104[eax_22:word32] + 0xC<32>:word32], fn006FCF20(eax_84))
	Mem121[eax_22 + 0x18<32>:word32] = eax_114
	branch eax_114 == 0<32> l00728FA3
l00728EF4:
	Mem124[eax_22 + 0x24<32>:word32] = 0<32>
	Mem125[eax_22 + 0x2C<32>:word32] = 0<32>
	Mem126[eax_22 + 0x30<32>:word32] = 0<32>
	Mem127[eax_22 + 0xD4<32>:word32] = dwArg08
	Mem128[eax_22 + 0xD8<32>:word32] = 0<32>
	Mem129[eax_22 + 0xDC<32>:word32] = 0<32>
	word32 ecx_395
	word32 edx_396
	word32 eax_131 = fn006FDCC0(out ecx_395, out edx_396)
	Mem137[eax_22 + 8<32>:word32] = eax_131
	branch eax_131 == 0<32> l00728FA3
l00728F23:
	word32 ecx_397
	word32 edx_398
	word32 eax_140 = fn006FDCC0(out ecx_397, out edx_398)
	Mem146[eax_22 + 0xC<32>:word32] = eax_140
	branch eax_140 == 0<32> l00728FA3
l00728F2F:
	Mem148[eax_22 + 0x1C<32>:word32] = 0<32>
	word32 eax_149 = Mem148[ecx + 0x18<32>:word32]
	branch eax_149 == 0<32> l00728F7B
l00728F39:
	word32 eax_157 = fn0072E920(eax_149, dwArg04)
	branch eax_157 == 0<32> l00728FA3
l00728F49:
	word32 ecx_399
	word32 edx_400
	word32 eax_172 = fn006F2A10(Mem155[ecx + 0x1C<32>:word32], dwArg04, out ecx_399, out edx_400)
	branch eax_172 < 0<32> l00728F92
l00728F92:
	word32 v18_181 = Mem170[eax_157:word32] + 0xFFFFFFFF<32>
	Mem182[eax_157:word32] = v18_181
	branch v18_181 != 0<32> l00728FA3
l00728F97:
	word32 ecx_185 = Mem182[eax_157 + 4<32>:word32]
	call Mem182[ecx_185 + 0x18<32>:word32] (retsize: 4;)
		uses: eax:eax_172,ecx:ecx_185,Stack +0004:eax_157,Stack +0008:dwArg04,Stack +001C:dwArg04,Stack +0020:dwArg08
l00728FA3:
	fn00727170(eax_22)
	return 0<32>
l00728F5A:
	word32 v16_218 = Mem170[eax_157:word32] + 0xFFFFFFFF<32>
	Mem219[eax_157:word32] = v16_218
	branch v16_218 != 0<32> l00728F6B
l00728F5F:
	word32 ecx_222 = Mem219[eax_157 + 4<32>:word32]
	call Mem219[ecx_222 + 0x18<32>:word32] (retsize: 4;)
		uses: eax:eax_172,ecx:ecx_222,Stack +0004:eax_157,Stack +0008:dwArg04,Stack +001C:dwArg04,Stack +0020:dwArg08
l00728F6B:
	word32 eax_237 = Mem235[Mem235[ecx + 0x18<32>:word32] + 0x1C<32>:word32]
	Mem241[eax_22 + 0x1C<32>:word32] = eax_237
	branch eax_237 == 0<32> l00728F7B
l00728F78:
	Mem244[eax_237:word32] = Mem241[eax_237:word32] + 1<32>
l00728F7B:
	Mem249[ecx + 0x14<32>:word32] = Mem247[ecx + 0x14<32>:word32] + 1<32>
	Mem252[ecx + 0x18<32>:word32] = eax_22
	return fn00727380(ecx) == 0<32>
l00728E5D:
	word32 ecx_393
	word32 edx_394
	fn006E1210(out ecx_393, out edx_394)
	return 0<32>
fn00728E40_exit:


word32 fn00728FB0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0072B360
//      fn0072BDC0
//      fn0072D830
//      fn0072D920
//      fn0072DD60
// MayUse: 
// LiveOut: eax
// Trashed: SCZO eax ecx Top
// Preserved: esp
fn00728FB0_entry:
l00728FB0:
	word32 ecx_58
	word32 eax_9 = fn007276E0(dwArg0C, eax, out ecx_58)
	branch eax_9 >= 0<32> l00728FC4
l00728FC4:
	word32 ecx_59
	return fn00727810(dwArg04, dwArg08, eax_9, out ecx_59)
l00728FC1:
	return 0<32>
fn00728FB0_exit:


word32 fn00728FE0(word32 ebx, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0072A940
//      fn0072AC20
//      fn0072B360
// MayUse:  ebx:[0..31] Stack +0008:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx edi edx Top
// Preserved: esi esp
fn00728FE0_entry:
l00728FE0:
	word32 edx_137
	word32 eax_19 = fn00726150(Mem0[Mem0[ebx + 0x18<32>:word32] + 0x1C<32>:word32], eax, out edx_137)
	branch eax_19 != 0<32> l00728FF9
l00728FF9:
	word32 ecx_138
	word32 eax_37 = fn007276E0(eax_19, dwArg08, out ecx_138)
	word32 v13_41 = Mem32[eax_19:word32] + 0xFFFFFFFF<32>
	Mem42[eax_19:word32] = v13_41
	branch v13_41 != 0<32> l0072901C
l00729010:
	word32 ecx_46 = Mem42[eax_19 + 4<32>:word32]
	call Mem42[ecx_46 + 0x18<32>:word32] (retsize: 4;)
		uses: eax:eax_37,ecx:ecx_46,Stack +0004:eax_19,Stack +0018:dwArg08
l0072901C:
	branch eax_37 >= 0<32> l00729025
l00729025:
	word32 ecx_139
	return fn00727810(ebx, dwArg04, eax_37, out ecx_139)
l00729020:
	return 0<32>
l00728FF7:
	return eax_19
fn00728FE0_exit:


word32 fn00729040(word32 eax, selector es, selector ds, word32 dwArg04, ptr32 & ecxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0072A5D0
//      fn0072B360
//      fn0072C160
//      fn0072C510
// MayUse:  cs:[0..15] ds:[0..15] eax:[0..31] es:[0..15] fs:[0..15] gs:[0..15] ss:[0..15] Stack +0004:[0..31]
// LiveOut: eax ecx
// Trashed: SCZDOP eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn00729040_entry:
l00729040:
	word32 edi_11 = dwArg04
	word32 eax_15 = Mem10[Mem10[dwArg04 + 0x28<32>:word32] + 8<32>:word32]
	branch eax_15 != 0<32> l007290A7
l007290A7:
	word32 ecx_286
	word32 esp_25 = fp - 0x20<32>
	branch eax_15 <= 0<32> l007291EC
l007290B9:
l007290C1:
	word32 esp_115
	word32 edx_111
	word32 eax_109
	word32 esp_139
	word32 edi_35 = Mem31[Mem31[esp_25 + 0x10<32>:word32] + Mem31[edi_11 + 0x28<32>:word32]:word32]
	word32 eax_42 = fn00727910(edi_35, ebx, ebp, eax, edi_35, es, ds)
	Mem48[esp_25 + 0x1C<32>:word32] = eax_42
	branch eax_42 != 5<32> l00729117
l00729117:
	word32 ebp_52 = Mem48[Mem48[eax + 0x18<32>:word32] + 0x18<32>:word32]
	Mem54[esp_25 - 4<i32>:word32] = Mem48[edi_35 + 4<32>:word32]
	Mem56[esp_25 - 8<i32>:word32] = edi_35
	Mem58[esp_25 - 12<i32>:word32] = 2<32>
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 esp_59 = esp_25 - 12<i32>
	word32 esi_623
	word32 ecx_622
	eax_109 = fn006DFF80(stackArg4, out ecx_622, out edx_111, out esi_623)
	esp_115 = esp_59 + 0xC<32>
	branch eax_109 != 0<32> l00729137
l00729137:
	Mem71[esp_59 + 8<32>:word32] = eax_109
	Mem73[esp_59 + 4<32>:word32] = ebp_52
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_633
	eax_109 = fn006FBCC0(stackArg4, dwArg04, out ecx_633, out edx_111)
	word32 v17_81 = Mem73[eax_109:word32] + 0xFFFFFFFF<32>
	Mem82[eax_109:word32] = v17_81
	esp_115 = esp_59 + 0xC<32>
	ebp = eax_109
	branch v17_81 != 0<32> l00729154
l00729148:
	word32 edx_86 = Mem82[eax_109 + 4<32>:word32]
	word32 eax_87 = Mem82[edx_86 + 0x18<32>:word32]
	Mem89[esp_59 + 8<32>:word32] = eax_109
	call eax_87 (retsize: 4;)
		uses: eax:eax_87,edx:edx_86,Stack +0008:dwArg04
		defs: eax:eax_91,edx:edx_93,esp:esp_90
l00729132:
	ebx = 0xFFFFFFFF<32>
l007290DB:
	word32 ebp_101 = Mem48[Mem48[eax + 0x18<32>:word32] + 0x14<32>:word32]
	Mem103[esp_25 - 4<i32>:word32] = Mem48[edi_35 + 4<32>:word32]
	Mem105[esp_25 - 8<i32>:word32] = edi_35
	Mem107[esp_25 - 12<i32>:word32] = 2<32>
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 esp_108 = esp_25 - 12<i32>
	word32 ecx_625
	word32 esi_626
	eax_109 = fn006DFF80(stackArg4, out ecx_625, out edx_111, out esi_626)
	esp_115 = esp_108 + 0xC<32>
	branch eax_109 != 0<32> l007290FB
l007290FB:
	Mem120[esp_108 + 8<32>:word32] = eax_109
	Mem122[esp_108 + 4<32>:word32] = ebp_101
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_628
	eax_109 = fn006FBCC0(stackArg4, dwArg04, out ecx_628, out edx_111)
	word32 v16_130 = Mem122[eax_109:word32] + 0xFFFFFFFF<32>
	Mem131[eax_109:word32] = v16_130
	esp_115 = esp_108 + 0xC<32>
	ebp = eax_109
	branch v16_130 != 0<32> l00729154
l0072910C:
	word32 ecx_135 = Mem131[eax_109 + 4<32>:word32]
	word32 edx_136 = Mem131[ecx_135 + 0x18<32>:word32]
	Mem138[esp_108 + 8<32>:word32] = eax_109
	call edx_136 (retsize: 4;)
		uses: eax:eax_124,ecx:ecx_135,Stack +0008:dwArg04
		defs: eax:eax_140,edx:edx_142,esp:esp_139
l00729151:
	esp_115 = esp_139 + 4<32>
l00729154:
	branch ebp != 0<32> l0072915D
l0072915D:
	ebx = Mem153[ebp + 8<32>:word32]
	branch ebx != 0xFFFFFFFF<32> l007291B6
l00729158:
	ebx = 0xFFFFFFFF<32>
l007290F6:
	ebx = 0xFFFFFFFF<32>
l00729165:
	ebp = Mem168[esp_115 + 0x24<32>:word32]
	word32 esp_171 = esp_115 - 4<i32>
	Mem172[esp_171:word32] = Mem168[ebp + 0x28<32>:word32]
	word32 edi_212
	word32 edx_629
	word32 eax_210 = fn006DDDB0(eax_109, edx_111, ebx, eax, edi_35, es, ds, Mem172[esp_171:word32], out edx_629, out edi_212)
	word32 edx_221 = Mem172[ebp + 0x34<32>:word32]
	word32 ecx_222 = Mem172[eax + 0x18<32>:word32]
	Mem226[esp_171 + 4<32>:word32] = eax_210 + 0x14<32>
	word32 eax_227 = Mem226[esp_171 + 0x24<32>:word32]
	Mem230[esp_171:word32] = edx_221 + 0x14<32>
	word32 edx_231 = Mem230[ecx_222 + 4<32>:word32]
	Mem233[esp_171 - 4<i32>:word32] = 0xFFFFFFFF<32>
	Mem235[esp_171 - 8<i32>:word32] = eax_227
	Mem239[esp_171 - 12<i32>:word32] = edx_231 + 0x14<32>
	Mem241[esp_171 - 16<i32>:word32] = edi_212
	word32 edi_631
	word32 edx_630
	Mem257[esp_171 - 0xC<32>:word32] = fn006DDDB0(eax_227, edx_231 + 0x14<32>, ebx, eax, edi_212, es, ds, Mem241[esp_171 - 16<i32>:word32], out edx_630, out edi_631) + 0x14<32>
	Mem259[esp_171 - 0x10<32>:word32] = 0x8DA794<32>
	printf(Mem259[esp_171 - 0x10<32>:(ptr32 charconst )], Mem259[esp_171 - 0xC<32>:(ptr32 charconst )], Mem259[esp_171 - 8<32>:(ptr32 charconst )], Mem259[esp_171 - 4<32>:int32], Mem259[esp_171:int32], Mem259[esp_171 + 4<32>:(ptr32 charconst )], Mem259[esp_171 + 8<32>:(ptr32 charconst )])
	Mem262[esp_171 - 0x14<32>:word32] = 0x8DA77C<32>
	fn006E86F0(Mem262[esp_171 - 0x14<32>:word32])
	esp_115 = esp_171 + 0xC<32>
l007291B6:
	word32 esp_271 = esp_115 - 4<i32>
	Mem273[esp_271:word32] = ebx
	Mem275[esp_271 - 4<i32>:word32] = 0x87<32>
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	byte stackArg4 = <invalid>
	esp_25 = esp_271 + 4<32>
	branch fn00727810(eax, stackArg4, dwArg04, out ecx_286) == 0<32> l00729223
l007291CA:
	word32 eax_294 = Mem275[esp_271 + 0x18<32>:word32]
	Mem296[esp_271 + 0x14<32>:word32] = Mem275[esp_271 + 0x14<32>:word32] + 4<32>
	edi_11 = Mem296[esp_271 + 0x28<32>:word32]
	Mem300[esp_271 + 0x18<32>:word32] = eax_294 + 1<32>
	branch eax_294 + 1<32> < Mem296[esp_271 + 0x1C<32>:word32] l007290C1
l007291E8:
	eax_15 = Mem300[esp_271 + 0x1C<32>:word32]
l007291EC:
	word32 esp_304 = esp_25 - 4<i32>
	Mem306[esp_304:word32] = eax_15
	Mem308[esp_304 - 4<i32>:word32] = 0x66<32>
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	byte stackArg4 = <invalid>
	branch fn00727810(eax, stackArg4, dwArg04, out ecx_286) == 0<32> l00729223
l007291FD:
	Mem328[esp_304:word32] = Mem308[Mem308[eax + 0x18<32>:word32] + 8<32>:word32]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 eax_331 = fn007276E0(edi_11, stackArg4, out ecx_286)
	branch eax_331 < 0<32> l00729223
l00729212:
	Mem341[esp_304:word32] = eax_331
	Mem343[esp_304 - 4<i32>:word32] = 0x64<32>
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	byte stackArg4 = <invalid>
	branch fn00727810(eax, stackArg4, dwArg04, out ecx_286) != 0<32> l0072922D
l0072922D:
	Mem357[esp_304:word32] = Mem343[esp_304 + 0x2C<32>:word32]
	Mem359[esp_304 - 4<i32>:word32] = 0x86<32>
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	byte stackArg4 = <invalid>
	word32 ecx_363
	word32 eax_377 = fn00727810(eax, stackArg4, dwArg04, out ecx_363) == 0<32>
	ecxOut = ecx_363
	return eax_377
l00729223:
	ecxOut = ecx_286
	return 0<32>
l00729059:
	word32 ecx_402
	branch fn007276E0(dwArg04, Mem18[Mem18[eax + 0x18<32>:word32] + 8<32>:word32], out ecx_402) < 0<32> l0072907F
l0072906E:
	branch fn00727810(eax, 0x64<32>, dwArg04, out ecx_402) != 0<32> l00729087
l00729087:
	word32 ecx_433
	word32 eax_443 = fn00727810(eax, 0x84<32>, dwArg04, out ecx_433) == 0<32>
	ecxOut = ecx_433
	return eax_443
l0072907F:
	ecxOut = ecx_402
	return 0<32>
fn00729040_exit:


word32 fn00729300(word32 eax, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0072D920
// MayUse:  eax:[0..31] Stack +0004:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn00729300_entry:
l00729300:
	word32 ebx_46
	word32 esi_18 = Mem15[eax + 0x18<32>:word32]
	word32 edx_524
	word32 ecx_523
	word32 eax_21 = fn00723860(0x20<32>, out ecx_523, out edx_524)
	branch eax_21 != 0<32> l00729320
l00729320:
	Mem35[eax_21:word32] = 0<32>
	Mem36[eax_21 + 4<32>:word32] = 0<32>
	Mem37[eax_21 + 8<32>:word32] = 0<32>
	Mem38[eax_21 + 0xC<32>:word32] = 0<32>
	Mem39[eax_21 + 0x10<32>:word32] = 0<32>
	Mem40[eax_21 + 0x14<32>:word32] = 0<32>
	Mem41[eax_21 + 0x18<32>:word32] = 0<32>
	Mem42[eax_21 + 0x1C<32>:word32] = 0<32>
	Mem44[eax_21:word32] = Mem42[esi_18 + 0x24<32>:word32]
	Mem45[esi_18 + 0x24<32>:word32] = eax_21
	ebx_46 = eax_21
l00729317:
	word32 edx_526
	word32 ecx_525
	fn006E1210(out ecx_525, out edx_526)
	ebx_46 = 0<32>
l00729343:
	word32 esi_58 = Mem57[eax + 0x18<32>:word32]
	word32 ecx_527
	word32 edx_528
	word32 eax_101 = fn00723860(0x20<32>, out ecx_527, out edx_528)
	branch eax_101 != 0<32> l0072935D
l0072935D:
	Mem76[eax_101:word32] = 0<32>
	Mem77[eax_101 + 4<32>:word32] = 0<32>
	Mem78[eax_101 + 8<32>:word32] = 0<32>
	Mem79[eax_101 + 0xC<32>:word32] = 0<32>
	Mem80[eax_101 + 0x10<32>:word32] = 0<32>
	Mem81[eax_101 + 0x14<32>:word32] = 0<32>
	Mem82[eax_101 + 0x18<32>:word32] = 0<32>
	Mem83[eax_101 + 0x1C<32>:word32] = 0<32>
	Mem85[eax_101:word32] = Mem83[esi_58 + 0x24<32>:word32]
	Mem86[esi_58 + 0x24<32>:word32] = eax_101
l00729354:
	word32 ecx_529
	word32 edx_530
	fn006E1210(out ecx_529, out edx_530)
	eax_101 = 0<32>
l0072937E:
	branch ebx_46 == 0<32> l0072939D
l00729386:
	branch eax_101 == 0<32> l0072939D
l0072938A:
	branch fn00727880(eax, 0x7A<32>, eax_101, 0<32>) != 0<32> l007293A4
l007293A4:
	Mem131[Mem113[Mem113[eax + 0x18<32>:word32] + 0x28<32>:word32] + 0x10<32>:word32] = ebx_46
	Mem138[Mem131[eax + 0x18<32>:word32] + 0x28<32>:word32] = ebx_46
	branch fn00728310(eax, 2<32>, ebx_46) == 0<32> l0072939D
l007293C4:
	word32 ebp_155 = Mem154[dwArg04 + 4<32>:word32]
	word32 ebx_156 = 0<32>
	word32 esi_159 = ebp_155 + 4<32>
l007293D1:
	word32 eax_165
	branch ebp_155 != 0<32> l007293D9
l007293D9:
	eax_165 = Mem164[ebp_155:word32]
l007293D5:
	eax_165 = 0<32>
l007293DC:
	branch ebx_156 >= eax_165 l007293FC
l007293FC:
	word32 ecx_531
	word32 eax_186 = fn00727420(Mem164[Mem164[eax + 0x18<32>:word32] + 0x28<32>:word32], out ecx_531)
	branch eax_186 < 0<32> l007294EB
l0072940F:
	word32 eax_196 = Mem164[Mem164[Mem164[eax + 0x18<32>:word32] + 0x28<32>:word32] + 0xC<32>:word32]
	Mem200[eax_196 + eax_186 * 0x14<32>:word32] = Mem164[eax_196 + eax_186 * 0x14<32>:word32] & 0xFFFFFFFB<32>
	Mem203[eax_196 + eax_186 * 0x14<32> + 4<32>:byte] = 0x57<8>
	word32 edx_204 = Mem203[eax + 0x18<32>:word32]
	branch Mem203[edx_204 + 0xDC<32>:word32] != 0<32> l00729454
l00729435:
	Mem208[edx_204 + 0xDC<32>:word32] = 1<32>
	word32 eax_209 = Mem208[eax + 0x18<32>:word32]
	Mem213[Mem208[Mem208[eax_209 + 0x28<32>:word32] + 0xC<32>:word32] + 0x10<32> + eax_186 * 0x14<32>:word32] = Mem208[eax_209 + 0xD8<32>:word32]
l00729454:
	word32 eax_216 = Mem215[eax + 0x18<32>:word32]
	Mem218[eax_216 + 0x30<32>:word32] = Mem215[eax_216 + 0x30<32>:word32] + 0xFFFFFFFF<32>
	word32 ecx_532
	word32 eax_232 = fn007276E0(0xA163B8<32>, Mem218[Mem218[eax + 0x18<32>:word32] + 8<32>:word32], out ecx_532)
	branch eax_232 < 0<32> l007294EB
l00729473:
	word32 ecx_533
	branch fn00727810(eax, 0x64<32>, eax_232, out ecx_533) == 0<32> l007294EB
l00729484:
	Mem258[Mem243[Mem243[eax + 0x18<32>:word32] + 0x28<32>:word32] + 0x10<32>:word32] = eax_101
	Mem262[Mem258[eax + 0x18<32>:word32] + 0x28<32>:word32] = eax_101
	branch fn00728310(eax, 3<32>, eax_101) == 0<32> l007294EB
l007294A8:
	word32 ebp_277 = Mem264[dwArg04 + 8<32>:word32]
	word32 ebx_278 = 0<32>
	word32 esi_281 = ebp_277 + 4<32>
l007294B4:
	word32 eax_287
	branch ebp_277 != 0<32> l007294BC
l007294BC:
	eax_287 = Mem286[ebp_277:word32]
l007294B8:
	eax_287 = 0<32>
l007294BF:
	branch ebx_278 >= eax_287 l007294DB
l007294DB:
	branch fn00727670(eax, 0x58<32>) != 0<32> l007294F3
l007294F3:
	word32 edi_319 = Mem286[eax + 0x18<32>:word32]
	Mem321[edi_319 + 0x30<32>:word32] = Mem286[edi_319 + 0x30<32>:word32] + 0xFFFFFFFF<32>
	return 1<32>
l007294C3:
	branch fn0072D920(eax, Mem286[esi_281:word32]) == 0<32> l007294EB
l007294D3:
	ebx_278 = ebx_278 + 1<32>
	esi_281 = esi_281 + 4<32>
l007293E0:
	branch fn0072D920(eax, Mem164[esi_159:word32]) == 0<32> l007294EB
l007294EB:
	return 0<32>
l007293F4:
	ebx_156 = ebx_156 + 1<32>
	esi_159 = esi_159 + 4<32>
l0072939D:
	return 0<32>
fn00729300_exit:


word32 fn00729510(word32 ebx, word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00729810
//      fn0072A520
//      fn0072B360
//      fn0072B830
//      fn0072C510
//      fn0072DD60
// MayUse:  ebx:[0..31] Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ebp ecx edi edx esi Top
// Preserved: esp
fn00729510_entry:
l00729510:
	word32 eax_8 = Mem6[ebx + 0x18<32>:word32]
	branch dwArg08 == 2<32> l0072952F
l00729525:
	branch dwArg08 == 5<32> l0072952F
l0072952A:
	branch dwArg08 != 3<32> l00729559
l0072952F:
	word32 esi_27 = dwArg04 + 0x14<32>
	word32 edi_28 = 0x8DA718<32>
	word32 ecx_29 = 0xA<32>
	bool v16_177 = false
l00729542:
	branch ecx_29 == 0<32> l00729544
l00729542_1:
	v16_177 = Mem18[esi_251:byte] != Mem18[edi_252:byte]
	esi_27 = esi_251 + 1<i32>
	edi_28 = edi_252 + 1<i32>
	ecx_29 = ecx_29 - 1<32>
	esi_251 = esi_27
	edi_252 = edi_28
	branch Mem18[esi_251:byte] != Mem18[edi_252:byte] l00729542
l00729544:
	branch v16_177 l00729559
l00729559:
	word32 edx_249
	word32 eax_74 = fn00726150(Mem18[eax_8 + 0x1C<32>:word32], dwArg04, out edx_249)
	branch eax_74 != 0<32> l00729574
l00729574:
	word32 esi_113 = 3<32>
	word32 edx_250
	word32 ecx_101
	word32 eax_102 = fn007475E0(Mem59[Mem59[ebx + 0x18<32>:word32]:word32], out ecx_101, out edx_250)
	branch eax_102 >u 5<32> l007295DE
l00729593:
	switch (eax_102 + 0xFFFFFFFF<32>) { l007295BC l007295D9 l007295CA l0072959A l007295AB }
l007295AB:
	ecx_101 = Mem95[ebx + 0x18<32>:word32]
	esi_113 = 2<32>
l0072959A:
	esi_113 = 2<32>
l007295CA:
	word32 eax_119 = Mem95[Mem95[ebx + 0x18<32>:word32]:word32]
	branch Mem95[eax_119 + 0x1C<32>:word32] != 0<32> l007295DE
l007295D4:
	branch Mem95[eax_119 + 0x20<32>:word32] != 0<32> l007295DE
l007295D9:
	esi_113 = 1<32>
l007295BC:
	ecx_101 = Mem95[Mem95[ebx + 0x18<32>:word32]:word32]
	branch Mem95[ecx_101 + 0x1C<32>:word32] != 0<32> l007295DE
l007295C6:
	esi_113 = 0<32>
l007295DE:
	word32 eax_149
	call Mem133[esi_113 * 4<32> + 0x7297A8<32>:word32] (retsize: 0;)
		uses: ecx:ecx_135,Stack +0004:dwArg04,Stack +0008:dwArg08,Stack +0014:dwArg04,Stack +0018:dwArg08
		defs: eax:eax_149
	return eax_149
l00729570:
	return eax_74
l00729546:
	return fn00728360(ebx, 0x8DA884<32>)
fn00729510_exit:


word32 fn00729810(word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10, word32 dwArg14)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00729810
//      fn00729D20
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31] Stack +0010:[0..31] Stack +0014:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn00729810_entry:
l00729810:
	word32 dwLoc14_732
	word32 esi_16 = Mem15[dwArg04 + 0x18<32>:word32]
	word32 ecx_1076
	word32 edx_1077
	word32 eax_22 = fn00723860(0x20<32>, out ecx_1076, out edx_1077)
	branch eax_22 != 0<32> l00729839
l00729839:
	Mem36[eax_22:word32] = 0<32>
	Mem37[eax_22 + 4<32>:word32] = 0<32>
	Mem38[eax_22 + 8<32>:word32] = 0<32>
	Mem39[eax_22 + 0xC<32>:word32] = 0<32>
	Mem40[eax_22 + 0x10<32>:word32] = 0<32>
	Mem41[eax_22 + 0x14<32>:word32] = 0<32>
	Mem42[eax_22 + 0x18<32>:word32] = 0<32>
	Mem43[eax_22 + 0x1C<32>:word32] = 0<32>
	Mem45[eax_22:word32] = Mem43[esi_16 + 0x24<32>:word32]
	Mem46[esi_16 + 0x24<32>:word32] = eax_22
	dwLoc14_732 = eax_22
l0072982E:
	word32 ecx_1078
	word32 edx_1079
	fn006E1210(out ecx_1078, out edx_1079)
	dwLoc14_732 = 0<32>
l0072985E:
	word32 dwLoc10_788
	word32 esi_57 = Mem56[dwArg04 + 0x18<32>:word32]
	word32 ecx_1080
	word32 edx_1081
	word32 eax_61 = fn00723860(0x20<32>, out ecx_1080, out edx_1081)
	branch eax_61 != 0<32> l0072987A
l0072987A:
	Mem75[eax_61:word32] = 0<32>
	Mem76[eax_61 + 4<32>:word32] = 0<32>
	Mem77[eax_61 + 8<32>:word32] = 0<32>
	Mem78[eax_61 + 0xC<32>:word32] = 0<32>
	Mem79[eax_61 + 0x10<32>:word32] = 0<32>
	Mem80[eax_61 + 0x14<32>:word32] = 0<32>
	Mem81[eax_61 + 0x18<32>:word32] = 0<32>
	Mem82[eax_61 + 0x1C<32>:word32] = 0<32>
	Mem84[eax_61:word32] = Mem82[esi_57 + 0x24<32>:word32]
	Mem85[esi_57 + 0x24<32>:word32] = eax_61
	dwLoc10_788 = eax_61
l0072986F:
	word32 edx_1083
	word32 ecx_1082
	fn006E1210(out ecx_1082, out edx_1083)
	dwLoc10_788 = 0<32>
l0072989F:
	word32 dwLoc0C_1069
	word32 ebx_127
	word32 esi_98 = Mem97[dwArg04 + 0x18<32>:word32]
	word32 edx_1085
	word32 ecx_1084
	word32 eax_102 = fn00723860(0x20<32>, out ecx_1084, out edx_1085)
	branch eax_102 != 0<32> l007298BD
l007298BD:
	Mem116[eax_102:word32] = 0<32>
	Mem117[eax_102 + 4<32>:word32] = 0<32>
	Mem118[eax_102 + 8<32>:word32] = 0<32>
	Mem119[eax_102 + 0xC<32>:word32] = 0<32>
	Mem120[eax_102 + 0x10<32>:word32] = 0<32>
	Mem121[eax_102 + 0x14<32>:word32] = 0<32>
	Mem122[eax_102 + 0x18<32>:word32] = 0<32>
	Mem123[eax_102 + 0x1C<32>:word32] = 0<32>
	Mem125[eax_102:word32] = Mem123[esi_98 + 0x24<32>:word32]
	Mem126[esi_98 + 0x24<32>:word32] = eax_102
	ebx_127 = eax_102
	dwLoc0C_1069 = eax_102
l007298B0:
	word32 edx_1087
	word32 ecx_1086
	fn006E1210(out ecx_1086, out edx_1087)
	ebx_127 = 0<32>
	dwLoc0C_1069 = 0<32>
l007298E4:
	word32 dwLoc08_798
	word32 edi_172
	word32 esi_143 = Mem142[dwArg04 + 0x18<32>:word32]
	word32 edx_1089
	word32 ecx_1088
	word32 eax_147 = fn00723860(0x20<32>, out ecx_1088, out edx_1089)
	branch eax_147 != 0<32> l00729902
l00729902:
	Mem161[eax_147:word32] = 0<32>
	Mem162[eax_147 + 4<32>:word32] = 0<32>
	Mem163[eax_147 + 8<32>:word32] = 0<32>
	Mem164[eax_147 + 0xC<32>:word32] = 0<32>
	Mem165[eax_147 + 0x10<32>:word32] = 0<32>
	Mem166[eax_147 + 0x14<32>:word32] = 0<32>
	Mem167[eax_147 + 0x18<32>:word32] = 0<32>
	Mem168[eax_147 + 0x1C<32>:word32] = 0<32>
	Mem170[eax_147:word32] = Mem168[esi_143 + 0x24<32>:word32]
	Mem171[esi_143 + 0x24<32>:word32] = eax_147
	edi_172 = eax_147
	dwLoc08_798 = eax_147
l007298F5:
	word32 edx_1091
	word32 ecx_1090
	fn006E1210(out ecx_1090, out edx_1091)
	edi_172 = 0<32>
	dwLoc08_798 = 0<32>
l00729929:
	branch dwLoc14_732 == 0<32> l00729C62
l00729934:
	branch dwLoc10_788 == 0<32> l00729C62
l0072993F:
	branch ebx_127 == 0<32> l00729C62
l00729947:
	branch edi_172 == 0<32> l00729C62
l0072994F:
	word32 esi_202 = Mem187[dwArg0C + 4<32> + dwArg10 * 4<32>:word32]
	branch fn0072B360(dwArg04, dwArg04) == 0<32> l00729C62
l00729974:
	branch fn00727670(dwArg04, 0x44<32>) == 0<32> l00729C62
l00729988:
	Mem235[Mem209[Mem209[dwArg04 + 0x18<32>:word32] + 0x28<32>:word32] + 0x10<32>:word32] = dwLoc14_732
	Mem239[Mem235[dwArg04 + 0x18<32>:word32] + 0x28<32>:word32] = dwLoc14_732
	branch fn00727880(dwArg04, 0x5D<32>, dwArg04, 0<32>) == 0<32> l00729C62
l007299B2:
	branch fn007273D0(dwArg04) == 0<32> l00729C62
l007299C1:
	branch fn0072B360(dwArg04, dwArg04) == 0<32> l00729C62
l007299D5:
	branch Mem269[esi_202 + 8<32>:word32] != 0<32> l007299E2
l007299E2:
l007299DC:
l007299E8:
	word32 esi_287 = 0<32>
	branch dwArg04 <= 0<32> l00729A53
l007299F0:
	branch fn0072B360(dwArg04, dwArg04) == 0<32> l00729C62
l00729A0D:
	branch fn00727880(dwArg04, 0x6F<32>, dwArg04, 0<32>) == 0<32> l00729C62
l00729A28:
	branch fn007273D0(dwArg04) == 0<32> l00729C62
l00729A37:
	branch fn00727670(dwArg04, 1<32>) == 0<32> l00729C62
l00729A4B:
	esi_287 = esi_287 + 1<32>
	branch esi_287 < dwArg04 l007299F0
l00729A53:
	word32 eax_364
	word32 ebx_360 = dwArg0C
	branch dwArg0C != 0<32> l00729A5F
l00729A5F:
	eax_364 = Mem359[dwArg0C:word32]
l00729A5B:
	eax_364 = 0<32>
l00729A61:
	branch dwArg10 + 1<32> >= eax_364 l00729A8D
l00729A74:
	branch fn00729810(dwArg04, dwArg04, dwArg0C, dwArg10 + 1<32>, dwArg14) == 0<32> l00729C62
l00729A8D:
	branch dwArg0C == 0<32> l00729A93
l00729A91:
	ebx_360 = Mem409[dwArg0C:word32]
l00729A93:
	branch dwArg10 + 1<32> < ebx_360 l00729AE9
l00729A97:
	branch fn00729510(dwArg04, dwArg08, dwArg04) == 0<32> l00729C62
l00729AAC:
	branch fn0072B360(dwArg04, dwArg04) == 0<32> l00729C62
l00729AC2:
	branch fn00727670(dwArg04, 0x12<32>) == 0<32> l00729C62
l00729AD6:
	Mem468[Mem443[Mem443[dwArg04 + 0x18<32>:word32] + 0x28<32>:word32] + 0x10<32>:word32] = dwLoc10_788
	Mem470[Mem468[dwArg04 + 0x18<32>:word32] + 0x28<32>:word32] = dwLoc10_788
l00729AE9:
	word32 edi_471 = 0<32>
	branch dwArg04 <= 0<32> l00729B3E
l00729AF1:
	word32 ecx_1092
	branch fn00727810(dwArg04, 0x6E<32>, dwArg04, out ecx_1092) == 0<32> l00729C62
l00729B07:
	branch edi_471 != 0<32> l00729B1E
l00729B0B:
	Mem504[Mem481[Mem481[dwArg04 + 0x18<32>:word32] + 0x28<32>:word32] + 0x10<32>:word32] = dwLoc0C_1069
	Mem506[Mem504[dwArg04 + 0x18<32>:word32] + 0x28<32>:word32] = dwLoc0C_1069
l00729B1E:
	branch fn00727670(dwArg04, 1<32>) == 0<32> l00729C62
l00729B32:
	edi_471 = edi_471 + 1<32>
	branch edi_471 < dwArg04 l00729AF1
l00729B3A:
l00729B3E:
	branch fn00727880(dwArg04, 0x71<32>, dwArg04, 1<32>) == 0<32> l00729C62
l00729B59:
	Mem561[Mem536[Mem536[dwArg04 + 0x18<32>:word32] + 0x28<32>:word32] + 0x10<32>:word32] = dwLoc08_798
	Mem563[Mem561[dwArg04 + 0x18<32>:word32] + 0x28<32>:word32] = dwLoc08_798
	branch dwArg10 != 0<32> l00729CE2
l00729B75:
	word32 eax_565 = Mem563[dwArg04 + 0x18<32>:word32]
	word32 esi_569 = dwArg08 + 0x14<32>
	word32 edi_570 = 0x8DA718<32>
	word32 ecx_571 = 0xA<32>
	bool v19_722 = false
l00729B96:
	branch ecx_571 == 0<32> l00729B98
l00729B96_1:
	v19_722 = Mem575[esi_1096:byte] != Mem575[edi_1097:byte]
	esi_569 = esi_1096 + 1<i32>
	edi_570 = edi_1097 + 1<i32>
	ecx_571 = ecx_571 - 1<32>
	esi_1096 = esi_569
	edi_1097 = edi_570
	branch Mem575[esi_1096:byte] != Mem575[edi_1097:byte] l00729B96
l00729B98:
	branch v19_722 l00729BAE
l00729BAE:
	word32 edx_1093
	branch fn00726150(Mem575[eax_565 + 0x1C<32>:word32], dwArg04, out edx_1093) == 0<32> l00729C62
l00729BC5:
	word32 edi_628 = 3<32>
	word32 ecx_1094
	word32 edx_1095
	word32 eax_630 = fn007475E0(Mem599[Mem599[dwArg04 + 0x18<32>:word32]:word32], out ecx_1094, out edx_1095)
	branch eax_630 >u 5<32> l00729C31
l00729BE3:
	switch (eax_630 + 0xFFFFFFFF<32>) { l00729C0C l00729C2C l00729C1B l00729BEA l00729BFB }
l00729BFB:
	edi_628 = 2<32>
l00729BEA:
	edi_628 = 2<32>
l00729C1B:
	word32 eax_648 = Mem624[Mem624[dwArg04 + 0x18<32>:word32]:word32]
	branch Mem624[eax_648 + 0x1C<32>:word32] != 0<32> l00729C31
l00729C26:
	branch Mem624[eax_648 + 0x20<32>:word32] != 0<32> l00729C31
l00729C2C:
	edi_628 = 1<32>
l00729C0C:
	branch Mem624[Mem624[Mem624[dwArg04 + 0x18<32>:word32]:word32] + 0x1C<32>:word32] != 0<32> l00729C31
l00729C17:
	edi_628 = 0<32>
l00729C31:
	word32 eax_675
	call Mem662[edi_628 * 4<32> + 0x729D04<32>:word32] (retsize: 0;)
		uses: Stack +0004:dwArg04,Stack +0028:dwArg04,Stack +002C:dwArg08,Stack +0030:dwArg0C,Stack +0034:dwArg10 + 1<32>,Stack +0038:dwArg14
		defs: eax:eax_675
	return eax_675
l00729B9A:
	word32 eax_684 = fn00728360(dwArg04, 0x8DA884<32>)
l00729CDE:
	branch eax_684 == 0<32> l00729C62
l00729C62:
	return 0<32>
l00729CE2:
	return 1<32>
fn00729810_exit:


word32 fn00729D20(word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0072B360
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn00729D20_entry:
l00729D20:
	branch Mem0[0x00A6DBF0<p32>:word32] != 0<32> l00729D5F
l00729D44:
	word32 ecx_436
	word32 edx_437
	word32 eax_19 = fn006F1A70(out ecx_436, out edx_437)
	Mem27[0x00A6DBF0<p32>:word32] = eax_19
	branch eax_19 != 0<32> l00729D5F
l00729D5F:
	word32 eax_39 = fn007272E0(ebx, dwArg04, esi, edi, es, ds, dwArg04)
	branch eax_39 == 0<32> l00729D85
l00729D73:
	word32 ecx_438
	branch fn00727810(dwArg04, 0x67<32>, dwArg04, out ecx_438) != 0<32> l00729D8D
l00729D8D:
	word32 eax_72 = fn00727670(dwArg04, 4<32>)
	branch eax_72 != 0<32> l00729DA5
l00729DA5:
	word32 eax_80 = Mem68[dwArg04 + 0x18<32>:word32]
	word32 esi_86 = eax_39 + 0x14<32>
	word32 edi_87 = 0x8DA718<32>
	word32 ecx_88 = 0xA<32>
	bool v17_295 = false
l00729DBB:
	branch ecx_88 == 0<32> l00729DBD
l00729DBB_1:
	v17_295 = Mem85[esi_442:byte] != Mem85[edi_443:byte]
	esi_86 = esi_442 + 1<i32>
	edi_87 = edi_443 + 1<i32>
	ecx_88 = ecx_88 - 1<32>
	esi_442 = esi_86
	edi_443 = edi_87
	branch Mem85[esi_442:byte] != Mem85[edi_443:byte] l00729DBB
l00729DBD:
	word32 esi_208
	branch v17_295 l00729DD3
l00729DD3:
	word32 edx_439
	branch fn00726150(Mem85[eax_80 + 0x1C<32>:word32], dwArg04, out edx_439) == 0<32> l00729F07
l00729DEE:
	word32 edi_140 = 3<32>
	word32 ecx_440
	word32 edx_441
	word32 eax_142 = fn007475E0(Mem114[Mem114[dwArg04 + 0x18<32>:word32]:word32], out ecx_440, out edx_441)
	branch eax_142 >u 5<32> l00729E58
l00729E12:
	switch (eax_142 + 0xFFFFFFFF<32>) { l00729E33 l00729E53 l00729E42 l00729E19 l00729E26 }
l00729E26:
	edi_140 = 2<32>
l00729E19:
	edi_140 = 2<32>
l00729E42:
	word32 eax_158 = Mem139[Mem139[dwArg04 + 0x18<32>:word32]:word32]
	branch Mem139[eax_158 + 0x1C<32>:word32] != 0<32> l00729E58
l00729E4D:
	branch Mem139[eax_158 + 0x20<32>:word32] != 0<32> l00729E58
l00729E53:
	edi_140 = 1<32>
l00729E33:
	branch Mem139[Mem139[Mem139[dwArg04 + 0x18<32>:word32]:word32] + 0x1C<32>:word32] != 0<32> l00729E58
l00729E3E:
	edi_140 = 0<32>
l00729E58:
	word32 eax_185
	call Mem139[edi_140 * 4<32> + 0x729F3C<32>:word32] (retsize: 0;)
		uses: Stack +0004:dwArg04,Stack +0008:dwArg08,Stack +0024:dwArg04,Stack +0028:dwArg08
		defs: eax:eax_185
	return eax_185
l00729DBF:
	word32 eax_195 = fn00728360(dwArg04, 0x8DA884<32>)
l00729EDA:
	branch eax_195 == 0<32> l00729F03
l00729F03:
l00729F07:
	esi_208 = 0<32>
l00729EDE:
	esi_208 = fn00729810(dwArg04, dwArg04, dwArg08, 0<32>, Mem191[dwArg08 + 4<32>:word32])
l00729F0B:
	word32 v15_236 = Mem235[eax_39:word32] + 0xFFFFFFFF<32>
	Mem237[eax_39:word32] = v15_236
	branch v15_236 != 0<32> l00729F1C
l00729F10:
	word32 eax_240 = Mem237[eax_39 + 4<32>:word32]
	call Mem237[eax_240 + 0x18<32>:word32] (retsize: 4;)
		uses: eax:eax_240,Stack +0004:eax_39,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +002C:dwArg04,Stack +0030:dwArg08
l00729F1C:
	return esi_208
l00729D9E:
	return eax_72
l00729D85:
	return 0<32>
l00729D5A:
	return eax_19
fn00729D20_exit:


word32 fn00729F50(word32 dwArg04, word32 dwArg08, word32 dwArg0C)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00729F50
//      fn0072B360
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn00729F50_entry:
l00729F50:
	word32 dwLoc10_706
	word32 ebx_305
	word32 esi_19 = Mem17[dwArg04 + 0x18<32>:word32]
	word32 ecx_1026
	word32 edx_1027
	word32 eax_22 = fn00723860(0x20<32>, out ecx_1026, out edx_1027)
	branch eax_22 != 0<32> l00729F7B
l00729F7B:
	Mem36[eax_22:word32] = 0<32>
	Mem37[eax_22 + 4<32>:word32] = 0<32>
	Mem38[eax_22 + 8<32>:word32] = 0<32>
	Mem39[eax_22 + 0xC<32>:word32] = 0<32>
	Mem40[eax_22 + 0x10<32>:word32] = 0<32>
	Mem41[eax_22 + 0x14<32>:word32] = 0<32>
	Mem42[eax_22 + 0x18<32>:word32] = 0<32>
	Mem43[eax_22 + 0x1C<32>:word32] = 0<32>
	Mem45[eax_22:word32] = Mem43[esi_19 + 0x24<32>:word32]
	Mem46[esi_19 + 0x24<32>:word32] = eax_22
	dwLoc10_706 = eax_22
	ebx_305 = eax_22
l00729F6E:
	word32 ecx_1028
	word32 edx_1029
	fn006E1210(out ecx_1028, out edx_1029)
	ebx_305 = 0<32>
	dwLoc10_706 = 0<32>
l00729FA2:
	word32 dwLoc08_753
	word32 esi_61 = Mem60[dwArg04 + 0x18<32>:word32]
	word32 ecx_1030
	word32 edx_1031
	word32 eax_65 = fn00723860(0x20<32>, out ecx_1030, out edx_1031)
	branch eax_65 != 0<32> l00729FBE
l00729FBE:
	Mem79[eax_65:word32] = 0<32>
	Mem80[eax_65 + 4<32>:word32] = 0<32>
	Mem81[eax_65 + 8<32>:word32] = 0<32>
	Mem82[eax_65 + 0xC<32>:word32] = 0<32>
	Mem83[eax_65 + 0x10<32>:word32] = 0<32>
	Mem84[eax_65 + 0x14<32>:word32] = 0<32>
	Mem85[eax_65 + 0x18<32>:word32] = 0<32>
	Mem86[eax_65 + 0x1C<32>:word32] = 0<32>
	Mem88[eax_65:word32] = Mem86[esi_61 + 0x24<32>:word32]
	Mem89[esi_61 + 0x24<32>:word32] = eax_65
	dwLoc08_753 = eax_65
l00729FB3:
	word32 edx_1033
	word32 ecx_1032
	fn006E1210(out ecx_1032, out edx_1033)
	dwLoc08_753 = 0<32>
l00729FE3:
	word32 dwLoc14_758
	word32 esi_102 = Mem101[dwArg04 + 0x18<32>:word32]
	word32 edx_1035
	word32 ecx_1034
	word32 eax_106 = fn00723860(0x20<32>, out ecx_1034, out edx_1035)
	branch eax_106 != 0<32> l00729FFF
l00729FFF:
	Mem120[eax_106:word32] = 0<32>
	Mem121[eax_106 + 4<32>:word32] = 0<32>
	Mem122[eax_106 + 8<32>:word32] = 0<32>
	Mem123[eax_106 + 0xC<32>:word32] = 0<32>
	Mem124[eax_106 + 0x10<32>:word32] = 0<32>
	Mem125[eax_106 + 0x14<32>:word32] = 0<32>
	Mem126[eax_106 + 0x18<32>:word32] = 0<32>
	Mem127[eax_106 + 0x1C<32>:word32] = 0<32>
	Mem129[eax_106:word32] = Mem127[esi_102 + 0x24<32>:word32]
	Mem130[esi_102 + 0x24<32>:word32] = eax_106
	dwLoc14_758 = eax_106
l00729FF4:
	word32 edx_1037
	word32 ecx_1036
	fn006E1210(out ecx_1036, out edx_1037)
	dwLoc14_758 = 0<32>
l0072A024:
	word32 dwLoc0C_763
	word32 esi_143 = Mem142[dwArg04 + 0x18<32>:word32]
	word32 edx_1039
	word32 ecx_1038
	word32 eax_147 = fn00723860(0x20<32>, out ecx_1038, out edx_1039)
	branch eax_147 != 0<32> l0072A040
l0072A040:
	Mem161[eax_147:word32] = 0<32>
	Mem162[eax_147 + 4<32>:word32] = 0<32>
	Mem163[eax_147 + 8<32>:word32] = 0<32>
	Mem164[eax_147 + 0xC<32>:word32] = 0<32>
	Mem165[eax_147 + 0x10<32>:word32] = 0<32>
	Mem166[eax_147 + 0x14<32>:word32] = 0<32>
	Mem167[eax_147 + 0x18<32>:word32] = 0<32>
	Mem168[eax_147 + 0x1C<32>:word32] = 0<32>
	Mem170[eax_147:word32] = Mem168[esi_143 + 0x24<32>:word32]
	Mem171[esi_143 + 0x24<32>:word32] = eax_147
	dwLoc0C_763 = eax_147
l0072A035:
	word32 ecx_1040
	word32 edx_1041
	fn006E1210(out ecx_1040, out edx_1041)
	dwLoc0C_763 = 0<32>
l0072A065:
	word32 esi_184 = Mem183[dwArg04 + 0x18<32>:word32]
	word32 ecx_1042
	word32 edx_1043
	word32 eax_188 = fn00723860(0x20<32>, out ecx_1042, out edx_1043)
	branch eax_188 != 0<32> l0072A07F
l0072A07F:
	Mem202[eax_188:word32] = 0<32>
	Mem203[eax_188 + 4<32>:word32] = 0<32>
	Mem204[eax_188 + 8<32>:word32] = 0<32>
	Mem205[eax_188 + 0xC<32>:word32] = 0<32>
	Mem206[eax_188 + 0x10<32>:word32] = 0<32>
	Mem207[eax_188 + 0x14<32>:word32] = 0<32>
	Mem208[eax_188 + 0x18<32>:word32] = 0<32>
	Mem209[eax_188 + 0x1C<32>:word32] = 0<32>
	Mem211[eax_188:word32] = Mem209[esi_184 + 0x24<32>:word32]
	Mem212[esi_184 + 0x24<32>:word32] = eax_188
l0072A076:
	word32 ecx_1044
	word32 edx_1045
	fn006E1210(out ecx_1044, out edx_1045)
	eax_188 = 0<32>
l0072A0A0:
	branch ebx_305 == 0<32> l0072A10D
l0072A0A8:
	branch dwLoc08_753 == 0<32> l0072A10D
l0072A0AE:
	branch dwLoc14_758 == 0<32> l0072A10D
l0072A0B4:
	branch dwLoc0C_763 == 0<32> l0072A10D
l0072A0BA:
	branch eax_188 == 0<32> l0072A10D
l0072A0BE:
	word32 ebp_241 = Mem229[dwArg08 + 4<32> + dwArg0C * 4<32>:word32]
	branch fn00727880(dwArg04, 0x78<32>, dwArg04, 0<32>) == 0<32> l0072A10D
l0072A0DD:
	branch fn00728310(dwArg04, 0<32>, dwArg04) == 0<32> l0072A10D
l0072A0EE:
	branch dwArg0C != 0<32> l0072A117
l0072A117:
	branch fn0072B360(dwArg04, dwArg04) == 0<32> l0072A10D
l0072A128:
	branch fn00727670(dwArg04, 0x44<32>) == 0<32> l0072A10D
l0072A138:
	ebx_305 = dwLoc10_706
l0072A0F2:
	Mem307[Mem264[dwArg04 + 0x18<32>:word32] + 0x20<32>:word32] = 1<32>
	word32 ecx_1046
	branch fn00727810(dwArg04, 0x7C<32>, dwArg04, out ecx_1046) != 0<32> l0072A13C
l0072A13C:
	Mem333[Mem324[Mem324[dwArg04 + 0x18<32>:word32] + 0x28<32>:word32] + 0x10<32>:word32] = ebx_305
	Mem342[Mem333[dwArg04 + 0x18<32>:word32] + 0x28<32>:word32] = ebx_305
	word32 esi_329 = 0<32>
	branch fn00727880(dwArg04, 0x5D<32>, dwArg04, 0<32>) == 0<32> l0072A10D
l0072A163:
	branch fn007273D0(dwArg04) == 0<32> l0072A10D
l0072A16C:
	branch fn0072B360(dwArg04, dwArg04) == 0<32> l0072A10D
l0072A17D:
	branch Mem368[ebp_241 + 8<32>:word32] != 0<32> l0072A18A
l0072A18A:
l0072A184:
l0072A190:
	branch dwArg04 <= 0<32> l0072A1F3
l0072A196:
	branch fn0072B360(dwArg04, dwArg04) == 0<32> l0072A10D
l0072A1AF:
	branch fn00727880(dwArg04, 0x6F<32>, dwArg04, 0<32>) == 0<32> l0072A10D
l0072A1CA:
	branch fn007273D0(dwArg04) == 0<32> l0072A10D
l0072A1D7:
	branch fn00727670(dwArg04, 1<32>) == 0<32> l0072A10D
l0072A1EB:
	esi_329 = esi_329 + 1<32>
	branch esi_329 < dwArg04 l0072A196
l0072A1F3:
	word32 eax_460
	branch dwArg08 != 0<32> l0072A1FF
l0072A1FF:
	eax_460 = Mem455[dwArg08:word32]
l0072A1FB:
	eax_460 = 0<32>
l0072A202:
	branch dwArg0C + 1<32> >= eax_460 l0072A225
l0072A211:
	branch fn00729F50(dwArg04, dwArg04, dwArg0C + 1<32>) == 0<32> l0072A10D
l0072A225:
	word32 eax_502
	branch dwArg08 != 0<32> l0072A22D
l0072A22D:
	eax_502 = Mem501[dwArg08:word32]
l0072A229:
	eax_502 = 0<32>
l0072A230:
	branch dwArg0C + 1<32> < eax_502 l0072A281
l0072A234:
	branch fn0072B360(dwArg04, dwArg04) == 0<32> l0072A10D
l0072A246:
	branch fn00727670(dwArg04, 0x56<32>) == 0<32> l0072A10D
l0072A25A:
	branch fn00727670(dwArg04, 1<32>) == 0<32> l0072A10D
l0072A26E:
	Mem559[Mem520[Mem520[dwArg04 + 0x18<32>:word32] + 0x28<32>:word32] + 0x10<32>:word32] = dwLoc08_753
	Mem561[Mem559[dwArg04 + 0x18<32>:word32] + 0x28<32>:word32] = dwLoc08_753
l0072A281:
	word32 esi_562 = 0<32>
	branch dwArg04 <= 0<32> l0072A2D9
l0072A289:
l0072A290:
	word32 ecx_1047
	branch fn00727810(dwArg04, 0x6E<32>, dwArg04, out ecx_1047) == 0<32> l0072A10D
l0072A2A6:
	branch esi_562 != 0<32> l0072A2BD
l0072A2AA:
	Mem596[Mem573[Mem573[dwArg04 + 0x18<32>:word32] + 0x28<32>:word32] + 0x10<32>:word32] = dwLoc14_758
	Mem598[Mem596[dwArg04 + 0x18<32>:word32] + 0x28<32>:word32] = dwLoc14_758
l0072A2BD:
	branch fn00727670(dwArg04, 1<32>) == 0<32> l0072A10D
l0072A2D1:
	esi_562 = esi_562 + 1<32>
	branch esi_562 < dwArg04 l0072A290
l0072A2D9:
	branch fn00727880(dwArg04, 0x71<32>, dwArg04, 1<32>) == 0<32> l0072A10D
l0072A2F4:
	Mem651[Mem627[Mem627[dwArg04 + 0x18<32>:word32] + 0x28<32>:word32] + 0x10<32>:word32] = dwLoc0C_763
	Mem653[Mem651[dwArg04 + 0x18<32>:word32] + 0x28<32>:word32] = dwLoc0C_763
	branch fn00727670(dwArg04, 0x57<32>) == 0<32> l0072A10D
l0072A31B:
	word32 eax_665 = Mem653[dwArg04 + 0x18<32>:word32]
	Mem667[eax_665 + 0x30<32>:word32] = Mem653[eax_665 + 0x30<32>:word32] + 0xFFFFFFFF<32>
	Mem671[Mem667[Mem667[dwArg04 + 0x18<32>:word32] + 0x28<32>:word32] + 0x10<32>:word32] = eax_188
	Mem679[Mem671[dwArg04 + 0x18<32>:word32] + 0x28<32>:word32] = eax_188
	return 1<32>
l0072A10D:
	return 0<32>
fn00729F50_exit:


word32 fn0072A350(word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0072A5D0
//      fn0072B360
//      fn0072C160
//      fn0072C510
//      fn0072E660
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn0072A350_entry:
l0072A350:
	word32 dwLoc24_395 = 0<32>
	branch (Mem10[Mem10[Mem10[dwArg04 + 0x18<32>:word32] + 0x28<32>:word32] + 0x14<32>:byte] & 2<8>) != 0<8> l0072A3C2
l0072A36E:
	branch fn007273D0(dwArg04) != 0<32> l0072A382
l0072A382:
	branch dwArg08 == 0<32> l0072A3B2
l0072A389:
	word32 ecx_632
	branch fn007276E0(0xA163B8<32>, Mem19[Mem19[dwArg04 + 0x18<32>:word32] + 8<32>:word32], out ecx_632) < 0<32> l0072A379
l0072A3A1:
	word32 ecx_633
	branch fn00727810(dwArg04, 0x64<32>, dwArg04, out ecx_633) == 0<32> l0072A379
l0072A3B2:
	branch fn00727670(dwArg04, 0x53<32>) == 0<32> l0072A379
l0072A3C2:
	word32 ecx_81 = Mem79[dwArg04 + 0x18<32>:word32]
	word32 eax_82 = Mem79[ecx_81 + 0x24<32>:word32]
	word32 edi_141 = 0<32>
	word32 ebx_102 = 0<32>
	branch eax_82 == 0<32> l0072A3DB
l0072A3D0:
	ebx_102 = eax_82
	eax_82 = Mem79[eax_82:word32]
	edi_141 = edi_141 + 1<32>
	branch eax_82 != 0<32> l0072A3D0
l0072A3DB:
	branch Mem79[ecx_81 + 0xD4<32>:word32] != 0<32> l0072A404
l0072A3E4:
	branch ebx_102 == 0<32> l0072A3FA
l0072A3E8:
	word32 eax_106 = Mem79[ebx_102 + 0xC<32>:word32]
	branch eax_106 == 0<32> l0072A3FA
l0072A3FA:
	Mem111[ecx_81 + 0xD4<32>:word32] = 1<32>
l0072A3EF:
	Mem113[ecx_81 + 0xD4<32>:word32] = Mem79[eax_106 + 0x10<32>:word32]
l0072A404:
	branch fn00728650(fp - 0x20<32>, edi_141, Mem118[Mem118[dwArg04 + 0x18<32>:word32] + 0xD4<32>:word32]) == 0<32> l0072A4C3
l0072A423:
	word32 ebp_169 = fn007284C0(ebx_102, fp - 0x20<32>)
	fn007289A0(fp - 0x20<32>, ebp_169)
	word32 eax_189 = dwLoc18 + 0xFFFFFFFF<32>
	word32 dwLoc28_479 = dwLoc18 + 0xFFFFFFFF<32>
	branch dwLoc18 < 0xFFFFFFFF<32> l0072A484
l0072A446:
	word32 esi_197 = Mem194[dwLoc14 + eax_189 * 4<32>:word32]
	word32 ebx_198 = 0<32>
	branch Mem194[esi_197 + 4<32>:word32] <= 0<32> l0072A47B
l0072A454:
	word32 ebp_201 = 0<32>
l0072A456:
	branch fn007288B0(fp - 0x20<32>, Mem194[esi_197 + 0xC<32>:word32] + ebp_201) == 0<32> l0072A4C3
l0072A468:
	ebx_198 = ebx_198 + 1<32>
	ebp_201 = ebp_201 + 0x14<32>
	branch ebx_198 < Mem194[esi_197 + 4<32>:word32] l0072A456
l0072A473:
	ebp_169 = dwArg04
	eax_189 = dwLoc28_479
l0072A47B:
	eax_189 = eax_189 - 1<32>
	dwLoc28_479 = eax_189
	branch eax_189 >= 0<32> l0072A446
l0072A484:
	word32 ecx_630
	word32 edx_631
	branch fn006EC4F0(fp - 0x10<32>, dwArg04, out ecx_630, out edx_631) < 0<32> l0072A4C3
l0072A49A:
	word32 edx_635
	word32 ecx_634
	branch fn006EC4F0(fp - 0x20<32>, dwArg04, out ecx_634, out edx_635) < 0<32> l0072A4C3
l0072A4B0:
	dwLoc24_395 = fn00728BE0(ebp_169)
l0072A4C3:
	word32 esp_301 = fp - 0x34<32>
	branch dwLoc20 == 0<32> l0072A4E4
l0072A4CC:
	Mem304[dwLoc20:word32] = Mem296[dwLoc20:word32] + 0xFFFFFFFF<32>
	branch Mem304[dwLoc20:word32] != 0<32> l0072A4E4
l0072A4D8:
	word32 edx_308 = Mem304[dwLoc20 + 4<32>:word32]
	word32 esp_316
	call Mem310[edx_308 + 0x18<32>:word32] (retsize: 4;)
		uses: edx:edx_308,Stack +0004:dwLoc20,Stack +0008:dwArg04,Stack +001C:dwLoc20,Stack +0020:dwLoc1C,Stack +0024:dwLoc18,Stack +0030:dwLoc0C,Stack +0040:dwArg04,Stack +0044:dwArg08
		defs: esp:esp_316
	esp_301 = esp_316 + 4<32>
l0072A4E4:
	word32 eax_326 = Mem325[esp_301 + 0x24<32>:word32]
	branch eax_326 == 0<32> l0072A504
l0072A4EC:
	Mem331[eax_326:word32] = Mem325[eax_326:word32] + 0xFFFFFFFF<32>
	word32 eax_332 = Mem331[esp_301 + 0x24<32>:word32]
	branch Mem331[eax_332:word32] != 0<32> l0072A504
l0072A4F8:
	word32 ecx_335 = Mem331[eax_332 + 4<32>:word32]
	word32 edx_336 = Mem331[ecx_335 + 0x18<32>:word32]
	Mem338[esp_301 - 4<i32>:word32] = eax_332
	call edx_336 (retsize: 4;)
		uses: ecx:ecx_335,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +FFFFFFE4:dwLoc20,Stack +FFFFFFE8:dwLoc1C,Stack +FFFFFFEC:dwLoc18,Stack +FFFFFFF8:dwLoc0C
l0072A504:
	branch dwLoc14 == 0<32> l0072A515
l0072A50C:
	word32 ecx_636
	word32 edx_637
	fn007239C0(dwLoc14, out ecx_636, out edx_637)
l0072A515:
	return dwLoc24_395
l0072A379:
	return 0<32>
fn0072A350_exit:


void fn0072A520(word32 eax, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0072A5D0
//      fn0072C160
// MayUse:  eax:[0..31] Stack +0004:[0..31]
// LiveOut:
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn0072A520_entry:
l0072A520:
	word32 dwLoc04_177
	word32 eax_16 = Mem12[dwArg04:word32]
	word32 esp_125 = fp - 20<i32>
	word32 edi_145 = 0<32>
	branch eax_16 != 0<32> l0072A539
l0072A539:
	dwLoc04_177 = Mem22[eax_16:word32]
l0072A533:
	dwLoc04_177 = 0<32>
l0072A53F:
	branch dwLoc04_177 <= 0<32> l0072A5A0
l0072A545:
	word32 ebp_39 = Mem35[Mem35[Mem35[esp_125 + 0x18<32>:word32]:word32] + 4<32> + edi_145 * 4<32>:word32]
	branch Mem35[ebp_39:word32] != 0x13<32> l0072A597
l0072A555:
	word32 esp_42 = esp_125 - 4<i32>
	Mem43[esp_42:word32] = edi_145
	Mem45[esp_42 - 4<i32>:word32] = 0x8DA8A0<32>
	word32 eax_52 = fn006F2070()
	branch eax_52 == 0<32> l0072A5BC
l0072A569:
	Mem62[esp_42:word32] = 1<32>
	Mem64[esp_42 - 4<i32>:word32] = eax_52
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 eax_67 = fn00729510(eax, stackArg4, dwArg04)
	word32 esp_105 = esp_42 + 4<32>
	branch eax_67 == 0<32> l0072A5AB
l0072A5AB:
	word32 v16_75 = Mem64[eax_52:word32] + 0xFFFFFFFF<32>
	Mem76[eax_52:word32] = v16_75
	branch v16_75 != 0<32> l0072A5BC
l0072A5B0:
	word32 eax_79 = Mem76[eax_52 + 4<32>:word32]
	word32 ecx_80 = Mem76[eax_79 + 0x18<32>:word32]
	Mem82[esp_42:word32] = eax_52
	word32 edx_86
	call ecx_80 (retsize: 4;)
		uses: eax:eax_79,ecx:ecx_80,edx:edx_86,Stack +0008:dwArg04
		defs: edx:edx_86
l0072A578:
	word32 v14_91 = Mem64[eax_52:word32] + 0xFFFFFFFF<32>
	Mem92[eax_52:word32] = v14_91
	branch v14_91 != 0<32> l0072A589
l0072A57D:
	word32 ecx_95 = Mem92[eax_52 + 4<32>:word32]
	word32 edx_96 = Mem92[ecx_95 + 0x18<32>:word32]
	Mem98[esp_42:word32] = eax_52
	word32 esp_99
	word32 edx_102
	call edx_96 (retsize: 4;)
		uses: eax:eax_67,ecx:ecx_95,edx:edx_102,Stack +0008:dwArg04
		defs: edx:edx_102,esp:esp_99
	esp_105 = esp_99 + 4<32>
l0072A589:
	word32 esp_108 = esp_105 - 4<i32>
	Mem110[esp_108:word32] = ebp_39
	Mem113[esp_108 - 4<i32>:word32] = eax
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	esp_125 = esp_108 + 4<32>
	branch fn0072B360(stackArg4, dwArg04) == 0<32> l0072A5BC
l0072A5BC:
	return
l0072A597:
	edi_145 = edi_145 + 1<32>
	branch edi_145 < Mem147[esp_125 + 0x10<32>:word32] l0072A545
l0072A5A0:
	return
fn0072A520_exit:


word32 fn0072A5D0(word32 eax, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0072B360
// MayUse:  eax:[0..31] Stack +0004:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn0072A5D0_entry:
l0072A5D0:
	word32 ebp_14 = Mem12[dwArg04 + 4<32>:word32]
	word32 eax_20 = Mem17[0x00A6DBE4<p32>:word32]
	branch eax_20 != 0<32> l0072A605
l0072A5EA:
	word32 edx_458
	word32 ecx_457
	eax_20 = fn006F1A70(out ecx_457, out edx_458)
	Mem36[0x00A6DBE4<p32>:word32] = eax_20
	branch eax_20 != 0<32> l0072A605
l0072A605:
	word32 ebx_44 = Mem42[ebp_14 + 0xC<32>:word32]
	branch ebx_44 == 0<32> l0072A649
l0072A60D:
	word32 ebp_314 = 0<32>
l0072A612:
	word32 eax_57
	branch ebx_44 != 0<32> l0072A61A
l0072A61A:
	eax_57 = Mem56[ebx_44:word32]
l0072A616:
	eax_57 = 0<32>
l0072A61C:
	branch ebp_314 >= eax_57 l0072A63C
l0072A63C:
	eax_20 = Mem56[0x00A6DBE4<p32>:word32]
l0072A649:
	branch fn00728E40(eax_20, eax, dwArg04, dwArg04) == 0<32> l0072A707
l0072A660:
	fn0072A520(eax, ebp_14)
	word32 eax_114 = Mem106[ebp_14:word32]
	branch eax_114 == 0<32> l0072A674
l0072A672:
	eax_114 = Mem106[eax_114:word32]
l0072A674:
	Mem124[Mem106[eax + 0x18<32>:word32] + 0x20<32>:word32] = eax_114
	branch fn0072B360(eax, dwArg04) == 0<32> l0072A702
l0072A68B:
	word32 ecx_459
	word32 eax_150 = fn00727420(Mem131[Mem131[eax + 0x18<32>:word32] + 0x28<32>:word32], out ecx_459)
	branch eax_150 < 0<32> l0072A702
l0072A702:
	fn00727290(eax)
l0072A69A:
	word32 edx_172 = Mem131[Mem131[eax + 0x18<32>:word32] + 0x28<32>:word32]
	word32 eax_174 = Mem131[edx_172 + 0xC<32>:word32]
	Mem178[eax_174 + eax_150 * 0x14<32>:word32] = Mem131[eax_174 + eax_150 * 0x14<32>:word32] & 0xFFFFFFFB<32>
	Mem181[eax_174 + eax_150 * 0x14<32> + 4<32>:byte] = 0x53<8>
	Mem183[edx_172 + 0x14<32>:word32] = Mem181[edx_172 + 0x14<32>:word32] | 2<32>
	word32 eax_185 = Mem183[eax + 0x18<32>:word32]
	branch Mem183[eax_185 + 0xDC<32>:word32] != 0<32> l0072A6E3
l0072A6C4:
	Mem189[eax_185 + 0xDC<32>:word32] = 1<32>
	word32 eax_190 = Mem189[eax + 0x18<32>:word32]
	Mem194[Mem189[Mem189[eax_190 + 0x28<32>:word32] + 0xC<32>:word32] + 0x10<32> + eax_150 * 0x14<32>:word32] = Mem189[eax_190 + 0xD8<32>:word32]
l0072A6E3:
	word32 eax_209 = fn0072A350(eax, dwArg04)
	fn00727290(eax)
	branch eax_209 == 0<32> l0072A707
l0072A6F9:
	branch Mem200[ebp_14 + 0xC<32>:word32] != 0<32> l0072A70F
l0072A70F:
l0072A700:
l0072A711:
	word32 ecx_462
	word32 eax_245 = fn00729040(eax, es, ds, eax_209, out ecx_462)
	word32 v17_250 = Mem236[eax_209:word32] + 0xFFFFFFFF<32>
	Mem251[eax_209:word32] = v17_250
	branch v17_250 != 0<32> l0072A72E
l0072A722:
	word32 ecx_254 = Mem251[eax_209 + 4<32>:word32]
	call Mem251[ecx_254 + 0x18<32>:word32] (retsize: 4;)
		uses: eax:eax_245,ecx:ecx_254,Stack +0004:eax_209,Stack +0008:dwArg04,Stack +0020:dwArg04
l0072A72E:
	return 1<32>
l0072A620:
	branch fn0072B360(eax, dwArg04) == 0<32> l0072A707
l0072A707:
	return 0<32>
l0072A634:
	ebp_314 = ebp_314 + 1<32>
l0072A600:
	return eax_20
fn0072A5D0_exit:


word32 fn0072A740(word32 eax, word32 ebx)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0072A940
// MayUse:  eax:[0..31] ebx:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ebp ecx edi edx esi Top
// Preserved: esp
fn0072A740_entry:
l0072A740:
	word32 eax_23 = strchr(eax + 0x14<32>, 0x2E<32>)
	word32 esp_129 = fp - 0x10<32>
	branch eax_23 == 0<32> l0072A7D0
l0072A759:
	word32 esi_152 = eax_23 + 1<32>
	esp_129 = fp - 0x10<32>
l0072A760:
	word32 eax_52
	word32 esp_31 = esp_129 - 4<i32>
	Mem32[esp_31:word32] = 0x2E<32>
	Mem35[esp_31 - 4<i32>:word32] = esi_152
	word32 eax_36 = strchr(Mem35[esp_31 - 4<i32>:(ptr32 charconst )], Mem35[esp_31:int32])
	branch eax_36 == 0<32> l0072A772
l0072A772:
	word32 eax_42 = esi_152
	word32 edx_43 = esi_152 + 1<32>
l0072A777:
	eax_42 = eax_413 + 1<32>
	eax_413 = eax_42
	branch Mem35[eax_413:byte] != 0<8> l0072A777
l0072A780:
	eax_52 = eax_42 - edx_43
l0072A76E:
	eax_52 = eax_36 - esi_152
l0072A782:
	Mem60[esp_31:word32] = eax_52
	Mem64[esp_31 - 4<i32>:word32] = esi_152
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 stackArg8 = <invalid>
	word32 edx_405
	word32 ecx_404
	word32 eax_80 = fn006EC9B0(stackArg4, stackArg8, out ecx_404, out edx_405)
	branch eax_80 == 0<32> l0072A806
l0072A806:
	return 0xFFFFFFFF<32>
l0072A792:
	word32 ecx_410
	word32 eax_110 = fn007276E0(eax_80, Mem64[Mem64[ebx + 0x18<32>:word32] + 0xC<32>:word32], out ecx_410)
	branch eax_110 < 0<32> l0072A80E
l0072A7A7:
	esp_129 = fp - 0x10<32>
	word32 ecx_124
	branch fn00727810(ebx, 0x69<32>, eax_110, out ecx_124) == 0<32> l0072A80E
l0072A7B8:
	word32 v15_133 = Mem121[eax_80:word32] + 0xFFFFFFFF<32>
	Mem134[eax_80:word32] = v15_133
	branch v15_133 != 0<32> l0072A7C9
l0072A7BD:
	word32 edx_137 = Mem134[eax_80 + 4<32>:word32]
	word32 eax_138 = Mem134[edx_137 + 0x18<32>:word32]
	word32 esp_141
	call eax_138 (retsize: 4;)
		uses: eax:eax_138,ecx:ecx_124,edx:edx_137,Stack +0004:eax_80
		defs: esp:esp_141
	esp_129 = esp_141 + 4<32>
l0072A7C9:
	esi_152 = eax_36 + 1<32>
	branch eax_36 != 0<32> l0072A760
l0072A7D0:
	word32 eax_159 = Mem157[ebx + 0x18<32>:word32]
	word32 edx_163 = Mem157[esp_129 + 0x14<32>:word32]
	Mem164[esp_129 + 0xC<32>:word32] = Mem157[eax_159 + 0xC<32>:word32]
	word32 edi_165 = 0x8DA718<32>
	word32 esi_166 = edx_163 + 0x14<32>
	word32 ecx_167 = 0xA<32>
	bool v21_313 = false
l0072A7ED:
	branch ecx_167 == 0<32> l0072A7EF
l0072A7ED_1:
	v21_313 = Mem164[esi_414:byte] != Mem164[edi_415:byte]
	esi_166 = esi_414 + 1<i32>
	edi_165 = edi_415 + 1<i32>
	ecx_167 = ecx_167 - 1<32>
	esi_414 = esi_166
	edi_415 = edi_165
	branch Mem164[esi_414:byte] != Mem164[edi_415:byte] l0072A7ED
l0072A7EF:
	branch v21_313 l0072A815
l0072A815:
	word32 esp_185 = esp_129 - 4<i32>
	Mem188[esp_185:word32] = edx_163
	Mem193[esp_185 - 4<i32>:word32] = Mem188[eax_159 + 0x1C<32>:word32]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 stackArg8 = <invalid>
	word32 edx_408
	word32 eax_207 = fn00726150(stackArg4, stackArg8, out edx_408)
	branch eax_207 == 0<32> l0072A80E
l0072A80E:
	return 0<32>
l0072A828:
	word32 ecx_230 = Mem193[Mem193[ebx + 0x18<32>:word32]:word32]
	Mem232[esp_185:word32] = eax_207
	Mem234[esp_185 - 4<i32>:word32] = ecx_230
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 edx_412
	word32 ecx_240
	word32 eax_241 = fn007475E0(stackArg4, out ecx_240, out edx_412)
	word32 edi_238 = 3<32>
	word32 eax_245 = eax_241 + 0xFFFFFFFF<32>
	branch eax_241 >u 5<32> l0072A891
l0072A846:
	switch (eax_241 + 0xFFFFFFFF<32>) { l0072A86F l0072A88C l0072A87D l0072A84D l0072A85E }
l0072A85E:
	ecx_240 = Mem234[ebx + 0x18<32>:word32]
	Mem251[esp_185 + 0x10<32>:word32] = Mem234[ecx_240 + 0x14<32>:word32]
	edi_238 = 2<32>
l0072A84D:
	eax_245 = Mem234[Mem234[ebx + 0x18<32>:word32] + 0x18<32>:word32]
	Mem255[esp_185 + 0x10<32>:word32] = eax_245
	edi_238 = 2<32>
l0072A87D:
	eax_245 = Mem234[Mem234[ebx + 0x18<32>:word32]:word32]
	branch Mem234[eax_245 + 0x1C<32>:word32] != 0<32> l0072A891
l0072A887:
	branch Mem234[eax_245 + 0x20<32>:word32] != 0<32> l0072A891
l0072A88C:
	edi_238 = 1<32>
l0072A86F:
	eax_245 = Mem234[ebx + 0x18<32>:word32]
	ecx_240 = Mem234[eax_245:word32]
	branch Mem234[ecx_240 + 0x1C<32>:word32] != 0<32> l0072A891
l0072A879:
	edi_238 = 0<32>
l0072A891:
	word32 eax_290
	call Mem272[edi_238 * 4<32> + 0x72A930<32>:word32] (retsize: 0;)
		uses: eax:eax_280,ecx:ecx_274
		defs: eax:eax_290
	return eax_290
l0072A7F1:
	Mem303[esp_129 + 0x14<32>:word32] = 0x8DA884<32>
l0072A801_thunk_fn00728360:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	return fn00728360(ebx, stackArg4)
fn0072A740_exit:


word32 fn0072A940(word32 eax, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0072D920
// MayUse:  eax:[0..31] Stack +0004:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn0072A940_entry:
l0072A940:
	word32 dwLoc0C_438
	word32 eax_11 = Mem7[dwArg04 + 4<32>:word32]
	word32 ebp_15 = 0<32>
	word32 esp_20 = fp - 0x24<32>
	branch eax_11 != 0<32> l0072A95C
l0072A95C:
	dwLoc0C_438 = Mem22[eax_11:word32]
l0072A956:
	dwLoc0C_438 = 0<32>
l0072A962:
	branch dwLoc0C_438 <= 0<32> l0072ABEA
l0072A970:
	word32 esp_48
	word32 edi_38 = Mem34[Mem34[Mem34[esp_20 + 0x28<32>:word32] + 4<32>:word32] + 4<32> + ebp_15 * 4<32>:word32]
	word32 eax_40 = Mem34[eax + 0xC<32>:word32]
	branch eax_40 == 0<32> l0072A98E
l0072A982:
	branch (Mem34[eax_40:word32] & 0x4000<32>) == 0<32> l0072A98E
l0072A98E:
	esp_48 = esp_20 - 4<i32>
	Mem49[esp_48:word32] = 0xFFFFFFFF<32>
l0072A98A:
	esp_48 = esp_20 - 4<i32>
	Mem51[esp_48:word32] = 0<32>
l0072A990:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 edx_576
	word32 ecx_575
	word32 eax_68 = fn007050A0(stackArg4, out ecx_575, out edx_576)
	branch eax_68 == 0<32> l0072AA33
l0072A9A2:
	Mem82[esp_48:word32] = Mem78[Mem78[eax + 0x18<32>:word32] + 8<32>:word32]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_578
	word32 eax_85 = fn007276E0(eax_68, stackArg4, out ecx_578)
	branch eax_85 < 0<32> l0072AA33
l0072A9B7:
	Mem95[esp_48:word32] = eax_85
	Mem97[esp_48 - 4<i32>:word32] = 0x64<32>
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 esp_99 = esp_48 - 4<i32>
	byte stackArg4 = <invalid>
	word32 esp_105 = esp_99 + 8<32>
	word32 ecx_580
	branch fn00727810(eax, stackArg4, dwArg04, out ecx_580) == 0<32> l0072AA33
l0072A9C8:
	word32 v15_109 = Mem97[eax_68:word32] + 0xFFFFFFFF<32>
	Mem110[eax_68:word32] = v15_109
	branch v15_109 != 0<32> l0072A9D9
l0072A9CD:
	word32 edx_113 = Mem110[eax_68 + 4<32>:word32]
	word32 eax_114 = Mem110[edx_113 + 0x18<32>:word32]
	Mem116[esp_99 + 4<32>:word32] = eax_68
	word32 esp_117
	word32 ecx_119
	call eax_114 (retsize: 4;)
		uses: eax:eax_114,ecx:ecx_119,edx:edx_113,Stack +0008:dwArg04
		defs: ecx:ecx_119,esp:esp_117
	esp_105 = esp_117 + 4<32>
l0072A9D9:
	word32 esp_130 = esp_105 - 4<i32>
	Mem131[esp_130:word32] = Mem126[Mem126[eax + 0x18<32>:word32] + 8<32>:word32]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_582
	word32 eax_138 = fn007276E0(0xA163B8<32>, stackArg4, out ecx_582)
	branch eax_138 < 0<32> l0072AA33
l0072A9F1:
	Mem148[esp_130:word32] = eax_138
	Mem150[esp_130 - 4<i32>:word32] = 0x64<32>
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	byte stackArg4 = <invalid>
	word32 ecx_584
	branch fn00727810(eax, stackArg4, dwArg04, out ecx_584) == 0<32> l0072AA33
l0072AA02:
	Mem165[esp_130:word32] = Mem150[Mem150[eax + 0x18<32>:word32] + 0xC<32>:word32]
	Mem168[esp_130 - 4<i32>:word32] = 0x6B<32>
	branch fn00728FE0(eax, dwArg04) == 0<32> l0072AA33
l0072AA19:
	word32 eax_179 = Mem168[edi_38 + 4<32>:word32]
	branch eax_179 == 0<32> l0072AA3D
l0072AA3D:
	word32 ebp_183 = Mem168[edi_38:word32]
	Mem186[esp_130:word32] = 0x2E<32>
	Mem188[esp_130 - 4<i32>:word32] = ebp_183 + 0x14<32>
	Mem189[esp_130 + 0x14<32>:word32] = ebp_183
	word32 eax_190 = strchr(Mem189[esp_130 - 4<i32>:(ptr32 charconst )], Mem189[esp_130:int32])
	Mem194[esp_130 + 0x24<32>:word32] = eax_190
	branch eax_190 == 0<32> l0072AA6C
l0072AA5A:
	Mem199[esp_130:word32] = eax_190 - (ebp_183 + 0x14<32>)
	Mem201[esp_130 - 4<i32>:word32] = ebp_183 + 0x14<32>
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_586
	word32 edx_587
	word32 eax_203 = fn006EC9B0(stackArg4, dwArg04, out ecx_586, out edx_587)
	Mem210[esp_130 + 0x14<32>:word32] = eax_203
	ebp_183 = eax_203
l0072AA6C:
	word32 eax_214 = Mem213[eax + 0x18<32>:word32]
	Mem217[esp_105 + 0x14<32>:word32] = Mem213[eax_214 + 0xC<32>:word32]
	word32 edi_218 = 0x8DA718<32>
	word32 esi_220 = ebp_183 + 0x14<32>
	word32 ecx_221 = 0xA<32>
	bool v19_429 = false
l0072AA85:
	branch ecx_221 == 0<32> l0072AA87
l0072AA85_1:
	v19_429 = Mem217[esi_594:byte] != Mem217[edi_595:byte]
	esi_220 = esi_594 + 1<i32>
	edi_218 = edi_595 + 1<i32>
	ecx_221 = ecx_221 - 1<32>
	esi_594 = esi_220
	edi_595 = edi_218
	branch Mem217[esi_594:byte] != Mem217[edi_595:byte] l0072AA85
l0072AA87:
	word32 esi_262
	word32 eax_257
	branch v19_429 l0072AA9D
l0072AA9D:
	word32 eax_240 = Mem217[eax_214 + 0x1C<32>:word32]
	word32 esp_243 = esp_105 - 4<i32>
	Mem246[esp_243:word32] = ebp_183
	Mem248[esp_243 - 4<i32>:word32] = eax_240
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 edx_589
	eax_257 = fn00726150(stackArg4, dwArg04, out edx_589)
	esi_262 = eax_257
	branch eax_257 == 0<32> l0072ABB4
l0072AAB4:
	word32 edx_268 = Mem248[Mem248[eax + 0x18<32>:word32]:word32]
	Mem270[esp_243:word32] = eax_257
	Mem272[esp_243 - 4<i32>:word32] = edx_268
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_592
	word32 edx_593
	word32 eax_278 = fn007475E0(stackArg4, out ecx_592, out edx_593)
	word32 edi_276 = 3<32>
	word32 eax_283 = eax_278 + 0xFFFFFFFF<32>
	branch eax_278 >u 5<32> l0072AB20
l0072AAD2:
	switch (eax_278 + 0xFFFFFFFF<32>) { l0072AAFB l0072AB1B l0072AB0A l0072AAD9 l0072AAEA }
l0072AAEA:
	eax_283 = Mem272[Mem272[eax + 0x18<32>:word32] + 0x14<32>:word32]
	Mem289[esp_243 + 0x18<32>:word32] = eax_283
	edi_276 = 2<32>
l0072AAD9:
	eax_283 = Mem272[eax + 0x18<32>:word32]
	Mem293[esp_243 + 0x18<32>:word32] = Mem272[eax_283 + 0x18<32>:word32]
	edi_276 = 2<32>
l0072AB0A:
	eax_283 = Mem272[Mem272[eax + 0x18<32>:word32]:word32]
	branch Mem272[eax_283 + 0x1C<32>:word32] != 0<32> l0072AB20
l0072AB15:
	branch Mem272[eax_283 + 0x20<32>:word32] != 0<32> l0072AB20
l0072AB1B:
	edi_276 = 1<32>
l0072AAFB:
	branch Mem272[Mem272[Mem272[eax + 0x18<32>:word32]:word32] + 0x1C<32>:word32] != 0<32> l0072AB20
l0072AB06:
	edi_276 = 0<32>
l0072AB20:
	word32 eax_325
	word32 ecx_326
	word32 edx_327
	call Mem310[edi_276 * 4<32> + 0x72AC0C<32>:word32] (retsize: 0;)
		uses: eax:eax_314,ecx:ecx_326,edx:edx_327,Stack +0004:dwArg04
		defs: eax:eax_325,ecx:ecx_326,edx:edx_327
	return eax_325
l0072AA89:
	Mem331[esp_105 - 4<i32>:word32] = 0x8DA884<32>
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	eax_257 = fn00728360(eax, stackArg4)
l0072ABB2:
	esi_262 = eax_257
l0072ABB4:
	esp_20 = esp_105
	branch Mem343[esp_105 + 0x20<32>:word32] == 0<32> l0072ABCD
l0072ABBB:
	word32 v16_347 = Mem343[ebp_183:word32] + 0xFFFFFFFF<32>
	Mem348[ebp_183:word32] = v16_347
	branch v16_347 != 0<32> l0072ABCD
l0072ABC1:
	word32 ecx_351 = Mem348[ebp_183 + 4<32>:word32]
	word32 edx_352 = Mem348[ecx_351 + 0x18<32>:word32]
	Mem354[esp_105 - 4<i32>:word32] = ebp_183
	word32 esp_360
	word32 edx_363
	call edx_352 (retsize: 4;)
		uses: eax:eax_356,ecx:ecx_351,edx:edx_363,Stack +0008:dwArg04
		defs: edx:edx_363,esp:esp_360
	esp_20 = esp_360 + 4<32>
l0072ABCD:
	branch esi_262 == 0<32> l0072AA33
l0072ABD5:
	ebp_15 = Mem373[esp_20 + 0x1C<32>:word32]
l0072AA20:
	Mem376[esp_130:word32] = eax_179
	esp_20 = esp_130 + 4<32>
	branch fn0072A740(Mem376[edi_38:word32], eax) != 0<32> l0072ABD9
l0072ABD9:
	ebp_15 = ebp_15 + 1<32>
	Mem393[esp_20 + 0x1C<32>:word32] = ebp_15
	branch ebp_15 < Mem391[esp_20 + 0x18<32>:word32] l0072A970
l0072ABEA:
	return 1<32>
l0072AA33:
	return 0<32>
fn0072A940_exit:


word32 fn0072AC20(word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0072D920
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn0072AC20_entry:
l0072AC20:
	word32 edi_25
	word32 eax_9 = Mem7[dwArg08 + 8<32>:word32]
	branch eax_9 != 0<32> l0072AC3E
l0072AC3E:
	edi_25 = Mem21[eax_9:word32]
l0072AC36:
	edi_25 = 0<32>
l0072AC46:
	word32 ecx_918
	word32 edx_919
	word32 eax_39 = fn006DFD20(edi_25, out ecx_918, out edx_919)
	branch eax_39 == 0<32> l0072AC93
l0072AC59:
	branch Mem48[dwArg08 + 0xC<32>:word32] != 0<32> l0072AC73
l0072AC60:
	word32 ecx_54 = Mem48[dwArg04 + 0xC<32>:word32]
	branch ecx_54 == 0<32> l0072AC73
l0072AC67:
	branch (Mem48[ecx_54:word32] & 0x4000<32>) != 0<32> l0072AC73
l0072AC73:
l0072AC6F:
l0072AC74:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_921
	word32 edx_922
	word32 eax_79 = fn007050A0(stackArg4, out ecx_921, out edx_922)
	word32 esp_597 = fp - 0x20<32>
	branch eax_79 != 0<32> l0072AC9D
l0072AC9D:
	word32 eax_106 = 0<32>
	branch edi_25 <= 0<32> l0072ACD2
l0072ACA3:
	word32 esi_104 = eax_39 + 0xC<32>
l0072ACB0:
	word32 ecx_99 = Mem95[Mem95[dwArg08 + 8<32>:word32] + 4<32> + eax_106 * 4<32>:word32]
	word32 edx_100 = Mem95[ecx_99:word32]
	Mem102[edx_100:word32] = Mem95[edx_100:word32] + 1<32>
	Mem105[esi_104:word32] = Mem102[ecx_99:word32]
	eax_106 = eax_106 + 1<32>
	esi_104 = esi_104 + 4<32>
	branch eax_106 < edi_25 l0072ACB0
l0072ACCE:
l0072ACD2:
	branch Mem113[dwArg08 + 0x14<32>:word32] <= Mem113[Mem113[dwArg04 + 8<32>:word32] + 4<32>:word32] l0072AD38
l0072ACE1:
	word32 esi_123 = Mem113[dwArg08 + 4<32>:word32] + 0x14<32>
	word32 edi_124 = 0x8DA8F0<32>
	word32 ecx_125 = 0xB<32>
	bool v25_678 = false
l0072ACF3:
	branch ecx_125 == 0<32> l0072ACF5
l0072ACF3_1:
	v25_678 = Mem113[esi_937:byte] != Mem113[edi_938:byte]
	esi_123 = esi_937 + 1<i32>
	edi_124 = edi_938 + 1<i32>
	ecx_125 = ecx_125 - 1<32>
	esi_937 = esi_123
	edi_938 = edi_124
	branch Mem113[esi_937:byte] != Mem113[edi_938:byte] l0072ACF3
l0072ACF5:
	branch v25_678 l0072AD34
l0072AD34:
l0072AD38:
	word32 ecx_923
	branch fn007276E0(eax_79, Mem113[Mem113[dwArg04 + 0x18<32>:word32] + 8<32>:word32], out ecx_923) < 0<32> l0072AC93
l0072AD51:
	word32 esp_191 = fp - 0x20<32>
	word32 ecx_924
	branch fn00727810(dwArg04, 0x64<32>, dwArg04, out ecx_924) == 0<32> l0072AC93
l0072AD66:
	word32 v18_195 = Mem183[eax_79:word32] + 0xFFFFFFFF<32>
	Mem196[eax_79:word32] = v18_195
	branch v18_195 != 0<32> l0072AD77
l0072AD6B:
	word32 edx_199 = Mem196[eax_79 + 4<32>:word32]
	word32 esp_203
	call Mem196[edx_199 + 0x18<32>:word32] (retsize: 4;)
		uses: edx:edx_199,Stack +0004:eax_79,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +002C:dwArg04,Stack +0030:dwArg08
		defs: esp:esp_203
	esp_191 = esp_203 + 4<32>
l0072AD77:
	word32 esp_216 = esp_191 - 4<i32>
	Mem217[esp_216:word32] = Mem212[Mem212[dwArg04 + 0x18<32>:word32] + 8<32>:word32]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_926
	word32 eax_224 = fn007276E0(eax_39, stackArg4, out ecx_926)
	branch eax_224 < 0<32> l0072AC93
l0072AD90:
	Mem234[esp_216:word32] = eax_224
	Mem236[esp_216 - 4<i32>:word32] = 0x64<32>
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	byte stackArg4 = <invalid>
	word32 esp_244 = esp_216 + 4<32>
	word32 ecx_929
	branch fn00727810(dwArg04, stackArg4, dwArg04, out ecx_929) == 0<32> l0072AC93
l0072ADA5:
	word32 v20_248 = Mem236[eax_39:word32] + 0xFFFFFFFF<32>
	Mem249[eax_39:word32] = v20_248
	branch v20_248 != 0<32> l0072ADB6
l0072ADAA:
	word32 edx_252 = Mem249[eax_39 + 4<32>:word32]
	word32 eax_253 = Mem249[edx_252 + 0x18<32>:word32]
	Mem255[esp_216:word32] = eax_39
	word32 esp_256
	call eax_253 (retsize: 4;)
		uses: edx:edx_252,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: esp:esp_256
	esp_244 = esp_256 + 4<32>
l0072ADB6:
	word32 esp_271 = esp_244 - 4<i32>
	Mem272[esp_271:word32] = Mem265[Mem265[dwArg04 + 0x18<32>:word32] + 0xC<32>:word32]
	Mem274[esp_271 - 4<i32>:word32] = 0x6B<32>
	branch fn00728FE0(dwArg04, dwArg04) == 0<32> l0072AC93
l0072ADD8:
	Mem291[esp_271 + 0x20<32>:word32] = 0<32>
	word32 eax_289 = 0<32>
	branch Mem274[esp_271 + 0x14<32>:word32] <= 0<32> l0072AFB3
l0072ADE8:
l0072ADF0:
	word32 esi_300 = Mem297[Mem297[Mem297[esp_244 + 0x28<32>:word32] + 8<32>:word32] + 4<32> + eax_289 * 4<32>:word32]
	branch eax_289 != 0<32> l0072AE0B
l0072ADFF:
	branch Mem297[Mem297[esi_300:word32] + 0x14<32>:byte] == 0x2A<8> l0072AF76
l0072AF76:
	return fn00727670(dwArg04, 0x54<32>) == 0<32>
l0072AE0B:
	word32 esp_337 = esp_244 - 4<i32>
	Mem338[esp_337:word32] = Mem297[Mem297[dwArg04 + 0x18<32>:word32] + 0xC<32>:word32]
	Mem340[esp_337 - 4<i32>:word32] = 0x6C<32>
	branch fn00728FE0(dwArg04, dwArg04) == 0<32> l0072AC93
l0072AE28:
	word32 eax_356 = Mem340[dwArg04 + 0x18<32>:word32]
	word32 edx_354 = Mem340[esi_300:word32]
	word32 esi_355 = Mem340[esi_300 + 4<32>:word32]
	word32 ecx_357 = Mem340[eax_356 + 0xC<32>:word32]
	branch esi_355 == 0<32> l0072AE38
l0072AE35_1:
	edx_354 = esi_355
l0072AE38:
	Mem364[esp_337 + 0x1C<32>:word32] = ecx_357
	word32 edi_365 = 0x8DA718<32>
	word32 esi_367 = edx_354 + 0x14<32>
	word32 ecx_368 = 0xA<32>
	bool v29_682 = false
l0072AE4B:
	branch ecx_368 == 0<32> l0072AE4D
l0072AE4B_1:
	v29_682 = Mem364[esi_939:byte] != Mem364[edi_940:byte]
	esi_367 = esi_939 + 1<i32>
	edi_365 = edi_940 + 1<i32>
	ecx_368 = ecx_368 - 1<32>
	esi_939 = esi_367
	edi_940 = edi_365
	branch Mem364[esi_939:byte] != Mem364[edi_940:byte] l0072AE4B
l0072AE4D:
	branch v29_682 l0072AE63
l0072AE63:
	Mem389[esp_337:word32] = edx_354
	Mem395[esp_337 - 4<i32>:word32] = Mem389[eax_356 + 0x1C<32>:word32]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 edx_932
	word32 eax_407 = fn00726150(stackArg4, dwArg04, out edx_932)
	branch eax_407 == 0<32> l0072AF90
l0072AE7A:
	word32 ecx_418 = Mem395[Mem395[dwArg04 + 0x18<32>:word32]:word32]
	Mem420[esp_337:word32] = eax_407
	Mem422[esp_337 - 4<i32>:word32] = ecx_418
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 edi_426 = 3<32>
	word32 edx_936
	word32 ecx_935
	word32 eax_428 = fn007475E0(stackArg4, out ecx_935, out edx_936)
	branch eax_428 >u 5<32> l0072AEE3
l0072AE98:
	switch (eax_428 + 0xFFFFFFFF<32>) { l0072AEC1 l0072AEDE l0072AECF l0072AE9F l0072AEB0 }
l0072AEB0:
	Mem439[esp_337 + 0x1C<32>:word32] = Mem422[Mem422[dwArg04 + 0x18<32>:word32] + 0x14<32>:word32]
	edi_426 = 2<32>
l0072AE9F:
	Mem443[esp_337 + 0x1C<32>:word32] = Mem422[Mem422[dwArg04 + 0x18<32>:word32] + 0x18<32>:word32]
	edi_426 = 2<32>
l0072AECF:
	word32 eax_446 = Mem422[Mem422[dwArg04 + 0x18<32>:word32]:word32]
	branch Mem422[eax_446 + 0x1C<32>:word32] != 0<32> l0072AEE3
l0072AED9:
	branch Mem422[eax_446 + 0x20<32>:word32] != 0<32> l0072AEE3
l0072AEDE:
	edi_426 = 1<32>
l0072AEC1:
	branch Mem422[Mem422[Mem422[dwArg04 + 0x18<32>:word32]:word32] + 0x1C<32>:word32] != 0<32> l0072AEE3
l0072AECB:
	edi_426 = 0<32>
l0072AEE3:
	word32 eax_473
	call Mem460[edi_426 * 4<32> + 0x72B02C<32>:word32] (retsize: 0;)
		uses: Stack +0004:dwArg04,Stack +0008:dwArg08
		defs: eax:eax_473
	return eax_473
l0072AE4F:
	Mem479[esp_337:word32] = 0x8DA884<32>
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 eax_482 = fn00728360(dwArg04, stackArg4)
l0072AF5C:
	branch eax_482 == 0<32> l0072AF90
l0072AF90:
	word32 eax_494 = Mem493[esp_244 + 0x14<32>:word32]
	word32 v23_495 = Mem493[eax_494:word32] + 0xFFFFFFFF<32>
	Mem496[eax_494:word32] = v23_495
	branch v23_495 != 0<32> l0072AC93
l0072AF9D:
	word32 ecx_499 = Mem496[eax_494 + 4<32>:word32]
	word32 edx_500 = Mem496[ecx_499 + 0x18<32>:word32]
	Mem502[esp_244 - 4<i32>:word32] = eax_494
	call edx_500 (retsize: 4;)
		uses: ecx:ecx_499,Stack +0008:dwArg04,Stack +000C:dwArg08
	return 0<32>
l0072AF60:
	word32 eax_526 = Mem479[esp_337 + 0x20<32>:word32]
	Mem529[esp_337 + 0x20<32>:word32] = eax_526 + 1<32>
	eax_289 = eax_526 + 1<32>
	branch eax_526 + 1<32> >= Mem479[esp_337 + 0x14<32>:word32] l0072AFB3
l0072AFB3:
	word32 ecx_930
	word32 eax_540 = fn00727420(Mem532[Mem532[dwArg04 + 0x18<32>:word32] + 0x28<32>:word32], out ecx_930)
	branch eax_540 < 0<32> l0072AC93
l0072AFC6:
	word32 eax_551 = Mem532[Mem532[Mem532[dwArg04 + 0x18<32>:word32] + 0x28<32>:word32] + 0xC<32>:word32]
	Mem555[eax_551 + eax_540 * 0x14<32>:word32] = Mem532[eax_551 + eax_540 * 0x14<32>:word32] & 0xFFFFFFFB<32>
	Mem558[eax_551 + eax_540 * 0x14<32> + 4<32>:byte] = 1<8>
	word32 edx_559 = Mem558[dwArg04 + 0x18<32>:word32]
	branch Mem558[edx_559 + 0xDC<32>:word32] != 0<32> l0072B00B
l0072AFEC:
	Mem563[edx_559 + 0xDC<32>:word32] = 1<32>
	word32 ebp_564 = Mem563[dwArg04 + 0x18<32>:word32]
	Mem568[Mem563[Mem563[ebp_564 + 0x28<32>:word32] + 0xC<32>:word32] + 0x10<32> + eax_540 * 0x14<32>:word32] = Mem563[ebp_564 + 0xD8<32>:word32]
l0072B00B:
	return 1<32>
l0072AF71:
l0072ACF7:
	word32 v15_582 = Mem113[eax_79:word32] + 0xFFFFFFFF<32>
	Mem583[eax_79:word32] = v15_582
	branch v15_582 != 0<32> l0072AD08
l0072ACFC:
	word32 eax_586 = Mem583[eax_79 + 4<32>:word32]
	word32 esp_591
	call Mem583[eax_586 + 0x18<32>:word32] (retsize: 4;)
		uses: eax:eax_586,Stack +0004:eax_79,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +002C:dwArg04,Stack +0030:dwArg08
		defs: esp:esp_591
	esp_597 = esp_591 + 4<32>
l0072AD08:
	word32 eax_601 = Mem600[esp_597 + 0x14<32>:word32]
	word32 v19_602 = Mem600[eax_601:word32] + 0xFFFFFFFF<32>
	Mem603[eax_601:word32] = v19_602
	branch v19_602 != 0<32> l0072AD1D
l0072AD11:
	word32 edx_606 = Mem603[eax_601 + 4<32>:word32]
	Mem608[esp_597 - 4<i32>:word32] = eax_601
	word32 esp_615
	call Mem608[edx_606 + 0x18<32>:word32] (retsize: 4;)
		uses: edx:edx_606,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: esp:esp_615
	esp_597 = esp_615 + 4<32>
l0072AD1D:
	Mem625[esp_597 - 4<i32>:word32] = 0x8DA8B0<32>
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	return fn00728360(dwArg04, stackArg4)
l0072AC82:
	word32 v13_649 = Mem114[eax_39:word32] + 0xFFFFFFFF<32>
	Mem650[eax_39:word32] = v13_649
	branch v13_649 != 0<32> l0072AC93
l0072AC87:
	word32 ecx_653 = Mem650[eax_39 + 4<32>:word32]
	call Mem650[ecx_653 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_653,Stack +0004:eax_39,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +002C:dwArg04,Stack +0030:dwArg08
l0072AC93:
	return 0<32>
fn0072AC20_exit:


word32 fn0072B040(word32 edi, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0072B360
// MayUse:  edi:[0..31] Stack +0004:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ebp ebx ecx edx esi Top
// Preserved: esp
fn0072B040_entry:
l0072B040:
	word32 ebp_15 = 0<32>
	word32 dwLoc08_409 = 0<32>
	word32 eax_23 = fn0072B360(edi, Mem10[dwArg04 + 4<32>:word32])
	branch eax_23 != 0<32> l0072B066
l0072B066:
	word32 ebx_35 = Mem34[dwArg04 + 8<32>:word32]
	branch ebx_35 != 0<32> l0072B074
l0072B074:
l0072B06E:
l0072B07A:
l0072B080:
	word32 eax_50
	branch ebx_35 != 0<32> l0072B088
l0072B088:
	eax_50 = Mem49[ebx_35:word32]
l0072B084:
	eax_50 = 0<32>
l0072B08A:
	branch ebp_15 >= eax_50 l0072B0AA
l0072B0AA:
	word32 eax_63 = Mem49[dwArg04 + 0xC<32>:word32]
	branch eax_63 == 0<32> l0072B198
l0072B0BD:
	word32 dwLoc10_485 = 0<32>
	word32 dwLoc0C_486 = eax_63 + 4<32>
l0072B0D0:
	word32 eax_72 = eax_63
	branch eax_63 == 0<32> l0072B0D6
l0072B0D4:
	eax_72 = Mem76[eax_63:word32]
l0072B0D6:
	branch dwLoc10_485 >= eax_72 l0072B188
l0072B188:
	branch Mem76[dwArg04 + 0xC<32>:word32] == 0<32> l0072B191
l0072B18F:
l0072B191:
l0072B198:
	branch Mem101[dwArg04 + 0x10<32>:word32] == 0<32> l0072B1B9
l0072B19F:
	branch fn0072B360(edi, dwArg04) == 0<32> l0072B264
l0072B1B1:
	dwLoc08_409 = 1<32>
l0072B1B9:
	word32 eax_150
	branch Mem144[dwArg04 + 0x14<32>:word32] == 0<32> l0072B1DB
l0072B1DB:
	eax_150 = dwLoc08_409
l0072B1C0:
	branch fn0072B360(edi, dwArg04) == 0<32> l0072B264
l0072B1D2:
	eax_150 = dwLoc08_409 | 2<32>
l0072B1DF:
	branch eax_150 >u 3<32> l0072B26D
l0072B1E8:
	switch (eax_150) { l0072B1EF l0072B20E l0072B22D l0072B24C }
l0072B24C:
	word32 ecx_597
	branch fn00727810(edi, 0x8E<32>, dwArg04, out ecx_597) != 0<32> l0072B26D
l0072B22D:
	word32 ecx_596
	word32 eax_206 = fn00727810(edi, 0x8D<32>, dwArg04, out ecx_596)
	branch eax_206 != 0<32> l0072B26D
l0072B245:
	return eax_206
l0072B20E:
	word32 ecx_595
	word32 eax_230 = fn00727810(edi, 0x8C<32>, dwArg04, out ecx_595)
	branch eax_230 != 0<32> l0072B26D
l0072B226:
	return eax_230
l0072B1EF:
	word32 ecx_594
	word32 eax_254 = fn00727810(edi, 0x83<32>, dwArg04, out ecx_594)
	branch eax_254 != 0<32> l0072B26D
l0072B26D:
	return 1<32>
l0072B207:
	return eax_254
l0072B0E0:
	word32 ecx_592
	word32 eax_290 = fn007276E0(Mem76[Mem76[dwLoc0C_486:word32]:word32], Mem76[Mem76[edi + 0x18<32>:word32] + 8<32>:word32], out ecx_592)
	branch eax_290 < 0<32> l0072B264
l0072B101:
	word32 ecx_593
	word32 eax_303 = fn00727420(Mem288[Mem288[edi + 0x18<32>:word32] + 0x28<32>:word32], out ecx_593)
	branch eax_303 < 0<32> l0072B264
l0072B114:
	word32 eax_314 = Mem288[Mem288[Mem288[edi + 0x18<32>:word32] + 0x28<32>:word32] + 0xC<32>:word32]
	Mem318[eax_314 + eax_303 * 0x14<32>:word32] = Mem288[eax_314 + eax_303 * 0x14<32>:word32] | 4<32>
	word32 eax_320 = eax_314 + eax_303 * 0x14<32>
	Mem321[eax_320 + 4<32>:byte] = 0x64<8>
	Mem322[eax_320 + 8<32>:word32] = eax_290
	word32 eax_323 = Mem322[edi + 0x18<32>:word32]
	branch Mem322[eax_323 + 0xDC<32>:word32] != 0<32> l0072B15C
l0072B13D:
	Mem327[eax_323 + 0xDC<32>:word32] = 1<32>
	word32 eax_328 = Mem327[edi + 0x18<32>:word32]
	Mem332[Mem327[Mem327[eax_328 + 0x28<32>:word32] + 0xC<32>:word32] + 0x10<32> + eax_303 * 0x14<32>:word32] = Mem327[eax_328 + 0xD8<32>:word32]
l0072B15C:
	branch fn0072B360(edi, dwArg04) == 0<32> l0072B264
l0072B171:
	dwLoc10_485 = dwLoc10_485 + 1<32>
	dwLoc0C_486 = dwLoc0C_486 + 4<32>
l0072B08E:
	branch fn0072B360(edi, dwArg04) == 0<32> l0072B264
l0072B264:
	return 0<32>
l0072B0A2:
	ebp_15 = ebp_15 + 1<32>
l0072B060:
	return eax_23
fn0072B040_exit:


word32 fn0072B360(word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn007279E0
//      fn00727D50
//      fn00727EF0
//      fn00727F90
//      fn00728030
//      fn00729810
//      fn00729F50
//      fn0072A520
//      fn0072A5D0
//      fn0072B040
//      fn0072B360
//      fn0072B830
//      fn0072BB20
//      fn0072BBE0
//      fn0072BD40
//      fn0072BDC0
//      fn0072BF10
//      fn0072C110
//      fn0072C160
//      fn0072C510
//      fn0072CA10
//      fn0072CC90
//      fn0072CEE0
//      fn0072D130
//      fn0072D3D0
//      fn0072D830
//      fn0072D920
//      fn0072DD60
//      fn0072E660
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn0072B360_entry:
l0072B360:
	word32 eax_14 = Mem12[dwArg08 + 0x18<32>:word32]
	word32 ecx_19 = Mem17[dwArg04 + 0x18<32>:word32]
	word32 ebp_20 = 0<32>
	branch eax_14 <= Mem17[ecx_19 + 0xD8<32>:word32] l0072B38D
l0072B37C:
	Mem24[ecx_19 + 0xD8<32>:word32] = eax_14
	Mem26[Mem24[dwArg04 + 0x18<32>:word32] + 0xDC<32>:word32] = 0<32>
l0072B38D:
	word32 eax_29 = Mem28[dwArg08:word32]
	branch eax_29 >u 0x13<32> l0072B4D7
l0072B39B:
	word32 eax_136
	word32 ebx_445
	word32 eax_917
	switch (eax_29 + 0xFFFFFFFF<32>) { l0072B3A2 l0072B3AE l0072B3F4 l0072B40F l0072B41F l0072B42E l0072B4E1 l0072B4F0 l0072B4FD l0072B55A l0072B56A l0072B578 l0072B597 l0072B5B1 l0072B5CB l0072B690 l0072B778 l0072B78F l0072B79E }
l0072B79E:
	return fn00727F90(dwArg08)
l0072B78F:
	return fn00727EF0(dwArg08)
l0072B778:
	return fn00729510(dwArg04, Mem28[dwArg08 + 4<32>:word32], Mem28[dwArg08 + 8<32>:word32])
l0072B690:
	word32 eax_101 = Mem28[dwArg08 + 0xC<32>:word32]
	branch eax_101 >u 5<32> l0072B75E
l0072B75E:
	word32 edx_1426
	word32 ecx_1425
	fn006E0F80(Mem28[0x00A18720<p32>:word32], 0x8DA908<32>, out ecx_1425, out edx_1426)
	return 0<32>
l0072B69F:
	switch (eax_101 + 0xFFFFFFFF<32>) { l0072B6CF l0072B70C l0072B735 l0072B6A6 l0072B6F8 }
l0072B6F8:
	eax_136 = fn0072BDC0(dwArg04, Mem28[dwArg08 + 8<32>:word32], 5<32>)
l0072B6A6:
	branch fn0072B360(dwArg04, Mem28[dwArg08 + 4<32>:word32]) == 0<32> l0072B3ED
l0072B6BB:
	eax_136 = fn0072BDC0(dwArg04, dwArg04, dwArg08)
l0072B735:
	branch fn0072B360(dwArg04, Mem28[dwArg08 + 4<32>:word32]) == 0<32> l0072B3ED
l0072B74A:
	eax_136 = fn0072BDC0(dwArg04, dwArg04, dwArg08)
l0072B70C:
	branch fn0072B360(dwArg04, Mem28[dwArg08 + 4<32>:word32]) == 0<32> l0072B3ED
l0072B721:
	eax_136 = fn0072BDC0(dwArg04, dwArg04, dwArg08)
l0072B6CF:
	branch fn0072B360(dwArg04, Mem28[dwArg08 + 4<32>:word32]) == 0<32> l0072B3ED
l0072B6E4:
	eax_136 = fn0072BDC0(dwArg04, dwArg04, dwArg08)
l0072B5CB:
	branch Mem28[dwArg08 + 0xC<32>:word32] == 5<32> l0072B5E6
l0072B5D1:
	branch fn0072B360(dwArg04, Mem28[dwArg08 + 4<32>:word32]) == 0<32> l0072B3ED
l0072B5E6:
	word32 eax_282 = Mem281[dwArg08 + 0xC<32>:word32]
	branch eax_282 >u 5<32> l0072B675
l0072B675:
	word32 edx_1428
	word32 ecx_1427
	fn006E0F80(Mem281[0x00A18720<p32>:word32], dwArg04, out ecx_1427, out edx_1428)
	return 0<32>
l0072B5F5:
	switch (eax_282 + 0xFFFFFFFF<32>) { l0072B610 l0072B63F l0072B65A l0072B5FC l0072B62B }
l0072B62B:
	branch fn00727670(dwArg04, 2<32>) == 0<32> l0072B3ED
l0072B5FC:
	branch fn00727670(dwArg04, 4<32>) == 0<32> l0072B3ED
l0072B65A:
	eax_136 = fn00728FE0(dwArg04, dwArg04)
l0072B63F:
	eax_136 = fn00728FE0(dwArg04, dwArg04)
l0072B610:
	eax_136 = fn00728FE0(dwArg04, dwArg04)
l0072B5B1:
	eax_136 = fn00728FB0()
l0072B597:
	eax_136 = fn00728FB0()
l0072B578:
	branch fn0072B360(dwArg04, Mem28[dwArg08 + 4<32>:word32]) == 0<32> l0072B3ED
l0072B58D:
	ebx_445 = 0xD<32>
l0072B56A:
	return fn0072B040(dwArg04, dwArg08)
l0072B55A:
	return fn00728030(dwArg04, dwArg08)
l0072B4FD:
	branch Mem28[Mem28[Mem28[dwArg04 + 0x18<32>:word32]:word32] + 0x1C<32>:word32] == 0<32> l0072B51B
l0072B51B:
	word32 esi_487 = Mem28[dwArg08 + 4<32>:word32]
	branch esi_487 == 0<32> l0072B535
l0072B535:
	branch fn00728FB0() == 0<32> l0072B3ED
l0072B522:
	word32 eax_512 = fn0072B360(dwArg04, esi_487)
	branch eax_512 != 0<32> l0072B550
l0072B550:
	ebx_445 = 0x56<32>
l0072B530:
	return eax_512
l0072B507:
	return fn00728360(dwArg04, 0x8DA958<32>)
l0072B4F0:
l0072B290:
	word32 ebx_572 = Mem566[Mem566[Mem562[dwArg08 + 8<32>:word32] + 4<32>:word32] + 4<32>:word32]
	branch Mem566[0x00A6DBE8<p32>:word32] != 0<32> l0072B2C5
l0072B2A9:
	word32 edx_1431
	word32 ecx_1430
	word32 eax_577 = fn006ECAC0(0x8DA8FC<32>, out ecx_1430, out edx_1431)
	Mem585[0x00A6DBE8<p32>:word32] = eax_577
	branch eax_577 != 0<32> l0072B2C5
l0072B2C5:
	branch fn00728E40(eax, dwArg04, dwArg08, dwArg04) == 0<32> l0072B2BF
l0072B2D8:
	fn00729F50(dwArg04, dwArg04, dwArg08)
	word32 eax_631 = fn0072A350(dwArg04, dwArg04)
	fn00727290(dwArg04)
	branch eax_631 == 0<32> l0072B2BF
l0072B2FE:
	word32 ecx_1434
	fn00729040(dwArg04, es, ds, eax_631, out ecx_1434)
	word32 v16_660 = Mem651[eax_631:word32] + 0xFFFFFFFF<32>
	Mem661[eax_631:word32] = v16_660
	word32 esp_659 = fp - 0xC<32>
	branch v16_660 != 0<32> l0072B31C
l0072B310:
	word32 edx_664 = Mem661[eax_631 + 4<32>:word32]
	word32 esp_668
	call Mem661[edx_664 + 0x18<32>:word32] (retsize: 4;)
		uses: edx:edx_664,Stack +0004:eax_631,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0018:dwArg04,Stack +001C:dwArg08
		defs: esp:esp_668
	esp_659 = esp_668 + 4<32>
l0072B31C:
	word32 esp_677 = esp_659 - 4<i32>
	Mem679[esp_677:word32] = ebx_572
	Mem682[esp_677 - 4<i32>:word32] = dwArg04
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	branch fn0072B360(stackArg4, dwArg04) == 0<32> l0072B2BF
l0072B32A:
	branch fn00727670(dwArg04, 0x44<32>) == 0<32> l0072B2BF
l0072B33A:
	Mem708[esp_677:word32] = 1<32>
	Mem710[esp_677 - 4<32>:word32] = 0x83<32>
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	byte stackArg4 = <invalid>
	word32 ecx_1437
	return fn00727810(dwArg04, stackArg4, dwArg04, out ecx_1437) == 0<32>
l0072B2BF:
	return 0<32>
l0072B4E1:
	return fn00729D20(dwArg04, dwArg08)
l0072B42E:
	word32 ecx_1424
	branch fn00727810(dwArg04, 0x68<32>, 0<32>, out ecx_1424) == 0<32> l0072B3ED
l0072B43F:
	branch Mem765[dwArg08 + 8<32>:word32] != 0<32> l0072B44C
l0072B44C:
l0072B446:
l0072B452:
	branch dwArg04 <= 0<32> l0072B4D7
l0072B458:
l0072B460:
	branch fn00727670(dwArg04, 4<32>) == 0<32> l0072B3ED
l0072B474:
	branch fn0072B360(dwArg04, dwArg04) == 0<32> l0072B3ED
l0072B48D:
	branch fn00727670(dwArg04, 2<32>) == 0<32> l0072B3ED
l0072B4A1:
	branch fn0072B360(dwArg04, dwArg04) == 0<32> l0072B3ED
l0072B4BA:
	branch fn00727670(dwArg04, 0x3C<32>) == 0<32> l0072B3ED
l0072B4CE:
	ebp_20 = ebp_20 + 1<32>
	branch ebp_20 < dwArg04 l0072B460
l0072B41F:
	return fn007279E0(dwArg04, dwArg08)
l0072B40F:
	return fn0072A5D0(dwArg04, dwArg08)
l0072B3F4:
	branch fn0072B360(dwArg04, Mem28[dwArg08 + 8<32>:word32]) == 0<32> l0072B3ED
l0072B405:
	eax_917 = fn00727B20(Mem905[dwArg08 + 4<32>:word32])
l0072B3AE:
	branch fn0072B360(dwArg04, Mem28[dwArg08 + 4<32>:word32]) == 0<32> l0072B3ED
l0072B3BF:
	branch fn0072B360(dwArg04, dwArg04) == 0<32> l0072B3ED
l0072B3D0:
	eax_917 = fn00727B60(Mem941[dwArg08 + 8<32>:word32], dwArg04)
l0072B3DC:
	ebx_445 = eax_917
l0072B3DE:
	eax_136 = fn00727670(dwArg04, ebx_445)
l0072B3E5:
	branch eax_136 != 0<32> l0072B4D7
l0072B4D7:
	return 1<32>
l0072B3ED:
	return 0<32>
l0072B3A2:
	return fn00727D50(dwArg08, dwArg04)
fn0072B360_exit:


word32 fn0072B830(word32 eax, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0072D920
// MayUse:  eax:[0..31] Stack +0004:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn0072B830_entry:
l0072B830:
	word32 esi_22 = Mem19[eax + 4<32>:word32]
	word32 ecx_23 = Mem19[esi_22:word32]
	branch ecx_23 == 0xF<32> l0072BA7D
l0072BA7D:
	word32 edx_627
	word32 eax_47 = fn00743D80(Mem35[esi_22 + 4<32>:word32], Mem32[esi_22 + 8<32>:word32], 4<32>, Mem19[esi_22 + 0x18<32>:word32], Mem19[esi_22 + 0x1C<32>:word32], out edx_627)
	branch eax_47 == 0<32> l0072BA75
l0072BAA1:
	branch fn0072B360(dwArg04, dwArg04) == 0<32> l0072BA75
l0072BAAF:
	branch fn0072B360(dwArg04, dwArg04) == 0<32> l0072BA75
l0072BAC0:
	branch fn00727670(dwArg04, fn00727C90(Mem74[eax + 8<32>:word32], dwArg04)) == 0<32> l0072BA75
l0072BAD9:
	Mem111[eax_47 + 0xC<32>:word32] = 5<32>
	branch fn0072B360(dwArg04, dwArg04) == 0<32> l0072BA75
l0072B84B:
	branch ecx_23 == 0x10<32> l0072BA04
l0072BA04:
	word32 edx_628
	word32 eax_144 = fn00743E30(Mem132[esi_22 + 4<32>:word32], Mem129[esi_22 + 8<32>:word32], 4<32>, Mem19[esi_22 + 0x18<32>:word32], Mem19[esi_22 + 0x1C<32>:word32], out edx_628)
	branch eax_144 == 0<32> l0072BA75
l0072BA28:
	branch fn0072B360(dwArg04, dwArg04) == 0<32> l0072BA75
l0072BA36:
	branch fn0072B360(dwArg04, dwArg04) == 0<32> l0072BA75
l0072BA47:
	branch fn00727670(dwArg04, fn00727C90(Mem171[eax + 8<32>:word32], dwArg04)) == 0<32> l0072BA75
l0072BA60:
	Mem208[eax_144 + 0xC<32>:word32] = 5<32>
	branch fn0072B360(dwArg04, dwArg04) != 0<32> l0072BAEE
l0072BAEE:
	return 1<32>
l0072B854:
	branch ecx_23 == 0x11<32> l0072B875
l0072B875:
	branch fn00729510(dwArg04, Mem19[esi_22 + 4<32>:word32], 1<32>) == 0<32> l0072BA75
l0072B88D:
	branch fn0072B360(dwArg04, dwArg04) == 0<32> l0072BA75
l0072B8A2:
	branch fn00727670(dwArg04, fn00727C90(Mem255[eax + 8<32>:word32], dwArg04)) == 0<32> l0072BA75
l0072B8BF:
	word32 edx_288 = Mem268[dwArg04 + 0x18<32>:word32]
	word32 edi_292 = 0x8DA718<32>
	word32 esi_293 = Mem268[esi_22 + 4<32>:word32] + 0x14<32>
	word32 ecx_294 = 0xA<32>
	bool v16_470 = false
l0072B8DB:
	branch ecx_294 == 0<32> l0072B8DD
l0072B8DB_1:
	v16_470 = Mem291[esi_633:byte] != Mem291[edi_634:byte]
	esi_293 = esi_633 + 1<i32>
	edi_292 = edi_634 + 1<i32>
	ecx_294 = ecx_294 - 1<32>
	esi_633 = esi_293
	edi_634 = edi_292
	branch Mem291[esi_633:byte] != Mem291[edi_634:byte] l0072B8DB
l0072B8DD:
	branch v16_470 l0072B8F4
l0072B8F4:
	word32 edx_631
	branch fn00726150(Mem291[edx_288 + 0x1C<32>:word32], dwArg04, out edx_631) == 0<32> l0072BA75
l0072BA75:
	return 0<32>
l0072B90B:
	word32 edx_632
	word32 ecx_368
	word32 eax_369 = fn007475E0(Mem321[Mem321[dwArg04 + 0x18<32>:word32]:word32], out ecx_368, out edx_632)
	word32 edi_366 = 3<32>
	word32 eax_373 = eax_369 + 0xFFFFFFFF<32>
	branch eax_369 >u 5<32> l0072B974
l0072B929:
	switch (eax_369 + 0xFFFFFFFF<32>) { l0072B952 l0072B96F l0072B960 l0072B930 l0072B941 }
l0072B941:
	ecx_368 = Mem362[dwArg04 + 0x18<32>:word32]
	edi_366 = 2<32>
l0072B930:
	eax_373 = Mem362[Mem362[dwArg04 + 0x18<32>:word32] + 0x18<32>:word32]
	edi_366 = 2<32>
l0072B960:
	eax_373 = Mem362[Mem362[dwArg04 + 0x18<32>:word32]:word32]
	branch Mem362[eax_373 + 0x1C<32>:word32] != 0<32> l0072B974
l0072B96A:
	branch Mem362[eax_373 + 0x20<32>:word32] != 0<32> l0072B974
l0072B96F:
	edi_366 = 1<32>
l0072B952:
	eax_373 = Mem362[dwArg04 + 0x18<32>:word32]
	ecx_368 = Mem362[eax_373:word32]
	branch Mem362[ecx_368 + 0x1C<32>:word32] != 0<32> l0072B974
l0072B95C:
	edi_366 = 0<32>
l0072B974:
	word32 eax_418
	call Mem400[edi_366 * 4<32> + 0x72BB10<32>:word32] (retsize: 0;)
		uses: eax:eax_410,ecx:ecx_402,Stack +0004:dwArg04,Stack +0018:dwArg04
		defs: eax:eax_418
	return eax_418
l0072B8DF:
	return fn00728360(dwArg04, 0x8DA884<32>)
l0072B859:
	word32 ecx_629
	word32 edx_630
	fn006E15D0(Mem19[0x00A18720<p32>:word32], 0x8DA974<32>, out ecx_629, out edx_630)
	return 0<32>
fn0072B830_exit:


word32 fn0072BB20(word32 esi, word32 edi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0072BD40
//      fn0072BDC0
// MayUse:  edi:[0..31] esi:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ebx ecx Top
// Preserved: esp
fn0072BB20_entry:
l0072BB20:
	word32 eax_6 = Mem0[edi + 4<32>:word32]
	word32 ebx_119 = 2<32>
	branch eax_6 == 0<32> l0072BB3F
l0072BB3F:
	word32 ecx_227
	word32 eax_21 = fn007276E0(0xA163B8<32>, Mem11[Mem11[esi + 0x18<32>:word32] + 8<32>:word32], out ecx_227)
	branch eax_21 < 0<32> l0072BB7D
l0072BB57:
	word32 ecx_228
	branch fn00727810(esi, 0x64<32>, eax_21, out ecx_228) == 0<32> l0072BB7D
l0072BB2D:
	branch fn0072B360(esi, eax_6) != 0<32> l0072BB68
l0072BB68:
	word32 eax_58 = Mem57[edi + 8<32>:word32]
	branch eax_58 == 0<32> l0072BB81
l0072BB81:
	word32 ecx_229
	word32 eax_72 = fn007276E0(0xA163B8<32>, Mem57[Mem57[esi + 0x18<32>:word32] + 8<32>:word32], out ecx_229)
	branch eax_72 < 0<32> l0072BB3B
l0072BB99:
	word32 ecx_231
	branch fn00727810(esi, 0x64<32>, eax_72, out ecx_231) == 0<32> l0072BB3B
l0072BB6F:
	branch fn0072B360(esi, eax_58) != 0<32> l0072BBAA
l0072BBAA:
	word32 eax_109 = Mem108[edi + 0xC<32>:word32]
	branch eax_109 == 0<32> l0072BBC8
l0072BBB1:
	ebx_119 = 3<32>
	branch fn0072B360(esi, eax_109) == 0<32> l0072BB3B
l0072BBC8:
	word32 ecx_230
	return fn00727810(esi, 0x85<32>, ebx_119, out ecx_230) == 0<32>
l0072BB7D:
	return 0<32>
l0072BB3B:
	return 0<32>
fn0072BB20_exit:


word32 fn0072BBE0(word32 eax, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0072BDC0
// MayUse:  eax:[0..31] Stack +0008:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn0072BBE0_entry:
l0072BBE0:
	word32 eax_23 = Mem20[eax + 4<32>:word32]
	word32 esi_24 = 0<32>
	word32 dwLoc04_293 = 0<32>
	branch eax_23 == 0<32> l0072BC1C
l0072BBFC:
	esi_24 = 1<32>
	dwLoc04_293 = 1<32>
	branch dwArg08 == 5<32> l0072BC1C
l0072BC0A:
	branch fn0072B360(dwArg04, eax_23) == 0<32> l0072BD21
l0072BC1C:
	branch Mem47[eax + 8<32>:word32] == 0<32> l0072BC42
l0072BC23:
	dwLoc04_293 = dwLoc04_293 + 2<32>
	esi_24 = esi_24 + 1<32>
	branch dwArg08 == 5<32> l0072BC42
l0072BC30:
	branch fn0072B360(dwArg04, dwArg04) == 0<32> l0072BD21
l0072BC42:
	word32 ebx_106
	branch dwArg08 != 4<32> l0072BC9E
l0072BC9E:
	branch dwArg08 != 5<32> l0072BCCF
l0072BCA3:
	branch esi_24 == 0<32> l0072BCBD
l0072BCBD:
	branch fn00727670(dwArg04, 2<32>) == 0<32> l0072BD21
l0072BCA8:
	word32 esi_103 = esi_24 - 1<32>
	branch esi_103 == 0<32> l0072BCB6
l0072BCB6:
	ebx_106 = 3<32>
l0072BCAD:
	branch esi_103 != 1<32> l0072BCCF
l0072BCB2:
	ebx_106 = dwArg08
l0072BC47:
	branch esi_24 == 0<32> l0072BC86
l0072BC86:
	ebx_106 = 4<32>
l0072BC8B:
	word32 eax_126 = fn00727670(dwArg04, ebx_106)
	branch eax_126 != 0<32> l0072BCCF
l0072BC98:
	return eax_126
l0072BC4C:
	word32 esi_143 = esi_24 - 1<32>
	branch esi_143 == 0<32> l0072BC6E
l0072BC6E:
	word32 ecx_403
	word32 eax_154 = fn00727810(dwArg04, 0x63<32>, dwArg04, out ecx_403)
	branch eax_154 != 0<32> l0072BCCF
l0072BC80:
	return eax_154
l0072BC51:
	branch esi_143 != 1<32> l0072BCCF
l0072BC56:
	word32 ecx_404
	word32 eax_182 = fn00727810(dwArg04, 0x63<32>, dwArg04, out ecx_404)
	branch eax_182 != 0<32> l0072BCCF
l0072BCCF:
	branch dwArg08 >u 5<32> l0072BD0D
l0072BD0D:
	word32 edx_406
	word32 ecx_405
	fn006E0F80(Mem194[0x00A18720<p32>:word32], dwArg04, out ecx_405, out edx_406)
l0072BD21:
	return 0<32>
l0072BCD7:
	word32 eax_229
	switch (dwArg08 - 1<32>) { l0072BCDE l0072BCE5 l0072BCEC l0072BCDE l0072BCE5 }
l0072BCEC:
	eax_229 = 0x32<32>
l0072BCE5:
	eax_229 = 0x28<32>
l0072BCDE:
	eax_229 = 0x1E<32>
l0072BCF1:
	return fn00727670(dwArg04, dwLoc04_293 + eax_229) == 0<32>
l0072BC68:
	return eax_182
fn0072BBE0_exit:


word32 fn0072BD40(word32 eax, word32 ecx)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0072BDC0
// MayUse:  eax:[0..31] ecx:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx edi edx esi Top
// Preserved: esp
fn0072BD40_entry:
l0072BD40:
	word32 eax_12 = Mem9[eax:word32]
	branch eax_12 == 1<32> l0072BD8B
l0072BD8B:
	word32 ecx_167
	word32 eax_24 = fn007276E0(0xA25B38<32>, Mem9[Mem9[ecx + 0x18<32>:word32] + 8<32>:word32], out ecx_167)
	branch eax_24 < 0<32> l0072BD6A
l0072BDA3:
	word32 ecx_170
	branch fn00727810(ecx, 0x64<32>, eax_24, out ecx_170) == 0<32> l0072BD6A
l0072BD4D:
	branch eax_12 == 2<32> l0072BD83
l0072BD83:
	return fn0072BB20(ecx, eax)
l0072BD52:
	branch eax_12 == 4<32> l0072BD6F
l0072BD6F:
	word32 eax_70 = fn0072B360(ecx, Mem9[eax + 4<32>:word32])
	branch eax_70 != 0<32> l0072BDB4
l0072BDB4:
	return 1<32>
l0072BD80:
	return eax_70
l0072BD57:
	word32 edx_169
	word32 ecx_168
	fn006E0F80(Mem9[0x00A18720<p32>:word32], 0x8DA9C4<32>, out ecx_168, out edx_169)
l0072BD6A:
	return 0<32>
fn0072BD40_exit:


word32 fn0072BDC0(word32 dwArg04, word32 dwArg08, word32 dwArg0C)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0072B360
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn0072BDC0_entry:
l0072BDC0:
	word32 ecx_17 = Mem15[dwArg08:word32]
	branch ecx_17 >u 4<32> l0072BEE2
l0072BEE2:
	word32 ecx_357
	word32 edx_358
	fn006E15D0(Mem15[0x00A18720<p32>:word32], 0x8DA9EC<32>, out ecx_357, out edx_358)
l0072BDD6:
	switch (ecx_17 - 1<32>) { l0072BE0B l0072BE41 l0072BE7D l0072BDE1 }
l0072BDE1:
	branch dwArg0C == 5<32> l0072BECE
l0072BDF1:
	word32 eax_47 = fn0072B360(dwArg04, Mem15[dwArg08 + 4<32>:word32])
	branch eax_47 != 0<32> l0072BECE
l0072BE06:
	return eax_47
l0072BE7D:
	branch dwArg0C == 5<32> l0072BECA
l0072BE8C:
	word32 esi_70
	word32 eax_66 = Mem64[dwArg08 + 4<32>:word32]
	branch eax_66 != 0<32> l0072BE97
l0072BE97:
	esi_70 = Mem64[eax_66:word32]
l0072BE93:
	esi_70 = 0<32>
l0072BE99:
	word32 ebx_74 = 0<32>
	branch esi_70 <= 0<32> l0072BEB9
l0072BE9F:
l0072BEA0:
	branch fn0072BD40(Mem64[Mem64[dwArg08 + 4<32>:word32] + 4<32> + ebx_74 * 4<32>:word32], dwArg04) == 0<32> l0072BEF7
l0072BEB2:
	ebx_74 = ebx_74 + 1<32>
	branch ebx_74 < esi_70 l0072BEA0
l0072BEB9:
	word32 ecx_359
	branch fn00727810(dwArg04, 0x66<32>, dwArg04, out ecx_359) == 0<32> l0072BEF7
l0072BEF7:
	return 0<32>
l0072BE41:
	branch Mem15[dwArg08 + 0xC<32>:word32] != 0<32> l0072BE66
l0072BE66:
	branch dwArg0C == 5<32> l0072BECA
l0072BE6D:
	word32 eax_146 = fn0072BB20(dwArg04, dwArg08)
	branch eax_146 != 0<32> l0072BECA
l0072BE78:
	return eax_146
l0072BE4F:
	return fn0072BBE0(dwArg08, dwArg0C)
l0072BE0B:
	branch dwArg0C == 5<32> l0072BECA
l0072BE1E:
	word32 eax_197 = fn00728FB0()
	branch eax_197 != 0<32> l0072BECA
l0072BECA:
l0072BECE:
	return fn00728420(dwArg0C)
l0072BE3C:
	return eax_197
fn0072BDC0_exit:


word32 fn0072BF10(word32 ebx, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0072C510
//      fn0072E660
// MayUse:  ebx:[0..31] Stack +0004:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ebp ecx edi edx esi Top
// Preserved: esp
fn0072BF10_entry:
l0072BF10:
	word32 edi_12 = 0<32>
	branch dwArg04 == 0<32> l0072BF24
l0072BF1F:
	branch Mem11[dwArg04:word32] != 0<32> l0072BF2F
l0072BF2F:
	word32 eax_18 = Mem11[dwArg04 + 4<32>:word32]
	branch Mem11[eax_18:word32] != 0x14<32> l0072C0B2
l0072BF3C:
	word32 eax_24 = Mem22[eax_18 + 4<32>:word32]
	branch CONVERT(CONVERT(Mem22[eax_24:word32] == 0xE<32>, bool, int8), int8, uint32) == 0<32> l0072C0B2
l0072BF4F:
	branch Mem22[0x00A6DBF4<p32>:word32] >= 2<32> l0072C0B2
l0072BF5C:
	branch fn0072B360(ebx, eax_24) == 0<32> l0072C0D3
l0072BF76:
	word32 eax_52 = Mem41[ebx + 0x18<32>:word32]
	word32 edi_56 = 0x8DA718<32>
	word32 esi_57 = Mem41[0x00A6DBD8<p32>:word32] + 0x14<32>
	word32 ecx_58 = 0xA<32>
	bool v19_244 = false
l0072BF95:
	branch ecx_58 == 0<32> l0072BF97
l0072BF95_1:
	v19_244 = Mem55[esi_346:byte] != Mem55[edi_347:byte]
	esi_57 = esi_346 + 1<i32>
	edi_56 = edi_347 + 1<i32>
	ecx_58 = ecx_58 - 1<32>
	esi_346 = esi_57
	edi_347 = edi_56
	branch Mem55[esi_346:byte] != Mem55[edi_347:byte] l0072BF95
l0072BF97:
	branch v19_244 l0072BFAD
l0072BFAD:
	word32 edx_343
	branch fn00726150(Mem79[eax_52 + 0x1C<32>:word32], dwArg04, out edx_343) == 0<32> l0072C0D3
l0072BFC4:
	word32 edi_113 = 3<32>
	word32 ecx_344
	word32 edx_345
	word32 eax_115 = fn007475E0(Mem84[Mem84[ebx + 0x18<32>:word32]:word32], out ecx_344, out edx_345)
	branch eax_115 >u 5<32> l0072C02D
l0072BFE2:
	switch (eax_115 + 0xFFFFFFFF<32>) { l0072C00B l0072C028 l0072C019 l0072BFE9 l0072BFFA }
l0072BFFA:
	edi_113 = 2<32>
l0072BFE9:
	edi_113 = 2<32>
l0072C019:
	word32 eax_133 = Mem109[Mem109[ebx + 0x18<32>:word32]:word32]
	branch Mem109[eax_133 + 0x1C<32>:word32] != 0<32> l0072C02D
l0072C023:
	branch Mem109[eax_133 + 0x20<32>:word32] != 0<32> l0072C02D
l0072C028:
	edi_113 = 1<32>
l0072C00B:
	branch Mem109[Mem109[Mem109[ebx + 0x18<32>:word32]:word32] + 0x1C<32>:word32] != 0<32> l0072C02D
l0072C015:
	edi_113 = 0<32>
l0072C02D:
	word32 eax_160
	word32 ecx_161
	word32 edx_162
	call Mem147[edi_113 * 4<32> + 0x72C0FC<32>:word32] (retsize: 0;)
		uses: ecx:ecx_161,edx:edx_162,Stack +0004:dwArg04,Stack +0018:dwArg04
		defs: eax:eax_160,ecx:ecx_161,edx:edx_162
	return eax_160
l0072BF99:
	word32 eax_169 = fn00728360(ebx, 0x8DA884<32>)
l0072C0A6:
	branch eax_169 == 0<32> l0072C0D3
l0072C0AA:
	edi_12 = 1<32>
l0072C0B2:
l0072C0B6:
	branch edi_12 >= Mem186[dwArg04:word32] l0072C0DC
l0072C0DC:
	return 1<32>
l0072C0BB:
	branch fn0072D920(ebx, dwArg04) == 0<32> l0072C0D3
l0072C0D3:
	return 0<32>
l0072C0CB:
	edi_12 = edi_12 + 1<32>
l0072BF24:
	return 1<32>
fn0072BF10_exit:


word32 fn0072C110(word32 ebx)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0072C160
// MayUse:  ebx:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ebp edi esi Top
// Preserved: esp
fn0072C110_entry:
l0072C110:
	branch ebx != 0<32> l0072C120
l0072C120:
	word32 esi_18 = 0<32>
l0072C127:
	branch esi_18 >= Mem24[ebx:word32] l0072C149
l0072C149:
	return 1<32>
l0072C12B:
	branch fn0072B360(dwArg04, dwArg04) == 0<32> l0072C143
l0072C143:
	return 0<32>
l0072C13B:
	esi_18 = esi_18 + 1<32>
l0072C119:
	return 1<32>
fn0072C110_exit:


word32 fn0072C160(word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0072D920
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn0072C160_entry:
l0072C160:
	word32 edi_18 = Mem17[dwArg08 + 8<32>:word32]
	word32 dwLoc0C_600 = 0xA163B8<32>
	word32 eax_27 = fn0072C110(Mem17[dwArg08 + 0x10<32>:word32])
	branch eax_27 != 0<32> l0072C19A
l0072C19A:
	word32 esi_39 = Mem38[edi_18 + 0xC<32>:word32]
	branch esi_39 == 0<32> l0072C1D5
l0072C1A2:
	word32 edi_43 = 0<32>
l0072C1A7:
	word32 eax_52
	branch esi_39 != 0<32> l0072C1AF
l0072C1AF:
	eax_52 = Mem51[esi_39:word32]
l0072C1AB:
	eax_52 = 0<32>
l0072C1B1:
	branch edi_43 >= eax_52 l0072C1D1
l0072C1D1:
l0072C1D5:
	branch fn00728E40(Mem70[dwArg08 + 4<32>:word32], dwArg04, dwArg08, dwArg04) == 0<32> l0072C2EA
l0072C1F3:
	word32 esi_105
	word32 eax_95 = Mem73[Mem73[dwArg08 + 0xC<32>:word32] + 4<32>:word32]
	branch Mem73[eax_95:word32] == 0x14<32> l0072C202
l0072C202:
	word32 eax_98 = Mem73[eax_95 + 4<32>:word32]
	word32 edx_104 = CONVERT(CONVERT(Mem73[eax_98:word32] == 0xE<32>, bool, int8), int8, uint32)
	esi_105 = edx_104
	branch edx_104 == 0<32> l0072C223
l0072C213:
	branch Mem73[0x00A6DBF4<p32>:word32] >= 2<32> l0072C223
l0072C21C:
	dwLoc0C_600 = Mem73[eax_98 + 4<32>:word32]
l0072C1FE:
	esi_105 = 0<32>
l0072C223:
	word32 ecx_805
	branch fn007276E0(dwLoc0C_600, Mem117[Mem117[dwArg04 + 0x18<32>:word32] + 8<32>:word32], out ecx_805) < 0<32> l0072C2E3
l0072C23E:
	fn0072A520(dwArg04, edi_18)
	word32 eax_147 = Mem139[edi_18:word32]
	branch eax_147 == 0<32> l0072C251
l0072C24F:
	eax_147 = Mem139[eax_147:word32]
l0072C251:
	word32 ebx_163
	Mem157[Mem139[dwArg04 + 0x18<32>:word32] + 0x20<32>:word32] = eax_147
	word32 eax_159 = Mem157[dwArg08 + 0xC<32>:word32]
	branch eax_159 != 0<32> l0072C262
l0072C262:
	ebx_163 = Mem157[eax_159:word32]
l0072C25E:
	ebx_163 = 0<32>
l0072C264:
	branch esi_105 >= ebx_163 l0072C290
l0072C268:
l0072C270:
	branch fn0072D920(dwArg04, dwArg04) == 0<32> l0072C2E3
l0072C2E3:
	fn00727290(dwArg04)
l0072C289:
	esi_105 = esi_105 + 1<32>
	branch esi_105 < ebx_163 l0072C270
l0072C290:
	word32 eax_229 = fn0072A350(dwArg04, dwArg04)
	word32 esi_234 = Mem219[dwArg04 + 0x18<32>:word32]
	Mem236[dwArg04 + 0x14<32>:word32] = Mem219[dwArg04 + 0x14<32>:word32] + 0xFFFFFFFF<32>
	fn00727170(esi_234)
	word32 eax_247 = Mem236[dwArg04 + 0x1C<32>:word32]
	word32 esi_248 = Mem236[eax_247 + 8<32>:word32]
	branch esi_248 < 1<32> l0072C2F4
l0072C2F4:
	Mem252[dwArg04 + 0x18<32>:word32] = 0<32>
l0072C2B4:
	word32 edx_806
	word32 eax_258 = fn0072E9C0(Mem236[Mem236[eax_247 + 0xC<32>:word32] + (esi_248 - 1<32>) * 4<32>:word32], out edx_806)
	word32 edx_263 = Mem256[dwArg04 + 0x1C<32>:word32]
	Mem268[dwArg04 + 0x18<32>:word32] = eax_258
	word32 edx_808
	word32 ecx_807
	branch fn00703390(edx_263, dwArg04, out ecx_807, out edx_808) >= 0<32> l0072C2FB
l0072C2D4:
	fn006E86F0(0x8DA64C<32>)
l0072C2FB:
	branch eax_229 == 0<32> l0072C2EA
l0072C2FF:
	branch Mem293[edi_18 + 0xC<32>:word32] == 0<32> l0072C308
l0072C306:
l0072C308:
	word32 ecx_811
	fn00729040(dwArg04, es, ds, eax_229, out ecx_811)
	word32 v18_322 = Mem306[eax_229:word32] + 0xFFFFFFFF<32>
	Mem323[eax_229:word32] = v18_322
	word32 esp_321 = fp - 0x1C<32>
	branch v18_322 != 0<32> l0072C325
l0072C319:
	word32 eax_326 = Mem323[eax_229 + 4<32>:word32]
	word32 esp_330
	call Mem323[eax_326 + 0x18<32>:word32] (retsize: 4;)
		uses: eax:eax_326,Stack +0004:eax_229,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0028:dwArg04,Stack +002C:dwArg08
		defs: esp:esp_330
	esp_321 = esp_330 + 4<32>
l0072C325:
	word32 edi_338 = 0<32>
l0072C330:
	word32 eax_346 = Mem345[esp_321 + 0x18<32>:word32]
	branch eax_346 == 0<32> l0072C33A
l0072C338:
	eax_346 = Mem345[eax_346:word32]
l0072C33A:
	word32 edx_358 = Mem345[dwArg04 + 0x18<32>:word32]
	branch edi_338 >= eax_346 l0072C397
l0072C397:
	word32 eax_362 = Mem345[Mem345[esp_321 + 0x24<32>:word32] + 4<32>:word32]
	Mem364[esp_321 + 0x24<32>:word32] = Mem345[edx_358 + 0xC<32>:word32]
	word32 edi_365 = 0x8DA718<32>
	word32 esi_366 = eax_362 + 0x14<32>
	word32 ecx_367 = 0xA<32>
	bool v27_590 = false
l0072C3B4:
	branch ecx_367 == 0<32> l0072C3B6
l0072C3B4_1:
	v27_590 = Mem364[esi_819:byte] != Mem364[edi_820:byte]
	esi_366 = esi_819 + 1<i32>
	edi_365 = edi_820 + 1<i32>
	ecx_367 = ecx_367 - 1<32>
	esi_819 = esi_366
	edi_820 = edi_365
	branch Mem364[esi_819:byte] != Mem364[edi_820:byte] l0072C3B4
l0072C3B6:
	branch v27_590 l0072C3CF
l0072C3CF:
	word32 edx_386 = Mem364[edx_358 + 0x1C<32>:word32]
	word32 esp_389 = esp_321 - 4<i32>
	Mem392[esp_389:word32] = eax_362
	Mem394[esp_389 - 4<i32>:word32] = edx_386
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 edx_814
	word32 eax_406 = fn00726150(stackArg4, dwArg04, out edx_814)
	branch eax_406 == 0<32> l0072C2EA
l0072C3E6:
	word32 ecx_417 = Mem394[Mem394[dwArg04 + 0x18<32>:word32]:word32]
	Mem419[esp_389:word32] = eax_406
	Mem421[esp_389 - 4<i32>:word32] = ecx_417
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 edi_425 = 3<32>
	word32 ecx_817
	word32 edx_818
	word32 eax_427 = fn007475E0(stackArg4, out ecx_817, out edx_818)
	branch eax_427 >u 5<32> l0072C452
l0072C404:
	switch (eax_427 + 0xFFFFFFFF<32>) { l0072C42D l0072C44D l0072C43C l0072C40B l0072C41C }
l0072C41C:
	Mem438[esp_389 + 0x28<32>:word32] = Mem421[Mem421[dwArg04 + 0x18<32>:word32] + 0x14<32>:word32]
	edi_425 = 2<32>
l0072C40B:
	Mem442[esp_389 + 0x28<32>:word32] = Mem421[Mem421[dwArg04 + 0x18<32>:word32] + 0x18<32>:word32]
	edi_425 = 2<32>
l0072C43C:
	word32 eax_445 = Mem421[Mem421[dwArg04 + 0x18<32>:word32]:word32]
	branch Mem421[eax_445 + 0x1C<32>:word32] != 0<32> l0072C452
l0072C447:
	branch Mem421[eax_445 + 0x20<32>:word32] != 0<32> l0072C452
l0072C44D:
	edi_425 = 1<32>
l0072C42D:
	branch Mem421[Mem421[Mem421[dwArg04 + 0x18<32>:word32]:word32] + 0x1C<32>:word32] != 0<32> l0072C452
l0072C438:
	edi_425 = 0<32>
l0072C452:
	word32 eax_472
	call Mem459[edi_425 * 4<32> + 0x72C4F8<32>:word32] (retsize: 0;)
		uses: Stack +0004:dwArg04,Stack +0008:dwArg08
		defs: eax:eax_472
	return eax_472
l0072C3B8:
	Mem478[esp_321 - 4<i32>:word32] = 0x8DA884<32>
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	return fn00728360(dwArg04, stackArg4)
l0072C341:
	word32 ecx_812
	word32 eax_501 = fn00727420(Mem345[edx_358 + 0x28<32>:word32], out ecx_812)
	branch eax_501 < 0<32> l0072C2EA
l0072C34D:
	word32 eax_512 = Mem345[Mem345[Mem345[dwArg04 + 0x18<32>:word32] + 0x28<32>:word32] + 0xC<32>:word32]
	Mem516[eax_512 + eax_501 * 0x14<32>:word32] = Mem345[eax_512 + eax_501 * 0x14<32>:word32] | 4<32>
	word32 eax_518 = eax_512 + eax_501 * 0x14<32>
	Mem521[eax_518 + 4<32>:byte] = 0x83<8>
	Mem522[eax_518 + 8<32>:word32] = 1<32>
	word32 eax_523 = Mem522[dwArg04 + 0x18<32>:word32]
	branch Mem522[eax_523 + 0xDC<32>:word32] != 0<32> l0072C393
l0072C37A:
	Mem526[eax_523 + 0xDC<32>:word32] = 1<32>
	word32 eax_527 = Mem526[dwArg04 + 0x18<32>:word32]
	Mem531[Mem526[Mem526[eax_527 + 0x28<32>:word32] + 0xC<32>:word32] + 0x10<32> + eax_501 * 0x14<32>:word32] = Mem526[eax_527 + 0xD8<32>:word32]
l0072C393:
	edi_338 = edi_338 + 1<32>
l0072C1B5:
	branch fn0072B360(dwArg04, dwArg04) == 0<32> l0072C2EA
l0072C2EA:
	return 0<32>
l0072C1C9:
	edi_43 = edi_43 + 1<32>
l0072C193:
	return eax_27
fn0072C160_exit:


word32 fn0072C510(word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0072D920
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn0072C510_entry:
l0072C510:
	word32 ecx_962
	branch fn007276E0(Mem15[dwArg08 + 4<32>:word32], Mem9[Mem9[dwArg04 + 0x18<32>:word32] + 8<32>:word32], out ecx_962) < 0<32> l0072C542
l0072C531:
	word32 ecx_963
	branch fn00727810(dwArg04, 0x64<32>, dwArg04, out ecx_963) != 0<32> l0072C548
l0072C548:
	word32 esi_51 = Mem50[dwArg08 + 8<32>:word32]
	branch esi_51 != 0<32> l0072C555
l0072C555:
	branch Mem50[esi_51:word32] <= 0<32> l0072C596
l0072C55F:
	word32 ebx_106 = 0<32>
l0072C564:
	word32 eax_68
	branch esi_51 != 0<32> l0072C56C
l0072C56C:
	eax_68 = Mem67[esi_51:word32]
l0072C568:
	eax_68 = 0<32>
l0072C56E:
	branch ebx_106 >= eax_68 l0072C58E
l0072C58E:
l0072C572:
	branch fn0072B360(dwArg04, dwArg04) == 0<32> l0072C9B4
l0072C586:
	ebx_106 = ebx_106 + 1<32>
l0072C551:
l0072C596:
	word32 ecx_964
	branch fn00727810(dwArg04, 0x66<32>, dwArg04, out ecx_964) == 0<32> l0072C9B4
l0072C5AB:
	branch fn00728E40(Mem117[dwArg08 + 4<32>:word32], dwArg04, dwArg08, dwArg04) == 0<32> l0072C9B4
l0072C5C5:
	Mem154[Mem140[dwArg04 + 0x18<32>:word32] + 0x1C<32>:word32] = Mem140[dwArg08 + 4<32>:word32]
	word32 eax_156 = Mem154[Mem154[dwArg04 + 0x18<32>:word32] + 0x1C<32>:word32]
	Mem158[eax_156:word32] = Mem154[eax_156:word32] + 1<32>
	word32 ecx_965
	word32 edx_966
	word32 eax_164 = fn006F1A70(out ecx_965, out edx_966)
	branch eax_164 == 0<32> l0072C9AD
l0072C5EE:
	word32 esp_184 = fp - 0x14<32>
	branch fn00729510(dwArg04, eax_164, dwArg04) == 0<32> l0072C99C
l0072C99C:
	word32 v21_188 = Mem176[eax_164:word32] + 0xFFFFFFFF<32>
	Mem189[eax_164:word32] = v21_188
	branch v21_188 != 0<32> l0072C9AD
l0072C9A1:
	word32 eax_192 = Mem189[eax_164 + 4<32>:word32]
	word32 ecx_193 = Mem189[eax_192 + 0x18<32>:word32]
	call ecx_193 (retsize: 4;)
		uses: eax:eax_192,ecx:ecx_193,Stack +0004:eax_164,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0020:dwArg04,Stack +0024:dwArg08
l0072C603:
	word32 v16_204 = Mem176[eax_164:word32] + 0xFFFFFFFF<32>
	Mem205[eax_164:word32] = v16_204
	branch v16_204 != 0<32> l0072C614
l0072C608:
	word32 eax_208 = Mem205[eax_164 + 4<32>:word32]
	word32 ecx_209 = Mem205[eax_208 + 0x18<32>:word32]
	word32 esp_212
	call ecx_209 (retsize: 4;)
		uses: eax:eax_208,ecx:ecx_209,Stack +0004:eax_164,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0020:dwArg04,Stack +0024:dwArg08
		defs: esp:esp_212
	esp_184 = esp_212 + 4<32>
l0072C614:
	word32 esp_221 = esp_184 - 4<i32>
	Mem222[esp_221:word32] = 0x8C8598<32>
	word32 edx_968
	word32 ecx_967
	word32 eax_231 = fn006F1A70(out ecx_967, out edx_968)
	Mem238[esp_221 + 0x14<32>:word32] = eax_231
	branch eax_231 == 0<32> l0072C9AD
l0072C62D:
	word32 eax_241 = Mem238[dwArg04 + 0x18<32>:word32]
	word32 esi_243 = Mem238[esp_221 + 0x14<32>:word32] + 0x14<32>
	word32 edi_244 = 0x8DA718<32>
	word32 ecx_245 = 0xA<32>
	bool v23_737 = false
l0072C646:
	branch ecx_245 == 0<32> l0072C648
l0072C646_1:
	v23_737 = Mem238[esi_986:byte] != Mem238[edi_987:byte]
	esi_243 = esi_986 + 1<i32>
	edi_244 = edi_987 + 1<i32>
	ecx_245 = ecx_245 - 1<32>
	esi_986 = esi_243
	edi_987 = edi_244
	branch Mem238[esi_986:byte] != Mem238[edi_987:byte] l0072C646
l0072C648:
	branch v23_737 l0072C65E
l0072C65E:
	word32 edx_267 = Mem238[eax_241 + 0x1C<32>:word32]
	Mem269[esp_221:word32] = Mem238[esp_221 + 0x14<32>:word32]
	Mem271[esp_221 - 4<i32>:word32] = edx_267
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 edx_970
	word32 eax_282 = fn00726150(stackArg4, dwArg04, out edx_970)
	branch eax_282 == 0<32> l0072C978
l0072C679:
	word32 ecx_292 = Mem271[Mem271[dwArg04 + 0x18<32>:word32]:word32]
	Mem294[esp_221:word32] = eax_282
	Mem296[esp_221 - 4<i32>:word32] = ecx_292
	Mem297[esp_221 + 0x1C<32>:word32] = 0<32>
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 edi_298 = 3<32>
	word32 edx_974
	word32 ecx_300
	word32 eax_301 = fn007475E0(stackArg4, out ecx_300, out edx_974)
	branch eax_301 >u 5<32> l0072C6E3
l0072C69D:
	switch (eax_301 + 0xFFFFFFFF<32>) { l0072C6BE l0072C6DE l0072C6CD l0072C6A4 l0072C6B1 }
l0072C6B1:
	edi_298 = 2<32>
l0072C6A4:
	edi_298 = 2<32>
l0072C6CD:
	word32 eax_316 = Mem297[Mem297[dwArg04 + 0x18<32>:word32]:word32]
	branch Mem297[eax_316 + 0x1C<32>:word32] != 0<32> l0072C6E3
l0072C6D8:
	branch Mem297[eax_316 + 0x20<32>:word32] != 0<32> l0072C6E3
l0072C6DE:
	edi_298 = 1<32>
l0072C6BE:
	ecx_300 = Mem297[dwArg04 + 0x18<32>:word32]
	branch Mem297[Mem297[ecx_300:word32] + 0x1C<32>:word32] != 0<32> l0072C6E3
l0072C6C9:
	edi_298 = 0<32>
l0072C6E3:
	word32 eax_346
	call Mem297[edi_298 * 4<32> + 0x72C9D0<32>:word32] (retsize: 0;)
		uses: ecx:ecx_332,Stack +0004:dwArg04,Stack +0008:dwArg08
		defs: eax:eax_346
	return eax_346
l0072C64A:
	Mem351[esp_221:word32] = 0x8DA884<32>
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 eax_356 = fn00728360(dwArg04, stackArg4)
	word32 esp_360 = esp_221 + 4<32>
l0072C769:
	branch eax_356 == 0<32> l0072C978
l0072C978:
	word32 eax_367 = Mem366[esp_184 + 0x10<32>:word32]
	word32 v20_368 = Mem366[eax_367:word32] + 0xFFFFFFFF<32>
	Mem369[eax_367:word32] = v20_368
	branch v20_368 != 0<32> l0072C9AD
l0072C981:
	word32 ecx_372 = Mem369[eax_367 + 4<32>:word32]
	word32 edx_373 = Mem369[ecx_372 + 0x18<32>:word32]
	Mem375[esp_184 - 4<i32>:word32] = eax_367
	call edx_373 (retsize: 4;)
		uses: ecx:ecx_372,Stack +0008:dwArg04,Stack +000C:dwArg08
	fn00727290(dwArg04)
	return 0<32>
l0072C771:
	word32 eax_409 = Mem351[esp_221 + 0x14<32>:word32]
	word32 v17_410 = Mem351[eax_409:word32] + 0xFFFFFFFF<32>
	Mem411[eax_409:word32] = v17_410
	branch v17_410 != 0<32> l0072C786
l0072C77A:
	word32 ecx_414 = Mem411[eax_409 + 4<32>:word32]
	word32 edx_415 = Mem411[ecx_414 + 0x18<32>:word32]
	Mem417[esp_221:word32] = eax_409
	word32 esp_418
	call edx_415 (retsize: 4;)
		uses: ecx:ecx_414,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: esp:esp_418
	esp_360 = esp_418 + 4<32>
l0072C786:
	word32 esp_430 = esp_360 - 4<i32>
	Mem431[esp_430:word32] = Mem427[Mem427[esp_360 + 0x1C<32>:word32] + 0xC<32>:word32]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	branch fn0072BF10(dwArg04, stackArg4) == 0<32> l0072C9AD
l0072C7A0:
	branch fn00727670(dwArg04, 0x52<32>) == 0<32> l0072C9AD
l0072C7B4:
	branch fn00727670(dwArg04, 0x53<32>) == 0<32> l0072C9AD
l0072C9AD:
	fn00727290(dwArg04)
l0072C7C8:
	Mem484[esp_430:word32] = 1<32>
	Mem486[esp_430 - 4<32>:word32] = dwArg04
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 eax_489 = fn0072A350(stackArg4, dwArg04)
	fn00727290(dwArg04)
	branch eax_489 == 0<32> l0072C9B4
l0072C7E4:
	Mem507[esp_430:word32] = 0<32>
	Mem509[esp_430 - 4<32>:word32] = eax_489
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_512
	fn00729040(dwArg04, es, ds, stackArg4, out ecx_512)
	word32 v19_518 = Mem509[eax_489:word32] + 0xFFFFFFFF<32>
	Mem519[eax_489:word32] = v19_518
	word32 esp_517 = esp_430 + 4<32>
	branch v19_518 != 0<32> l0072C802
l0072C7F6:
	word32 edx_522 = Mem519[eax_489 + 4<32>:word32]
	word32 eax_523 = Mem519[edx_522 + 0x18<32>:word32]
	Mem525[esp_430:word32] = eax_489
	word32 esp_526
	call eax_523 (retsize: 4;)
		uses: ecx:ecx_512,edx:edx_522,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: esp:esp_526
	esp_517 = esp_526 + 4<32>
l0072C802:
	word32 esp_535 = esp_517 - 4<i32>
	Mem536[esp_535:word32] = 0<32>
	Mem538[esp_535 - 4<i32>:word32] = 0x83<32>
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	byte stackArg4 = <invalid>
	word32 ecx_980
	branch fn00727810(dwArg04, stackArg4, dwArg04, out ecx_980) == 0<32> l0072C9B4
l0072C81B:
	branch fn00727670(dwArg04, 0x59<32>) == 0<32> l0072C9B4
l0072C82F:
	word32 edx_569 = Mem538[dwArg04 + 0x18<32>:word32]
	word32 eax_568 = Mem538[Mem538[esp_535 + 0x20<32>:word32] + 4<32>:word32]
	Mem571[esp_535 + 0x20<32>:word32] = Mem538[edx_569 + 0xC<32>:word32]
	word32 edi_572 = 0x8DA718<32>
	word32 esi_573 = eax_568 + 0x14<32>
	word32 ecx_574 = 0xA<32>
	bool v27_741 = false
l0072C84F:
	branch ecx_574 == 0<32> l0072C851
l0072C84F_1:
	v27_741 = Mem571[esi_988:byte] != Mem571[edi_989:byte]
	esi_573 = esi_988 + 1<i32>
	edi_572 = edi_989 + 1<i32>
	ecx_574 = ecx_574 - 1<32>
	esi_988 = esi_573
	edi_989 = edi_572
	branch Mem571[esi_988:byte] != Mem571[edi_989:byte] l0072C84F
l0072C851:
	branch v27_741 l0072C867
l0072C867:
	word32 edx_593 = Mem571[edx_569 + 0x1C<32>:word32]
	Mem599[esp_535:word32] = eax_568
	Mem601[esp_535 - 4<32>:word32] = edx_593
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 edx_982
	word32 eax_613 = fn00726150(stackArg4, dwArg04, out edx_982)
	branch eax_613 == 0<32> l0072C9B4
l0072C87E:
	word32 ecx_623 = Mem601[Mem601[dwArg04 + 0x18<32>:word32]:word32]
	Mem625[esp_535:word32] = eax_613
	Mem627[esp_535 - 4<32>:word32] = ecx_623
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 edi_631 = 3<32>
	word32 edx_985
	word32 ecx_633
	word32 eax_634 = fn007475E0(stackArg4, out ecx_633, out edx_985)
	branch eax_634 >u 5<32> l0072C8E7
l0072C89C:
	switch (eax_634 + 0xFFFFFFFF<32>) { l0072C8C5 l0072C8E2 l0072C8D3 l0072C8A3 l0072C8B4 }
l0072C8B4:
	ecx_633 = Mem627[dwArg04 + 0x18<32>:word32]
	Mem644[esp_535 + 0x20<32>:word32] = Mem627[ecx_633 + 0x14<32>:word32]
	edi_631 = 2<32>
l0072C8A3:
	Mem648[esp_535 + 0x20<32>:word32] = Mem627[Mem627[dwArg04 + 0x18<32>:word32] + 0x18<32>:word32]
	edi_631 = 2<32>
l0072C8D3:
	word32 eax_651 = Mem627[Mem627[dwArg04 + 0x18<32>:word32]:word32]
	branch Mem627[eax_651 + 0x1C<32>:word32] != 0<32> l0072C8E7
l0072C8DD:
	branch Mem627[eax_651 + 0x20<32>:word32] != 0<32> l0072C8E7
l0072C8E2:
	edi_631 = 1<32>
l0072C8C5:
	ecx_633 = Mem627[Mem627[dwArg04 + 0x18<32>:word32]:word32]
	branch Mem627[ecx_633 + 0x1C<32>:word32] != 0<32> l0072C8E7
l0072C8CF:
	edi_631 = 0<32>
l0072C8E7:
	word32 eax_681
	call Mem665[edi_631 * 4<32> + 0x72C9F4<32>:word32] (retsize: 0;)
		uses: ecx:ecx_667,Stack +0004:dwArg04,Stack +0008:dwArg08
		defs: eax:eax_681
	return eax_681
l0072C853:
	Mem686[esp_535:word32] = 0x8DA884<32>
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 eax_690 = fn00728360(dwArg04, stackArg4)
l0072C969:
	branch eax_690 == 0<32> l0072C9B4
l0072C9B4:
	return 0<32>
l0072C96D:
	return 1<32>
l0072C542:
	return 0<32>
fn0072C510_exit:


word32 fn0072CA10(word32 eax, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0072D920
// MayUse:  eax:[0..31] Stack +0004:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn0072CA10_entry:
l0072CA10:
	word32 dwLoc04_363
	word32 eax_17 = Mem14[dwArg04 + 8<32>:word32]
	word32 ebp_18 = 0<32>
	branch eax_17 != 0<32> l0072CA2B
l0072CA2B:
	dwLoc04_363 = Mem14[eax_17:word32]
l0072CA25:
	dwLoc04_363 = 0<32>
l0072CA31:
	word32 eax_26 = Mem25[dwArg04 + 4<32>:word32]
	word32 dwLoc08_365 = 0<32>
	branch eax_26 == 0<32> l0072CA59
l0072CA3C:
	word32 eax_39 = fn0072B360(eax, eax_26)
	branch eax_39 != 0<32> l0072CA51
l0072CA51:
	dwLoc08_365 = 1<32>
l0072CA59:
	branch dwLoc04_363 <= 0<32> l0072CBBD
l0072CA64:
	branch dwLoc08_365 == 0<32> l0072CB4A
l0072CB4A:
	branch fn0072B360(eax, dwArg04) == 0<32> l0072CB40
l0072CB58:
	word32 ecx_498
	word32 eax_87 = fn00727420(Mem71[Mem71[eax + 0x18<32>:word32] + 0x28<32>:word32], out ecx_498)
	branch eax_87 < 0<32> l0072CB40
l0072CB67:
	word32 eax_98 = Mem71[Mem71[Mem71[eax + 0x18<32>:word32] + 0x28<32>:word32] + 0xC<32>:word32]
	Mem102[eax_98 + eax_87 * 0x14<32>:word32] = Mem71[eax_98 + eax_87 * 0x14<32>:word32] & 0xFFFFFFFB<32>
	Mem105[eax_98 + eax_87 * 0x14<32> + 4<32>:byte] = 0x47<8>
	word32 edx_106 = Mem105[eax + 0x18<32>:word32]
	branch Mem105[edx_106 + 0xDC<32>:word32] != 0<32> l0072CBAC
l0072CB8D:
	Mem110[edx_106 + 0xDC<32>:word32] = 1<32>
	word32 eax_111 = Mem110[eax + 0x18<32>:word32]
	Mem115[Mem110[Mem110[eax_111 + 0x28<32>:word32] + 0xC<32>:word32] + 0x10<32> + eax_87 * 0x14<32>:word32] = Mem110[eax_111 + 0xD8<32>:word32]
l0072CA76:
	word32 ecx_493
	word32 eax_119 = fn00727420(Mem60[Mem60[eax + 0x18<32>:word32] + 0x28<32>:word32], out ecx_493)
	branch eax_119 < 0<32> l0072CB40
l0072CA89:
	word32 eax_130 = Mem60[Mem60[Mem60[eax + 0x18<32>:word32] + 0x28<32>:word32] + 0xC<32>:word32]
	Mem134[eax_130 + eax_119 * 0x14<32>:word32] = Mem60[eax_130 + eax_119 * 0x14<32>:word32] & 0xFFFFFFFB<32>
	Mem137[eax_130 + eax_119 * 0x14<32> + 4<32>:byte] = 4<8>
	word32 eax_138 = Mem137[eax + 0x18<32>:word32]
	branch Mem137[eax_138 + 0xDC<32>:word32] != 0<32> l0072CACE
l0072CAAF:
	Mem142[eax_138 + 0xDC<32>:word32] = 1<32>
	word32 eax_143 = Mem142[eax + 0x18<32>:word32]
	Mem147[Mem142[Mem142[eax_143 + 0x28<32>:word32] + 0xC<32>:word32] + 0x10<32> + eax_119 * 0x14<32>:word32] = Mem142[eax_143 + 0xD8<32>:word32]
l0072CACE:
	branch fn0072B360(eax, dwArg04) == 0<32> l0072CB40
l0072CADC:
	word32 ecx_496
	word32 eax_172 = fn00727420(Mem154[Mem154[eax + 0x18<32>:word32] + 0x28<32>:word32], out ecx_496)
	branch eax_172 < 0<32> l0072CB40
l0072CAEB:
	word32 eax_183 = Mem154[Mem154[Mem154[eax + 0x18<32>:word32] + 0x28<32>:word32] + 0xC<32>:word32]
	Mem187[eax_183 + eax_172 * 0x14<32>:word32] = Mem154[eax_183 + eax_172 * 0x14<32>:word32] & 0xFFFFFFFB<32>
	Mem190[eax_183 + eax_172 * 0x14<32> + 4<32>:byte] = 2<8>
	word32 edx_191 = Mem190[eax + 0x18<32>:word32]
	branch Mem190[edx_191 + 0xDC<32>:word32] != 0<32> l0072CB30
l0072CB11:
	Mem195[edx_191 + 0xDC<32>:word32] = 1<32>
	word32 eax_196 = Mem195[eax + 0x18<32>:word32]
	Mem200[Mem195[Mem195[eax_196 + 0x28<32>:word32] + 0xC<32>:word32] + 0x10<32> + eax_172 * 0x14<32>:word32] = Mem195[eax_196 + 0xD8<32>:word32]
l0072CB30:
	branch fn00727670(eax, 0x49<32>) != 0<32> l0072CBAC
l0072CBAC:
	ebp_18 = ebp_18 + 1<32>
	branch ebp_18 < dwLoc04_363 l0072CA64
l0072CBBD:
	word32 ecx_258
	word32 eax_259
	branch Mem227[dwArg04 + 0xC<32>:word32] == 0<32> l0072CC20
l0072CC20:
	branch dwLoc08_365 == 0<32> l0072CC7E
l0072CC27:
	word32 ecx_497
	word32 eax_245 = fn00727420(Mem227[Mem227[eax + 0x18<32>:word32] + 0x28<32>:word32], out ecx_497)
	branch eax_245 < 0<32> l0072CB40
l0072CC3A:
	eax_259 = Mem227[Mem227[Mem227[eax + 0x18<32>:word32] + 0x28<32>:word32] + 0xC<32>:word32] + eax_245 * 0x14<32>
	Mem261[eax_259 + 4<32>:byte] = 1<8>
	ecx_258 = eax_245 * 0x14<32>
l0072CBC3:
	branch dwLoc08_365 == 0<32> l0072CBF5
l0072CBF5:
	word32 ecx_494
	word32 eax_267 = fn00727420(Mem227[Mem227[eax + 0x18<32>:word32] + 0x28<32>:word32], out ecx_494)
	branch eax_267 < 0<32> l0072CB40
l0072CC08:
	eax_259 = Mem227[Mem227[Mem227[eax + 0x18<32>:word32] + 0x28<32>:word32] + 0xC<32>:word32] + eax_267 * 0x14<32>
	Mem283[eax_259 + 4<32>:byte] = 0x48<8>
	ecx_258 = eax_267 * 0x14<32>
l0072CBCA:
	word32 ecx_495
	word32 eax_290 = fn00727420(Mem227[Mem227[eax + 0x18<32>:word32] + 0x28<32>:word32], out ecx_495)
	branch eax_290 < 0<32> l0072CB40
l0072CBDD:
	eax_259 = Mem227[Mem227[Mem227[eax + 0x18<32>:word32] + 0x28<32>:word32] + 0xC<32>:word32] + eax_290 * 0x14<32>
	Mem306[eax_259 + 4<32>:byte] = 0x4A<8>
	ecx_258 = eax_290 * 0x14<32>
l0072CC50:
	Mem310[eax_259:word32] = Mem308[eax_259:word32] & 0xFFFFFFFB<32>
	word32 edx_313 = Mem310[eax + 0x18<32>:word32]
	branch Mem310[edx_313 + 0xDC<32>:word32] != 0<32> l0072CC7E
l0072CC5F:
	Mem317[edx_313 + 0xDC<32>:word32] = 1<32>
	word32 edi_318 = Mem317[eax + 0x18<32>:word32]
	Mem323[Mem317[Mem317[edi_318 + 0x28<32>:word32] + 0xC<32>:word32] + 0x10<32> + ecx_258:word32] = Mem317[edi_318 + 0xD8<32>:word32]
l0072CC7E:
	return 1<32>
l0072CB40:
	return 0<32>
l0072CA4A:
	return eax_39
fn0072CA10_exit:


word32 fn0072CC90(word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0072D920
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn0072CC90_entry:
l0072CC90:
	word32 esi_17 = Mem16[dwArg04 + 0x18<32>:word32]
	word32 ecx_620
	word32 edx_621
	word32 eax_20 = fn00723860(0x20<32>, out ecx_620, out edx_621)
	branch eax_20 != 0<32> l0072CCBB
l0072CCBB:
	Mem36[eax_20:word32] = 0<32>
	Mem37[eax_20 + 4<32>:word32] = 0<32>
	Mem38[eax_20 + 8<32>:word32] = 0<32>
	Mem39[eax_20 + 0xC<32>:word32] = 0<32>
	Mem40[eax_20 + 0x10<32>:word32] = 0<32>
	Mem41[eax_20 + 0x14<32>:word32] = 0<32>
	Mem42[eax_20 + 0x18<32>:word32] = 0<32>
	Mem43[eax_20 + 0x1C<32>:word32] = 0<32>
	Mem45[eax_20:word32] = Mem43[esi_17 + 0x24<32>:word32]
	Mem49[esi_17 + 0x24<32>:word32] = eax_20
	word32 edi_50 = Mem49[dwArg04 + 0x18<32>:word32]
	word32 edx_623
	word32 ecx_622
	word32 eax_53 = fn00723860(0x20<32>, out ecx_622, out edx_623)
	branch eax_53 != 0<32> l0072CCFD
l0072CCFD:
	Mem68[eax_53:word32] = 0<32>
	Mem69[eax_53 + 4<32>:word32] = 0<32>
	Mem70[eax_53 + 8<32>:word32] = 0<32>
	Mem71[eax_53 + 0xC<32>:word32] = 0<32>
	Mem72[eax_53 + 0x10<32>:word32] = 0<32>
	Mem73[eax_53 + 0x14<32>:word32] = 0<32>
	Mem74[eax_53 + 0x18<32>:word32] = 0<32>
	Mem75[eax_53 + 0x1C<32>:word32] = 0<32>
	Mem77[eax_53:word32] = Mem75[edi_50 + 0x24<32>:word32]
	Mem78[edi_50 + 0x24<32>:word32] = eax_53
	word32 eax_81 = fn007282B0(Mem78[dwArg08 + 4<32>:word32])
	branch eax_81 != 0<32> l0072CD6C
l0072CD6C:
	branch eax_81 != 1<32> l0072CDB3
l0072CDB3:
	branch fn0072B360(dwArg04, Mem78[dwArg08 + 4<32>:word32]) == 0<32> l0072CCF5
l0072CDC8:
	branch fn00727880(dwArg04, 0x6F<32>, dwArg04, dwArg08) == 0<32> l0072CCF5
l0072CDDF:
	branch fn00727670(dwArg04, 1<32>) == 0<32> l0072CCF5
l0072CDF3:
	word32 ebp_136 = Mem113[dwArg08 + 8<32>:word32]
	word32 ebx_137 = 0<32>
l0072CE00:
	word32 eax_146
	branch ebp_136 != 0<32> l0072CE08
l0072CE08:
	eax_146 = Mem145[ebp_136:word32]
l0072CE04:
	eax_146 = 0<32>
l0072CE0B:
	branch ebx_137 >= eax_146 l0072CE2F
l0072CE2F:
	branch fn00727880(dwArg04, 0x6E<32>, dwArg04, dwArg08) == 0<32> l0072CCF5
l0072CE4E:
	Mem186[Mem165[Mem165[dwArg04 + 0x18<32>:word32] + 0x28<32>:word32] + 0x10<32>:word32] = eax_53
	Mem190[Mem186[dwArg04 + 0x18<32>:word32] + 0x28<32>:word32] = eax_53
	branch fn00727670(dwArg04, 1<32>) == 0<32> l0072CCF5
l0072CE71:
	word32 ebx_201 = Mem190[dwArg08 + 0xC<32>:word32]
	branch ebx_201 == 0<32> l0072CEAF
l0072CE7C:
	word32 edi_205 = 0<32>
l0072CE81:
	word32 eax_214
	branch ebx_201 != 0<32> l0072CE89
l0072CE89:
	eax_214 = Mem213[ebx_201:word32]
l0072CE85:
	eax_214 = 0<32>
l0072CE8B:
	branch edi_205 >= eax_214 l0072CEAF
l0072CEAF:
l0072CE8F:
	branch fn0072D920(dwArg04, dwArg04) == 0<32> l0072CCF5
l0072CEA7:
	edi_205 = edi_205 + 1<32>
l0072CE0F:
	branch fn0072D920(dwArg04, dwArg04) == 0<32> l0072CCF5
l0072CE27:
	ebx_137 = ebx_137 + 1<32>
l0072CD71:
	word32 ebp_276 = Mem78[dwArg08 + 8<32>:word32]
	word32 edi_277 = 0<32>
l0072CD80:
	word32 eax_287
	branch ebp_276 != 0<32> l0072CD88
l0072CD88:
	eax_287 = Mem286[ebp_276:word32]
l0072CD84:
	eax_287 = 0<32>
l0072CD8B:
	branch edi_277 >= eax_287 l0072CEB3
l0072CEB3:
l0072CD93:
	branch fn0072D920(dwArg04, dwArg04) == 0<32> l0072CCF5
l0072CDAB:
	edi_277 = edi_277 + 1<32>
l0072CD2E:
	word32 eax_330 = Mem78[dwArg08 + 0xC<32>:word32]
	branch eax_330 == 0<32> l0072CEB7
l0072CD3D:
	word32 edi_335 = 0<32>
l0072CD42:
	word32 eax_339 = eax_330
	branch eax_330 == 0<32> l0072CD48
l0072CD46:
	eax_339 = Mem343[eax_330:word32]
l0072CD48:
	branch edi_335 >= eax_339 l0072CEB7
l0072CEB7:
	Mem366[Mem353[Mem353[dwArg04 + 0x18<32>:word32] + 0x28<32>:word32] + 0x10<32>:word32] = eax_20
	Mem372[Mem366[dwArg04 + 0x18<32>:word32] + 0x28<32>:word32] = eax_20
	return 1<32>
l0072CD50:
	branch fn0072D920(dwArg04, eax_330) == 0<32> l0072CCF5
l0072CD60:
	edi_335 = edi_335 + 1<32>
l0072CCF0:
	word32 ecx_626
	word32 edx_627
	fn006E1210(out ecx_626, out edx_627)
l0072CCF5:
	return 0<32>
l0072CCAF:
	word32 edx_625
	word32 ecx_624
	fn006E1210(out ecx_624, out edx_625)
	return 0<32>
fn0072CC90_exit:


word32 fn0072CEE0(word32 esi, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0072D920
// MayUse:  esi:[0..31] Stack +0004:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ebp ebx ecx edi edx Top
// Preserved: esp
fn0072CEE0_entry:
l0072CEE0:
	word32 dwLoc08_427
	word32 ebp_42
	word32 edi_13 = Mem11[esi + 0x18<32>:word32]
	word32 edx_558
	word32 ecx_557
	word32 eax_16 = fn00723860(0x20<32>, out ecx_557, out edx_558)
	branch eax_16 != 0<32> l0072CF03
l0072CF03:
	Mem30[eax_16:word32] = 0<32>
	Mem31[eax_16 + 4<32>:word32] = 0<32>
	Mem32[eax_16 + 8<32>:word32] = 0<32>
	Mem33[eax_16 + 0xC<32>:word32] = 0<32>
	Mem34[eax_16 + 0x10<32>:word32] = 0<32>
	Mem35[eax_16 + 0x14<32>:word32] = 0<32>
	Mem36[eax_16 + 0x18<32>:word32] = 0<32>
	Mem37[eax_16 + 0x1C<32>:word32] = 0<32>
	Mem39[eax_16:word32] = Mem37[edi_13 + 0x24<32>:word32]
	Mem40[edi_13 + 0x24<32>:word32] = eax_16
	dwLoc08_427 = eax_16
	ebp_42 = eax_16
l0072CEF6:
	word32 edx_560
	word32 ecx_559
	fn006E1210(out ecx_559, out edx_560)
	ebp_42 = 0<32>
	dwLoc08_427 = 0<32>
l0072CF2A:
	word32 dwLoc0C_465
	word32 edi_55 = Mem54[esi + 0x18<32>:word32]
	word32 edx_562
	word32 ecx_561
	word32 eax_59 = fn00723860(0x20<32>, out ecx_561, out edx_562)
	branch eax_59 != 0<32> l0072CF4A
l0072CF4A:
	Mem73[eax_59:word32] = 0<32>
	Mem74[eax_59 + 4<32>:word32] = 0<32>
	Mem75[eax_59 + 8<32>:word32] = 0<32>
	Mem76[eax_59 + 0xC<32>:word32] = 0<32>
	Mem77[eax_59 + 0x10<32>:word32] = 0<32>
	Mem78[eax_59 + 0x14<32>:word32] = 0<32>
	Mem79[eax_59 + 0x18<32>:word32] = 0<32>
	Mem80[eax_59 + 0x1C<32>:word32] = 0<32>
	Mem82[eax_59:word32] = Mem80[edi_55 + 0x24<32>:word32]
	Mem83[edi_55 + 0x24<32>:word32] = eax_59
	dwLoc0C_465 = eax_59
l0072CF3B:
	word32 edx_564
	word32 ecx_563
	fn006E1210(out ecx_563, out edx_564)
	dwLoc0C_465 = 0<32>
l0072CF6F:
	word32 edi_96 = Mem95[esi + 0x18<32>:word32]
	word32 edx_566
	word32 ecx_565
	word32 eax_100 = fn00723860(0x20<32>, out ecx_565, out edx_566)
	branch eax_100 != 0<32> l0072CF89
l0072CF89:
	Mem114[eax_100:word32] = 0<32>
	Mem115[eax_100 + 4<32>:word32] = 0<32>
	Mem116[eax_100 + 8<32>:word32] = 0<32>
	Mem117[eax_100 + 0xC<32>:word32] = 0<32>
	Mem118[eax_100 + 0x10<32>:word32] = 0<32>
	Mem119[eax_100 + 0x14<32>:word32] = 0<32>
	Mem120[eax_100 + 0x18<32>:word32] = 0<32>
	Mem121[eax_100 + 0x1C<32>:word32] = 0<32>
	Mem123[eax_100:word32] = Mem121[edi_96 + 0x24<32>:word32]
	Mem124[edi_96 + 0x24<32>:word32] = eax_100
l0072CF80:
	word32 ecx_567
	word32 edx_568
	fn006E1210(out ecx_567, out edx_568)
	eax_100 = 0<32>
l0072CFAA:
	branch ebp_42 == 0<32> l0072CFD0
l0072CFB2:
	branch eax_100 == 0<32> l0072CFD0
l0072CFB6:
	branch dwLoc0C_465 == 0<32> l0072CFD0
l0072CFBD:
	branch fn00727880(esi, 0x78<32>, eax_100, 0<32>) != 0<32> l0072CFD8
l0072CFD8:
	branch fn00728310(esi, 0<32>, ebp_42) == 0<32> l0072CFD0
l0072CFE9:
	branch fn0072B360(esi, Mem171[dwArg04 + 8<32>:word32]) == 0<32> l0072CFD0
l0072CFFE:
	branch fn00727670(esi, 0x44<32>) == 0<32> l0072D106
l0072D013:
	Mem218[Mem204[Mem204[esi + 0x18<32>:word32] + 0x28<32>:word32] + 0x10<32>:word32] = ebp_42
	Mem221[Mem218[esi + 0x18<32>:word32] + 0x28<32>:word32] = ebp_42
	Mem227[Mem221[esi + 0x18<32>:word32] + 0xDC<32>:word32] = 0<32>
	branch fn00727880(esi, 0x5D<32>, dwLoc0C_465, 0<32>) == 0<32> l0072D106
l0072D04A:
	branch fn0072B360(esi, Mem229[dwArg04 + 4<32>:word32]) == 0<32> l0072D106
l0072D05F:
	word32 ebp_256 = Mem245[dwArg04 + 0xC<32>:word32]
	word32 ebx_257 = 0<32>
	word32 edi_260 = ebp_256 + 4<32>
l0072D067:
	word32 eax_266
	branch ebp_256 != 0<32> l0072D06F
l0072D06F:
	eax_266 = Mem265[ebp_256:word32]
l0072D06B:
	eax_266 = 0<32>
l0072D072:
	branch ebx_257 >= eax_266 l0072D092
l0072D092:
	branch fn00727880(esi, 0x71<32>, dwLoc08_427, 1<32>) == 0<32> l0072D106
l0072D0A9:
	Mem306[Mem284[Mem284[esi + 0x18<32>:word32] + 0x28<32>:word32] + 0x10<32>:word32] = dwLoc0C_465
	Mem308[Mem306[esi + 0x18<32>:word32] + 0x28<32>:word32] = dwLoc0C_465
	branch fn00727670(esi, 0x57<32>) == 0<32> l0072D106
l0072D0CC:
	word32 eax_320 = Mem308[esi + 0x18<32>:word32]
	Mem322[eax_320 + 0x30<32>:word32] = Mem308[eax_320 + 0x30<32>:word32] + 0xFFFFFFFF<32>
	word32 ebx_324 = Mem322[dwArg04 + 0x10<32>:word32]
	word32 ebp_325 = 0<32>
	word32 edi_328 = ebx_324 + 4<32>
l0072D0E0:
	word32 eax_334
	branch ebx_324 != 0<32> l0072D0E8
l0072D0E8:
	eax_334 = Mem333[ebx_324:word32]
l0072D0E4:
	eax_334 = 0<32>
l0072D0EA:
	branch ebp_325 >= eax_334 l0072D10F
l0072D10F:
	Mem351[Mem333[Mem333[esi + 0x18<32>:word32] + 0x28<32>:word32] + 0x10<32>:word32] = eax_100
	Mem357[Mem351[esi + 0x18<32>:word32] + 0x28<32>:word32] = eax_100
	return 1<32>
l0072D0EE:
	branch fn0072D920(esi, Mem333[edi_328:word32]) == 0<32> l0072D106
l0072D0FE:
	ebp_325 = ebp_325 + 1<32>
	edi_328 = edi_328 + 4<32>
l0072D076:
	branch fn0072D920(esi, Mem265[edi_260:word32]) == 0<32> l0072D106
l0072D106:
	return 0<32>
l0072D08A:
	ebx_257 = ebx_257 + 1<32>
	edi_260 = edi_260 + 4<32>
l0072CFD0:
	return 0<32>
fn0072CEE0_exit:


word32 fn0072D130(word32 esi, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0072D920
// MayUse:  esi:[0..31] Stack +0004:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ebp ebx ecx edi edx Top
// Preserved: esp
fn0072D130_entry:
l0072D130:
	word32 ebp_16 = 0<32>
	word32 dwLoc10_488 = 0<32>
	word32 eax_20 = fn007282B0(Mem13[dwArg04 + 4<32>:word32])
	branch eax_20 != 0<32> l0072D18E
l0072D18E:
	word32 dwLoc14_491
	word32 edi_32 = Mem29[esi + 0x18<32>:word32]
	word32 ecx_676
	word32 edx_677
	word32 eax_35 = fn00723860(0x20<32>, out ecx_676, out edx_677)
	branch eax_35 != 0<32> l0072D1AA
l0072D1AA:
	Mem48[eax_35:word32] = 0<32>
	Mem49[eax_35 + 4<32>:word32] = 0<32>
	Mem50[eax_35 + 8<32>:word32] = 0<32>
	Mem51[eax_35 + 0xC<32>:word32] = 0<32>
	Mem52[eax_35 + 0x10<32>:word32] = 0<32>
	Mem53[eax_35 + 0x14<32>:word32] = 0<32>
	Mem54[eax_35 + 0x18<32>:word32] = 0<32>
	Mem55[eax_35 + 0x1C<32>:word32] = 0<32>
	Mem57[eax_35:word32] = Mem55[edi_32 + 0x24<32>:word32]
	Mem58[edi_32 + 0x24<32>:word32] = eax_35
	dwLoc14_491 = eax_35
l0072D19F:
	word32 edx_679
	word32 ecx_678
	fn006E1210(out ecx_678, out edx_679)
	dwLoc14_491 = 0<32>
l0072D1CF:
	word32 dwLoc0C_543
	word32 edi_108
	word32 edi_69 = Mem68[esi + 0x18<32>:word32]
	word32 edx_681
	word32 ecx_680
	word32 eax_73 = fn00723860(0x20<32>, out ecx_680, out edx_681)
	branch eax_73 != 0<32> l0072D1ED
l0072D1ED:
	Mem87[eax_73:word32] = 0<32>
	Mem88[eax_73 + 4<32>:word32] = 0<32>
	Mem89[eax_73 + 8<32>:word32] = 0<32>
	Mem90[eax_73 + 0xC<32>:word32] = 0<32>
	Mem91[eax_73 + 0x10<32>:word32] = 0<32>
	Mem92[eax_73 + 0x14<32>:word32] = 0<32>
	Mem93[eax_73 + 0x18<32>:word32] = 0<32>
	Mem94[eax_73 + 0x1C<32>:word32] = 0<32>
	Mem96[eax_73:word32] = Mem94[edi_69 + 0x24<32>:word32]
	Mem97[edi_69 + 0x24<32>:word32] = eax_73
	dwLoc0C_543 = eax_73
	edi_108 = eax_73
l0072D1E0:
	word32 ecx_682
	word32 edx_683
	fn006E1210(out ecx_682, out edx_683)
	edi_108 = 0<32>
	dwLoc0C_543 = 0<32>
l0072D214:
	branch eax_20 != 0xFFFFFFFF<32> l0072D228
l0072D219:
	word32 eax_123 = fn00727340(esi)
	dwLoc10_488 = eax_123
	branch eax_123 == 0<32> l0072D24A
l0072D228:
	branch dwLoc14_491 == 0<32> l0072D24A
l0072D22E:
	branch edi_108 == 0<32> l0072D24A
l0072D232:
	word32 dwLoc04_553
	branch Mem131[dwArg04 + 0xC<32>:word32] == 0<32> l0072D253
l0072D253:
	dwLoc04_553 = 0<32>
l0072D23B:
	word32 eax_148 = fn00727340(esi)
	dwLoc04_553 = eax_148
	branch eax_148 != 0<32> l0072D257
l0072D257:
	branch fn00727880(esi, 0x78<32>, dwArg04, 0<32>) == 0<32> l0072D24A
l0072D269:
	Mem181[Mem163[Mem163[esi + 0x18<32>:word32] + 0x28<32>:word32] + 0x10<32>:word32] = dwLoc14_491
	Mem185[Mem181[esi + 0x18<32>:word32] + 0x28<32>:word32] = dwLoc14_491
	branch fn00728310(esi, 0<32>, dwArg04) == 0<32> l0072D24A
l0072D28C:
	branch eax_20 != 0xFFFFFFFF<32> l0072D2DB
l0072D293:
	Mem202[Mem187[esi + 0x18<32>:word32] + 0xDC<32>:word32] = 0<32>
	branch fn0072B360(esi, dwArg04) == 0<32> l0072D24A
l0072D2AD:
	branch fn00727880(esi, 0x6F<32>, dwArg04, 0<32>) == 0<32> l0072D24A
l0072D2C3:
	branch fn00727670(esi, 1<32>) == 0<32> l0072D24A
l0072D2D7:
l0072D2DB:
	word32 ebp_250 = Mem249[dwArg04 + 8<32>:word32]
	word32 ebx_251 = 0<32>
l0072D2E3:
	word32 eax_260
	branch ebp_250 != 0<32> l0072D2EB
l0072D2EB:
	eax_260 = Mem259[ebp_250:word32]
l0072D2E7:
	eax_260 = 0<32>
l0072D2EE:
	branch ebx_251 >= eax_260 l0072D30E
l0072D30E:
	branch fn00727880(esi, 0x71<32>, dwArg04, 1<32>) == 0<32> l0072D24A
l0072D329:
	branch eax_20 != 0xFFFFFFFF<32> l0072D36D
l0072D332:
	Mem303[Mem278[Mem278[esi + 0x18<32>:word32] + 0x28<32>:word32] + 0x10<32>:word32] = dwLoc10_488
	Mem305[Mem303[esi + 0x18<32>:word32] + 0x28<32>:word32] = dwLoc10_488
	branch fn00727670(esi, 1<32>) == 0<32> l0072D24A
l0072D359:
	branch fn00727670(esi, 0x57<32>) == 0<32> l0072D24A
l0072D36D:
	word32 eax_330 = Mem329[esi + 0x18<32>:word32]
	Mem333[eax_330 + 0x30<32>:word32] = Mem329[eax_330 + 0x30<32>:word32] + 0xFFFFFFFF<32>
	branch dwLoc04_553 == 0<32> l0072D3B1
l0072D37A:
	word32 ebp_338 = Mem333[dwArg04 + 0xC<32>:word32]
	word32 ebx_339 = 0<32>
l0072D386:
	word32 eax_348
	branch ebp_338 != 0<32> l0072D38E
l0072D38E:
	eax_348 = Mem347[ebp_338:word32]
l0072D38A:
	eax_348 = 0<32>
l0072D391:
	branch ebx_339 >= eax_348 l0072D3B1
l0072D3B1:
	Mem368[Mem360[Mem360[esi + 0x18<32>:word32] + 0x28<32>:word32] + 0x10<32>:word32] = dwLoc0C_543
	Mem370[Mem368[esi + 0x18<32>:word32] + 0x28<32>:word32] = dwLoc0C_543
l0072D395:
	branch fn0072D920(esi, dwArg04) == 0<32> l0072D24A
l0072D3A9:
	ebx_339 = ebx_339 + 1<32>
l0072D2F2:
	branch fn0072D920(esi, dwArg04) == 0<32> l0072D24A
l0072D306:
	ebx_251 = ebx_251 + 1<32>
l0072D152:
	word32 ebx_412 = Mem29[dwArg04 + 0xC<32>:word32]
	branch ebx_412 == 0<32> l0072D3C4
l0072D15D:
l0072D160:
	word32 eax_421
	branch ebx_412 != 0<32> l0072D168
l0072D168:
	eax_421 = Mem420[ebx_412:word32]
l0072D164:
	eax_421 = 0<32>
l0072D16A:
	branch ebp_16 >= eax_421 l0072D3C4
l0072D3C4:
	return 1<32>
l0072D172:
	branch fn0072D920(esi, dwArg04) == 0<32> l0072D24A
l0072D24A:
	return 0<32>
fn0072D130_exit:
l0072D186:
	ebp_16 = ebp_16 + 1<32>


word32 fn0072D3D0(word32 esi, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0072D920
// MayUse:  esi:[0..31] Stack +0004:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ebp ebx ecx edi edx Top
// Preserved: esp
fn0072D3D0_entry:
l0072D3D0:
	word32 ebx_44
	word32 edi_16 = Mem14[esi + 0x18<32>:word32]
	word32 edx_984
	word32 ecx_983
	word32 eax_19 = fn00723860(0x20<32>, out ecx_983, out edx_984)
	branch eax_19 != 0<32> l0072D3F0
l0072D3F0:
	Mem33[eax_19:word32] = 0<32>
	Mem34[eax_19 + 4<32>:word32] = 0<32>
	Mem35[eax_19 + 8<32>:word32] = 0<32>
	Mem36[eax_19 + 0xC<32>:word32] = 0<32>
	Mem37[eax_19 + 0x10<32>:word32] = 0<32>
	Mem38[eax_19 + 0x14<32>:word32] = 0<32>
	Mem39[eax_19 + 0x18<32>:word32] = 0<32>
	Mem40[eax_19 + 0x1C<32>:word32] = 0<32>
	Mem42[eax_19:word32] = Mem40[edi_16 + 0x24<32>:word32]
	Mem43[edi_16 + 0x24<32>:word32] = eax_19
	ebx_44 = eax_19
l0072D3E7:
	word32 edx_986
	word32 ecx_985
	fn006E1210(out ecx_985, out edx_986)
	ebx_44 = 0<32>
l0072D413:
	word32 dwLoc18_766
	word32 ebp_133
	word32 edi_56 = Mem55[esi + 0x18<32>:word32]
	word32 edx_988
	word32 ecx_987
	word32 eax_60 = fn00723860(0x20<32>, out ecx_987, out edx_988)
	branch eax_60 != 0<32> l0072D431
l0072D431:
	Mem74[eax_60:word32] = 0<32>
	Mem75[eax_60 + 4<32>:word32] = 0<32>
	Mem76[eax_60 + 8<32>:word32] = 0<32>
	Mem77[eax_60 + 0xC<32>:word32] = 0<32>
	Mem78[eax_60 + 0x10<32>:word32] = 0<32>
	Mem79[eax_60 + 0x14<32>:word32] = 0<32>
	Mem80[eax_60 + 0x18<32>:word32] = 0<32>
	Mem81[eax_60 + 0x1C<32>:word32] = 0<32>
	Mem83[eax_60:word32] = Mem81[edi_56 + 0x24<32>:word32]
	Mem84[edi_56 + 0x24<32>:word32] = eax_60
	dwLoc18_766 = eax_60
	ebp_133 = eax_60
l0072D424:
	word32 edx_990
	word32 ecx_989
	fn006E1210(out ecx_989, out edx_990)
	ebp_133 = 0<32>
	dwLoc18_766 = 0<32>
l0072D458:
	word32 dwLoc10_771
	word32 edi_102 = Mem101[esi + 0x18<32>:word32]
	word32 edx_992
	word32 ecx_991
	word32 eax_106 = fn00723860(0x20<32>, out ecx_991, out edx_992)
	branch eax_106 != 0<32> l0072D478
l0072D478:
	Mem120[eax_106:word32] = 0<32>
	Mem121[eax_106 + 4<32>:word32] = 0<32>
	Mem122[eax_106 + 8<32>:word32] = 0<32>
	Mem123[eax_106 + 0xC<32>:word32] = 0<32>
	Mem124[eax_106 + 0x10<32>:word32] = 0<32>
	Mem125[eax_106 + 0x14<32>:word32] = 0<32>
	Mem126[eax_106 + 0x18<32>:word32] = 0<32>
	Mem127[eax_106 + 0x1C<32>:word32] = 0<32>
	Mem129[eax_106:word32] = Mem127[edi_102 + 0x24<32>:word32]
	Mem130[edi_102 + 0x24<32>:word32] = eax_106
	dwLoc10_771 = eax_106
l0072D469:
	word32 ecx_993
	word32 edx_994
	fn006E1210(out ecx_993, out edx_994)
	dwLoc10_771 = 0<32>
l0072D49D:
	word32 dwLoc0C_776
	word32 edi_144 = Mem143[esi + 0x18<32>:word32]
	word32 ecx_995
	word32 edx_996
	word32 eax_148 = fn00723860(0x20<32>, out ecx_995, out edx_996)
	branch eax_148 != 0<32> l0072D4BD
l0072D4BD:
	Mem162[eax_148:word32] = 0<32>
	Mem163[eax_148 + 4<32>:word32] = 0<32>
	Mem164[eax_148 + 8<32>:word32] = 0<32>
	Mem165[eax_148 + 0xC<32>:word32] = 0<32>
	Mem166[eax_148 + 0x10<32>:word32] = 0<32>
	Mem167[eax_148 + 0x14<32>:word32] = 0<32>
	Mem168[eax_148 + 0x18<32>:word32] = 0<32>
	Mem169[eax_148 + 0x1C<32>:word32] = 0<32>
	Mem171[eax_148:word32] = Mem169[edi_144 + 0x24<32>:word32]
	Mem172[edi_144 + 0x24<32>:word32] = eax_148
	dwLoc0C_776 = eax_148
l0072D4AE:
	word32 ecx_997
	word32 edx_998
	fn006E1210(out ecx_997, out edx_998)
	dwLoc0C_776 = 0<32>
l0072D4E2:
	branch ebx_44 == 0<32> l0072D825
l0072D4EA:
	branch ebp_133 == 0<32> l0072D825
l0072D4F2:
	branch dwLoc10_771 == 0<32> l0072D825
l0072D4FD:
	branch dwLoc0C_776 == 0<32> l0072D825
l0072D508:
	branch fn00727880(esi, 0x79<32>, ebp_133, 0<32>) == 0<32> l0072D825
l0072D51F:
	Mem220[Mem203[Mem203[esi + 0x18<32>:word32] + 0x28<32>:word32] + 0x10<32>:word32] = ebx_44
	Mem227[Mem220[esi + 0x18<32>:word32] + 0x28<32>:word32] = ebx_44
	branch fn00728310(esi, 1<32>, ebx_44) == 0<32> l0072D825
l0072D543:
	word32 ebp_239 = Mem227[dwArg04 + 4<32>:word32]
	word32 ebx_240 = 0<32>
	word32 edi_243 = ebp_239 + 4<32>
l0072D550:
	word32 eax_249
	branch ebp_239 != 0<32> l0072D558
l0072D558:
	eax_249 = Mem248[ebp_239:word32]
l0072D554:
	eax_249 = 0<32>
l0072D55B:
	branch ebx_240 >= eax_249 l0072D57B
l0072D57B:
	branch fn00727670(esi, 0x57<32>) == 0<32> l0072D825
l0072D58F:
	word32 eax_279 = Mem248[esi + 0x18<32>:word32]
	Mem282[eax_279 + 0x30<32>:word32] = Mem248[eax_279 + 0x30<32>:word32] + 0xFFFFFFFF<32>
	branch fn00727880(esi, 0x6E<32>, dwLoc10_771, 0<32>) == 0<32> l0072D825
l0072D5B1:
	word32 dwLoc14_808
	word32 eax_302 = Mem289[dwArg04 + 8<32>:word32]
	branch eax_302 != 0<32> l0072D5C2
l0072D5C2:
	dwLoc14_808 = Mem289[eax_302:word32]
l0072D5BC:
	dwLoc14_808 = eax_302
l0072D5C8:
	Mem315[Mem310[Mem310[esi + 0x18<32>:word32] + 0x28<32>:word32] + 0x10<32>:word32] = dwLoc18_766
	Mem317[Mem315[esi + 0x18<32>:word32] + 0x28<32>:word32] = dwLoc18_766
	word32 eax_318 = 0<32>
	word32 dwLoc08_814 = 1<32>
	branch dwLoc14_808 > 0<32> l0072D629
l0072D629:
	word32 edi_327 = Mem323[Mem323[dwArg04 + 8<32>:word32] + 4<32> + eax_318 * 4<32>:word32]
	branch Mem323[edi_327:word32] != 0<32> l0072D64C
l0072D63D:
	branch eax_318 < dwLoc14_808 + 0xFFFFFFFF<32> l0072D7D0
l0072D7D0:
l0072D7E0_thunk_fn00728360:
	return fn00728360(eax, 0x8DAA2C<32>)
l0072D64C:
	Mem356[Mem329[esi + 0x18<32>:word32] + 0xDC<32>:word32] = 0<32>
	Mem360[Mem356[esi + 0x18<32>:word32] + 0xD8<32>:word32] = Mem356[edi_327 + 0xC<32>:word32]
	word32 eax_369 = fn00727340(esi)
	branch eax_369 == 0<32> l0072D825
l0072D67A:
	branch Mem377[edi_327:word32] == 0<32> l0072D6E8
l0072D67F:
	branch fn00727670(esi, 4<32>) == 0<32> l0072D825
l0072D693:
	branch fn0072B360(esi, Mem377[edi_327:word32]) == 0<32> l0072D825
l0072D6A7:
	word32 ecx_999
	branch fn00727810(esi, 0x6A<32>, 0xA<32>, out ecx_999) == 0<32> l0072D825
l0072D6BD:
	branch fn00727880(esi, 0x6F<32>, eax_369, 0<32>) == 0<32> l0072D825
l0072D6D4:
	branch fn00727670(esi, 1<32>) == 0<32> l0072D825
l0072D6E8:
	branch fn00727670(esi, 1<32>) == 0<32> l0072D825
l0072D6FC:
	word32 eax_473
	word32 eax_467 = Mem466[edi_327 + 4<32>:word32]
	branch eax_467 == 0<32> l0072D70F
l0072D70F:
	eax_473 = fn00727670(esi, 1<32>)
l0072D703:
	eax_473 = fn0072B360(esi, eax_467)
l0072D716:
	branch eax_473 == 0<32> l0072D825
l0072D71E:
	branch fn00727670(esi, 1<32>) == 0<32> l0072D825
l0072D732:
	word32 ebp_511 = Mem510[edi_327 + 8<32>:word32]
	word32 edi_515 = ebp_511 + 4<32>
	word32 ebx_516 = 0<32>
l0072D740:
	word32 eax_522
	branch ebp_511 != 0<32> l0072D748
l0072D748:
	eax_522 = Mem521[ebp_511:word32]
l0072D744:
	eax_522 = 0<32>
l0072D74B:
	branch ebx_516 >= eax_522 l0072D76B
l0072D76B:
	branch fn00727880(esi, 0x6E<32>, dwLoc0C_776, 0<32>) == 0<32> l0072D825
l0072D786:
	Mem562[Mem540[Mem540[esi + 0x18<32>:word32] + 0x28<32>:word32] + 0x10<32>:word32] = eax_369
	Mem565[Mem562[esi + 0x18<32>:word32] + 0x28<32>:word32] = eax_369
	branch Mem565[edi_327:word32] == 0<32> l0072D7B2
l0072D7A2:
	branch fn00727670(esi, 1<32>) == 0<32> l0072D825
l0072D7B2:
	dwLoc08_814 = dwLoc08_814 + 1<32>
	branch dwLoc08_814 + 0<32> < dwLoc14_808 l0072D625
l0072D625:
	eax_318 = dwLoc08_814
l0072D7C7:
l0072D74F:
	branch fn0072D920(esi, Mem521[edi_515:word32]) == 0<32> l0072D825
l0072D763:
	ebx_516 = ebx_516 + 1<32>
	edi_515 = edi_515 + 4<32>
l0072D5E7:
	branch fn00727670(esi, 0x58<32>) == 0<32> l0072D825
l0072D5FB:
	Mem632[Mem628[Mem628[esi + 0x18<32>:word32] + 0x28<32>:word32] + 0x10<32>:word32] = dwLoc10_771
	Mem634[Mem632[esi + 0x18<32>:word32] + 0x28<32>:word32] = dwLoc10_771
	word32 ebx_635 = Mem634[dwArg04 + 0xC<32>:word32]
	word32 ebp_636 = 0<32>
	word32 edi_639 = ebx_635 + 4<32>
l0072D616:
	word32 eax_645
	branch ebx_635 != 0<32> l0072D7E5
l0072D7E5:
	eax_645 = Mem644[ebx_635:word32]
l0072D61E:
	eax_645 = 0<32>
l0072D7E7:
	branch ebp_636 >= eax_645 l0072D806
l0072D806:
	Mem662[Mem644[Mem644[esi + 0x18<32>:word32] + 0x28<32>:word32] + 0x10<32>:word32] = dwLoc0C_776
	Mem668[Mem662[esi + 0x18<32>:word32] + 0x28<32>:word32] = dwLoc0C_776
	return 1<32>
l0072D7EB:
	branch fn0072D920(esi, Mem644[edi_639:word32]) == 0<32> l0072D825
l0072D7FB:
	ebp_636 = ebp_636 + 1<32>
	edi_639 = edi_639 + 4<32>
l0072D55F:
	branch fn0072D920(esi, Mem248[edi_243:word32]) == 0<32> l0072D825
l0072D825:
	return 0<32>
fn0072D3D0_exit:
l0072D573:
	ebx_240 = ebx_240 + 1<32>
	edi_243 = edi_243 + 4<32>


word32 fn0072D830(word32 esi, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0072D920
// MayUse:  esi:[0..31] Stack +0004:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ebp ebx ecx edi edx Top
// Preserved: esp
fn0072D830_entry:
l0072D830:
	branch Mem0[0x00A6DBF4<p32>:word32] == 0<32> l0072D845
l0072D845:
	branch Mem8[0x00A6DBF8<p32>:word32] != 0<32> l0072D868
l0072D84E:
	word32 edx_298
	word32 ecx_297
	word32 eax_16 = fn006ECAC0(0x8D33B8<32>, out ecx_297, out edx_298)
	Mem24[0x00A6DBF8<p32>:word32] = eax_16
	branch eax_16 != 0<32> l0072D868
l0072D868:
	branch fn0072B360(esi, dwArg04) == 0<32> l0072D864
l0072D879:
	word32 eax_53 = fn00727340(esi)
	branch eax_53 == 0<32> l0072D89A
l0072D887:
	branch fn00727880(esi, 0x70<32>, dwArg04, 0<32>) != 0<32> l0072D89F
l0072D89F:
	branch fn00727670(esi, 1<32>) == 0<32> l0072D8FA
l0072D8B0:
	branch fn00728FB0() == 0<32> l0072D8FA
l0072D8CC:
	branch Mem102[dwArg04 + 8<32>:word32] == 0<32> l0072D8E5
l0072D8E5:
l0072D8D3:
	branch fn0072B360(esi, dwArg04) == 0<32> l0072D8FA
l0072D8E1:
l0072D8E7:
	word32 ecx_299
	branch fn00727810(esi, 0x82<32>, dwArg04, out ecx_299) != 0<32> l0072D900
l0072D900:
	Mem156[Mem137[Mem137[esi + 0x18<32>:word32] + 0x28<32>:word32] + 0x10<32>:word32] = eax_53
	Mem159[Mem156[esi + 0x18<32>:word32] + 0x28<32>:word32] = eax_53
	return fn00727670(esi, 1<32>) == 0<32>
l0072D8FA:
	return 0<32>
l0072D89A:
	return 0<32>
l0072D864:
	return 0<32>
l0072D83E:
	return 1<32>
fn0072D830_exit:


word32 fn0072D920(word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00729300
//      fn0072BF10
//      fn0072C160
//      fn0072CC90
//      fn0072CEE0
//      fn0072D130
//      fn0072D3D0
//      fn0072DD60
//      fn0072E660
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn0072D920_entry:
l0072D920:
	Mem20[Mem12[dwArg04 + 0x18<32>:word32] + 0xD8<32>:word32] = Mem17[dwArg08 + 0x14<32>:word32]
	Mem23[Mem20[dwArg04 + 0x18<32>:word32] + 0xDC<32>:word32] = 0<32>
	word32 edx_22 = 0<32>
	word32 eax_24 = Mem23[dwArg08:word32]
	branch eax_24 >u 0x17<32> l0072DA8F
l0072D951:
	word32 ebx_191
	switch (eax_24 + 0xFFFFFFFF<32>) { l0072D958 l0072D967 l0072D976 l0072D9E2 l0072DA1B l0072DA99 l0072DAA9 l0072DAB9 l0072DAC7 l0072DAD5 l0072DCE8 l0072DAE4 l0072DB5D l0072DB6B l0072DB7B l0072DB89 l0072DB99 l0072DBA8 l0072DA8F l0072DC41 l0072DA8F l0072DC9E l0072DCDD }
l0072DCDD:
l00729250:
	word32 edi_39 = Mem38[dwArg04 + 0x18<32>:word32]
	branch Mem38[edi_39 + 0x30<32>:word32] != 0<32> l00729269
l00729269:
	word32 ecx_43 = Mem38[edi_39 + 0x30<32>:word32]
	word32 edx_44 = Mem38[edi_39 + 0x2C<32> + ecx_43 * 8<32>:word32]
	branch edx_44 >u 3<32> l007292E8
l0072927B:
	switch (edx_44) { l00729282 l0072928D l0072928D l007292C0 }
l0072928D:
	word32 ecx_51 = ecx_43 - 2<32>
	branch ecx_43 < 2<32> l007292AB
l00729292:
	word32 edx_55 = edi_39 + 0x34<32> + (ecx_43 - 2<32>) * 8<32>
l00729296:
	word32 esi_58 = Mem48[edx_55:word32]
	branch esi_58 == 0<32> l007292AB
l0072929C:
	branch esi_58 == 3<32> l007292C0
l007292C0:
	return fn00728360(eax, 0x8DA5BC<32>)
l007292A1:
	ecx_51 = ecx_51 - 1<32>
	edx_55 = edx_55 - 8<32>
	branch ecx_51 >= 0<32> l00729296
l007292AB:
	branch ecx_51 != 0xFFFFFFFF<32> l007292D0
l007292D0:
l007292B0:
	return fn00728360(eax, 0x8DA59C<32>)
l00729282:
l007292D9:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	byte stackArg4 = <invalid>
	word32 stackArg8 = <invalid>
	word32 stackArg12 = <invalid>
	word32 eax_146 = fn00727880(eax, stackArg4, stackArg8, stackArg12)
	branch eax_146 != 0<32> l007292E8
l007292E8:
	return 1<32>
l007292E5:
	return eax_146
l0072925A:
	return fn00728360(eax, 0x8DA59C<32>)
l0072DC9E:
	word32 edx_179 = Mem23[dwArg04 + 0x18<32>:word32]
	word32 ecx_180 = Mem23[edx_179 + 0x30<32>:word32]
	word32 eax_181 = 0<32>
	branch ecx_180 <= 0<32> l0072DCBF
l0072DCAA:
	word32 edx_184 = edx_179 + 0x34<32>
l0072DCB0:
	branch Mem23[edx_184:word32] == 0<32> l0072DCD3
l0072DCD3:
	ebx_191 = 0x50<32>
l0072DCB5:
	eax_181 = eax_181 + 1<32>
	edx_184 = edx_184 + 8<32>
	branch eax_181 < ecx_180 l0072DCB0
l0072DCBF:
	return fn00728360(dwArg04, 0x8DAA4C<32>)
l0072DC41:
	branch Mem23[dwArg04 + 0x10<32>:word32] == 0<32> l0072DC6B
l0072DC46:
	branch Mem23[dwArg04 + 0x14<32>:word32] > 1<32> l0072DC6B
l0072DC6B:
	word32 edi_235 = Mem23[dwArg08 + 4<32>:word32]
	word32 eax_236 = Mem23[edi_235:word32]
	branch eax_236 == 0xE<32> l0072DA8F
l0072DC79:
	branch eax_236 == 0xD<32> l0072DA8F
l0072DC82:
	branch fn0072B360(dwArg04, edi_235) == 0<32> l0072D9A9
l0072DC94:
	ebx_191 = 1<32>
l0072DC4C:
	branch fn0072B360(dwArg04, Mem23[dwArg08 + 4<32>:word32]) == 0<32> l0072D9A9
l0072DC61:
	ebx_191 = 0x46<32>
l0072DBA8:
	branch fn0072B360(dwArg04, Mem23[dwArg08 + 4<32>:word32]) == 0<32> l0072D9A9
l0072DBBD:
	branch Mem281[dwArg08 + 8<32>:word32] == 0<32> l0072DC05
l0072DC05:
	branch fn00728FB0() == 0<32> l0072D9A9
l0072DC23:
	branch fn00727670(dwArg04, 4<32>) == 0<32> l0072D9A9
l0072DBC4:
	branch fn0072B360(dwArg04, dwArg04) == 0<32> l0072D9A9
l0072DBD6:
	branch Mem328[dwArg08 + 0xC<32>:word32] == 0<32> l0072DBF0
l0072DBF0:
	word32 eax_346 = fn00727670(dwArg04, 4<32>)
	branch eax_346 != 0<32> l0072DC37
l0072DC00:
	return eax_346
l0072DBDD:
	word32 eax_367 = fn0072B360(dwArg04, dwArg04)
	branch eax_367 != 0<32> l0072DC37
l0072DC37:
	ebx_191 = 0x55<32>
l0072DBEB:
	return eax_367
l0072DB99:
	return fn0072AC20(dwArg04, dwArg08)
l0072DB89:
	return fn0072A940(dwArg04, dwArg08)
l0072DB7B:
	return fn0072D830(dwArg04, dwArg08)
l0072DB6B:
	return fn00729300(dwArg04, dwArg08)
l0072DB5D:
	return fn0072D3D0(dwArg04, dwArg08)
l0072DAE4:
	word32 ecx_479 = Mem23[dwArg08 + 4<32>:word32]
	branch ecx_479 == 0<32> l0072DB40
l0072DAED:
	branch fn0072B360(dwArg04, ecx_479) == 0<32> l0072D9A9
l0072DAFF:
	branch Mem486[dwArg08 + 8<32>:word32] == 0<32> l0072DB40
l0072DB0B:
	branch fn0072B360(dwArg04, dwArg04) == 0<32> l0072D9A9
l0072DB1D:
	branch Mem505[dwArg08 + 0xC<32>:word32] == 0<32> l0072DB40
l0072DB29:
	branch fn0072B360(dwArg04, dwArg04) == 0<32> l0072D9A9
l0072DB3B:
l0072DB40:
	word32 ecx_1383
	word32 eax_549 = fn00727810(dwArg04, 0x82<32>, dwArg04, out ecx_1383)
	branch eax_549 != 0<32> l0072DA8F
l0072DB58:
	return eax_549
l0072DCE8:
	return fn0072DD60(dwArg04, dwArg08)
l0072DAD5:
	return fn0072CC90(dwArg04, dwArg08)
l0072DAC7:
	return fn0072D130(dwArg04, dwArg08)
l0072DAB9:
	return fn0072CEE0(dwArg04, dwArg08)
l0072DAA9:
	return fn0072CA10(dwArg04, dwArg08)
l0072DA99:
	return fn0072B830(dwArg08, dwArg04)
l0072DA1B:
	word32 eax_680 = Mem23[dwArg08 + 4<32>:word32]
	branch eax_680 == 0<32> l0072DA24
l0072DA22:
	edx_22 = Mem23[eax_680:word32]
l0072DA24:
	branch fn0072B360(dwArg04, Mem23[dwArg08 + 8<32>:word32]) == 0<32> l0072D9A9
l0072DA3D:
	word32 ebp_708 = 0<32>
	branch edx_22 <= 0<32> l0072DA8F
l0072DA45:
	word32 ebx_711 = edx_22
l0072DA50:
	branch ebp_708 >= ebx_711 - 1<32> l0072DA6F
l0072DA57:
	branch fn00727670(dwArg04, 4<32>) == 0<32> l0072D9A9
l0072DA6B:
	ebx_711 = edx_22
l0072DA6F:
	branch fn0072B360(dwArg04, edx_22) == 0<32> l0072D9A9
l0072DA88:
	ebp_708 = ebp_708 + 1<32>
	branch ebp_708 < ebx_711 l0072DA50
l0072D9E2:
	word32 ebp_761 = Mem23[dwArg08 + 4<32>:word32]
	word32 edi_762 = 0<32>
l0072D9F0:
	word32 eax_772
	branch ebp_761 != 0<32> l0072D9F8
l0072D9F8:
	eax_772 = Mem771[ebp_761:word32]
l0072D9F4:
	eax_772 = 0<32>
l0072D9FB:
	branch edi_762 >= eax_772 l0072DA8F
l0072DA03:
	branch fn0072B360(dwArg04, dwArg04) == 0<32> l0072D9A9
l0072DA13:
	edi_762 = edi_762 + 1<32>
l0072D976:
	branch Mem23[Mem23[Mem23[dwArg04 + 0x18<32>:word32]:word32] + 0x1C<32>:word32] == 0<32> l0072D994
l0072D994:
	word32 edi_813 = Mem23[dwArg08 + 4<32>:word32]
	branch edi_813 == 0<32> l0072D9B0
l0072D9B0:
	branch fn00728FB0() == 0<32> l0072D9DB
l0072D99B:
	branch fn0072B360(dwArg04, edi_813) != 0<32> l0072D9C7
l0072D9C7:
	ebx_191 = 0x53<32>
l0072D9CC:
	branch fn00727670(dwArg04, ebx_191) != 0<32> l0072DA8F
l0072DA8F:
	return 1<32>
l0072D9DB:
	return 0<32>
l0072D9A9:
	return 0<32>
l0072D980:
	return fn00728360(dwArg04, 0x8DAA64<32>)
l0072D967:
	return fn0072C510(dwArg04, dwArg08)
l0072D958:
	return fn0072C160(dwArg04, dwArg08)
fn0072D920_exit:


word32 fn0072DD60(word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0072D920
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn0072DD60_entry:
l0072DD60:
	word32 dwLoc14_1108 = 0<32>
	branch Mem0[0x00A6DBEC<p32>:word32] != 0<32> l0072DD8F
l0072DD73:
	word32 ecx_1489
	word32 edx_1490
	word32 eax_12 = fn006F1A70(out ecx_1489, out edx_1490)
	Mem20[0x00A6DBEC<p32>:word32] = eax_12
	branch eax_12 != 0<32> l0072DD8F
l0072DD8F:
	branch Mem22[0x00A6DBDC<p32>:word32] != 0<32> l0072DDAE
l0072DD98:
	word32 ecx_1493
	word32 edx_1494
	word32 eax_30 = fn006F1A70(out ecx_1493, out edx_1494)
	Mem38[0x00A6DBDC<p32>:word32] = eax_30
	branch eax_30 == 0<32> l0072DD89
l0072DDAE:
	word32 dwLoc04_1183
	word32 edi_129
	word32 esi_52 = Mem51[dwArg04 + 0x18<32>:word32]
	word32 edx_1492
	word32 ecx_1491
	word32 eax_60 = fn00723860(0x20<32>, out ecx_1491, out edx_1492)
	branch eax_60 != 0<32> l0072DDD3
l0072DDD3:
	Mem74[eax_60:word32] = 0<32>
	Mem75[eax_60 + 4<32>:word32] = 0<32>
	Mem76[eax_60 + 8<32>:word32] = 0<32>
	Mem77[eax_60 + 0xC<32>:word32] = 0<32>
	Mem78[eax_60 + 0x10<32>:word32] = 0<32>
	Mem79[eax_60 + 0x14<32>:word32] = 0<32>
	Mem80[eax_60 + 0x18<32>:word32] = 0<32>
	Mem81[eax_60 + 0x1C<32>:word32] = 0<32>
	Mem83[eax_60:word32] = Mem81[esi_52 + 0x24<32>:word32]
	Mem84[esi_52 + 0x24<32>:word32] = eax_60
	edi_129 = eax_60
	dwLoc04_1183 = eax_60
l0072DDC6:
	word32 ecx_1495
	word32 edx_1496
	fn006E1210(out ecx_1495, out edx_1496)
	edi_129 = 0<32>
	dwLoc04_1183 = 0<32>
l0072DDFA:
	word32 esi_100 = Mem99[dwArg04 + 0x18<32>:word32]
	word32 edx_1498
	word32 ecx_1497
	word32 eax_104 = fn00723860(0x20<32>, out ecx_1497, out edx_1498)
	branch eax_104 != 0<32> l0072DE14
l0072DE14:
	Mem118[eax_104:word32] = 0<32>
	Mem119[eax_104 + 4<32>:word32] = 0<32>
	Mem120[eax_104 + 8<32>:word32] = 0<32>
	Mem121[eax_104 + 0xC<32>:word32] = 0<32>
	Mem122[eax_104 + 0x10<32>:word32] = 0<32>
	Mem123[eax_104 + 0x14<32>:word32] = 0<32>
	Mem124[eax_104 + 0x18<32>:word32] = 0<32>
	Mem125[eax_104 + 0x1C<32>:word32] = 0<32>
	Mem127[eax_104:word32] = Mem125[esi_100 + 0x24<32>:word32]
	Mem128[esi_100 + 0x24<32>:word32] = eax_104
l0072DE0B:
	word32 ecx_1499
	word32 edx_1500
	fn006E1210(out ecx_1499, out edx_1500)
	eax_104 = 0<32>
l0072DE35:
	branch edi_129 == 0<32> l0072E5BF
l0072DE41:
	branch eax_104 == 0<32> l0072E5BF
l0072DE49:
	word32 eax_156 = fn007272E0(ebx, dwArg04, esi_100, edi_129, es, ds, dwArg04)
	branch eax_156 == 0<32> l0072E5BF
l0072DE5E:
	fn00740DF0(Mem167[dwArg04 + 0x24<32>:word32], eax_156)
	branch Mem170[dwArg08 + 8<32>:word32] == 0<32> l0072DE97
l0072DE75:
	word32 eax_184 = fn007272E0(ebx, dwArg04, dwArg08, edi_129, es, ds, dwArg04)
	dwLoc14_1108 = eax_184
	branch eax_184 == 0<32> l0072E5BF
l0072DE8A:
	fn00740DF0(Mem192[dwArg04 + 0x24<32>:word32], eax_184)
l0072DE97:
	branch fn0072B360(dwArg04, Mem208[dwArg08 + 4<32>:word32]) == 0<32> l0072E5BF
l0072E5BF:
	return 0<32>
l0072DEAC:
	branch fn00727670(dwArg04, 4<32>) == 0<32> l0072E192
l0072DEC1:
	branch fn00728FB0() == 0<32> l0072E192
l0072DEE0:
	word32 eax_277 = Mem266[dwArg04 + 0x18<32>:word32]
	word32 esi_281 = eax_156 + 0x14<32>
	word32 edi_282 = 0x8DA718<32>
	word32 ecx_283 = 0xA<32>
	bool v21_1092 = false
l0072DEFD:
	branch ecx_283 == 0<32> l0072DEFF
l0072DEFD_1:
	v21_1092 = Mem279[esi_1516:byte] != Mem279[edi_1517:byte]
	esi_281 = esi_1516 + 1<i32>
	edi_282 = edi_1517 + 1<i32>
	ecx_283 = ecx_283 - 1<32>
	esi_1516 = esi_281
	edi_1517 = edi_282
	branch Mem279[esi_1516:byte] != Mem279[edi_1517:byte] l0072DEFD
l0072DEFF:
	branch v21_1092 l0072DF15
l0072DF15:
	word32 edx_1503
	branch fn00726150(Mem279[eax_277 + 0x1C<32>:word32], eax_156, out edx_1503) == 0<32> l0072E192
l0072DF2C:
	word32 edi_339 = 3<32>
	word32 ecx_1506
	word32 edx_1507
	word32 eax_341 = fn007475E0(Mem310[Mem310[dwArg04 + 0x18<32>:word32]:word32], out ecx_1506, out edx_1507)
	branch eax_341 >u 5<32> l0072DF95
l0072DF4A:
	switch (eax_341 + 0xFFFFFFFF<32>) { l0072DF73 l0072DF90 l0072DF81 l0072DF51 l0072DF62 }
l0072DF62:
	edi_339 = 2<32>
l0072DF51:
	edi_339 = 2<32>
l0072DF81:
	word32 eax_359 = Mem335[Mem335[dwArg04 + 0x18<32>:word32]:word32]
	branch Mem335[eax_359 + 0x1C<32>:word32] != 0<32> l0072DF95
l0072DF8B:
	branch Mem335[eax_359 + 0x20<32>:word32] != 0<32> l0072DF95
l0072DF90:
	edi_339 = 1<32>
l0072DF73:
	branch Mem335[Mem335[Mem335[dwArg04 + 0x18<32>:word32]:word32] + 0x1C<32>:word32] != 0<32> l0072DF95
l0072DF7D:
	edi_339 = 0<32>
l0072DF95:
	word32 eax_386
	call Mem373[edi_339 * 4<32> + 0x72E5DC<32>:word32] (retsize: 0;)
		uses: Stack +0028:dwArg04,Stack +002C:dwArg08
		defs: eax:eax_386
	return eax_386
l0072DF01:
	word32 eax_395 = fn00728360(dwArg04, 0x8DA884<32>)
l0072E012:
	branch eax_395 == 0<32> l0072E192
l0072E01A:
	branch fn00728FB0() == 0<32> l0072E192
l0072E03A:
	word32 ecx_1504
	branch fn00727810(dwArg04, 0x83<32>, 0<32>, out ecx_1504) == 0<32> l0072E192
l0072E053:
	branch Mem427[dwArg08 + 8<32>:word32] == 0<32> l0072E19C
l0072E19C:
	branch fn00727670(dwArg04, 1<32>) == 0<32> l0072E192
l0072E061:
	word32 eax_453 = Mem427[dwArg04 + 0x18<32>:word32]
	word32 edi_457 = 0x8DA718<32>
	word32 esi_458 = dwLoc14_1108 + 0x14<32>
	word32 ecx_459 = 0xA<32>
	bool v25_1096 = false
l0072E07E:
	branch ecx_459 == 0<32> l0072E080
l0072E07E_1:
	v25_1096 = Mem456[esi_1518:byte] != Mem456[edi_1519:byte]
	esi_458 = esi_1518 + 1<i32>
	edi_457 = edi_1519 + 1<i32>
	ecx_459 = ecx_459 - 1<32>
	esi_1518 = esi_458
	edi_1519 = edi_457
	branch Mem456[esi_1518:byte] != Mem456[edi_1519:byte] l0072E07E
l0072E080:
	branch v25_1096 l0072E096
l0072E096:
	word32 edx_1505
	branch fn00726150(Mem480[eax_453 + 0x1C<32>:word32], dwLoc14_1108, out edx_1505) == 0<32> l0072E192
l0072E0AD:
	word32 edi_514 = 3<32>
	word32 edx_1515
	word32 ecx_1514
	word32 eax_516 = fn007475E0(Mem485[Mem485[dwArg04 + 0x18<32>:word32]:word32], out ecx_1514, out edx_1515)
	branch eax_516 >u 5<32> l0072E119
l0072E0CB:
	switch (eax_516 + 0xFFFFFFFF<32>) { l0072E0F4 l0072E114 l0072E103 l0072E0D2 l0072E0E3 }
l0072E0E3:
	edi_514 = 2<32>
l0072E0D2:
	edi_514 = 2<32>
l0072E103:
	word32 eax_534 = Mem510[Mem510[dwArg04 + 0x18<32>:word32]:word32]
	branch Mem510[eax_534 + 0x1C<32>:word32] != 0<32> l0072E119
l0072E10E:
	branch Mem510[eax_534 + 0x20<32>:word32] != 0<32> l0072E119
l0072E114:
	edi_514 = 1<32>
l0072E0F4:
	branch Mem510[Mem510[Mem510[dwArg04 + 0x18<32>:word32]:word32] + 0x1C<32>:word32] != 0<32> l0072E119
l0072E0FF:
	edi_514 = 0<32>
l0072E119:
	word32 eax_561
	call Mem548[edi_514 * 4<32> + 0x72E600<32>:word32] (retsize: 0;)
		uses: Stack +0028:dwArg04,Stack +002C:dwArg08
		defs: eax:eax_561
	return eax_561
l0072E082:
	word32 eax_570 = fn00728360(dwArg04, 0x8DA884<32>)
l0072E18E:
	branch eax_570 != 0<32> l0072E1AC
l0072E1AC:
	branch fn00727880(dwArg04, 0x7A<32>, eax_104, 0<32>) == 0<32> l0072E192
l0072E1C3:
	Mem608[Mem588[Mem588[dwArg04 + 0x18<32>:word32] + 0x28<32>:word32] + 0x10<32>:word32] = dwLoc04_1183
	Mem612[Mem608[dwArg04 + 0x18<32>:word32] + 0x28<32>:word32] = dwLoc04_1183
	branch fn00728310(dwArg04, 2<32>, dwLoc04_1183) == 0<32> l0072E192
l0072E1E7:
	branch Mem614[dwArg08 + 8<32>:word32] == 0<32> l0072E363
l0072E1F5:
	branch fn00729510(dwArg04, dwLoc14_1108, 1<32>) == 0<32> l0072E192
l0072E20A:
	word32 eax_645 = Mem633[dwArg04 + 0x18<32>:word32]
	word32 esi_649 = dwLoc14_1108 + 0x14<32>
	word32 edi_650 = 0x8DA718<32>
	word32 ecx_651 = 0xA<32>
	bool v29_1100 = false
l0072E22B:
	branch ecx_651 == 0<32> l0072E22D
l0072E22B_1:
	v29_1100 = Mem655[esi_1520:byte] != Mem655[edi_1521:byte]
	esi_649 = esi_1520 + 1<i32>
	edi_650 = edi_1521 + 1<i32>
	ecx_651 = ecx_651 - 1<32>
	esi_1520 = esi_649
	edi_1521 = edi_650
	branch Mem655[esi_1520:byte] != Mem655[edi_1521:byte] l0072E22B
l0072E22D:
	branch v29_1100 l0072E243
l0072E243:
	word32 edx_1508
	branch fn00726150(Mem673[eax_645 + 0x1C<32>:word32], dwLoc14_1108, out edx_1508) == 0<32> l0072E192
l0072E25A:
	word32 edi_707 = 3<32>
	word32 edx_1510
	word32 ecx_1509
	word32 eax_709 = fn007475E0(Mem678[Mem678[dwArg04 + 0x18<32>:word32]:word32], out ecx_1509, out edx_1510)
	branch eax_709 >u 5<32> l0072E2C3
l0072E278:
	switch (eax_709 + 0xFFFFFFFF<32>) { l0072E2A1 l0072E2BE l0072E2AF l0072E27F l0072E290 }
l0072E290:
	edi_707 = 2<32>
l0072E27F:
	edi_707 = 2<32>
l0072E2AF:
	word32 eax_727 = Mem703[Mem703[dwArg04 + 0x18<32>:word32]:word32]
	branch Mem703[eax_727 + 0x1C<32>:word32] != 0<32> l0072E2C3
l0072E2B9:
	branch Mem703[eax_727 + 0x20<32>:word32] != 0<32> l0072E2C3
l0072E2BE:
	edi_707 = 1<32>
l0072E2A1:
	branch Mem703[Mem703[Mem703[dwArg04 + 0x18<32>:word32]:word32] + 0x1C<32>:word32] != 0<32> l0072E2C3
l0072E2AB:
	edi_707 = 0<32>
l0072E2C3:
	word32 eax_754
	call Mem741[edi_707 * 4<32> + 0x72E624<32>:word32] (retsize: 0;)
		uses: Stack +0028:dwArg04,Stack +002C:dwArg08
		defs: eax:eax_754
	return eax_754
l0072E22F:
	word32 eax_763 = fn00728360(dwArg04, 0x8DA884<32>)
l0072E342:
	branch eax_763 == 0<32> l0072E192
l0072E34A:
	branch fn0072B360(dwArg04, Mem760[dwArg08 + 8<32>:word32]) == 0<32> l0072E192
l0072E363:
	word32 ebx_792 = Mem790[dwArg08 + 0xC<32>:word32]
	word32 edi_1070 = 0<32>
	word32 esi_1071 = ebx_792 + 4<32>
l0072E370:
	word32 eax_802
	branch ebx_792 != 0<32> l0072E378
l0072E378:
	eax_802 = Mem801[ebx_792:word32]
l0072E374:
	eax_802 = 0<32>
l0072E37A:
	branch edi_1070 >= eax_802 l0072E39A
l0072E39A:
	branch fn00727670(dwArg04, 0x57<32>) == 0<32> l0072E192
l0072E3AE:
	word32 eax_831 = Mem801[dwArg04 + 0x18<32>:word32]
	Mem833[eax_831 + 0x30<32>:word32] = Mem801[eax_831 + 0x30<32>:word32] + 0xFFFFFFFF<32>
	branch fn00728FB0() == 0<32> l0072E192
l0072E3D3:
	Mem856[Mem842[Mem842[dwArg04 + 0x18<32>:word32] + 0x28<32>:word32] + 0x10<32>:word32] = eax_104
	Mem860[Mem856[dwArg04 + 0x18<32>:word32] + 0x28<32>:word32] = eax_104
	branch fn00728310(dwArg04, 3<32>, eax_104) == 0<32> l0072E192
l0072E3FB:
	branch fn00729510(dwArg04, eax_156, 1<32>) == 0<32> l0072E192
l0072E414:
	word32 eax_890 = Mem878[dwArg04 + 0x18<32>:word32]
	word32 esi_894 = eax_156 + 0x14<32>
	word32 edi_895 = 0x8DA718<32>
	word32 ecx_896 = 0xA<32>
	bool v33_1104 = false
l0072E435:
	branch ecx_896 == 0<32> l0072E437
l0072E435_1:
	v33_1104 = Mem900[esi_1522:byte] != Mem900[edi_1523:byte]
	esi_894 = esi_1522 + 1<i32>
	edi_895 = edi_1523 + 1<i32>
	ecx_896 = ecx_896 - 1<32>
	esi_1522 = esi_894
	edi_1523 = edi_895
	branch Mem900[esi_1522:byte] != Mem900[edi_1523:byte] l0072E435
l0072E437:
	branch v33_1104 l0072E44D
l0072E44D:
	word32 edx_1511
	branch fn00726150(Mem918[eax_890 + 0x1C<32>:word32], eax_156, out edx_1511) == 0<32> l0072E192
l0072E464:
	word32 edi_952 = 3<32>
	word32 ecx_1512
	word32 edx_1513
	word32 eax_954 = fn007475E0(Mem923[Mem923[dwArg04 + 0x18<32>:word32]:word32], out ecx_1512, out edx_1513)
	branch eax_954 >u 5<32> l0072E4CD
l0072E482:
	switch (eax_954 + 0xFFFFFFFF<32>) { l0072E4AB l0072E4C8 l0072E4B9 l0072E489 l0072E49A }
l0072E49A:
	edi_952 = 2<32>
l0072E489:
	edi_952 = 2<32>
l0072E4B9:
	word32 eax_972 = Mem948[Mem948[dwArg04 + 0x18<32>:word32]:word32]
	branch Mem948[eax_972 + 0x1C<32>:word32] != 0<32> l0072E4CD
l0072E4C3:
	branch Mem948[eax_972 + 0x20<32>:word32] != 0<32> l0072E4CD
l0072E4C8:
	edi_952 = 1<32>
l0072E4AB:
	branch Mem948[Mem948[Mem948[dwArg04 + 0x18<32>:word32]:word32] + 0x1C<32>:word32] != 0<32> l0072E4CD
l0072E4B5:
	edi_952 = 0<32>
l0072E4CD:
	word32 eax_999
	call Mem986[edi_952 * 4<32> + 0x72E648<32>:word32] (retsize: 0;)
		uses: Stack +0028:dwArg04,Stack +002C:dwArg08
		defs: eax:eax_999
	return eax_999
l0072E439:
	word32 eax_1008 = fn00728360(dwArg04, 0x8DA884<32>)
l0072E57B:
	branch eax_1008 == 0<32> l0072E192
l0072E583:
	branch fn00727670(dwArg04, 0x51<32>) == 0<32> l0072E192
l0072E597:
	branch fn00727670(dwArg04, 0x58<32>) == 0<32> l0072E192
l0072E5AB:
	word32 ebp_1040 = Mem1005[dwArg04 + 0x18<32>:word32]
	Mem1042[ebp_1040 + 0x30<32>:word32] = Mem1005[ebp_1040 + 0x30<32>:word32] + 0xFFFFFFFF<32>
	return 1<32>
l0072E37E:
	branch fn0072D920(dwArg04, Mem801[esi_1071:word32]) == 0<32> l0072E192
l0072E392:
	edi_1070 = edi_1070 + 1<32>
	esi_1071 = esi_1071 + 4<32>
l0072E192:
	return 0<32>
l0072DD89:
	return 0<32>
fn0072DD60_exit:


word32 fn0072E660(word32 eax, word32 ecx)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0072E790
// MayUse:  eax:[0..31] ecx:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn0072E660_entry:
l0072E660:
	word32 eax_18 = Mem15[0x00A6DBE0<p32>:word32]
	word32 ebp_150 = 0<32>
	word32 dwLoc04_271 = 1<32>
	branch eax_18 != 0<32> l0072E697
l0072E67D:
	word32 edx_367
	word32 ecx_366
	eax_18 = fn006ECAC0(0x8DAAE0<32>, out ecx_366, out edx_367)
	Mem38[0x00A6DBE0<p32>:word32] = eax_18
	branch eax_18 == 0<32> l0072E770
l0072E697:
	branch fn00728E40(eax_18, ecx, eax, 0<32>) == 0<32> l0072E770
l0072E6AB:
	word32 ecx_62 = Mem46[eax:word32]
	branch ecx_62 >u 4<32> l0072E75B
l0072E75B:
	word32 edx_369
	word32 ecx_368
	fn006E15D0(Mem67[0x00A18720<p32>:word32], 0x8DAA98<32>, out ecx_368, out edx_369)
l0072E770:
	return 0<32>
l0072E6B9:
	switch (ecx_62 - 1<32>) { l0072E6C0 l0072E6DF l0072E70E l0072E740 }
l0072E740:
	word32 edx_371
	word32 ecx_370
	fn006E0F80(Mem46[0x00A18720<p32>:word32], 0x8DAAC0<32>, out ecx_370, out edx_371)
	return 0<32>
l0072E70E:
	branch fn0072B360(ecx, Mem46[eax + 4<32>:word32]) == 0<32> l0072E6D2
l0072E71F:
	dwLoc04_271 = 0<32>
l0072E6DF:
	Mem137[ecx + 0x10<32>:word32] = 1<32>
	word32 esi_138 = Mem137[eax + 4<32>:word32]
	word32 ebx_139 = esi_138 + 4<32>
l0072E6E8:
	word32 eax_145
	branch esi_138 != 0<32> l0072E6F0
l0072E6F0:
	eax_145 = Mem144[esi_138:word32]
l0072E6EC:
	eax_145 = 0<32>
l0072E6F2:
	branch ebp_150 >= eax_145 l0072E723
l0072E6F6:
	branch fn0072D920(ecx, Mem144[ebx_139:word32]) == 0<32> l0072E6D2
l0072E706:
	ebp_150 = ebp_150 + 1<32>
	ebx_139 = ebx_139 + 4<32>
l0072E6C0:
	branch fn0072BF10(ecx, Mem46[eax + 4<32>:word32]) != 0<32> l0072E723
l0072E723:
	word32 eax_214 = fn0072A350(ecx, dwLoc04_271)
	fn00727290(ecx)
	return eax_214
l0072E6D2:
	fn00727290(ecx)
	return 0<32>
fn0072E660_exit:


word32 fn0072E790(word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E83E0
//      fn006F67C0
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31] Stack +0010:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ebp ecx edi edx esi Top
// Preserved: esp
fn0072E790_entry:
l0072E790:
	word32 ebp_130 = 0<32>
	branch Mem7[0x00A6DBD8<p32>:word32] != 0<32> l0072E7BB
l0072E79E:
	word32 ecx_374
	word32 edx_375
	word32 eax_14 = fn006F1A70(out ecx_374, out edx_375)
	Mem22[0x00A6DBD8<p32>:word32] = eax_14
	branch eax_14 != 0<32> l0072E7BB
l0072E7BB:
	word32 dwLoc24_280 = 0<32>
	word32 edx_373
	word32 eax_43 = fn006F2650(0<32>, out edx_373)
	branch eax_43 == 0<32> l0072E7B4
l0072E7F6:
	word32 eax_71 = fn00752DC0()
	branch eax_71 == 0<32> l0072E889
l0072E81E:
	word32 edx_81 = dwArg0C
	branch dwArg0C != 0<32> l0072E82E
l0072E826:
	edx_81 = fp - 0x2C<32>
l0072E82E:
	word32 ecx_91 = Mem88[eax_71:word32] | Mem88[edx_81:word32]
	Mem94[eax_71:word32] = ecx_91
	Mem95[edx_81:word32] = ecx_91
	word32 eax_111 = fn00749820(dwArg04, dwArg08, eax_71)
	dwLoc24_280 = eax_111
	branch eax_111 != 0<32> l0072E874
l0072E874:
	ebp_130 = fn0072E660(dwArg04, fp - 0x28<32>)
l0072E855:
	branch fn006E0FC0() != 0<32> l0072E885
l0072E85E:
	word32 ecx_376
	word32 edx_377
	fn006E0F80(Mem119[0x00A18720<p32>:word32], 0x8DAAEC<32>, out ecx_376, out edx_377)
l0072E885:
l0072E889:
	branch dwLoc24_280 == 0<32> l0072E8A0
l0072E893:
	fn00747530(dwLoc24_280)
l0072E8A0:
	branch eax_71 == 0<32> l0072E8AD
l0072E8A4:
	word32 ecx_378
	word32 edx_379
	fn007239C0(eax_71, out ecx_378, out edx_379)
l0072E8AD:
	Mem195[eax_43:word32] = Mem191[eax_43:word32] + 0xFFFFFFFF<32>
	branch Mem195[eax_43:word32] != 0<32> l0072E8C9
l0072E8BD:
	word32 ecx_199 = Mem195[eax_43 + 4<32>:word32]
	call Mem195[ecx_199 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_199,Stack +0004:eax_43,Stack +003C:dwArg04,Stack +0040:dwArg08,Stack +0044:dwArg0C,Stack +0048:dwArg10
l0072E8C9:
	return ebp_130
l0072E7B4:
	return 0<32>
fn0072E790_exit:


word32 fn0072E920(word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E54A0
//      fn00728E40
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx edx Top
// Preserved: esp
fn0072E920_entry:
l0072E920:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg8 = <invalid>
	word32 edx_56
	word32 ecx_55
	word32 edx_58
	word32 eax_22 = fn006DDD30(fn00723860(Mem0[0x00A253C0<p32>:word32], out ecx_55, out edx_56), stackArg8, out edx_58)
	branch eax_22 != 0<32> l0072E941
l0072E941:
	Mem34[eax_22 + 8<32>:word32] = dwArg04
	Mem35[eax_22 + 0x10<32>:word32] = dwArg08
	Mem36[eax_22 + 0xC<32>:word32] = 0<32>
	return
l0072E940:
	return
fn0072E920_exit:


word32 fn0072E9C0(word32 dwArg04, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E5530
//      fn00718F10
//      fn00727290
//      fn0072C160
// MayUse:  Stack +0004:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ecx Top
// Preserved: esp
fn0072E9C0_entry:
l0072E9C0:
	branch dwArg04 == 0<32> l0072E9E8
l0072E9C8:
	branch Mem0[dwArg04 + 4<32>:word32] != 0xA253B0<32> l0072E9D5
l0072E9D5:
	word32 ecx_76
	word32 edx_77
	fn006E0F80(Mem0[0x00A16B7C<p32>:word32], 0x8DAB70<32>, out ecx_76, out edx_77)
l0072E9E8:
	branch fn006E0FC0() != 0<32> l0072EA05
l0072E9F1:
	word32 ecx_78
	word32 edx_79
	fn006E0F80(Mem27[0x00A16B7C<p32>:word32], dwArg04, out ecx_78, out edx_79)
l0072EA05:
	edxOut = <invalid>
	return 0<32>
l0072E9D1:
	word32 eax_45 = Mem0[dwArg04 + 8<32>:word32]
	edxOut = <invalid>
	return eax_45
fn0072E9C0_exit:


word32 fn0072EC10(ptr32 & edxOut, ptr32 & ebxOut, ptr32 & ebpOut, ptr32 & esiOut, ptr32 & ediOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006DDEB0
//      fn006DEEA0
//      fn006E1260
//      fn0072FB30
//      fn007556D0
// MayUse: 
// LiveOut: eax ebp ebx edi edx esi
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn0072EC10_entry:
l0072EC10:
	branch Mem0[0x00A6DCCC<p32>:word32] != 0<32> l0072EC1C
l0072EC1C:
	branch fn0074F680() != Mem0[0x00A6DC00<p32>:word32] l0072EC19
l0072EC29:
	Mem19[0x00A6DCCC<p32>:word32] = 0<32>
	branch fn007075C0() != 0<32> l0072EC44
l0072EC3F:
l0072EC44:
	word32 edi_145 = 1<32>
l0072EC50:
	word32 edx_139
	branch Mem46[edi_145 * 8<32> + 0xA6DC10<32>:word32] == 0<32> l0072ECB5
l0072EC5A:
	word32 esi_252
	word32 eax_61 = fn006EA200(out edx, out esi_252)
	Mem70[edi_145 * 8<32> + 0xA6DC10<32>:word32] = 0<32>
	branch eax_61 == 0<32> l0072ECC4
l0072EC7A:
	word32 edi_255
	word32 esi_254
	word32 ecx_253
	word32 eax_80 = fn00707680(Mem70[edi_145 * 8<32> + 0xA6DC14<32>:word32], eax_61, 0<32>, out ecx_253, out edx, out esi_254, out edi_255)
	word32 v13_86 = Mem78[eax_61:word32] + 0xFFFFFFFF<32>
	Mem87[eax_61:word32] = v13_86
	word32 esp_101 = fp - 0x10<32>
	branch v13_86 != 0<32> l0072ECA0
l0072EC94:
	word32 edx_91 = Mem87[eax_61 + 4<32>:word32]
	word32 esp_95
	word32 ecx_97
	call Mem87[edx_91 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_97,edx:edx_91,Stack +0004:eax_61
		defs: ecx:ecx_97,edx:edx_98,esp:esp_95
	esp_101 = esp_95 + 4<32>
l0072ECA0:
	branch eax_80 == 0<32> l0072ECC4
l0072ECC4:
	edxOut = edx
	ebxOut = <invalid>
	ebpOut = <invalid>
	esiOut = <invalid>
	ediOut = <invalid>
	return 0xFFFFFFFF<32>
l0072ECA4:
	word32 v16_124 = Mem110[eax_80:word32] + 0xFFFFFFFF<32>
	Mem125[eax_80:word32] = v16_124
	branch v16_124 != 0<32> l0072ECB5
l0072ECA9:
	word32 ecx_128 = Mem125[eax_80 + 4<32>:word32]
	word32 edx_129 = Mem125[ecx_128 + 0x18<32>:word32]
	Mem131[esp_101 - 4<i32>:word32] = eax_80
	call edx_129 (retsize: 4;)
		uses: ecx:ecx_128,edx:edx_139
		defs: edx:edx_139
	edx = edx_139
l0072ECB5:
	edi_145 = edi_145 + 1<32>
	branch edi_145 < 0x17<32> l0072EC50
l0072ECBD:
	edxOut = edx
	ebxOut = <invalid>
	ebpOut = <invalid>
	esiOut = <invalid>
	ediOut = <invalid>
	return 0<32>
l0072EC19:
	edxOut = edx
	ebxOut = <invalid>
	ebpOut = <invalid>
	esiOut = <invalid>
	ediOut = <invalid>
	return 0<32>
fn0072EC10_exit:


void fn0072ECF0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E8910
// MayUse: 
// LiveOut:
// Trashed: SCZO eax ecx edx esi Top
// Preserved: ebx edi esp
fn0072ECF0_entry:
l0072ECF0:
l0072EB20:
	signal(2<32>, Mem0[0x00A6DCD0<p32>:word32])
	word32 ecx_106 = Mem15[0x00A6DC08<p32>:word32]
	Mem22[0x00A6DCD0<p32>:word32] = 0<32>
	word32 edi_23 = 1<32>
	word32 esp_24 = fp - 0xC<32>
l0072EB46:
	word32 esi_30 = Mem29[edi_23 * 8<32> + 0xA6DC14<32>:word32]
	Mem32[edi_23 * 8<32> + 0xA6DC10<32>:word32] = 0<32>
	Mem33[edi_23 * 8<32> + 0xA6DC14<32>:word32] = 0<32>
	branch edi_23 == 2<32> l0072EB88
l0072EB60:
	branch esi_30 == 0<32> l0072EBA3
l0072EB64:
	branch esi_30 == 0xA163B8<32> l0072EB88
l0072EB6C:
	branch esi_30 == ecx_106 l0072EB88
l0072EB70:
	branch esi_30 == Mem33[0x00A6DCC8<p32>:word32] l0072EB88
l0072EB78:
	word32 esp_45 = esp_24 - 4<i32>
	Mem46[esp_45:word32] = 0<32>
	Mem48[esp_45 - 4<i32>:word32] = edi_23
	signal(Mem48[esp_45 - 4<i32>:int32], Mem48[esp_45:(ptr32 (fn void (int32)))])
	ecx_106 = Mem48[0x00A6DC08<p32>:word32]
l0072EB88:
	branch esi_30 == 0<32> l0072EBA3
l0072EB8C:
	word32 v12_58 = Mem57[esi_30:word32] + 0xFFFFFFFF<32>
	Mem59[esi_30:word32] = v12_58
	branch v12_58 != 0<32> l0072EBA3
l0072EB91:
	word32 ecx_62 = Mem59[esi_30 + 4<32>:word32]
	word32 edx_63 = Mem59[ecx_62 + 0x18<32>:word32]
	Mem66[esp_24 - 4<i32>:word32] = esi_30
	word32 esp_70
	word32 edx_73
	call edx_63 (retsize: 4;)
		uses: ecx:ecx_62,edx:edx_73
		defs: edx:edx_73,esp:esp_70
	ecx_106 = Mem66[0x00A6DC08<p32>:word32]
	esp_24 = esp_70 + 4<32>
l0072EBA3:
	edi_23 = edi_23 + 1<32>
	branch edi_23 < 0x17<32> l0072EB46
l0072EBAB:
	word32 eax_84 = Mem83[0x00A6DC0C<p32>:word32]
	word32 esp_107 = esp_24 + 4<i32>
	branch eax_84 == 0<32> l0072EBCC
l0072EBB5:
	word32 v15_91 = Mem83[eax_84:word32] + 0xFFFFFFFF<32>
	Mem92[eax_84:word32] = v15_91
	branch v15_91 != 0<32> l0072EBCC
l0072EBBA:
	word32 ecx_95 = Mem92[eax_84 + 4<32>:word32]
	word32 edx_96 = Mem92[ecx_95 + 0x18<32>:word32]
	Mem98[esp_107 - 4<i32>:word32] = eax_84
	word32 esp_100
	word32 edx_103
	call edx_96 (retsize: 4;)
		uses: ecx:ecx_95,edx:edx_103
		defs: edx:edx_103,esp:esp_100
	ecx_106 = Mem98[0x00A6DC08<p32>:word32]
	esp_107 = esp_100 + 4<32>
l0072EBCC:
	Mem114[0x00A6DC0C<p32>:word32] = 0<32>
	branch ecx_106 == 0<32> l0072EBE7
l0072EBD6:
	word32 v16_116 = Mem114[ecx_106:word32] + 0xFFFFFFFF<32>
	Mem117[ecx_106:word32] = v16_116
	branch v16_116 != 0<32> l0072EBE7
l0072EBDB:
	word32 eax_120 = Mem117[ecx_106 + 4<32>:word32]
	Mem123[esp_107 - 4<i32>:word32] = ecx_106
	word32 esp_128
	word32 edx_131
	call Mem123[eax_120 + 0x18<32>:word32] (retsize: 4;)
		uses: eax:eax_120,edx:edx_131
		defs: edx:edx_131,esp:esp_128
	esp_107 = esp_128 + 4<32>
l0072EBE7:
	word32 eax_137 = Mem136[0x00A6DCC8<p32>:word32]
	Mem140[0x00A6DC08<p32>:word32] = 0<32>
	branch eax_137 == 0<32> l0072EC07
l0072EBF6:
	word32 v17_142 = Mem140[eax_137:word32] + 0xFFFFFFFF<32>
	Mem143[eax_137:word32] = v17_142
	branch v17_142 != 0<32> l0072EC07
l0072EBFB:
	word32 edx_146 = Mem143[eax_137 + 4<32>:word32]
	Mem149[esp_107 - 4<i32>:word32] = eax_137
	call Mem149[edx_146 + 0x18<32>:word32] (retsize: 4;)
		uses: edx:edx_146
l0072EC07:
	Mem167[0x00A6DCC8<p32>:word32] = 0<32>
	return
fn0072ECF0_exit:


word32 fn0072ED00()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn007556D0
// MayUse: 
// LiveOut: eax
// Trashed: SCZO eax Top
// Preserved: esp
fn0072ED00_entry:
l0072ED00:
	branch Mem0[0x00A6DC20<p32>:word32] == 0<32> l0072ED26
l0072ED09:
	branch fn0074F680() != Mem0[0x00A6DC00<p32>:word32] l0072ED26
l0072ED26:
	return 0<32>
l0072ED16:
	Mem17[0x00A6DC20<p32>:word32] = 0<32>
	return 1<32>
fn0072ED00_exit:


word32 fn0072F1E0(word32 dwArg04, word32 dwArg08, word32 dwArg0C)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00707E00
//      fn00707F70
//      fn00708DC0
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx edx esi Top
// Preserved: esp
fn0072F1E0_entry:
l0072F1E0:
	word32 ecx_94
	word32 edx_95
	word32 eax_7 = fn006DDD80(0xA25D30<32>, out ecx_94, out edx_95)
	branch eax_7 != 0<32> l0072F1F2
l0072F1F2:
	word32 esi_20 = dwArg0C
	branch dwArg0C != 0<32> l0072F200
l0072F1FB:
	esi_20 = 0xA163B8<32>
l0072F200:
	Mem30[esi_20:word32] = Mem19[esi_20:word32] + 1<32>
	word32 edx_27 = dwArg04
	branch dwArg04 != 0<32> l0072F210
l0072F20B:
	edx_27 = 0xA163B8<32>
l0072F210:
	Mem40[edx_27:word32] = Mem30[edx_27:word32] + 1<32>
	word32 ecx_37 = dwArg08
	branch dwArg08 != 0<32> l0072F220
l0072F21B:
	ecx_37 = 0xA163B8<32>
l0072F220:
	Mem48[ecx_37:word32] = Mem40[ecx_37:word32] + 1<32>
	Mem55[eax_7 + 0x10<32>:word32] = esi_20
	Mem57[eax_7 + 8<32>:word32] = edx_27
	Mem58[eax_7 + 0xC<32>:word32] = ecx_37
	return
l0072F1F1:
	return
fn0072F1E0_exit:


word32 fn0072F230(word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00703210
//      fn00703420
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ebx ecx edx esi Top
// Preserved: edi esp
fn0072F230_entry:
l0072F230:
	word32 edx_224
	word32 ecx_223
	word32 eax_12 = fn00705120(dwArg04, out ecx_223, out edx_224)
	branch eax_12 != 0<32> l0072F246
l0072F246:
	word32 ecx_225
	word32 edx_226
	word32 eax_29 = fn00705120(dwArg08, out ecx_225, out edx_226)
	branch eax_29 != 0<32> l0072F270
l0072F270:
	word32 ebx_65
	word32 edx_228
	word32 ecx_227
	word32 eax_45 = fn006DDD80(0xA25D30<32>, out ecx_227, out edx_228)
	word32 esp_51 = fp - 8<32>
	branch eax_45 != 0<32> l0072F286
l0072F286:
	Mem56[0x00A163B8<p32>:word32] = Mem43[0x00A163B8<p32>:word32] + 1<32>
	Mem58[eax_12:word32] = Mem56[eax_12:word32] + 1<32>
	Mem60[eax_29:word32] = Mem58[eax_29:word32] + 1<32>
	Mem62[eax_45 + 0x10<32>:word32] = 0xA163B8<32>
	Mem63[eax_45 + 8<32>:word32] = eax_12
	Mem64[eax_45 + 0xC<32>:word32] = eax_29
	ebx_65 = eax_45
l0072F282:
	ebx_65 = 0<32>
l0072F2A2:
	word32 v17_71 = Mem70[eax_12:word32] + 0xFFFFFFFF<32>
	Mem72[eax_12:word32] = v17_71
	branch v17_71 != 0<32> l0072F2B3
l0072F2A7:
	word32 ecx_75 = Mem72[eax_12 + 4<32>:word32]
	word32 esp_83
	call Mem72[ecx_75 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_75,Stack +0004:eax_12,Stack +0008:dwArg04,Stack +0014:dwArg04,Stack +0018:dwArg08
		defs: esp:esp_83
	esp_51 = esp_83 + 4<32>
l0072F2B3:
	word32 v18_93 = Mem92[eax_29:word32] + 0xFFFFFFFF<32>
	Mem94[eax_29:word32] = v18_93
	branch v18_93 != 0<32> l0072F2C4
l0072F2B8:
	word32 eax_97 = Mem94[eax_29 + 4<32>:word32]
	word32 ecx_98 = Mem94[eax_97 + 0x18<32>:word32]
	Mem101[esp_51 - 4<i32>:word32] = eax_29
	call ecx_98 (retsize: 4;)
		uses: eax:eax_97,Stack +0008:dwArg04,Stack +000C:dwArg08
l0072F2C4:
	return ebx_65
l0072F25A:
	word32 v11_123 = Mem27[eax_12:word32] + 0xFFFFFFFF<32>
	Mem124[eax_12:word32] = v11_123
	branch v11_123 != 0<32> l0072F26B
l0072F25F:
	word32 edx_127 = Mem124[eax_12 + 4<32>:word32]
	call Mem124[edx_127 + 0x18<32>:word32] (retsize: 4;)
		uses: edx:edx_127,Stack +0004:eax_12,Stack +0008:dwArg04,Stack +0014:dwArg04,Stack +0018:dwArg08
l0072F26B:
	return 0<32>
l0072F244:
	return eax_12
fn0072F230_exit:


word32 fn0072F770(word32 ebx, word32 edi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0072F7F0
// MayUse:  ebx:[0..31] edi:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx edx Top
// Preserved: esi esp
fn0072F770_entry:
l0072F770:
	branch ebx == 0<32> l0072F77D
l0072F774:
	branch Mem0[ebx + 4<32>:word32] != 0xA25E40<32> l0072F7D1
l0072F77D:
	branch edi == 0<32> l0072F7D1
l0072F781:
	branch Mem0[edi + 4<32>:word32] != 0xA2B8D8<32> l0072F7D1
l0072F7D1:
	word32 edx_147
	fn006E1DC0(out edx_147)
	return 0<32>
l0072F78A:
	word32 ecx_148
	word32 edx_149
	word32 eax_47 = fn006FEF30(0xA25E40<32>, out ecx_148, out edx_149)
	branch eax_47 == 0<32> l0072F7CD
l0072F79E:
	branch ebx == 0<32> l0072F7A5
l0072F7A2:
	Mem61[ebx:word32] = Mem45[ebx:word32] + 1<32>
l0072F7A5:
	Mem65[eax_47 + 8<32>:word32] = ebx
	Mem68[edi:word32] = Mem65[edi:word32] + 1<32>
	Mem70[eax_47 + 0xC<32>:word32] = edi
	Mem72[eax_47 + 0x10<32>:word32] = Mem70[edi + 0x3C<32>:word32]
	Mem89[eax_47 + 0x14<32>:word32] = fn00735550(Mem72[edi + 0x10<32>:word32], Mem72[edi + 0x3C<32>:word32])
	word32 edx_150
	fn006FEE30(eax_47, out edx_150)
l0072F7CD:
	return eax_47
fn0072F770_exit:


void fn0072F7F0(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00708DC0
// MayUse:  Stack +0004:[0..31]
// LiveOut:
// Trashed: SCZO eax ebx ecx esi Top
// Preserved: edi esp
fn0072F7F0_entry:
l0072F7F0:
	word32 esi_10 = Mem9[0x00A6D67C<p32>:word32]
	word32 ebx_11 = Mem9[esi_10 + 0x30<32>:word32]
	word32 eax_17 = fn0072F770(ebx_11, dwArg04)
	branch eax_17 != 0<32> l0072F810
l0072F810:
	Mem26[esi_10 + 0x30<32>:word32] = eax_17
	branch ebx_11 == 0<32> l0072F828
l0072F817:
	word32 v10_28 = Mem26[ebx_11:word32] + 0xFFFFFFFF<32>
	Mem29[ebx_11:word32] = v10_28
	branch v10_28 != 0<32> l0072F828
l0072F81C:
	word32 eax_32 = Mem29[ebx_11 + 4<32>:word32]
	call Mem29[eax_32 + 0x18<32>:word32] (retsize: 4;)
		uses: eax:eax_32,Stack +0004:ebx_11,Stack +0008:dwArg04,Stack +0018:dwArg04
l0072F828:
	return
l0072F809:
	return
fn0072F7F0_exit:


word32 fn0072F830(word32 ecx, word32 edx, word32 ebx, word32 ebp, word32 esi, word32 edi, selector es, selector ds, word32 dwArg04, word32 dwArg0C, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0072FB30
// MayUse:  cs:[0..15] ds:[0..15] ebp:[0..31] ebx:[0..31] ecx:[0..31] edi:[0..31] edx:[0..31] es:[0..15] esi:[0..31] fs:[0..15] gs:[0..15] ss:[0..15] Stack +0004:[0..31] Stack +000C:[0..31]
// LiveOut: eax edx
// Trashed: SCZDOP eax ecx edx Top
// Preserved: ebp ebx edi esi esp
fn0072F830_entry:
l0072F830:
	word32 eax_7 = Mem0[0x00A14188<p32>:word32] ^ fp - 0x8F4<32>
	branch ecx == 0<32> l0072FB0F
l0072F869:
	branch dwArg0C == 0<32> l0072FB0F
l0072FB0F:
	word32 ecx_948
	word32 eax_55 = fn00694B8E(0xFFFFFFFF<32>, eax_7 ^ fp - 0x8F4<32>, edx, ebx, ebp, esi, edi, es, ds, esi, out ecx_948)
	edxOut = edx
	return eax_55
l0072F871:
	word32 ebx_950
	word32 ebp_951
	word32 edx_949
	word32 eax_75 = fn00659040(ebx, ebp, ecx, edi, es, ds, ecx, 0x8A7744<32>, out edx_949, out ebx_950, out ebp_951)
	word32 ebp_375 = eax_75
	word32 dwLoc08F4_689 = eax_75
	branch eax_75 != 0<32> l0072F9FE
l0072F890:
	word32 ebx_102
	word32 eax_96 = strrchr(ecx, 0x5C<32>)
	branch eax_96 != 0<32> l0072F8A6
l0072F8A6:
	ebx_102 = eax_96 + 1<32>
l0072F8A2:
	ebx_102 = ecx
l0072F8A9:
	word32 edx_954
	word32 ecx_953
	word32 eax_108 = fn00715DD0(out ecx_953, out edx_954)
	branch eax_108 == 0<32> l0072F9FE
l0072F8C4:
	word32 eax_121 = Mem119[eax_108 + 4<32>:word32]
	branch eax_121 == 0xA1BAF0<32> l0072F8E4
l0072F8CE:
	word32 ecx_959
	word32 edx_960
	branch fn006D5670(eax_121, 0xA1BAF0<32>, out ecx_959, out edx_960) == 0<32> l0072F9FE
l0072F8E4:
	word32 edx_958
	word32 ecx_957
	word32 eax_143 = fn006F2750(eax_108, out ecx_957, out edx_958)
	word32 eax_153 = ebx_102
	word32 edx_156 = ebx_102 + 1<32>
l0072F8F6:
	eax_153 = eax_974 + 1<32>
	eax_974 = eax_153
	branch Mem150[eax_974:byte] != 0<8> l0072F8F6
l0072F8FF:
	word32 eax_165 = eax_153 - edx_156
	word32 ebp_166 = 0<32>
	branch eax_143 <= 0<32> l0072F9FA
l0072F911:
l0072F917:
	word32 ecx_961
	word32 edx_962
	word32 eax_178 = fn006F2790(eax_108, ebp_166, out ecx_961, out edx_962)
	branch eax_178 == 0<32> l0072F9E9
l0072F9E9:
	word32 ecx_964
	word32 edx_965
	fn006E1160(out ecx_964, out edx_965)
l0072F92B:
	word32 eax_199 = Mem177[eax_178 + 4<32>:word32]
	branch eax_199 == 0xA1B450<32> l0072F94B
l0072F935:
	word32 ecx_966
	word32 edx_967
	branch fn006D5670(eax_199, 0xA1B450<32>, out ecx_966, out edx_967) == 0<32> l0072F9D6
l0072F94B:
	branch Mem218[eax_178 + 8<32>:word32] + 1<32> + eax_165 >=u 0x100<32> l0072F9D6
l0072F95E:
	word32 ecx_968
	word32 edx_969
	word32 esi_230
	word32 eax_227 = fn006ECC50(eax_178, out ecx_968, out edx_969, out esi_230)
	word32 edx_237 = fp - 0x8D8<32>
l0072F970:
	byte cl_240 = Mem239[eax_227:byte]
	Mem242[edx_237:byte] = cl_240
	eax_227 = eax_227 + 1<32>
	edx_237 = edx_237 + 1<32>
	branch cl_240 != 0<8> l0072F970
l0072F97E:
	word32 eax_249 = fp - 0x8D8<32>
l0072F985:
	eax_249 = eax_975 + 1<32>
	eax_975 = eax_249
	branch Mem242[eax_975:byte] != 0<8> l0072F985
l0072F98E:
	branch eax_249 - (fp - 0x8D7<32>) != esi_230 l0072F9D6
l0072F994:
	branch esi_230 <=u 0<32> l0072F9A7
l0072F998:
	branch Mem242[fp - 0x8D9<32> + esi_230:byte] == 0x5C<8> l0072F9A7
l0072F99F:
	Mem271[fp - 0x8D8<32> + esi_230:byte] = 0x5C<8>
	esi_230 = esi_230 + 1<32>
l0072F9A7:
	word32 esi_280 = esi_230 - ebx_102
	word32 eax_282 = ebx_102
	word32 edx_284 = fp - 0x8D8<32> + esi_280
l0072F9B0:
	byte cl_287 = Mem286[eax_282:byte]
	Mem289[edx_284 + eax_282:byte] = cl_287
	eax_282 = eax_282 + 1<32>
	branch cl_287 != 0<8> l0072F9B0
l0072F9BC:
	word32 edx_970
	word32 eax_347 = fn00659040(ebx_102, ebp_166, esi_280, eax_178, es, ds, fp - 0x8D8<32>, 0x8A7744<32>, out edx_970, out ebx_102, out ebp_166)
	dwLoc08F4_689 = eax_347
	branch eax_347 != 0<32> l0072F9F4
l0072F9F4:
l0072F9D6:
	ebp_166 = ebp_166 + 1<32>
	branch ebp_166 < eax_143 l0072F913
l0072F913:
l0072F9E3:
l0072F9FA:
	ebp_375 = dwLoc08F4_689
l0072F9FE:
	fn00724FE0(fp - 0x7D4<32>, 0x7D0<32>, 0x8DAD60<32>)
	word32 edi_411
	word32 esi_952
	word32 edx_412
	word32 eax_414 = fn00731D30(fp - 0x7D4<32>, dwArg04, out edx_412, out esi_952, out edi_411)
	word32 esi_424 = eax_414
	branch ebp_375 == 0<32> l0072FAF4
l0072FA42:
	branch eax_414 != 0<32> l0072FAEA
l0072FA4A:
	branch edi_411 <= 0<32> l0072FA8A
l0072FA8A:
	branch edi_411 != 0<32> l0072FAEA
l0072FA4E:
	word32 esi_432 = edi_411
l0072FA50:
	word32 edx_956
	branch fn00731F90(fp - 0x7D4<32>, 0x7D0<32>, ebp_375, 0<32>, out edx_956) == 0<32> l0072FA83
l0072FA74:
	branch true l0072FA83
l0072FA7F:
	branch true l0072FA50
l0072FA83:
	esi_432 = esi_432 - 1<32>
	branch esi_432 != 0<32> l0072FA50
l0072FA88:
l0072FA8C:
	word32 edi_469 = fp - 0x7D4<32>
l0072FA93:
	byte al_472 = Mem641[edi_469:byte]
	branch al_472 == 0x20<8> l0072FAA1
l0072FA99:
	branch al_472 == 9<8> l0072FAA1
l0072FA9D:
	branch al_472 != 0xC<8> l0072FAA6
l0072FAA6:
	word32 esi_963
	word32 edi_486
	word32 eax_489 = fn00731D30(0x8D3EF8<32>, dwArg04, out edx_412, out esi_963, out edi_486)
	esi_424 = eax_489
	branch eax_489 != 0<32> l0072FAEA
l0072FABA:
	word32 edi_504
	word32 esi_971
	word32 eax_507 = fn00731D30(edi_486, dwArg04, out edx_412, out esi_971, out edi_504)
	esi_424 = eax_507
	branch eax_507 != 0<32> l0072FAEA
l0072FACA:
	branch strchr(edi_504, 0xA<32>) != 0<32> l0072FAEA
l0072FADA:
	word32 esi_972
	word32 edi_973
	esi_424 = fn00731D30(0x8A6DE8<32>, dwArg04, out edx_412, out esi_972, out edi_973)
l0072FAEA:
	fclose(ebp_375)
l0072FAF4:
	word32 ecx_955
	word32 eax_623 = fn00694B8E(esi_424, eax_7 ^ fp - 0x8F4<32>, edx_412, ebx, ebp, esi, edi, es, ds, esi, out ecx_955)
	edxOut = edx_412
	return eax_623
fn0072F830_exit:
l0072FAA1:
	edi_469 = edi_469 + 1<32>


word32 fn0072FB30(word32 eax, word32 ebx, selector es, selector ds, word32 dwArg04, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0072FBB0
// MayUse:  cs:[0..15] ds:[0..15] eax:[0..31] ebx:[0..31] es:[0..15] fs:[0..15] gs:[0..15] ss:[0..15] Stack +0004:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ebx ecx edx Top
// Preserved: DP ebp edi esi esp
fn0072FB30_entry:
l0072FB30:
	word32 ebp_104 = dwArg04
	word32 esi_109 = eax
	word32 eax_103 = 0<32>
	word32 edi_107 = 0<32>
	word32 ecx_20 = eax
	branch eax == 0<32> l0072FB9F
l0072FB43:
	ecx_20 = Mem15[ecx_20 + 8<32>:word32]
	edi_107 = edi_107 + 1<32>
	branch ecx_20 != 0<32> l0072FB43
l0072FB4D:
l0072FB54:
	word32 esi_65
	branch edi_107 > ebp_104 l0072FB8C
l0072FB58:
	word32 esi_45
	word32 edx_64
	word32 ecx_232
	word32 ecx_234
	word32 edx_233
	eax_103 = fn0072F830(fn006ECC50(Mem58[Mem41[Mem41[esi_45 + 0xC<32>:word32] + 0x10<32>:word32] + 0x30<32>:word32], out ecx_234, out edx_64, out esi_65), edx_64, ebx, ebp_104, esi_65, edi_107, es, ds, ebx, fn006ECC50(Mem35[Mem35[Mem35[esi_109 + 0xC<32>:word32] + 0x10<32>:word32] + 0x34<32>:word32], out ecx_232, out edx_233, out esi_45), out edx)
	esi_109 = esi_65
l0072FB8C:
	esi_109 = Mem94[esi_109 + 8<32>:word32]
	edi_107 = edi_107 - 1<32>
	branch eax_103 != 0<32> l0072FB9B
l0072FB96:
	eax_103 = fn0072EC10(out edx, out ebx, out ebp_104, out esi_109, out edi_107)
l0072FB9B:
	branch esi_109 != 0<32> l0072FB50
l0072FB50:
	branch eax_103 != 0<32> l0072FB9F
l0072FB9F:
	edxOut = edx
	return eax_103
fn0072FB30_exit:


word32 fn0072FBB0(selector es, selector ds, word32 dwArg04, word32 dwArg08, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E8060
// MayUse:  cs:[0..15] ds:[0..15] es:[0..15] fs:[0..15] gs:[0..15] ss:[0..15] Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ecx edx Top
// Preserved: ebp ebx edi esi esp
fn0072FBB0_entry:
l0072FBB0:
	branch dwArg04 != 0<32> l0072FBC4
l0072FBC4:
	branch Mem12[dwArg04 + 4<32>:word32] == 0xA25E40<32> l0072FBE5
l0072FBE5:
	word32 ecx_240
	word32 edx_241
	word32 eax_22 = fn00715DD0(out ecx_240, out edx_241)
	branch eax_22 == 0<32> l0072FC2A
l0072FBF9:
	word32 eax_34 = Mem21[eax_22 + 4<32>:word32]
	branch eax_34 == 0xA1E7E8<32> l0072FC15
l0072FC03:
	word32 ecx_246
	word32 edx_247
	branch fn006D5670(eax_34, 0xA1E7E8<32>, out ecx_246, out edx_247) == 0<32> l0072FC2A
l0072FC15:
	word32 edx_59
	word32 ecx_243
	word32 esi_244
	word32 edi_245
	branch fn007051A0(0x3E8<32>, eax_22, out ecx_243, out edx_59, out esi_244, out edi_245) > 0<32> l0072FC2A
l0072FC2A:
	word32 edi_82
	word32 esi_242
	word32 edx_120
	word32 eax_117 = fn00731D30(0x8DAD88<32>, dwArg08, out edx_120, out esi_242, out edi_82)
	branch eax_117 != 0<32> l0072FC4C
l0072FC41:
	eax_117 = fn0072FB30(dwArg04, dwArg08, es, ds, edi_82, out edx_120)
l0072FC4C:
	edxOut = edx_120
	return eax_117
l0072FC24:
	edxOut = edx_59
	return 0<32>
l0072FBCD:
	word32 edx_152
	fn006E1DC0(out edx_152)
	edxOut = edx_152
	return 0xFFFFFFFF<32>
l0072FBBF:
	edxOut = edx
	return 0<32>
fn0072FBB0_exit:


word32 fn0072FC60(word32 dwArg04, ptr32 & ecxOut, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0070BCC0
//      fn00715DF0
//      fn00716A00
// MayUse:  Stack +0004:[0..31]
// LiveOut: eax ecx edx
// Trashed: SCZO eax ecx edx Top
// Preserved: esi esp
fn0072FC60_entry:
l0072FC60:
	branch dwArg04 == 0<32> l0072FC8A
l0072FC69:
	word32 eax_11 = Mem6[dwArg04 + 4<32>:word32]
	branch eax_11 == 0xA26EF0<32> l0072FC85
l0072FC73:
	branch fn006D5670(eax_11, 0xA26EF0<32>, out ecx, out edx) == 0<32> l0072FC8A
l0072FC8A:
	ecxOut = ecx
	edxOut = edx
	return 0<32>
l0072FC85:
	word32 eax_38 = Mem37[dwArg04 + 8<32>:word32]
	ecxOut = ecx
	edxOut = edx
	return eax_38
fn0072FC60_exit:


word32 fn0072FC90(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0070BCC0
// MayUse:  Stack +0004:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx edx Top
// Preserved: esi esp
fn0072FC90_entry:
l0072FC90:
	branch dwArg04 == 0<32> l0072FCBA
l0072FC99:
	word32 eax_11 = Mem6[dwArg04 + 4<32>:word32]
	branch eax_11 == 0xA26EF0<32> l0072FCB5
l0072FCA3:
	word32 ecx_78
	word32 edx_79
	branch fn006D5670(eax_11, 0xA26EF0<32>, out ecx_78, out edx_79) == 0<32> l0072FCBA
l0072FCBA:
	return 0<32>
l0072FCB5:
	return Mem37[dwArg04 + 0xC<32>:word32]
fn0072FC90_exit:


