void fn005F58C0(word32 ecx)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0040B930
//      fn0040BA10
//      fn004263B0
//      fn00428880
// MayUse:  ecx:[0..31]
// LiveOut:
// Trashed: SCZO eax edx Top
// Preserved: esp
fn005F58C0_entry:
l005F58C0:
	word32 eax_6 = Mem0[ecx:word32]
	branch Mem0[eax_6 + 0x2D<32>:byte] == 0<8> l005F58CE
l005F58CE:
	word32 edx_36 = Mem0[eax_6:word32]
	branch Mem0[edx_36 + 0x2D<32>:byte] != 0<8> l005F58EE
l005F58EE:
	word32 eax_12 = Mem0[eax_6 + 4<32>:word32]
	branch Mem0[eax_12 + 0x2D<32>:byte] != 0<8> l005F5908
l005F58F7:
	branch Mem16[ecx:word32] != Mem16[eax_12:word32] l005F5908
l005F58FD:
	Mem21[ecx:word32] = eax_12
	eax_12 = Mem21[eax_12 + 4<32>:word32]
	branch Mem21[eax_12 + 0x2D<32>:byte] == 0<8> l005F58F7
l005F5908:
	branch Mem26[Mem26[ecx:word32] + 0x2D<32>:byte] != 0<8> l005F5912
l005F5910:
	Mem31[ecx:word32] = eax_12
l005F5912:
	return
l005F58D6:
	word32 eax_32 = Mem0[edx_36 + 8<32>:word32]
	branch Mem0[eax_32 + 0x2D<32>:byte] != 0<8> l005F58EB
l005F58DF:
l005F58E0:
	edx_36 = eax_32
	eax_32 = Mem0[eax_32 + 8<32>:word32]
	branch Mem0[eax_32 + 0x2D<32>:byte] == 0<8> l005F58E0
l005F58EB:
	Mem44[ecx:word32] = edx_36
	return
l005F58C8:
	Mem46[ecx:word32] = Mem0[eax_6 + 8<32>:word32]
	return
fn005F58C0_exit:


word32 fn005F8790(word32 ecx)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0042CFC0
// MayUse:  ecx:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx edx Top
// Preserved: esp
fn005F8790_entry:
l005F8790:
	word32 eax_6 = Mem0[ecx + 4<32>:word32]
	branch eax_6 != 0<32> l005F8798
l005F8798:
	word32 ecx_11 = Mem0[ecx + 8<32>:word32] - eax_6
	word32 edx_15 = SLICE(ecx_11 *s64 0x92492493<32>, word32, 32) + ecx_11
	return (edx_15 >> 5<32> >>u 0x1F<32>) + (edx_15 >> 5<32>)
l005F8797:
	return eax_6
fn005F8790_exit:


word32 fn005F8FB0(word32 dwArg04, word32 dwArg08, word32 dwArg0C)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00411F00
//      fn004EA120
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut: eax
// Trashed: SCZO eax edx Top
// Preserved: ebx ecx edi esi esp
fn005F8FB0_entry:
l005F8FB0:
	word32 edx_24 = dwArg04
	word32 eax_19 = dwArg0C
	branch dwArg04 == dwArg08 l005F8FDE
l005F8FC1:
l005F8FC3:
	branch eax_19 == 0<32> l005F8FD2
l005F8FC7:
	word32 ecx_23 = 0x10<32>
	word32 esi_25 = edx_24
	word32 edi_26 = eax_19
l005F8FD0:
	branch ecx_23 == 0<32> l005F8FD2
l005F8FD2:
	edx_24 = edx_24 + 0x40<32>
	eax_19 = eax_19 + 0x40<32>
	branch edx_24 != dwArg08 l005F8FC3
l005F8FDC:
l005F8FDE:
	return eax_19
fn005F8FB0_exit:
l005F8FD0_1:
	Mem56[edi_26:word32] = Mem43[esi_25:word32]
	esi_25 = esi_25 + 4<i32>
	edi_26 = edi_26 + 4<i32>
	ecx_23 = ecx_23 - 1<32>


word32 fn005F9240(word32 dwArg04, word32 dwArg08, word32 dwArg0C, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0044F1E0
//      fn0059EB70
//      fn005A5370
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ecx edx Top
// Preserved: esi esp
fn005F9240_entry:
l005F9240:
	word32 ecx_17 = dwArg04
	word32 eax_13 = dwArg0C
	branch dwArg04 == dwArg08 l005F9276
l005F9250:
l005F9251:
	branch eax_13 == 0<32> l005F926B
l005F9255:
	Mem20[eax_13:word32] = Mem18[ecx_17:word32]
	Mem22[eax_13 + 4<32>:word32] = Mem20[ecx_17 + 4<32>:word32]
	Mem24[eax_13 + 8<32>:word32] = Mem22[ecx_17 + 8<32>:word32]
	Mem26[eax_13 + 0xC<32>:word32] = Mem24[ecx_17 + 0xC<32>:word32]
l005F926B:
	ecx_17 = ecx_17 + 0x10<32>
	eax_13 = eax_13 + 0x10<32>
	branch ecx_17 != dwArg08 l005F9251
l005F9275:
l005F9276:
	edxOut = dwArg08
	return eax_13
fn005F9240_exit:


