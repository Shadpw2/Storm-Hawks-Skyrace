word32 fn007012A0(real64 rArg04, word32 dwArg0C, word32 dwArg10, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00735890
// MayUse:  Stack +0004:[0..63] Stack +000C:[0..31] Stack +0010:[0..31]
// LiveOut: eax edx
// Trashed: SCZOP eax ecx edx FPU -1 FPU -2 Top
// Preserved: ebx edi esi esp FPU -1 FPU -2
fn007012A0_entry:
	byte bArg04 = SLICE(rArg04, byte, 0)
	byte bArg05 = SLICE(rArg04, byte, 8)
	byte bArg06 = SLICE(rArg04, byte, 16)
	byte bArg07 = SLICE(rArg04, byte, 24)
	byte bArg08 = SLICE(rArg04, byte, 32)
	byte bArg09 = SLICE(rArg04, byte, 40)
	byte bArg0A = SLICE(rArg04, byte, 48)
	byte bArg0B = SLICE(rArg04, byte, 56)
	word24 ebx_24_8_110 = SLICE(ebx, word24, 8)
l007012A0:
	word32 eax_5 = Mem0[0x00A6CD1C<p32>:word32]
	branch eax_5 != 0<32> l007014AD
l007014AD:
	word32 eax_22
	word32 ecx_11 = 1<32>
	branch eax_5 != 2<32> l0070150A
l0070150A:
	branch eax_5 != 1<32> l007014BE
l0070150F:
	branch dwArg10 == 0<32> l007014BE
l007014B7:
	branch dwArg10 == 0<32> l00701516
l00701516:
	eax_22 = dwArg0C + 7<32>
	ecx_11 = 0xFFFFFFFF<32>
l007014BE:
	eax_22 = dwArg0C
l007014C2:
	Mem34[eax_22:byte] = bArg04
	Mem38[eax_22 + ecx_11:byte] = bArg05
	word32 eax_40 = eax_22 + ecx_11
	Mem41[eax_40 + ecx_11:byte] = bArg06
	word32 eax_43 = eax_40 + ecx_11
	Mem44[eax_43 + ecx_11:byte] = bArg07
	word32 eax_46 = eax_43 + ecx_11
	Mem47[eax_46 + ecx_11:byte] = bArg08
	word32 eax_49 = eax_46 + ecx_11
	Mem50[eax_49 + ecx_11:byte] = bArg09
	word32 eax_53 = eax_49 + ecx_11 + ecx_11
	Mem54[eax_53:byte] = bArg0A
	Mem56[ecx_11 + eax_53:byte] = bArg0B
	edxOut = SEQ(edx_24_8, bArg0B)
	return 0<32>
l007012B0:
	word32 esi_106 = dwArg0C
	word32 edi_108 = 1<32>
	branch dwArg10 == eax_5 l007012C7
l007012C1:
	esi_106 = dwArg0C + 7<32>
	edi_108 = 0xFFFFFFFF<32>
l007012C7:
	word32 ebx_109
	real64 rLoc1_453 = rArg04
	branch rArg04 >=u 0.0 l007012D8
l007012D8:
	ebx_109 = SEQ(ebx_24_8_110, 0<8>) (alias)
l007012D2:
	rLoc1_453 = -rArg04
	ebx_109 = SEQ(ebx_24_8_110, 1<8>) (alias)
l007012DA:
	word32 edx_189
	word32 edx_116
	real64 rRet0
	call MSVCR80.dll!frexp (retsize: 4;)
		uses: eax:fp - 0xC<32>,edx_24_8:edx_24_8_625,Stack +0004:rLoc1_458,Stack +000C:fp - 0xC<32>,Stack +002C:bArg04,Stack +002D:bArg05,Stack +002E:bArg06,Stack +002F:bArg07,Stack +0030:bArg08,Stack +0031:bArg09,Stack +0032:bArg0A,Stack +0033:bArg0B,Stack +0034:dwArg0C,Stack +0038:dwArg10
		defs: edx:edx_116,FPU -1:rRet0
	byte bl_361 = SLICE(ebx_109, byte, 0)
	word24 edx_24_8_625 = SLICE(edx_116, word24, 8)
	branch rRet0 >u 1.0 l00701341
l007012FE:
	branch rLoc1_453 >=u 0.0 l00701341
l00701341:
	branch PARITY_EVEN(rLoc1_453 - 0.0) l0070148C
l0070148C:
	word32 edx_176
	word32 ecx_724
	fn006E0F80(Mem103[0x00A18720<p32>:word32], bArg04, out ecx_724, out edx_176)
	edxOut = edx_176
	return 0xFFFFFFFF<32>
l00701355:
	edx_189 = 0<32>
l00701302:
	edx_189 = dwLoc0C - 1<32>
	branch dwLoc0C >= 0x401<32> l0070146A
l0070146A:
l0070131D:
	branch dwLoc0C >= 0xFFFFFC03<32> l00701373
l00701373:
	branch dwLoc0C != 1<32> l00701369
l00701377:
l00701359:
	branch !PARITY_EVEN(0.0 - 0.0) l00701379
l00701379:
l00701369:
	edx_189 = edx_189 + 0x3FF<32>
l00701325:
	ldexp(0.0, dwLoc0C + 0x3FD<32>)
	edx_189 = 0<32>
l0070137B:
	real64 rLoc1_676 = rLoc1_453 * Mem258[0x008D6C30<p32>:real64]
	word16 wLoc0C_677 = __fstcw()
	__fldcw(SLICE(CONVERT(wLoc0C_677, word16, word32) | 0xC00<32>, word16, 0))
	__fldcw(wLoc0C_677)
	word32 dwLoc08_682 = SLICE(CONVERT(rLoc1_676, real64, int64), word32, 0)
	word32 ecx_274 = dwLoc08_682
	branch dwLoc08_682 >= 0<32> l007013B9
l007013B3:
l007013B9:
	word16 wLoc0C_687 = __fstcw()
	real64 rLoc1_690 = (rLoc1_453 - 0.0) * Mem288[0x008D6C28<p32>:real64] + Mem292[0x008AB850<p32>:real64]
	__fldcw(SLICE(CONVERT(wLoc0C_687, word16, word32) | 0xC00<32>, word16, 0))
	__fldcw(wLoc0C_687)
	word32 dwLoc08_693 = SLICE(CONVERT(rLoc1_690, real64, int64), word32, 0)
	word32 dwLoc08_694 = dwLoc08_693
	branch (dwLoc08_693 & 0xFF000000<32>) == 0<32> l00701418
l007013F4:
	ecx_274 = dwLoc08_682 + 1<32>
	dwLoc08_694 = 0<32>
	branch (dwLoc08_682 + 1<32> & 0xF0000000<32>) == 0<32> l00701418
l00701407:
	edx_189 = edx_189 + 1<32>
	ecx_274 = 0<32>
	branch edx_189 >= 0x7FF<32> l0070146E
l0070146E:
	word32 edx_344
	word32 ecx_725
	fn006E0F80(Mem314[0x00A18598<p32>:word32], bArg04, out ecx_725, out edx_344)
	edxOut = edx_344
	return 0xFFFFFFFF<32>
l00701418:
	Mem366[esi_106:byte] = SLICE(edx_189 >> 4<32>, byte, 0) | bl_361 << 7<8>
	word32 esi_368 = esi_106 + edi_108
	Mem376[esi_368:byte] = SLICE(ecx_274 >>u 0x18<32>, byte, 0) | SLICE(edx_189, byte, 0) << 4<8>
	word32 esi_377 = esi_368 + edi_108
	Mem381[esi_377:byte] = SLICE(ecx_274 >>u 0x10<32>, byte, 0)
	word32 esi_382 = esi_377 + edi_108
	Mem386[esi_382:byte] = SLICE(ecx_274 >>u 8<32>, byte, 0)
	word32 esi_389 = esi_382 + edi_108
	Mem391[esi_389:byte] = SLICE(ecx_274, byte, 0)
	word32 esi_392 = esi_389 + edi_108
	Mem396[esi_392:byte] = SLICE(dwLoc08_694 >>u 0x10<32>, byte, 0)
	word32 esi_397 = esi_392 + edi_108
	Mem401[esi_397:byte] = SLICE(dwLoc08_694 >>u 8<32>, byte, 0)
	Mem403[edi_108 + esi_397:byte] = SLICE(dwLoc08_694, byte, 0)
	edxOut = dwLoc08_694 >>u 8<32>
	return 0<32>
fn007012A0_exit:


word32 fn00701650(word24 edx_24_8, word32 ebx, word32 ebp, word32 esi, word32 edi, selector es, selector ds, word32 dwArg04, word32 dwArg08, ptr32 & rLoc1Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn007367D0
// MayUse:  cs:[0..15] ds:[0..15] ebp:[0..31] ebx:[0..31] edi:[0..31] edx_24_8:[0..23] es:[0..15] esi:[0..31] fs:[0..15] gs:[0..15] ss:[0..15] Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: edx FPU -1
// Trashed: SCZDOP eax ecx edx FPU -1 FPU -2 Top
// Preserved: ebx edi esi esp FPU -2
fn00701650_entry:
	word32 dwLoc0C = SLICE(qwLoc0C, word32, 0)
l00701650:
	word32 eax_7 = Mem0[0x00A14188<p32>:word32] ^ fp - 0x14<32>
	word32 ecx_9 = Mem8[0x00A6CD1C<p32>:word32]
	word32 eax_12 = dwArg04
	branch ecx_9 != 0<32> l0070177B
l0070177B:
	branch ecx_9 != 2<32> l007017A8
l007017A8:
	branch ecx_9 != 1<32> l00701787
l007017AD:
	branch dwArg08 == 0<32> l00701787
l00701780:
	branch dwArg08 == 0<32> l007017B4
l007017B4:
	word32 esi_27 = 8<32>
	word32 ecx_28 = fp - 5<32>
l007017C0:
	byte dl_31 = Mem30[eax_12:byte]
	Mem33[ecx_28:byte] = dl_31
	ecx_28 = ecx_28 - 1<32>
	eax_12 = eax_12 + 1<32>
	esi_27 = esi_27 - 1<32>
	word32 edx_61 = SEQ(edx_24_8, dl_31)
	branch esi_27 != 0<32> l007017C0
l007017CF:
	word32 ecx_465
	fn00694B8E(dwLoc0C, eax_7 ^ fp - 0x14<32>, edx_61, ebx, ebp, esi, edi, es, ds, esi, out ecx_465)
	rLoc1Out = qwLoc0C
	return edx_61
l00701787:
	word32 edx_98 = Mem15[dwArg04:word32]
	word32 eax_99 = Mem15[dwArg04 + 4<32>:word32]
	word32 ecx_464
	fn00694B8E(eax_99, eax_7 ^ fp - 0x14<32>, edx_98, ebx, ebp, esi, edi, es, ds, esi, out ecx_464)
	rLoc1Out = SEQ(eax_99, edx_98)
	return edx_98
l00701671:
	word32 ecx_132 = 1<32>
	branch dwArg08 == 0<32> l00701683
l0070167D:
	eax_12 = dwArg04 + 7<32>
	ecx_132 = 0xFFFFFFFF<32>
l00701683:
	word32 edx_183
	word32 eax_180
	word32 edx_140 = CONVERT(Mem15[eax_12:byte], byte, word32)
	word32 esi_142 = CONVERT(Mem15[eax_12 + ecx_132:byte], byte, word32)
	byte dl_147 = SLICE(edx_140, byte, 0)
	word32 edi_159 = (edx_140 & 0x7F<32>) << 4<32> | esi_142 >>u 4<32>
	word32 esi_161 = (esi_142 & 0xF<32>) << 0x18<32>
	word32 eax_162 = eax_12 + ecx_132 + ecx_132
	branch edi_159 != 0x7FF<32> l007016DD
l007016DD:
	word32 eax_168 = eax_162 + ecx_132
	word32 eax_171 = eax_168 + ecx_132
	word32 eax_177 = eax_171 + ecx_132
	eax_180 = eax_177 + ecx_132
	word32 ecx_181 = CONVERT(Mem154[eax_180 + ecx_132:byte], byte, word32)
	word32 edx_179 = CONVERT(Mem154[eax_177:byte], byte, word32)
	word32 ecx_187 = SEQ(SLICE(ecx_181, word16, 16), Mem154[eax_180:byte], SLICE(ecx_181, byte, 0)) | edx_179 << 0x10<32>
	word32 esi_178 = esi_161 | CONVERT(Mem154[eax_162:byte], byte, word32) << 0x10<32> | SEQ(0<16>, Mem154[eax_168:byte], 0<8>) | CONVERT(Mem154[eax_171:byte], byte, word32)
	edx_183 = edx_179 << 0x10<32>
	real64 rLoc1_376 = CONVERT(ecx_187, word32, real64)
	branch ecx_187 >= 0<32> l00701718
l00701712:
	rLoc1_376 = rLoc1_376 + Mem190[0x008ACE50<p32>:real64]
l00701718:
	real64 rLoc1_379 = rLoc1_376 * Mem190[0x008D6C88<p32>:real64]
	real64 rLoc2_381 = CONVERT(esi_178, word32, real64)
	branch esi_178 >= 0<32> l00701730
l0070172A:
	rLoc2_381 = rLoc2_381 + Mem204[0x008ACE50<p32>:real64]
l00701730:
	word32 edi_221
	real64 rLoc1_386 = (rLoc1_379 + rLoc2_381) * Mem204[0x008D6C80<p32>:real64]
	branch edi_159 != 0<32> l00701743
l00701743:
	rLoc1_386 = rLoc1_386 + Mem204[0x008AD1C8<p32>:real64]
	edi_221 = edi_159 - 0x3FF<32>
l0070173C:
	edi_221 = 0xFFFFFC02<32>
l0070174F:
	rLoc1 = ldexp(rLoc1_386, edi_221)
	branch dl_147 >>u 7<8> == 0<8> l007016CB
l00701767:
	word32 ecx_468
	fn00694B8E(eax_180, eax_7 ^ fp - 0x14<32>, edx_179 << 0x10<32>, ebx, ebp, esi, edi, es, ds, esi, out ecx_468)
	rLoc1Out = -rLoc1
	return edx_179 << 0x10<32>
l007016B2:
	word32 ecx_466
	eax_180 = fn006E0F80(Mem154[0x00A17E2C<p32>:word32], 0x8D6C40<32>, out ecx_466, out edx_183)
l007016CB:
	word32 ecx_467
	fn00694B8E(eax_180, eax_7 ^ fp - 20<i32>, edx_183, ebx, ebp, esi, edi, es, ds, esi, out ecx_467)
	rLoc1Out = rLoc1
	return edx_183
fn00701650_exit:


word32 fn00701800(ptr32 & ecxOut, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00704220
//      fn00704300
//      fn00704400
// MayUse: 
// LiveOut: eax ecx edx
// Trashed: SCZO eax ecx edx Top
// Preserved: esp
fn00701800_entry:
l00701800:
	word32 ecx_17
	word32 edx_19
	fn006E15D0(Mem0[0x00A16B7C<p32>:word32], dwArg04, out ecx_17, out edx_19)
	ecxOut = ecx_17
	edxOut = edx_19
	return 0<32>
fn00701800_exit:


word32 fn00701880(word32 dwArg04, word32 dwArg08, word32 dwArg0C, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00720070
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ecx edx Top
// Preserved: ebp ebx edi esi esp
fn00701880_entry:
l00701880:
	branch dwArg04 == 0<32> l00701928
l0070188F:
	branch dwArg08 == 0<32> l00701928
l0070189B:
	branch dwArg0C == 0<32> l00701928
l00701928:
	branch fn006E0FC0() != 0<32> l00701944
l00701931:
	word32 ecx_259
	fn006E0F80(Mem12[0x00A18720<p32>:word32], 0x8D6C90<32>, out ecx_259, out edx)
l00701944:
	edxOut = edx
	return 0xFFFFFFFF<32>
l007018A7:
	word32 esi_64 = Mem63[Mem12[dwArg04 + 4<32>:word32] + 0x50<32>:word32]
	branch esi_64 == 0<32> l0070190C
l007018B2:
	branch Mem63[esi_64 + 0xC<32>:word32] == 0<32> l0070190C
l007018B8:
	word32 eax_70 = Mem63[esi_64 + 8<32>:word32]
	branch eax_70 == 0<32> l0070190C
l0070190C:
	word32 edx_89
	word32 ecx_256
	fn006E0F80(Mem63[0x00A16B7C<p32>:word32], 0x8D6CB4<32>, out ecx_256, out edx_89)
	edxOut = edx_89
	return 0xFFFFFFFF<32>
l007018BF:
	word32 edx_128
	word32 esp_108
	word32 eax_109
	word32 ecx_110
	word32 edx_111
	call eax_70 (retsize: 4;)
		uses: ecx:ecx_110,edx:edx_111,Stack +0004:dwArg04,Stack +0008:0<32>,Stack +0020:dwArg04,Stack +0024:dwArg08,Stack +0028:dwArg0C
		defs: eax:eax_109,ecx:ecx_110,edx:edx_111,esp:esp_108
	branch eax_109 == 1<32> l007018E8
l007018E8:
	word32 eax_117 = Mem107[esi_64 + 0xC<32>:word32]
	Mem120[esp_108 + 4<32>:word32] = esp_108 + 0x1C<32>
	Mem122[esp_108:word32] = 0<32>
	Mem124[esp_108 - 4<i32>:word32] = dwArg04
	word32 eax_126
	word32 ecx_127
	call eax_117 (retsize: 4;)
		uses: ecx:ecx_127,edx:esp_108 + 0x1C<32>,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C
		defs: eax:eax_126,ecx:ecx_127,edx:edx_128
	branch eax_126 < 0<32> l007018E0
l007018FC:
	Mem140[dwArg08:word32] = dwArg04
	Mem141[dwArg0C:word32] = eax_126
	edxOut = edx_128
	return 0<32>
l007018CC:
	word32 ecx_149 = Mem107[0x00A16B7C<p32>:word32]
	Mem151[esp_108 + 4<32>:word32] = 0x8D6CD8<32>
	Mem153[esp_108:word32] = ecx_149
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_258
	fn006E0F80(stackArg4, dwArg04, out ecx_258, out edx_128)
l007018E0:
	edxOut = edx_128
	return 0xFFFFFFFF<32>
fn00701880_exit:


word32 fn00701950(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00734BB0
//      fn00735890
// MayUse:  Stack +0004:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx Top
// Preserved: esp
fn00701950_entry:
l00701950:
	word32 eax_7 = Mem0[Mem0[dwArg04 + 4<32>:word32] + 0x50<32>:word32]
	branch eax_7 == 0<32> l00701978
l0070195E:
	branch Mem0[eax_7:word32] == 0<32> l00701978
l00701963:
	word32 eax_13 = Mem0[eax_7 + 8<32>:word32]
	branch eax_13 == 0<32> l00701978
l0070196A:
	word32 eax_23
	call eax_13 (retsize: 4;)
		uses: Stack +0004:dwArg04,Stack +0008:0<32>,Stack +0010:dwArg04
		defs: eax:eax_23
	branch eax_23 != 1<32> l00701978
l00701978:
	return 0<32>
l00701977:
	return eax_23
fn00701950_exit:


word32 fn00701B20(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006DE1B0
// MayUse:  Stack +0004:[0..31]
// LiveOut: eax
// Trashed: SCZO eax Top
// Preserved: esp
fn00701B20_entry:
l00701B20:
	branch dwArg04 == 0<32> l00701B44
l00701B28:
	word32 eax_10 = Mem0[Mem0[dwArg04 + 4<32>:word32] + 0x30<32>:word32]
	branch eax_10 == 0<32> l00701B44
l00701B32:
	branch Mem0[eax_10 + 0x48<32>:word32] != 0<32> l00701B3E
l00701B38:
	branch Mem0[eax_10 + 0x50<32>:word32] == 0<32> l00701B44
l00701B44:
	return 0<32>
l00701B3E:
	return 1<32>
fn00701B20_exit:


word32 fn00701B50(word32 dwArg04, word32 dwArg08, word32 dwArg0C)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn007020D0
//      fn00702130
//      fn00702190
//      fn007021F0
//      fn00702250
//      fn007022B0
//      fn00702310
//      fn007023D0
//      fn00702450
//      fn007024B0
//      fn00702510
//      fn007025E0
//      fn007027D0
//      fn00704560
//      fn00704610
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx edx Top
// Preserved: ebp ebx edi esi esp
fn00701B50_entry:
	word24 ebx_24_8_93 = SLICE(ebx, word24, 8)
l00701B50:
	word32 ecx_6 = Mem0[dwArg04 + 4<32>:word32]
	word32 eax_7 = Mem0[ecx_6 + 0x30<32>:word32]
	word32 esp_106 = fp - 16<i32>
	word32 edi_21 = 0<32>
	word32 esi_125 = 0<32>
	branch eax_7 == 0<32> l00701B74
l00701B6C:
	branch (Mem20[ecx_6 + 0x54<32>:byte] & 0x10<8>) == 0<8> l00701B74
l00701B71:
	edi_21 = Mem20[eax_7 + dwArg0C:word32]
l00701B74:
	word32 ebx_91 = SEQ(ebx_24_8_93, 0x10<8>)
	branch Mem20[dwArg08 + 4<32>:word32] == ecx_6 l00701B9B
l00701B7F:
	word32 edx_39 = Mem20[dwArg08 + 4<32>:word32]
	word32 eax_40 = Mem20[edx_39 + 0x30<32>:word32]
	ebx_91 = SEQ(ebx_24_8_93, 0x10<8>) (alias)
	branch eax_40 == 0<32> l00701B9B
l00701B8D:
	ebx_91 = SEQ(ebx_24_8_93, 0x10<8>) (alias)
	branch (Mem20[edx_39 + 0x54<32>:byte] & 0x10<8>) == 0<8> l00701B9B
l00701B92:
	esi_125 = Mem20[eax_40 + dwArg0C:word32]
	branch esi_125 != edi_21 l00701B9B
l00701B99:
	esi_125 = 0<32>
l00701B9B:
	word32 eax_103
	byte bl_218 = SLICE(ebx_91, byte, 0)
	branch edi_21 == 0<32> l00701C10
l00701B9F:
	branch esi_125 == 0<32> l00701BE5
l00701BA3:
	esp_106 = fp - 0x10<32>
	word32 ecx_581
	word32 edx_582
	branch fn006D5670(Mem70[dwArg08 + 4<32>:word32], ecx_6, out ecx_581, out edx_582) == 0<32> l00701BE5
l00701BB8:
	word32 esp_100
	call fn00000000 (retsize: 4;)
		uses: eax:dwArg04,edx:dwArg08,Stack +0004:dwArg04,Stack +0008:dwArg08,Stack +0020:dwArg04,Stack +0024:dwArg08,Stack +0028:dwArg0C
		defs: eax:eax_103,esp:esp_100
	esp_106 = esp_100 + 8<32>
	branch eax_103 != 0xA16480<32> l00701D1F
l00701BD2:
	word32 v15_109 = Mem90[eax_103:word32] + 0xFFFFFFFF<32>
	Mem110[eax_103:word32] = v15_109
	branch v15_109 != 0<32> l00701BE3
l00701BD7:
	word32 ecx_113 = Mem110[eax_103 + 4<32>:word32]
	word32 edx_114 = Mem110[ecx_113 + 0x18<32>:word32]
	Mem116[esp_100 + 4<32>:word32] = eax_103
	word32 esp_117
	call edx_114 (retsize: 4;)
		uses: ecx:ecx_113,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C
		defs: esp:esp_117
	esp_106 = esp_117 + 4<32>
l00701BE3:
	esi_125 = 0<32>
l00701BE5:
	word32 eax_132 = Mem130[esp_106 + 0x18<32>:word32]
	word32 ecx_133 = Mem130[esp_106 + 0x14<32>:word32]
	word32 esp_134 = esp_106 - 4<i32>
	Mem135[esp_134:word32] = eax_132
	Mem137[esp_134 - 4<i32>:word32] = ecx_133
	word32 esp_147
	call fn00000000 (retsize: 4;)
		uses: eax:eax_132,ecx:ecx_133,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C
		defs: eax:eax_150,esp:esp_147
	esp_106 = esp_147 + 8<32>
	branch eax_103 != 0xA16480<32> l00701D1F
l00701BFF:
	word32 v23_156 = Mem137[eax_103:word32] + 0xFFFFFFFF<32>
	Mem157[eax_103:word32] = v23_156
	branch v23_156 != 0<32> l00701C10
l00701C04:
	word32 edx_160 = Mem157[eax_103 + 4<32>:word32]
	Mem162[esp_147 + 4<32>:word32] = eax_103
	word32 esp_164
	call Mem162[edx_160 + 0x18<32>:word32] (retsize: 4;)
		uses: edx:edx_160,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C
		defs: esp:esp_164
	esp_106 = esp_164 + 4<32>
l00701C10:
	branch esi_125 == 0<32> l00701C3F
l00701C14:
	word32 ecx_178 = Mem177[esp_106 + 0x18<32>:word32]
	word32 edx_179 = Mem177[esp_106 + 0x14<32>:word32]
	word32 esp_180 = esp_106 - 4<i32>
	Mem181[esp_180:word32] = ecx_178
	Mem183[esp_180 - 4<i32>:word32] = edx_179
	word32 esp_188
	call fn00000000 (retsize: 4;)
		uses: ecx:ecx_178,edx:edx_179,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C
		defs: eax:eax_191,esp:esp_188
	branch eax_103 != 0xA16480<32> l00701D1F
l00701C2E:
	word32 v16_197 = Mem183[eax_103:word32] + 0xFFFFFFFF<32>
	Mem198[eax_103:word32] = v16_197
	branch v16_197 != 0<32> l00701C3F
l00701C33:
	word32 ecx_201 = Mem198[eax_103 + 4<32>:word32]
	word32 edx_202 = Mem198[ecx_201 + 0x18<32>:word32]
	Mem204[esp_188 + 4<32>:word32] = eax_103
	call edx_202 (retsize: 4;)
		uses: ecx:ecx_201,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C
l00701C3F:
	branch (Mem214[Mem214[dwArg04 + 4<32>:word32] + 0x54<32>:byte] & bl_218) == 0<8> l00701C5B
l00701C4B:
	branch (Mem214[Mem214[dwArg08 + 4<32>:word32] + 0x54<32>:byte] & bl_218) != 0<8> l00701D13
l00701C5B:
	word32 eax_234 = fn006DEB20(fp + 4<32>, fp + 8<32>)
	word32 esp_240 = fp - 0x10<32>
	branch eax_234 >= 0<32> l00701C78
l00701C78:
	branch eax_234 != 0<32> l00701D13
l00701C7E:
	word32 ecx_247 = Mem233[Mem233[dwArg04 + 4<32>:word32] + 0x30<32>:word32]
	branch ecx_247 == 0<32> l00701CDF
l00701C8C:
	word32 ecx_253 = Mem233[ecx_247 + dwArg0C:word32]
	branch ecx_253 == 0<32> l00701CDF
l00701CDF:
	Mem260[dwArg04:word32] = Mem233[dwArg04:word32] + 0xFFFFFFFF<32>
	branch Mem260[dwArg04:word32] != 0<32> l00701CF7
l00701CEB:
	word32 ecx_265 = Mem260[dwArg04 + 4<32>:word32]
	word32 esp_284
	call Mem260[ecx_265 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_265,Stack +0004:dwArg04,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C,Stack +001C:dwArg04,Stack +0020:dwArg08,Stack +0024:dwArg0C
		defs: esp:esp_284
	esp_240 = esp_284 + 4<32>
l00701CF7:
	word32 eax_294 = Mem293[esp_240 + 0x18<32>:word32]
	Mem296[eax_294:word32] = Mem293[eax_294:word32] + 0xFFFFFFFF<32>
	word32 eax_297 = Mem296[esp_240 + 0x18<32>:word32]
	branch Mem296[eax_297:word32] != 0<32> l00701D13
l00701D07:
	word32 ecx_300 = Mem296[eax_297 + 4<32>:word32]
	word32 edx_301 = Mem296[ecx_300 + 0x18<32>:word32]
	Mem303[esp_240 - 4<i32>:word32] = eax_297
	call edx_301 (retsize: 4;)
		uses: ecx:ecx_300,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C
l00701D13:
	Mem319[0x00A16480<p32>:word32] = Mem317[0x00A16480<p32>:word32] + 1<32>
	eax_103 = 0xA16480<32>
l00701D1F:
	return eax_103
l00701C93:
	word32 esp_338
	word32 eax_341
	call ecx_253 (retsize: 4;)
		uses: edx:dwArg08,Stack +0004:dwArg04,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C,Stack +0020:dwArg04,Stack +0024:dwArg08,Stack +0028:dwArg0C
		defs: eax:eax_341,esp:esp_338
	word32 eax_345 = Mem337[esp_338 + 0x1C<32>:word32]
	Mem347[eax_345:word32] = Mem337[eax_345:word32] + 0xFFFFFFFF<32>
	word32 eax_348 = Mem347[esp_338 + 0x1C<32>:word32]
	word32 esp_349 = esp_338 + 8<32>
	branch Mem347[eax_348:word32] != 0<32> l00701CBC
l00701CB0:
	word32 ecx_352 = Mem347[eax_348 + 4<32>:word32]
	word32 edx_353 = Mem347[ecx_352 + 0x18<32>:word32]
	Mem355[esp_338 + 4<32>:word32] = eax_348
	word32 esp_356
	call edx_353 (retsize: 4;)
		uses: ecx:ecx_352,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C
		defs: esp:esp_356
	esp_349 = esp_356 + 4<32>
l00701CBC:
	word32 eax_366 = Mem365[esp_349 + 0x18<32>:word32]
	Mem368[eax_366:word32] = Mem365[eax_366:word32] + 0xFFFFFFFF<32>
	word32 eax_369 = Mem368[esp_349 + 0x18<32>:word32]
	branch Mem368[eax_369:word32] != 0<32> l00701CD8
l00701CCC:
	word32 ecx_372 = Mem368[eax_369 + 4<32>:word32]
	word32 edx_373 = Mem368[ecx_372 + 0x18<32>:word32]
	Mem375[esp_349 - 4<i32>:word32] = eax_369
	call edx_373 (retsize: 4;)
		uses: ecx:ecx_372,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C
l00701CD8:
	return eax_341
l00701C71:
	return 0<32>
fn00701B50_exit:


word32 fn00701D30(word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00702570
//      fn007028C0
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31] Stack +0010:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx edx Top
// Preserved: ebp ebx edi esi esp
fn00701D30_entry:
l00701D30:
	word32 ecx_7 = Mem0[dwArg04 + 4<32>:word32]
	word32 edx_10 = Mem0[dwArg08 + 4<32>:word32]
	word32 eax_9 = Mem0[ecx_7 + 0x30<32>:word32]
	word32 ebp_17 = Mem16[edx_10 + 0x30<32>:word32]
	word32 esp_111 = fp - 0x20<32>
	word32 edi_130 = 0<32>
	word32 esi_160 = 0<32>
	word32 dwLoc10_736 = 0<32>
	branch eax_9 == 0<32> l00701D68
l00701D57:
	branch (Mem27[ecx_7 + 0x54<32>:byte] & 0x10<8>) == 0<8> l00701D68
l00701D5D:
	dwLoc10_736 = Mem27[eax_9 + dwArg10:word32]
l00701D68:
	word24 ebx_24_8_99 = SLICE(dwArg04, word24, 8)
	word32 ebx_100 = SEQ(ebx_24_8_99, 0x10<8>)
	branch Mem36[dwArg08 + 4<32>:word32] == Mem36[dwArg04 + 4<32>:word32] l00701D92
l00701D7A:
	ebx_100 = SEQ(ebx_24_8_99, 0x10<8>) (alias)
	branch ebp_17 == 0<32> l00701D92
l00701D7E:
	ebx_100 = SEQ(ebx_24_8_99, 0x10<8>) (alias)
	branch (Mem36[edx_10 + 0x54<32>:byte] & 0x10<8>) == 0<8> l00701D92
l00701D83:
	edi_130 = Mem36[dwArg10 + ebp_17:word32]
	branch edi_130 != dwLoc10_736 l00701D92
l00701D90:
	edi_130 = 0<32>
l00701D92:
	word32 eax_106
	byte bl_232 = SLICE(ebx_100, byte, 0)
	branch dwLoc10_736 == 0<32> l00701E1F
l00701E1F:
l00701D9C:
	branch edi_130 == 0<32> l00701DE2
l00701DE2:
l00701DA0:
	esp_111 = fp - 0x20<32>
	word32 edx_994
	word32 ecx_993
	branch fn006D5670(edx_10, ecx_7, out ecx_993, out edx_994) == 0<32> l00701DE6
l00701DB2:
	word32 esp_105
	call fn00000000 (retsize: 4;)
		uses: ecx:dwArg08,edx:dwArg04,Stack +0004:dwArg04,Stack +0008:dwArg08,Stack +000C:dwArg0C,Stack +0034:dwArg04,Stack +0038:dwArg08,Stack +003C:dwArg0C,Stack +0040:dwArg10
		defs: eax:eax_106,esp:esp_105
	esp_111 = esp_105 + 0xC<32>
	branch eax_106 != 0xA16480<32> l007020C4
l00701DCD:
	word32 v15_114 = Mem97[eax_106:word32] + 0xFFFFFFFF<32>
	Mem115[eax_106:word32] = v15_114
	branch v15_114 != 0<32> l00701DDE
l00701DD2:
	word32 ecx_118 = Mem115[eax_106 + 4<32>:word32]
	word32 edx_119 = Mem115[ecx_118 + 0x18<32>:word32]
	Mem121[esp_105 + 8<32>:word32] = eax_106
	word32 esp_122
	call edx_119 (retsize: 4;)
		uses: ecx:ecx_118,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C,Stack +0014:dwArg10
		defs: esp:esp_122
	esp_111 = esp_122 + 4<32>
l00701DDE:
	edi_130 = 0<32>
l00701DE6:
	word32 eax_137 = Mem135[esp_111 + 0x28<32>:word32]
	word32 ecx_138 = Mem135[esp_111 + 0x24<32>:word32]
	word32 esp_139 = esp_111 - 4<i32>
	Mem142[esp_139:word32] = dwArg0C
	Mem144[esp_139 - 4<i32>:word32] = eax_137
	Mem146[esp_139 - 8<i32>:word32] = ecx_138
	word32 esp_154
	word32 eax_155
	call Mem146[esp_139 + 0x14<32>:word32] (retsize: 4;)
		uses: eax:eax_137,ecx:ecx_138,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C,Stack +0014:dwArg10
		defs: eax:eax_155,esp:esp_154
	esi_160 = eax_155
	esp_111 = esp_154 + 0xC<32>
	branch eax_155 == 0xA16480<32> l00701E0C
l00701E0C:
	word32 v19_164 = Mem146[eax_155:word32] + 0xFFFFFFFF<32>
	Mem165[eax_155:word32] = v19_164
	branch v19_164 != 0<32> l00701E23
l00701E11:
	word32 edx_168 = Mem165[eax_155 + 4<32>:word32]
	word32 eax_169 = Mem165[edx_168 + 0x18<32>:word32]
	Mem171[esp_154 + 8<32>:word32] = eax_155
	word32 esp_172
	call eax_169 (retsize: 4;)
		uses: edx:edx_168,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C,Stack +0014:dwArg10
		defs: esp:esp_172
	esp_111 = esp_172 + 4<32>
l00701E23:
	branch edi_130 == 0<32> l00701E52
l00701E27:
	word32 ecx_186 = Mem185[esp_111 + 0x28<32>:word32]
	word32 edx_187 = Mem185[esp_111 + 0x24<32>:word32]
	word32 esp_188 = esp_111 - 4<i32>
	Mem190[esp_188:word32] = dwArg0C
	Mem192[esp_188 - 4<i32>:word32] = ecx_186
	Mem194[esp_188 - 8<i32>:word32] = edx_187
	word32 esp_198
	word32 eax_199
	call fn00000000 (retsize: 4;)
		uses: ecx:ecx_186,edx:edx_187,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C,Stack +0014:dwArg10
		defs: eax:eax_199,esp:esp_198
	esi_160 = eax_199
	esp_111 = esp_198 + 0xC<32>
	branch eax_199 != 0xA16480<32> l00701E02
l00701E41:
	word32 v16_208 = Mem194[eax_199:word32] + 0xFFFFFFFF<32>
	Mem209[eax_199:word32] = v16_208
	branch v16_208 != 0<32> l00701E52
l00701E46:
	word32 eax_212 = Mem209[eax_199 + 4<32>:word32]
	word32 ecx_213 = Mem209[eax_212 + 0x18<32>:word32]
	Mem215[esp_198 + 8<32>:word32] = eax_199
	word32 esp_216
	call ecx_213 (retsize: 4;)
		uses: eax:eax_212,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C,Stack +0014:dwArg10
		defs: esp:esp_216
	esp_111 = esp_216 + 4<32>
l00701E52:
	word32 ecx_226 = Mem225[dwArg0C + 4<32>:word32]
	word32 eax_227 = Mem225[ecx_226 + 0x30<32>:word32]
	branch eax_227 == 0<32> l00701EA5
l00701E5C:
	branch (Mem225[ecx_226 + 0x54<32>:byte] & bl_232) == 0<8> l00701EA5
l00701E61:
	word32 eax_238 = Mem225[eax_227 + Mem225[esp_111 + 0x30<32>:word32]:word32]
	branch eax_238 == Mem225[esp_111 + 0x10<32>:word32] l00701EA5
l00701E6E:
	branch eax_238 == edi_130 l00701EA5
l00701E72:
	branch eax_238 == 0<32> l00701EA5
l00701E76:
	word32 ecx_247 = Mem225[esp_111 + 0x28<32>:word32]
	word32 edx_248 = Mem225[esp_111 + 0x24<32>:word32]
	word32 esp_249 = esp_111 - 4<i32>
	Mem250[esp_249:word32] = dwArg0C
	Mem252[esp_249 - 4<i32>:word32] = ecx_247
	Mem254[esp_249 - 8<i32>:word32] = edx_248
	word32 esp_260
	word32 eax_261
	call eax_238 (retsize: 4;)
		uses: ecx:ecx_247,edx:edx_248,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C,Stack +0014:dwArg10
		defs: eax:eax_261,esp:esp_260
	esi_160 = eax_261
	esp_111 = esp_260 + 0xC<32>
	branch eax_261 != 0xA16480<32> l00701E02
l00701E94:
	word32 v17_270 = Mem254[eax_261:word32] + 0xFFFFFFFF<32>
	Mem271[eax_261:word32] = v17_270
	branch v17_270 != 0<32> l00701EA5
l00701E99:
	word32 eax_274 = Mem271[eax_261 + 4<32>:word32]
	word32 ecx_275 = Mem271[eax_274 + 0x18<32>:word32]
	Mem277[esp_260 + 8<32>:word32] = eax_261
	word32 esp_278
	call ecx_275 (retsize: 4;)
		uses: eax:eax_274,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C,Stack +0014:dwArg10
		defs: esp:esp_278
	esp_111 = esp_278 + 4<32>
l00701EA5:
	word32 ecx_294
	word32 eax_288 = Mem287[esp_111 + 0x24<32>:word32]
	branch (Mem287[Mem287[eax_288 + 4<32>:word32] + 0x54<32>:byte] & bl_232) == 0<8> l00701ED5
l00701EB1:
	ecx_294 = Mem287[esp_111 + 0x28<32>:word32]
	branch (Mem287[Mem287[ecx_294 + 4<32>:word32] + 0x54<32>:byte] & bl_232) == 0<8> l00701ED5
l00701EBD:
	branch dwArg0C == 0xA163B8<32> l0070206D
l00701EC9:
	branch (Mem287[Mem287[dwArg0C + 4<32>:word32] + 0x54<32>:byte] & bl_232) != 0<8> l00702065
l00701ED5:
	word32 esp_308 = esp_111 - 4<i32>
	Mem309[esp_308:word32] = esp_111 + 0x28<32>
	Mem312[esp_308 - 4<i32>:word32] = esp_308 + 0x28<32>
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 eax_324 = fn006DEB90(stackArg4, dwArg04)
	word32 edi_329 = eax_324
	esp_111 = esp_308 + 4<32>
	bool v45_727 = eax_324 >= 0<32>
	branch eax_324 != 0<32> l00702057
l00701EF1:
	branch dwArg0C != 0xA163B8<32> l00701F2D
l00701F2D:
	word32 eax_336 = Mem312[esp_308 + 0x28<32>:word32]
	Mem339[esp_308:word32] = esp_308 + 0x20<32>
	Mem342[esp_308 - 4<i32>:word32] = esp_308 + 0x1C<32>
	Mem343[esp_308 + 0x1C<32>:word32] = eax_336
	Mem344[esp_308 + 0x20<32>:word32] = dwArg0C
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 eax_346 = fn006DEB90(stackArg4, dwArg04)
	edi_329 = eax_346
	esp_111 = esp_308 + 4<32>
	branch eax_346 != 0<32> l0070201D
l00701F55:
	word32 ecx_357 = Mem344[esp_308 + 0x20<32>:word32]
	Mem359[esp_308 + 0x14<32>:word32] = Mem344[esp_308 + 0x2C<32>:word32]
	Mem361[esp_308:word32] = esp_308 + 0x18<32>
	Mem364[esp_308 - 4<i32>:word32] = esp_308 + 0x14<32>
	Mem365[esp_308 + 0x18<32>:word32] = ecx_357
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 eax_367 = fn006DEB90(stackArg4, dwArg04)
	edi_329 = eax_367
	esp_111 = esp_308 + 4<32>
	branch eax_367 != 0<32> l00701FE5
l00701F7D:
	word32 ecx_377 = Mem365[esp_308 + 0x1C<32>:word32]
	word32 eax_379 = Mem365[Mem365[ecx_377 + 4<32>:word32] + 0x30<32>:word32]
	branch eax_379 == 0<32> l00701FAA
l00701F8B:
	word32 eax_384 = Mem365[eax_379 + Mem365[esp_308 + 0x34<32>:word32]:word32]
	branch eax_384 == 0<32> l00701FAA
l00701FAA:
	edi_329 = 0xFFFFFFFF<32>
l00701F96:
	Mem394[esp_308:word32] = Mem365[esp_308 + 0x18<32>:word32]
	word32 edx_395 = Mem394[esp_308 + 0x14<32>:word32]
	Mem397[esp_308 - 4<i32>:word32] = edx_395
	Mem399[esp_308 - 8<i32>:word32] = ecx_377
	word32 esp_400
	word32 eax_401
	call eax_384 (retsize: 4;)
		uses: edx:edx_395,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C,Stack +0014:dwArg10
		defs: eax:eax_401,esp:esp_400
	esp_111 = esp_400 + 0xC<32>
	esi_160 = eax_401
l00701FAD:
	word32 eax_413 = Mem411[esp_111 + 0x10<32>:word32]
	Mem415[eax_413:word32] = Mem411[eax_413:word32] + 0xFFFFFFFF<32>
	word32 eax_416 = Mem415[esp_111 + 0x10<32>:word32]
	branch Mem415[eax_416:word32] != 0<32> l00701FC9
l00701FBD:
	word32 ecx_419 = Mem415[eax_416 + 4<32>:word32]
	word32 edx_420 = Mem415[ecx_419 + 0x18<32>:word32]
	Mem422[esp_111 - 4<i32>:word32] = eax_416
	word32 esp_432
	call edx_420 (retsize: 4;)
		uses: ecx:ecx_419,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C,Stack +0014:dwArg10
		defs: esp:esp_432
	esp_111 = esp_432 + 4<32>
l00701FC9:
	word32 eax_442 = Mem441[esp_111 + 0x14<32>:word32]
	Mem444[eax_442:word32] = Mem441[eax_442:word32] + 0xFFFFFFFF<32>
	word32 eax_445 = Mem444[esp_111 + 0x14<32>:word32]
	branch Mem444[eax_445:word32] != 0<32> l00701FE5
l00701FD9:
	word32 ecx_448 = Mem444[eax_445 + 4<32>:word32]
	word32 edx_449 = Mem444[ecx_448 + 0x18<32>:word32]
	Mem451[esp_111 - 4<i32>:word32] = eax_445
	word32 esp_457
	call edx_449 (retsize: 4;)
		uses: ecx:ecx_448,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C,Stack +0014:dwArg10
		defs: esp:esp_457
	esp_111 = esp_457 + 4<32>
l00701FE5:
	word32 eax_467 = Mem466[esp_111 + 0x18<32>:word32]
	Mem469[eax_467:word32] = Mem466[eax_467:word32] + 0xFFFFFFFF<32>
	word32 eax_470 = Mem469[esp_111 + 0x18<32>:word32]
	branch Mem469[eax_470:word32] != 0<32> l00702001
l00701FF5:
	word32 ecx_473 = Mem469[eax_470 + 4<32>:word32]
	word32 edx_474 = Mem469[ecx_473 + 0x18<32>:word32]
	Mem476[esp_111 - 4<i32>:word32] = eax_470
	word32 esp_482
	call edx_474 (retsize: 4;)
		uses: ecx:ecx_473,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C,Stack +0014:dwArg10
		defs: esp:esp_482
	esp_111 = esp_482 + 4<32>
l00702001:
	word32 eax_492 = Mem491[esp_111 + 0x1C<32>:word32]
	Mem494[eax_492:word32] = Mem491[eax_492:word32] + 0xFFFFFFFF<32>
	word32 eax_495 = Mem494[esp_111 + 0x1C<32>:word32]
	branch Mem494[eax_495:word32] != 0<32> l0070201D
l00702011:
	word32 ecx_498 = Mem494[eax_495 + 4<32>:word32]
	word32 edx_499 = Mem494[ecx_498 + 0x18<32>:word32]
	Mem501[esp_111 - 4<i32>:word32] = eax_495
	word32 esp_507
	call edx_499 (retsize: 4;)
		uses: ecx:ecx_498,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C,Stack +0014:dwArg10
		defs: esp:esp_507
	esp_111 = esp_507 + 4<32>
l00701EF9:
	word32 ecx_515 = Mem312[esp_308 + 0x28<32>:word32]
	word32 eax_517 = Mem312[Mem312[ecx_515 + 4<32>:word32] + 0x30<32>:word32]
	branch eax_517 == 0<32> l00701F25
l00701F07:
	word32 eax_522 = Mem312[eax_517 + Mem312[esp_308 + 0x34<32>:word32]:word32]
	branch eax_522 == 0<32> l00701F25
l00701F25:
	edi_329 = 0xFFFFFFFF<32>
l00701F12:
	word32 edx_530 = Mem312[esp_308 + 0x2C<32>:word32]
	Mem532[esp_308:word32] = dwArg0C
	Mem534[esp_308 - 4<i32>:word32] = edx_530
	Mem536[esp_308 - 8<i32>:word32] = ecx_515
	word32 esp_537
	word32 eax_538
	call eax_522 (retsize: 4;)
		uses: edx:edx_530,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C,Stack +0014:dwArg10
		defs: eax:eax_538,esp:esp_537
	esp_111 = esp_537 + 0xC<32>
	esi_160 = eax_538
l0070201D:
	word32 eax_550 = Mem548[esp_111 + 0x24<32>:word32]
	Mem552[eax_550:word32] = Mem548[eax_550:word32] + 0xFFFFFFFF<32>
	word32 eax_553 = Mem552[esp_111 + 0x24<32>:word32]
	branch Mem552[eax_553:word32] != 0<32> l00702039
l0070202D:
	word32 ecx_556 = Mem552[eax_553 + 4<32>:word32]
	word32 edx_557 = Mem552[ecx_556 + 0x18<32>:word32]
	Mem559[esp_111 - 4<i32>:word32] = eax_553
	word32 esp_569
	call edx_557 (retsize: 4;)
		uses: ecx:ecx_556,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C,Stack +0014:dwArg10
		defs: esp:esp_569
	esp_111 = esp_569 + 4<32>
l00702039:
	word32 eax_579 = Mem578[esp_111 + 0x28<32>:word32]
	Mem581[eax_579:word32] = Mem578[eax_579:word32] + 0xFFFFFFFF<32>
	word32 eax_582 = Mem581[esp_111 + 0x28<32>:word32]
	branch Mem581[eax_582:word32] != 0<32> l00702055
l00702049:
	word32 ecx_585 = Mem581[eax_582 + 4<32>:word32]
	word32 edx_586 = Mem581[ecx_585 + 0x18<32>:word32]
	Mem588[esp_111 - 4<i32>:word32] = eax_582
	word32 esp_594
	call edx_586 (retsize: 4;)
		uses: ecx:ecx_585,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C,Stack +0014:dwArg10
		defs: esp:esp_594
	esp_111 = esp_594 + 4<32>
l00702055:
	v45_727 = edi_329 >= 0<32>
l00702057:
	branch v45_727 l00701E02
l0070205D:
	eax_288 = Mem610[esp_111 + 0x24<32>:word32]
	ecx_294 = Mem610[esp_111 + 0x28<32>:word32]
l00702065:
	branch dwArg0C != 0xA163B8<32> l00702099
l00702099:
	word32 ecx_623 = Mem619[ecx_294 + 4<32>:word32]
	word32 eax_625 = Mem619[eax_288 + 4<32>:word32]
	word32 esp_627 = esp_111 - 4<i32>
	Mem628[esp_627:word32] = Mem619[Mem619[dwArg0C + 4<32>:word32] + 0xC<32>:word32]
	word32 ecx_630 = Mem628[eax_625 + 0xC<32>:word32]
	Mem632[esp_627 - 4<i32>:word32] = Mem628[ecx_623 + 0xC<32>:word32]
	word32 edx_633 = Mem632[0x00A16B7C<p32>:word32]
	Mem635[esp_627 - 8<i32>:word32] = ecx_630
	Mem637[esp_627 - 12<i32>:word32] = 0x8D6D88<32>
	Mem639[esp_627 - 16<i32>:word32] = edx_633
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_1001
	word32 edx_1002
	fn006E15D0(stackArg4, dwArg04, out ecx_1001, out edx_1002)
	eax_106 = 0<32>
l007020C4:
	return eax_106
l0070206D:
	word32 ecx_679 = Mem674[Mem674[eax_288 + 4<32>:word32] + 0xC<32>:word32]
	word32 esp_681 = esp_111 - 4<i32>
	Mem682[esp_681:word32] = Mem674[Mem674[ecx_294 + 4<32>:word32] + 0xC<32>:word32]
	word32 edx_683 = Mem682[0x00A16B7C<p32>:word32]
	Mem685[esp_681 - 4<i32>:word32] = ecx_679
	Mem687[esp_681 - 8<i32>:word32] = 0x8D6DD0<32>
	Mem689[esp_681 - 12<i32>:word32] = edx_683
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 edx_998
	word32 ecx_997
	fn006E15D0(stackArg4, dwArg04, out ecx_997, out edx_998)
	return 0<32>
l00701E02:
	return esi_160
fn00701D30_exit:


word32 fn007020D0(word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00708DC0
//      fn00726570
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx edx Top
// Preserved: edi esi esp
fn007020D0_entry:
l007020D0:
	word32 eax_18 = fn00701B50(dwArg04, dwArg08, 0x40<32>)
	word32 esp_25 = fp - 8<32>
	branch eax_18 != 0xA16480<32> l00702127
l007020ED:
	word32 v8_28 = Mem17[eax_18:word32] + 0xFFFFFFFF<32>
	Mem29[eax_18:word32] = v8_28
	branch v8_28 != 0<32> l007020FE
l007020F2:
	word32 ecx_32 = Mem29[eax_18 + 4<32>:word32]
	word32 esp_36
	call Mem29[ecx_32 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_32,Stack +0004:eax_18,Stack +0014:dwArg04,Stack +0018:dwArg08
		defs: esp:esp_36
	esp_25 = esp_36 + 4<32>
l007020FE:
	word32 eax_50 = Mem45[Mem45[dwArg04 + 4<32>:word32] + 0xC<32>:word32]
	word32 esp_52 = esp_25 - 4<i32>
	Mem53[esp_52:word32] = Mem45[Mem45[dwArg08 + 4<32>:word32] + 0xC<32>:word32]
	word32 ecx_54 = Mem53[0x00A16B7C<p32>:word32]
	Mem56[esp_52 - 4<i32>:word32] = eax_50
	Mem58[esp_52 - 8<i32>:word32] = 0x8D6E14<32>
	Mem60[esp_52 - 12<i32>:word32] = 0x8D6D48<32>
	Mem62[esp_52 - 16<i32>:word32] = ecx_54
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 edx_113
	word32 ecx_112
	fn006E15D0(stackArg4, dwArg04, out ecx_112, out edx_113)
	eax_18 = 0<32>
l00702127:
	return eax_18
fn007020D0_exit:


word32 fn00702130(word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00708DC0
//      fn00726570
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx edx Top
// Preserved: edi esi esp
fn00702130_entry:
l00702130:
	word32 eax_18 = fn00701B50(dwArg04, dwArg08, 0x3C<32>)
	word32 esp_25 = fp - 8<32>
	branch eax_18 != 0xA16480<32> l00702187
l0070214D:
	word32 v8_28 = Mem17[eax_18:word32] + 0xFFFFFFFF<32>
	Mem29[eax_18:word32] = v8_28
	branch v8_28 != 0<32> l0070215E
l00702152:
	word32 ecx_32 = Mem29[eax_18 + 4<32>:word32]
	word32 esp_36
	call Mem29[ecx_32 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_32,Stack +0004:eax_18,Stack +0014:dwArg04,Stack +0018:dwArg08
		defs: esp:esp_36
	esp_25 = esp_36 + 4<32>
l0070215E:
	word32 eax_50 = Mem45[Mem45[dwArg04 + 4<32>:word32] + 0xC<32>:word32]
	word32 esp_52 = esp_25 - 4<i32>
	Mem53[esp_52:word32] = Mem45[Mem45[dwArg08 + 4<32>:word32] + 0xC<32>:word32]
	word32 ecx_54 = Mem53[0x00A16B7C<p32>:word32]
	Mem56[esp_52 - 4<i32>:word32] = eax_50
	Mem58[esp_52 - 8<i32>:word32] = 0x8D6E18<32>
	Mem60[esp_52 - 12<i32>:word32] = 0x8D6D48<32>
	Mem62[esp_52 - 16<i32>:word32] = ecx_54
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 edx_113
	word32 ecx_112
	fn006E15D0(stackArg4, dwArg04, out ecx_112, out edx_113)
	eax_18 = 0<32>
l00702187:
	return eax_18
fn00702130_exit:


word32 fn00702190(word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00708DC0
//      fn00726570
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx edx Top
// Preserved: edi esi esp
fn00702190_entry:
l00702190:
	word32 eax_18 = fn00701B50(dwArg04, dwArg08, 0x38<32>)
	word32 esp_25 = fp - 8<32>
	branch eax_18 != 0xA16480<32> l007021E7
l007021AD:
	word32 v8_28 = Mem17[eax_18:word32] + 0xFFFFFFFF<32>
	Mem29[eax_18:word32] = v8_28
	branch v8_28 != 0<32> l007021BE
l007021B2:
	word32 ecx_32 = Mem29[eax_18 + 4<32>:word32]
	word32 esp_36
	call Mem29[ecx_32 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_32,Stack +0004:eax_18,Stack +0014:dwArg04,Stack +0018:dwArg08
		defs: esp:esp_36
	esp_25 = esp_36 + 4<32>
l007021BE:
	word32 eax_50 = Mem45[Mem45[dwArg04 + 4<32>:word32] + 0xC<32>:word32]
	word32 esp_52 = esp_25 - 4<i32>
	Mem53[esp_52:word32] = Mem45[Mem45[dwArg08 + 4<32>:word32] + 0xC<32>:word32]
	word32 ecx_54 = Mem53[0x00A16B7C<p32>:word32]
	Mem56[esp_52 - 4<i32>:word32] = eax_50
	Mem58[esp_52 - 8<i32>:word32] = 0x8D6E1C<32>
	Mem60[esp_52 - 12<i32>:word32] = 0x8D6D48<32>
	Mem62[esp_52 - 16<i32>:word32] = ecx_54
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 edx_113
	word32 ecx_112
	fn006E15D0(stackArg4, dwArg04, out ecx_112, out edx_113)
	eax_18 = 0<32>
l007021E7:
	return eax_18
fn00702190_exit:


word32 fn007021F0(word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00708DC0
//      fn00726570
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx edx Top
// Preserved: edi esi esp
fn007021F0_entry:
l007021F0:
	word32 eax_18 = fn00701B50(dwArg04, dwArg08, 0x30<32>)
	word32 esp_25 = fp - 8<32>
	branch eax_18 != 0xA16480<32> l00702247
l0070220D:
	word32 v8_28 = Mem17[eax_18:word32] + 0xFFFFFFFF<32>
	Mem29[eax_18:word32] = v8_28
	branch v8_28 != 0<32> l0070221E
l00702212:
	word32 ecx_32 = Mem29[eax_18 + 4<32>:word32]
	word32 esp_36
	call Mem29[ecx_32 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_32,Stack +0004:eax_18,Stack +0014:dwArg04,Stack +0018:dwArg08
		defs: esp:esp_36
	esp_25 = esp_36 + 4<32>
l0070221E:
	word32 eax_50 = Mem45[Mem45[dwArg04 + 4<32>:word32] + 0xC<32>:word32]
	word32 esp_52 = esp_25 - 4<i32>
	Mem53[esp_52:word32] = Mem45[Mem45[dwArg08 + 4<32>:word32] + 0xC<32>:word32]
	word32 ecx_54 = Mem53[0x00A16B7C<p32>:word32]
	Mem56[esp_52 - 4<i32>:word32] = eax_50
	Mem58[esp_52 - 8<i32>:word32] = 0x8D6E20<32>
	Mem60[esp_52 - 12<i32>:word32] = 0x8D6D48<32>
	Mem62[esp_52 - 16<i32>:word32] = ecx_54
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 edx_113
	word32 ecx_112
	fn006E15D0(stackArg4, dwArg04, out ecx_112, out edx_113)
	eax_18 = 0<32>
l00702247:
	return eax_18
fn007021F0_exit:


word32 fn00702250(word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00708DC0
//      fn00726570
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx edx Top
// Preserved: edi esi esp
fn00702250_entry:
l00702250:
	word32 eax_18 = fn00701B50(dwArg04, dwArg08, 0x34<32>)
	word32 esp_25 = fp - 8<32>
	branch eax_18 != 0xA16480<32> l007022A7
l0070226D:
	word32 v8_28 = Mem17[eax_18:word32] + 0xFFFFFFFF<32>
	Mem29[eax_18:word32] = v8_28
	branch v8_28 != 0<32> l0070227E
l00702272:
	word32 ecx_32 = Mem29[eax_18 + 4<32>:word32]
	word32 esp_36
	call Mem29[ecx_32 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_32,Stack +0004:eax_18,Stack +0014:dwArg04,Stack +0018:dwArg08
		defs: esp:esp_36
	esp_25 = esp_36 + 4<32>
l0070227E:
	word32 eax_50 = Mem45[Mem45[dwArg04 + 4<32>:word32] + 0xC<32>:word32]
	word32 esp_52 = esp_25 - 4<i32>
	Mem53[esp_52:word32] = Mem45[Mem45[dwArg08 + 4<32>:word32] + 0xC<32>:word32]
	word32 ecx_54 = Mem53[0x00A16B7C<p32>:word32]
	Mem56[esp_52 - 4<i32>:word32] = eax_50
	Mem58[esp_52 - 8<i32>:word32] = 0x8D6E24<32>
	Mem60[esp_52 - 12<i32>:word32] = 0x8D6D48<32>
	Mem62[esp_52 - 16<i32>:word32] = ecx_54
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 edx_113
	word32 ecx_112
	fn006E15D0(stackArg4, dwArg04, out ecx_112, out edx_113)
	eax_18 = 0<32>
l007022A7:
	return eax_18
fn00702250_exit:


word32 fn007022B0(word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00708DC0
//      fn00726570
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx edx Top
// Preserved: edi esi esp
fn007022B0_entry:
l007022B0:
	word32 eax_18 = fn00701B50(dwArg04, dwArg08, 4<32>)
	word32 esp_25 = fp - 8<32>
	branch eax_18 != 0xA16480<32> l00702307
l007022CD:
	word32 v8_28 = Mem17[eax_18:word32] + 0xFFFFFFFF<32>
	Mem29[eax_18:word32] = v8_28
	branch v8_28 != 0<32> l007022DE
l007022D2:
	word32 ecx_32 = Mem29[eax_18 + 4<32>:word32]
	word32 esp_36
	call Mem29[ecx_32 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_32,Stack +0004:eax_18,Stack +0014:dwArg04,Stack +0018:dwArg08
		defs: esp:esp_36
	esp_25 = esp_36 + 4<32>
l007022DE:
	word32 eax_50 = Mem45[Mem45[dwArg04 + 4<32>:word32] + 0xC<32>:word32]
	word32 esp_52 = esp_25 - 4<i32>
	Mem53[esp_52:word32] = Mem45[Mem45[dwArg08 + 4<32>:word32] + 0xC<32>:word32]
	word32 ecx_54 = Mem53[0x00A16B7C<p32>:word32]
	Mem56[esp_52 - 4<i32>:word32] = eax_50
	Mem58[esp_52 - 8<i32>:word32] = 0x8D4BA8<32>
	Mem60[esp_52 - 12<i32>:word32] = 0x8D6D48<32>
	Mem62[esp_52 - 16<i32>:word32] = ecx_54
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 edx_113
	word32 ecx_112
	fn006E15D0(stackArg4, dwArg04, out ecx_112, out edx_113)
	eax_18 = 0<32>
l00702307:
	return eax_18
fn007022B0_exit:


word32 fn00702310(word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00708DC0
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx edx Top
// Preserved: edi esi esp
fn00702310_entry:
l00702310:
	word32 eax_18 = fn00701B50(dwArg04, dwArg08, 0xC<32>)
	word32 esp_25 = fp - 8<32>
	branch eax_18 != 0xA16480<32> l00702367
l0070232D:
	word32 v8_28 = Mem17[eax_18:word32] + 0xFFFFFFFF<32>
	Mem29[eax_18:word32] = v8_28
	branch v8_28 != 0<32> l0070233E
l00702332:
	word32 ecx_32 = Mem29[eax_18 + 4<32>:word32]
	word32 esp_36
	call Mem29[ecx_32 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_32,Stack +0004:eax_18,Stack +0014:dwArg04,Stack +0018:dwArg08
		defs: esp:esp_36
	esp_25 = esp_36 + 4<32>
l0070233E:
	word32 eax_50 = Mem45[Mem45[dwArg04 + 4<32>:word32] + 0xC<32>:word32]
	word32 esp_52 = esp_25 - 4<i32>
	Mem53[esp_52:word32] = Mem45[Mem45[dwArg08 + 4<32>:word32] + 0xC<32>:word32]
	word32 ecx_54 = Mem53[0x00A16B7C<p32>:word32]
	Mem56[esp_52 - 4<i32>:word32] = eax_50
	Mem58[esp_52 - 8<i32>:word32] = 0x8A6A50<32>
	Mem60[esp_52 - 12<i32>:word32] = 0x8D6D48<32>
	Mem62[esp_52 - 16<i32>:word32] = ecx_54
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 edx_113
	word32 ecx_112
	fn006E15D0(stackArg4, dwArg04, out ecx_112, out edx_113)
	eax_18 = 0<32>
l00702367:
	return eax_18
fn00702310_exit:


word32 fn007023D0(word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00708DC0
//      fn00726570
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx edx Top
// Preserved: ebx edi esi esp
fn007023D0_entry:
l007023D0:
	word32 eax_137 = fn00701B50(dwArg04, dwArg08, 0<32>)
	word32 esp_28 = fp - 0xC<32>
	branch eax_137 != 0xA16480<32> l00702444
l007023EE:
	word32 edi_32 = Mem20[Mem20[dwArg04 + 4<32>:word32] + 0x34<32>:word32]
	word32 v10_33 = Mem20[eax_137:word32] + 0xFFFFFFFF<32>
	Mem34[eax_137:word32] = v10_33
	branch v10_33 != 0<32> l00702405
l007023F9:
	word32 edx_37 = Mem34[eax_137 + 4<32>:word32]
	word32 esp_41
	call Mem39[edx_37 + 0x18<32>:word32] (retsize: 4;)
		uses: edx:edx_37,Stack +0004:eax_21,Stack +0018:dwArg04,Stack +001C:dwArg08
		defs: esp:esp_41
	esp_28 = esp_41 + 4<32>
l00702405:
	branch edi_32 == 0<32> l0070241B
l00702409:
	word32 eax_54 = Mem53[edi_32 + 4<32>:word32]
	branch eax_54 == 0<32> l0070241B
l0070241B:
	word32 ecx_66 = Mem53[Mem53[dwArg04 + 4<32>:word32] + 0xC<32>:word32]
	word32 esp_69 = esp_28 - 4<i32>
	Mem70[esp_69:word32] = Mem53[Mem53[dwArg08 + 4<32>:word32] + 0xC<32>:word32]
	word32 edx_71 = Mem70[0x00A16B7C<p32>:word32]
	Mem73[esp_69 - 4<i32>:word32] = ecx_66
	Mem75[esp_69 - 8<i32>:word32] = 0x8D6E34<32>
	Mem77[esp_69 - 12<i32>:word32] = 0x8D6D48<32>
	Mem79[esp_69 - 16<i32>:word32] = edx_71
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_177
	word32 edx_178
	fn006E15D0(stackArg4, dwArg04, out ecx_177, out edx_178)
	eax_137 = 0<32>
l00702444:
	return eax_137
l00702410:
	word32 esp_101 = esp_28 - 4<i32>
	Mem102[esp_101:word32] = dwArg08
	Mem104[esp_101 - 4<i32>:word32] = dwArg04
	word32 eax_106
	call eax_54 (retsize: 4;)
		uses: Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: eax:eax_106
	return eax_106
fn007023D0_exit:


word32 fn00702450(word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00708DC0
//      fn00726570
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx edx Top
// Preserved: edi esi esp
fn00702450_entry:
l00702450:
	word32 eax_18 = fn00701B50(dwArg04, dwArg08, 0x88<32>)
	word32 esp_25 = fp - 8<32>
	branch eax_18 != 0xA16480<32> l007024AA
l00702470:
	word32 v8_28 = Mem17[eax_18:word32] + 0xFFFFFFFF<32>
	Mem29[eax_18:word32] = v8_28
	branch v8_28 != 0<32> l00702481
l00702475:
	word32 ecx_32 = Mem29[eax_18 + 4<32>:word32]
	word32 esp_36
	call Mem29[ecx_32 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_32,Stack +0004:eax_18,Stack +0014:dwArg04,Stack +0018:dwArg08
		defs: esp:esp_36
	esp_25 = esp_36 + 4<32>
l00702481:
	word32 eax_50 = Mem45[Mem45[dwArg04 + 4<32>:word32] + 0xC<32>:word32]
	word32 esp_52 = esp_25 - 4<i32>
	Mem53[esp_52:word32] = Mem45[Mem45[dwArg08 + 4<32>:word32] + 0xC<32>:word32]
	word32 ecx_54 = Mem53[0x00A16B7C<p32>:word32]
	Mem56[esp_52 - 4<i32>:word32] = eax_50
	Mem58[esp_52 - 8<i32>:word32] = 0x8D6E38<32>
	Mem60[esp_52 - 12<i32>:word32] = 0x8D6D48<32>
	Mem62[esp_52 - 16<i32>:word32] = ecx_54
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 edx_113
	word32 ecx_112
	fn006E15D0(stackArg4, dwArg04, out ecx_112, out edx_113)
	eax_18 = 0<32>
l007024AA:
	return eax_18
fn00702450_exit:


word32 fn007024B0(word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00708DC0
//      fn00726570
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx edx Top
// Preserved: edi esi esp
fn007024B0_entry:
l007024B0:
	word32 eax_18 = fn00701B50(dwArg04, dwArg08, 0x8C<32>)
	word32 esp_25 = fp - 8<32>
	branch eax_18 != 0xA16480<32> l0070250A
l007024D0:
	word32 v8_28 = Mem17[eax_18:word32] + 0xFFFFFFFF<32>
	Mem29[eax_18:word32] = v8_28
	branch v8_28 != 0<32> l007024E1
l007024D5:
	word32 ecx_32 = Mem29[eax_18 + 4<32>:word32]
	word32 esp_36
	call Mem29[ecx_32 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_32,Stack +0004:eax_18,Stack +0014:dwArg04,Stack +0018:dwArg08
		defs: esp:esp_36
	esp_25 = esp_36 + 4<32>
l007024E1:
	word32 eax_50 = Mem45[Mem45[dwArg04 + 4<32>:word32] + 0xC<32>:word32]
	word32 esp_52 = esp_25 - 4<i32>
	Mem53[esp_52:word32] = Mem45[Mem45[dwArg08 + 4<32>:word32] + 0xC<32>:word32]
	word32 ecx_54 = Mem53[0x00A16B7C<p32>:word32]
	Mem56[esp_52 - 4<i32>:word32] = eax_50
	Mem58[esp_52 - 8<i32>:word32] = 0x8A6A50<32>
	Mem60[esp_52 - 12<i32>:word32] = 0x8D6D48<32>
	Mem62[esp_52 - 16<i32>:word32] = ecx_54
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 edx_113
	word32 ecx_112
	fn006E15D0(stackArg4, dwArg04, out ecx_112, out edx_113)
	eax_18 = 0<32>
l0070250A:
	return eax_18
fn007024B0_exit:


word32 fn00702510(word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00708DC0
//      fn00726570
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx edx Top
// Preserved: edi esi esp
fn00702510_entry:
l00702510:
	word32 eax_18 = fn00701B50(dwArg04, dwArg08, 0x10<32>)
	word32 esp_25 = fp - 8<32>
	branch eax_18 != 0xA16480<32> l00702567
l0070252D:
	word32 v8_28 = Mem17[eax_18:word32] + 0xFFFFFFFF<32>
	Mem29[eax_18:word32] = v8_28
	branch v8_28 != 0<32> l0070253E
l00702532:
	word32 ecx_32 = Mem29[eax_18 + 4<32>:word32]
	word32 esp_36
	call Mem29[ecx_32 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_32,Stack +0004:eax_18,Stack +0014:dwArg04,Stack +0018:dwArg08
		defs: esp:esp_36
	esp_25 = esp_36 + 4<32>
l0070253E:
	word32 eax_50 = Mem45[Mem45[dwArg04 + 4<32>:word32] + 0xC<32>:word32]
	word32 esp_52 = esp_25 - 4<i32>
	Mem53[esp_52:word32] = Mem45[Mem45[dwArg08 + 4<32>:word32] + 0xC<32>:word32]
	word32 ecx_54 = Mem53[0x00A16B7C<p32>:word32]
	Mem56[esp_52 - 4<i32>:word32] = eax_50
	Mem58[esp_52 - 8<i32>:word32] = 0x8D4F8C<32>
	Mem60[esp_52 - 12<i32>:word32] = 0x8D6D48<32>
	Mem62[esp_52 - 16<i32>:word32] = ecx_54
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 edx_113
	word32 ecx_112
	fn006E15D0(stackArg4, dwArg04, out ecx_112, out edx_113)
	eax_18 = 0<32>
l00702567:
	return eax_18
fn00702510_exit:


word32 fn00702570()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00708DC0
//      fn00726570
// MayUse: 
// LiveOut: eax
// Trashed: SCZO eax ecx edx Top
// Preserved: esp
fn00702570_entry:
l00702570:
	return fn00701D30(dwArg04, dwArg08, dwArg0C, 0x18<32>)
fn00702570_exit:


void fn007025E0(word32 esi, word32 edi, word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00702670
//      fn007026A0
//      fn007026D0
//      fn007026F0
//      fn00702710
//      fn00702730
//      fn00702750
//      fn00702770
//      fn007027A0
//      fn007028A0
// MayUse:  edi:[0..31] esi:[0..31] Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut:
// Trashed: SCZO eax ecx edx Top
// Preserved: esp
fn007025E0_entry:
l007025E0:
	word32 ecx_6 = Mem0[esi + 4<32>:word32]
	word32 eax_7 = Mem0[ecx_6 + 0x30<32>:word32]
	branch eax_7 == 0<32> l0070261A
l007025EA:
	branch (Mem0[ecx_6 + 0x54<32>:byte] & 8<8>) == 0<8> l0070261A
l007025F0:
	word32 eax_15 = Mem0[eax_7 + dwArg04:word32]
	branch eax_15 == 0<32> l0070261A
l007025FB:
	word32 eax_26
	call eax_15 (retsize: 4;)
		uses: Stack +0010:dwArg04
		defs: eax:eax_26
	branch eax_26 != 0xA16480<32> l00702669
l00702609:
	word32 v11_33 = Mem23[eax_26:word32] + 0xFFFFFFFF<32>
	Mem34[eax_26:word32] = v11_33
	branch v11_33 != 0<32> l0070261A
l0070260E:
	word32 edx_37 = Mem34[eax_26 + 4<32>:word32]
	call Mem39[edx_37 + 0x18<32>:word32] (retsize: 4;)
		uses: edx:edx_37,Stack +0004:eax_26,Stack +0008:dwArg04,Stack +000C:dwArg04
l0070261A:
	word32 eax_60 = fn00701B50(esi, edi, dwArg08)
	word32 esp_67 = fp
	branch eax_60 != 0xA16480<32> l00702669
l00702630:
	word32 v13_70 = Mem59[eax_60:word32] + 0xFFFFFFFF<32>
	Mem71[eax_60:word32] = v13_70
	branch v13_70 != 0<32> l00702641
l00702635:
	word32 edx_74 = Mem71[eax_60 + 4<32>:word32]
	word32 esp_79
	call Mem76[edx_74 + 0x18<32>:word32] (retsize: 4;)
		uses: edx:edx_74,Stack +0004:eax_60,Stack +0008:dwArg04,Stack +000C:dwArg04,Stack +0010:dwArg08
		defs: esp:esp_79
	esp_67 = esp_79 + 4<32>
l00702641:
	word32 ecx_93 = Mem88[Mem88[esi + 4<32>:word32] + 0xC<32>:word32]
	word32 eax_94 = Mem88[0x00A16B7C<p32>:word32]
	word32 esp_96 = esp_67 - 4<i32>
	Mem97[esp_96:word32] = Mem88[Mem88[edi + 4<32>:word32] + 0xC<32>:word32]
	word32 edx_98 = Mem97[esp_96 + 0x10<32>:word32]
	Mem100[esp_96 - 4<i32>:word32] = ecx_93
	Mem102[esp_96 - 8<i32>:word32] = edx_98
	Mem104[esp_96 - 12<i32>:word32] = 0x8D6D48<32>
	Mem106[esp_96 - 16<i32>:word32] = eax_94
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_156
	word32 edx_157
	fn006E15D0(stackArg4, dwArg04, out ecx_156, out edx_157)
l00702669:
	return
fn007025E0_exit:


word32 fn00702670()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00708DC0
// MayUse: 
// LiveOut: eax
// Trashed: SCZO Top
// Preserved: edi esi esp
fn00702670_entry:
l00702670:
	fn007025E0(dwArg04, dwArg08, 0x84<32>, 0x40<32>)
	return <invalid>
fn00702670_exit:


word32 fn007026A0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00708DC0
// MayUse: 
// LiveOut: eax
// Trashed: SCZO Top
// Preserved: edi esi esp
fn007026A0_entry:
l007026A0:
	fn007025E0(dwArg04, dwArg08, 0x80<32>, 0x3C<32>)
	return <invalid>
fn007026A0_exit:


word32 fn007026D0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00708DC0
// MayUse: 
// LiveOut: eax
// Trashed: SCZO Top
// Preserved: edi esi esp
fn007026D0_entry:
l007026D0:
	fn007025E0(dwArg04, dwArg08, 0x7C<32>, 0x38<32>)
	return <invalid>
fn007026D0_exit:


word32 fn007026F0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00708DC0
// MayUse: 
// LiveOut: eax
// Trashed: SCZO Top
// Preserved: edi esi esp
fn007026F0_entry:
l007026F0:
	fn007025E0(dwArg04, dwArg08, 0x74<32>, 0x30<32>)
	return <invalid>
fn007026F0_exit:


word32 fn00702710()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00708DC0
// MayUse: 
// LiveOut: eax
// Trashed: SCZO Top
// Preserved: edi esi esp
fn00702710_entry:
l00702710:
	fn007025E0(dwArg04, dwArg08, 0x78<32>, 0x34<32>)
	return <invalid>
fn00702710_exit:


word32 fn00702730()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00708DC0
// MayUse: 
// LiveOut: eax
// Trashed: SCZO Top
// Preserved: edi esi esp
fn00702730_entry:
l00702730:
	fn007025E0(dwArg04, dwArg08, 0x60<32>, 4<32>)
	return <invalid>
fn00702730_exit:


word32 fn00702750()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00708DC0
// MayUse: 
// LiveOut: eax
// Trashed: SCZO Top
// Preserved: edi esi esp
fn00702750_entry:
l00702750:
	fn007025E0(dwArg04, dwArg08, 0x68<32>, 0xC<32>)
	return <invalid>
fn00702750_exit:


word32 fn00702770()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00708DC0
// MayUse: 
// LiveOut: eax
// Trashed: SCZO Top
// Preserved: edi esi esp
fn00702770_entry:
l00702770:
	fn007025E0(dwArg04, dwArg08, 0x90<32>, 0x88<32>)
	return <invalid>
fn00702770_exit:


word32 fn007027A0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00708DC0
// MayUse: 
// LiveOut: eax
// Trashed: SCZO Top
// Preserved: edi esi esp
fn007027A0_entry:
l007027A0:
	fn007025E0(dwArg04, dwArg08, 0x94<32>, 0x8C<32>)
	return <invalid>
fn007027A0_exit:


word32 fn007027D0(word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00708DC0
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx edx Top
// Preserved: ebp edi esi esp
fn007027D0_entry:
l007027D0:
	word32 eax_149
	word32 eax_12 = Mem10[dwArg04 + 4<32>:word32]
	word32 ecx_13 = Mem10[eax_12 + 0x30<32>:word32]
	word32 esp_16 = fp - 12<i32>
	branch ecx_13 == 0<32> l00702815
l007027E5:
	branch (Mem18[eax_12 + 0x54<32>:byte] & 8<8>) == 0<8> l00702815
l007027EB:
	word32 ecx_23 = Mem18[ecx_13 + 0x5C<32>:word32]
	branch ecx_23 == 0<32> l00702815
l007027F2:
	word32 esp_31
	call ecx_23 (retsize: 4;)
		uses: Stack +0004:dwArg04,Stack +0008:dwArg08,Stack +001C:dwArg04,Stack +0020:dwArg08
		defs: eax:eax_32,esp:esp_31
	esp_16 = esp_31 + 8<32>
	branch eax_149 != 0xA16480<32> l0070288D
l00702804:
	word32 v12_40 = Mem30[eax_149:word32] + 0xFFFFFFFF<32>
	Mem41[eax_149:word32] = v12_40
	branch v12_40 != 0<32> l00702815
l00702809:
	word32 ecx_44 = Mem41[eax_149 + 4<32>:word32]
	word32 edx_45 = Mem41[ecx_44 + 0x18<32>:word32]
	Mem47[esp_31 + 4<32>:word32] = eax_149
	word32 esp_48
	call edx_45 (retsize: 4;)
		uses: ecx:ecx_44,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: esp:esp_48
	esp_16 = esp_48 + 4<32>
l00702815:
	word32 esp_57 = esp_16 - 4<i32>
	Mem58[esp_57:word32] = 0<32>
	Mem61[esp_57 - 4<i32>:word32] = dwArg08
	Mem64[esp_57 - 8<i32>:word32] = dwArg04
	eax_149 = fn00701B50(Mem64[esp_57 - 8<i32>:word32], Mem64[esp_57 - 4<i32>:word32], Mem64[esp_57:word32])
	word32 esp_125 = esp_57 + 4<32>
	branch eax_149 != 0xA16480<32> l0070288D
l00702828:
	word32 edi_76 = Mem64[Mem64[dwArg04 + 4<32>:word32] + 0x34<32>:word32]
	word32 v14_77 = Mem64[eax_149:word32] + 0xFFFFFFFF<32>
	Mem78[eax_149:word32] = v14_77
	branch v14_77 != 0<32> l0070283F
l00702833:
	word32 edx_81 = Mem78[eax_149 + 4<32>:word32]
	Mem83[esp_57:word32] = eax_149
	word32 esp_86
	call Mem83[edx_81 + 0x18<32>:word32] (retsize: 4;)
		uses: edx:edx_81,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: esp:esp_86
	esp_125 = esp_86 + 4<32>
l0070283F:
	branch edi_76 == 0<32> l00702865
l00702843:
	word32 eax_104
	branch (Mem99[Mem99[dwArg04 + 4<32>:word32] + 0x54<32>:byte] & 8<8>) == 0<8> l00702853
l0070284C:
	eax_104 = Mem99[edi_76 + 0x20<32>:word32]
	branch eax_104 != 0<32> l0070285A
l00702853:
	eax_104 = Mem99[edi_76 + 4<32>:word32]
	branch eax_104 == 0<32> l00702865
l00702865:
	word32 edx_123 = Mem99[Mem99[dwArg04 + 4<32>:word32] + 0xC<32>:word32]
	word32 esp_127 = esp_125 - 4<i32>
	Mem128[esp_127:word32] = Mem99[Mem99[dwArg08 + 4<32>:word32] + 0xC<32>:word32]
	word32 eax_129 = Mem128[0x00A16B7C<p32>:word32]
	Mem131[esp_127 - 4<i32>:word32] = edx_123
	Mem133[esp_127 - 8<i32>:word32] = 0x8D6E5C<32>
	Mem135[esp_127 - 12<i32>:word32] = 0x8D6D48<32>
	Mem137[esp_127 - 16<i32>:word32] = eax_129
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 edx_261
	word32 ecx_260
	fn006E15D0(stackArg4, dwArg04, out ecx_260, out edx_261)
	eax_149 = 0<32>
l0070288D:
	return eax_149
l0070285A:
	word32 esp_161 = esp_125 - 4<i32>
	Mem163[esp_161:word32] = dwArg08
	Mem166[esp_161 - 4<i32>:word32] = dwArg04
	word32 eax_171
	call eax_104 (retsize: 4;)
		uses: Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: eax:eax_171
	return eax_171
fn007027D0_exit:


word32 fn007028A0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00708DC0
// MayUse: 
// LiveOut: eax
// Trashed: SCZO Top
// Preserved: edi esi esp
fn007028A0_entry:
l007028A0:
	fn007025E0(dwArg04, dwArg08, 0x6C<32>, 0x10<32>)
	return <invalid>
fn007028A0_exit:


word32 fn007028C0(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00708DC0
// MayUse:  Stack +0004:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx edx Top
// Preserved: esp
fn007028C0_entry:
l007028C0:
	word32 eax_6 = Mem0[dwArg04 + 4<32>:word32]
	branch (Mem0[eax_6 + 0x54<32>:byte] & 8<8>) == 0<8> l007028F0
l007028CD:
	word32 eax_10 = Mem0[eax_6 + 0x30<32>:word32]
	branch eax_10 == 0<32> l007028F0
l007028D4:
	branch Mem0[eax_10 + 0x70<32>:word32] == 0<32> l007028F0
l007028F0:
	return fn00701D30(dwArg04, dwArg08, dwArg0C, 0x18<32>)
l007028DA:
	return fn00701D30(dwArg04, dwArg08, dwArg0C, 0x70<32>)
fn007028C0_exit:


word32 fn00702910(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00708DC0
//      fn00726760
// MayUse:  Stack +0004:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx edx Top
// Preserved: esp
fn00702910_entry:
l00702910:
	branch dwArg04 != 0<32> l00702937
l00702937:
	word32 eax_10 = Mem0[Mem0[dwArg04 + 4<32>:word32] + 0x30<32>:word32]
	branch eax_10 == 0<32> l0070294E
l00702941:
	word32 eax_14 = Mem0[eax_10 + 0x1C<32>:word32]
	branch eax_14 == 0<32> l0070294E
l0070294E:
	word32 ecx_107
	word32 edx_108
	fn006E15D0(Mem0[0x00A16B7C<p32>:word32], 0x8D6E64<32>, out ecx_107, out edx_108)
l00702948:
	word32 eax_41
	word32 ecx_42
	call eax_14 (retsize: 0;)
		uses: ecx:ecx_42,Stack +0004:dwArg04
		defs: eax:eax_41,ecx:ecx_42
	return eax_41
l00702918:
	branch fn006E0FC0() != 0<32> l00702966
l00702966:
	return 0<32>
l00702921:
	word32 ecx_105
	word32 edx_106
	fn006E0F80(Mem0[0x00A18720<p32>:word32], 0x8D6C90<32>, out ecx_105, out edx_106)
	return 0<32>
fn00702910_exit:


word32 fn00702970(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00708DC0
// MayUse:  Stack +0004:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx edx Top
// Preserved: esp
fn00702970_entry:
l00702970:
	branch dwArg04 != 0<32> l00702997
l00702997:
	word32 eax_10 = Mem0[Mem0[dwArg04 + 4<32>:word32] + 0x30<32>:word32]
	branch eax_10 == 0<32> l007029AE
l007029A1:
	word32 eax_14 = Mem0[eax_10 + 0x20<32>:word32]
	branch eax_14 == 0<32> l007029AE
l007029AE:
	word32 ecx_107
	word32 edx_108
	fn006E15D0(Mem0[0x00A16B7C<p32>:word32], 0x8D6E8C<32>, out ecx_107, out edx_108)
l007029A8:
	word32 eax_41
	word32 ecx_42
	call eax_14 (retsize: 0;)
		uses: ecx:ecx_42,Stack +0004:dwArg04
		defs: eax:eax_41,ecx:ecx_42
	return eax_41
l00702978:
	branch fn006E0FC0() != 0<32> l007029C6
l007029C6:
	return 0<32>
l00702981:
	word32 ecx_105
	word32 edx_106
	fn006E0F80(Mem0[0x00A18720<p32>:word32], 0x8D6C90<32>, out ecx_105, out edx_106)
	return 0<32>
fn00702970_exit:


word32 fn007029D0(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00708DC0
//      fn00726760
// MayUse:  Stack +0004:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx edx Top
// Preserved: esp
fn007029D0_entry:
l007029D0:
	branch dwArg04 != 0<32> l007029F7
l007029F7:
	word32 eax_10 = Mem0[Mem0[dwArg04 + 4<32>:word32] + 0x30<32>:word32]
	branch eax_10 == 0<32> l00702A0E
l00702A01:
	word32 eax_14 = Mem0[eax_10 + 0x2C<32>:word32]
	branch eax_14 == 0<32> l00702A0E
l00702A0E:
	word32 ecx_107
	word32 edx_108
	fn006E15D0(Mem0[0x00A16B7C<p32>:word32], 0x8D6EB4<32>, out ecx_107, out edx_108)
l00702A08:
	word32 eax_41
	word32 ecx_42
	call eax_14 (retsize: 0;)
		uses: ecx:ecx_42,Stack +0004:dwArg04
		defs: eax:eax_41,ecx:ecx_42
	return eax_41
l007029D8:
	branch fn006E0FC0() != 0<32> l00702A26
l00702A26:
	return 0<32>
l007029E1:
	word32 ecx_105
	word32 edx_106
	fn006E0F80(Mem0[0x00A18720<p32>:word32], 0x8D6C90<32>, out ecx_105, out edx_106)
	return 0<32>
fn007029D0_exit:


word32 fn00702AF0(word32 dwArg04, ptr32 & ecxOut, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00702C30
// MayUse:  Stack +0004:[0..31]
// LiveOut: eax ecx edx
// Trashed: SCZO eax ecx edx Top
// Preserved: edi esi esp
fn00702AF0_entry:
l00702AF0:
	word32 edi_104 = 0<32>
	branch dwArg04 != 0<32> l00702B1D
l00702B1D:
	word32 eax_15 = Mem10[dwArg04 + 4<32>:word32]
	branch eax_15 == 0xA1E7E8<32> l00702C1F
l00702B2B:
	branch fn006D5670(eax_15, 0xA1E7E8<32>, out ecx, out edx) != 0<32> l00702C1F
l00702B41:
	word32 eax_33 = Mem21[dwArg04 + 4<32>:word32]
	branch eax_33 == 0xA1F400<32> l00702C1F
l00702B4F:
	branch fn006D5670(eax_33, 0xA1F400<32>, out ecx, out edx) != 0<32> l00702C1F
l00702C1F:
	Mem54[dwArg04:word32] = Mem52[dwArg04:word32] + 1<32>
	ecxOut = ecx
	edxOut = edx
	return dwArg04
l00702B65:
	word32 edx_101
	word32 ecx_100
	word32 ecx_62 = Mem39[dwArg04 + 4<32>:word32]
	word32 eax_63 = Mem39[ecx_62 + 0x30<32>:word32]
	branch eax_63 == 0<32> l00702C02
l00702B73:
	branch (Mem39[ecx_62 + 0x54<32>:word32] & 0x20000<32>) == 0<32> l00702C02
l00702B80:
	word32 eax_70 = Mem39[eax_63 + 0x98<32>:word32]
	branch eax_70 == 0<32> l00702C02
l00702C02:
	fn006E15D0(Mem39[0x00A16B7C<p32>:word32], 0x8D6F24<32>, out ecx_100, out edx_101)
l00702B8A:
	word32 esp_98
	word32 eax_99
	call eax_70 (retsize: 4;)
		uses: ecx:ecx_100,edx:edx_101,Stack +0004:dwArg04,Stack +0014:dwArg04
		defs: eax:eax_99,ecx:ecx_100,edx:edx_101,esp:esp_98
	edi_104 = eax_99
	branch eax_99 == 0<32> l00702C1A
l00702B9A:
	word32 eax_109 = Mem97[eax_99 + 4<32>:word32]
	branch eax_109 == 0xA1E7E8<32> l00702C1A
l00702BA4:
	Mem113[esp_98:word32] = 0xA1E7E8<32>
	Mem115[esp_98 - 4<i32>:word32] = eax_109
	branch fn006D5670(Mem115[esp_98 - 4<i32>:word32], Mem115[esp_98:word32], out ecx_100, out edx_101) != 0<32> l00702C1A
l00702BB6:
	word32 eax_127 = Mem115[eax_99 + 4<32>:word32]
	branch eax_127 == 0xA1F400<32> l00702C1A
l00702BC0:
	Mem131[esp_98:word32] = 0xA1F400<32>
	Mem133[esp_98 - 4<i32>:word32] = eax_127
	branch fn006D5670(Mem133[esp_98 - 4<i32>:word32], Mem133[esp_98:word32], out ecx_100, out edx_101) != 0<32> l00702C1A
l00702C1A:
	ecxOut = ecx_100
	edxOut = edx_101
	return edi_104
l00702BD2:
	word32 eax_155 = Mem133[0x00A16B7C<p32>:word32]
	Mem157[esp_98:word32] = Mem133[Mem133[eax_99 + 4<32>:word32] + 0xC<32>:word32]
	Mem159[esp_98 - 4<i32>:word32] = 0x8D6F58<32>
	Mem161[esp_98 - 8<i32>:word32] = eax_155
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_164
	word32 edx_165
	fn006E15D0(stackArg4, dwArg04, out ecx_164, out edx_165)
	word32 v12_169 = Mem161[eax_99:word32] + 0xFFFFFFFF<32>
	Mem170[eax_99:word32] = v12_169
	branch v12_169 != 0<32> l00702BFD
l00702BF1:
	word32 ecx_173 = Mem170[eax_99 + 4<32>:word32]
	word32 edx_174 = Mem170[ecx_173 + 0x18<32>:word32]
	Mem176[esp_98:word32] = eax_99
	call edx_174 (retsize: 4;)
		uses: ecx:ecx_173,edx:edx_180,Stack +0008:dwArg04
		defs: ecx:ecx_179,edx:edx_180
l00702BFD:
	ecxOut = ecx_164
	edxOut = edx_165
	return 0<32>
l00702AFC:
	branch fn006E0FC0() != 0<32> l00702B18
l00702B05:
	fn006E0F80(Mem10[0x00A18720<p32>:word32], 0x8D6C90<32>, out ecx, out edx)
l00702B18:
	ecxOut = ecx
	edxOut = edx
	return 0<32>
fn00702AF0_exit:


word32 fn00702C30(word32 dwArg04, word32 dwArg08, ptr32 & ecxOut, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00704220
//      fn00704300
//      fn00704400
//      fn007044F0
//      fn00707D70
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax ecx edx
// Trashed: SCZO eax ebx ecx edi edx esi Top
// Preserved: esp
fn00702C30_entry:
l00702C30:
	word32 ecx_15
	word32 edx_16
	word32 eax_14 = fn00702AF0(dwArg04, out ecx_15, out edx_16)
	branch eax_14 != 0<32> l00702C4B
l00702C4B:
	word32 ecx_119
	word32 edx_100
	word32 eax_30 = fn007052C0(eax_14, out ecx_119, out edx_100)
	word32 edi_102 = eax_30
	branch eax_30 != 0xFFFFFFFF<32> l00702CB5
l00702C5C:
	word32 eax_39 = fn006E0FC0()
	branch eax_39 == 0<32> l00702CB5
l00702C65:
	branch fn006E0FD0(eax_39, dwArg04, out ecx_119, out edx_100) == 0<32> l00702CB5
l00702C79:
	word32 ecx_206
	word32 edx_207
	fn006E1160(out ecx_206, out edx_207)
	branch dwArg08 != 0<32> l00702CA0
l00702CA0:
	fn006E15D0(dwArg08, dwArg04, out ecx_119, out edx_100)
l00702C86:
	word32 edx_99 = CONVERT(CONVERT(fn00710C20(eax_14, out ecx_119) < 0<32>, bool, int8), int8, uint32)
	edx_100 = edx_99 + 0x7FFFFFFF<32>
	edi_102 = edx_99 + 0x7FFFFFFF<32>
l00702CB5:
	word32 v15_105 = Mem104[eax_14:word32] + 0xFFFFFFFF<32>
	Mem106[eax_14:word32] = v15_105
	branch v15_105 != 0<32> l00702CC6
l00702CBA:
	word32 eax_109 = Mem106[eax_14 + 4<32>:word32]
	call Mem106[eax_109 + 0x18<32>:word32] (retsize: 4;)
		uses: eax:eax_109,Stack +0004:eax_14,Stack +0008:dwArg04,Stack +0018:dwArg04,Stack +001C:dwArg08
		defs: ecx:ecx_119,edx:edx_120
l00702CC6:
	ecxOut = ecx_119
	edxOut = edx_100
	return edi_102
l00702C45:
	ecxOut = ecx_15
	edxOut = edx_16
	return 0xFFFFFFFF<32>
fn00702C30_exit:


word32 fn00703120(word32 dwArg04, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E5710
// MayUse:  Stack +0004:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ecx edx Top
// Preserved: esp
fn00703120_entry:
l00703120:
	word32 edx_31 = dwArg04
	branch dwArg04 != 0<32> l00703148
l00703148:
	word32 eax_10 = Mem0[Mem0[dwArg04 + 4<32>:word32] + 0x34<32>:word32]
	branch eax_10 == 0<32> l0070315E
l00703152:
	word32 eax_14 = Mem0[eax_10:word32]
	branch eax_14 == 0<32> l0070315E
l0070315E:
	word32 ecx_108
	fn006E15D0(Mem0[0x00A16B7C<p32>:word32], 0x8D70D4<32>, out ecx_108, out edx_31)
l00703158:
	word32 edx_40
	word32 eax_41
	word32 ecx_42
	call eax_14 (retsize: 0;)
		uses: ecx:ecx_42,Stack +0004:dwArg04
		defs: eax:eax_41,ecx:ecx_42,edx:edx_40
	edxOut = edx_40
	return eax_41
l00703128:
	branch fn006E0FC0() != 0<32> l00703176
l00703176:
	edxOut = edx_31
	return 0xFFFFFFFF<32>
l00703131:
	word32 edx_59
	word32 ecx_107
	fn006E0F80(Mem0[0x00A18720<p32>:word32], 0x8D6C90<32>, out ecx_107, out edx_59)
	edxOut = edx_59
	return 0xFFFFFFFF<32>
fn00703120_exit:


word32 fn00703180(word32 dwArg04, word32 dwArg08, ptr32 & ecxOut, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E5710
//      fn006F8C70
//      fn00704220
//      fn00708210
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax ecx edx
// Trashed: SCZO eax ecx edx Top
// Preserved: ebx edi esi esp
fn00703180_entry:
l00703180:
	branch dwArg04 != 0<32> l007031A9
l007031A9:
	word32 esi_15 = Mem14[Mem6[dwArg04 + 4<32>:word32] + 0x34<32>:word32]
	branch esi_15 == 0<32> l007031E9
l007031B4:
	branch Mem14[esi_15 + 0xC<32>:word32] == 0<32> l007031E9
l007031E9:
	word32 edx_37
	word32 ecx_38
	fn006E15D0(Mem14[0x00A16B7C<p32>:word32], 0x8D70FC<32>, out ecx_38, out edx_37)
	ecxOut = ecx_38
	edxOut = edx_37
	return 0<32>
l007031BA:
	branch dwArg08 >= 0<32> l007031DB
l007031C3:
	word32 eax_56 = Mem51[esi_15:word32]
	branch eax_56 == 0<32> l007031DB
l007031C9:
	word32 eax_63
	word32 edx_64
	word32 ecx_65
	call eax_56 (retsize: 4;)
		uses: ecx:ecx_65,edx:edx_64,Stack +0004:dwArg04,Stack +0018:dwArg04,Stack +001C:dwArg08
		defs: eax:eax_63,ecx:ecx_65,edx:edx_64
	branch eax_63 >= 0<32> l007031D9
l007031D9:
l007031DB:
	word32 eax_86
	word32 edx_87
	word32 ecx_88
	call Mem75[esi_15 + 0xC<32>:word32] (retsize: 4;)
		uses: ecx:ecx_88,edx:edx_87,Stack +0004:dwArg04,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +001C:dwArg04,Stack +0020:dwArg08
		defs: eax:eax_86,ecx:ecx_88,edx:edx_87
	ecxOut = ecx_88
	edxOut = edx_87
	return eax_86
l007031D3:
	ecxOut = ecx_65
	edxOut = edx_64
	return 0<32>
l00703189:
	branch fn006E0FC0() != 0<32> l007031A5
l00703192:
	fn006E0F80(Mem6[0x00A18720<p32>:word32], 0x8D6C90<32>, out ecx, out edx)
l007031A5:
	ecxOut = ecx
	edxOut = edx
	return 0<32>
fn00703180_exit:


word32 fn00703210(word32 dwArg04, word32 dwArg08, word32 dwArg0C)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00707E00
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: ebp esp
fn00703210_entry:
l00703210:
	branch dwArg04 != 0<32> l00703239
l00703239:
	word32 eax_11 = Mem6[dwArg04 + 4<32>:word32]
	word32 esi_15 = Mem14[eax_11 + 0x34<32>:word32]
	branch esi_15 == 0<32> l0070328F
l00703245:
	branch Mem20[esi_15 + 0x10<32>:word32] == 0<32> l0070328F
l0070328F:
	word32 edi_26 = Mem20[eax_11 + 0x38<32>:word32]
	branch edi_26 == 0<32> l007032D7
l00703296:
	branch Mem20[edi_26 + 4<32>:word32] == 0<32> l007032D7
l007032D7:
	word32 edx_373
	word32 ecx_372
	fn006E15D0(Mem20[0x00A16B7C<p32>:word32], 0x8D711C<32>, out ecx_372, out edx_373)
l0070329C:
	word32 eax_66 = fn0072F230(dwArg08, dwArg0C)
	branch eax_66 == 0<32> l007032EF
l007032EF:
	return 0<32>
l007032B4:
	word32 esp_92
	word32 eax_93
	word32 edx_94
	word32 ecx_95
	call Mem64[edi_26 + 4<32>:word32] (retsize: 4;)
		uses: ecx:ecx_95,edx:edx_94,Stack +0004:dwArg04,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C,Stack +001C:dwArg04,Stack +0020:dwArg08,Stack +0024:dwArg0C
		defs: eax:eax_93,ecx:ecx_95,edx:edx_94,esp:esp_92
	word32 v15_99 = Mem91[eax_66:word32] + 0xFFFFFFFF<32>
	Mem100[eax_66:word32] = v15_99
	branch v15_99 != 0<32> l007032D1
l007032C5:
	word32 edx_104 = Mem100[eax_66 + 4<32>:word32]
	word32 eax_105 = Mem100[edx_104 + 0x18<32>:word32]
	Mem107[esp_92 + 4<32>:word32] = eax_66
	word32 ecx_111
	call eax_105 (retsize: 4;)
		uses: ecx:ecx_111,edx:edx_104,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C
		defs: ecx:ecx_111
l007032D1:
	return eax_93
l0070324B:
	branch dwArg08 < 0<32> l0070325C
l00703258:
	branch dwArg0C >= 0<32> l0070327F
l0070325C:
	word32 eax_139 = Mem129[esi_15:word32]
	branch eax_139 == 0<32> l0070327F
l00703262:
	word32 eax_151
	word32 edx_152
	word32 ecx_153
	call eax_139 (retsize: 4;)
		uses: ecx:ecx_153,edx:edx_152,Stack +0004:dwArg04,Stack +001C:dwArg04,Stack +0020:dwArg08,Stack +0024:dwArg0C
		defs: eax:eax_151,ecx:ecx_153,edx:edx_152
	branch eax_151 >= 0<32> l00703273
l00703273:
	branch dwArg08 >= 0<32> l00703279
l00703277:
l00703279:
	branch dwArg0C >= 0<32> l0070327F
l0070327D:
l0070327F:
	word32 eax_193
	word32 edx_194
	word32 ecx_195
	call Mem174[esi_15 + 0x10<32>:word32] (retsize: 4;)
		uses: ecx:ecx_195,edx:edx_194,Stack +0004:dwArg04,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C,Stack +0024:dwArg04,Stack +0028:dwArg08,Stack +002C:dwArg0C
		defs: eax:eax_193,ecx:ecx_195,edx:edx_194
	return eax_193
l0070326C:
	return 0<32>
l00703219:
	branch fn006E0FC0() != 0<32> l00703235
l00703222:
	word32 edx_371
	word32 ecx_370
	fn006E0F80(Mem6[0x00A18720<p32>:word32], 0x8D6C90<32>, out ecx_370, out edx_371)
l00703235:
	return 0<32>
fn00703210_exit:


word32 fn00703300(word32 dwArg04, word32 dwArg08, word32 dwArg0C, ptr32 & ecxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00704300
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut: eax ecx
// Trashed: SCZO eax ecx edx Top
// Preserved: ebx edi esi esp
fn00703300_entry:
l00703300:
	branch dwArg04 != 0<32> l0070332A
l0070332A:
	word32 esi_15 = Mem14[Mem6[dwArg04 + 4<32>:word32] + 0x34<32>:word32]
	branch esi_15 == 0<32> l00703370
l00703335:
	branch Mem14[esi_15 + 0x14<32>:word32] == 0<32> l00703370
l00703370:
	word32 ecx_37
	word32 edx_205
	fn006E15D0(Mem14[0x00A16B7C<p32>:word32], 0x8D713C<32>, out ecx_37, out edx_205)
	ecxOut = ecx_37
	return 0xFFFFFFFF<32>
l0070333B:
	branch dwArg08 >= 0<32> l0070335D
l00703344:
	word32 eax_56 = Mem51[esi_15:word32]
	branch eax_56 == 0<32> l0070335D
l0070334A:
	word32 eax_63
	word32 ecx_64
	word32 edx_65
	call eax_56 (retsize: 4;)
		uses: ecx:ecx_64,edx:edx_65,Stack +0004:dwArg04,Stack +0018:dwArg04,Stack +001C:dwArg08
		defs: eax:eax_63,ecx:ecx_64,edx:edx_65
	branch eax_63 >= 0<32> l0070335B
l0070335B:
l0070335D:
	word32 eax_89
	word32 ecx_90
	word32 edx_91
	call Mem75[esi_15 + 0x14<32>:word32] (retsize: 4;)
		uses: ecx:dwArg0C,edx:edx_91,Stack +0004:dwArg04,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0020:dwArg04,Stack +0024:dwArg08,Stack +0028:dwArg0C
		defs: eax:eax_89,ecx:ecx_90,edx:edx_91
	ecxOut = ecx_90
	return eax_89
l00703354:
	ecxOut = ecx_64
	return 0xFFFFFFFF<32>
l00703309:
	branch fn006E0FC0() != 0<32> l00703325
l00703312:
	word32 edx_204
	fn006E0F80(Mem6[0x00A18720<p32>:word32], 0x8D6C90<32>, out ecx, out edx_204)
l00703325:
	ecxOut = ecx
	return 0xFFFFFFFF<32>
fn00703300_exit:


word32 fn00703390(word32 dwArg04, word32 dwArg08, ptr32 & ecxOut, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00704400
//      fn00727290
//      fn0072C160
//      fn00748030
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax ecx edx
// Trashed: SCZO eax ecx edx Top
// Preserved: ebx edi esi esp
fn00703390_entry:
l00703390:
	branch dwArg04 != 0<32> l007033BA
l007033BA:
	word32 esi_15 = Mem14[Mem6[dwArg04 + 4<32>:word32] + 0x34<32>:word32]
	branch esi_15 == 0<32> l007033FD
l007033C5:
	branch Mem14[esi_15 + 0x14<32>:word32] == 0<32> l007033FD
l007033FD:
	word32 edx_37
	word32 ecx_38
	fn006E15D0(Mem14[0x00A16B7C<p32>:word32], 0x8D7170<32>, out ecx_38, out edx_37)
	ecxOut = ecx_38
	edxOut = edx_37
	return 0xFFFFFFFF<32>
l007033CB:
	branch dwArg08 >= 0<32> l007033ED
l007033D4:
	word32 eax_56 = Mem51[esi_15:word32]
	branch eax_56 == 0<32> l007033ED
l007033DA:
	word32 eax_63
	word32 edx_64
	word32 ecx_65
	call eax_56 (retsize: 4;)
		uses: ecx:ecx_65,edx:edx_64,Stack +0004:dwArg04,Stack +0018:dwArg04,Stack +001C:dwArg08
		defs: eax:eax_63,ecx:ecx_65,edx:edx_64
	branch eax_63 >= 0<32> l007033EB
l007033EB:
l007033ED:
	word32 eax_88
	word32 edx_89
	word32 ecx_90
	call Mem75[esi_15 + 0x14<32>:word32] (retsize: 4;)
		uses: ecx:ecx_90,edx:edx_89,Stack +0004:dwArg04,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0020:dwArg04,Stack +0024:dwArg08
		defs: eax:eax_88,ecx:ecx_90,edx:edx_89
	ecxOut = ecx_90
	edxOut = edx_89
	return eax_88
l007033E4:
	ecxOut = ecx_65
	edxOut = edx_64
	return 0xFFFFFFFF<32>
l00703399:
	branch fn006E0FC0() != 0<32> l007033B5
l007033A2:
	fn006E0F80(Mem6[0x00A18720<p32>:word32], 0x8D6C90<32>, out ecx, out edx)
l007033B5:
	ecxOut = ecx
	edxOut = edx
	return 0xFFFFFFFF<32>
fn00703390_exit:


word32 fn00703420(word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00707F70
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31] Stack +0010:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: ebp esp
fn00703420_entry:
l00703420:
	branch dwArg04 != 0<32> l0070344A
l0070344A:
	word32 eax_11 = Mem6[dwArg04 + 4<32>:word32]
	word32 esi_15 = Mem14[eax_11 + 0x34<32>:word32]
	branch esi_15 == 0<32> l007034A6
l00703456:
	branch Mem20[esi_15 + 0x18<32>:word32] == 0<32> l007034A6
l007034A6:
	word32 edi_26 = Mem20[eax_11 + 0x38<32>:word32]
	branch edi_26 == 0<32> l007034F3
l007034AD:
	branch Mem20[edi_26 + 8<32>:word32] == 0<32> l007034F3
l007034F3:
	word32 edx_388
	word32 ecx_387
	fn006E15D0(Mem20[0x00A16B7C<p32>:word32], 0x8D71A0<32>, out ecx_387, out edx_388)
l007034B3:
	word32 eax_66 = fn0072F230(dwArg08, dwArg0C)
	branch eax_66 == 0<32> l0070350B
l0070350B:
	return 0xFFFFFFFF<32>
l007034CB:
	word32 esp_96
	word32 eax_97
	word32 ecx_98
	call Mem64[edi_26 + 8<32>:word32] (retsize: 4;)
		uses: ecx:ecx_98,edx:dwArg10,Stack +0004:dwArg04,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C,Stack +0020:dwArg04,Stack +0024:dwArg08,Stack +0028:dwArg0C,Stack +002C:dwArg10
		defs: eax:eax_97,ecx:ecx_98,esp:esp_96
	word32 v15_103 = Mem95[eax_66:word32] + 0xFFFFFFFF<32>
	Mem104[eax_66:word32] = v15_103
	branch v15_103 != 0<32> l007034ED
l007034E1:
	word32 ecx_108 = Mem104[eax_66 + 4<32>:word32]
	word32 edx_109 = Mem104[ecx_108 + 0x18<32>:word32]
	Mem111[esp_96 + 8<32>:word32] = eax_66
	word32 edx_115
	call edx_109 (retsize: 4;)
		uses: ecx:ecx_108,edx:edx_115,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C,Stack +0014:dwArg10
		defs: edx:edx_115
l007034ED:
	return eax_97
l0070345C:
	branch dwArg08 < 0<32> l0070346D
l00703469:
	branch dwArg0C >= 0<32> l00703491
l0070346D:
	word32 eax_143 = Mem133[esi_15:word32]
	branch eax_143 == 0<32> l00703491
l00703473:
	word32 eax_155
	word32 ecx_156
	word32 edx_157
	call eax_143 (retsize: 4;)
		uses: ecx:ecx_156,edx:edx_157,Stack +0004:dwArg04,Stack +001C:dwArg04,Stack +0020:dwArg08,Stack +0024:dwArg0C,Stack +0028:dwArg10
		defs: eax:eax_155,ecx:ecx_156,edx:edx_157
	branch eax_155 >= 0<32> l00703485
l00703485:
	branch dwArg08 >= 0<32> l0070348B
l00703489:
l0070348B:
	branch dwArg0C >= 0<32> l00703491
l0070348F:
l00703491:
	word32 eax_200
	word32 edx_202
	call Mem178[esi_15 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:dwArg10,edx:edx_202,Stack +0004:dwArg04,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C,Stack +0028:dwArg04,Stack +002C:dwArg08,Stack +0030:dwArg0C,Stack +0034:dwArg10
		defs: eax:eax_200,edx:edx_202
	return eax_200
l0070347D:
	return 0xFFFFFFFF<32>
l00703429:
	branch fn006E0FC0() != 0<32> l00703445
l00703432:
	word32 edx_386
	word32 ecx_385
	fn006E0F80(Mem6[0x00A18720<p32>:word32], 0x8D6C90<32>, out ecx_385, out edx_386)
l00703445:
	return 0xFFFFFFFF<32>
fn00703420_exit:


word32 fn00703520(word32 dwArg04, word32 dwArg08, word32 dwArg0C)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00707F70
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx edx Top
// Preserved: ebp ebx edi esi esp
fn00703520_entry:
l00703520:
	branch dwArg04 != 0<32> l0070354A
l0070354A:
	word32 esi_15 = Mem14[Mem6[dwArg04 + 4<32>:word32] + 0x34<32>:word32]
	branch esi_15 == 0<32> l007035A3
l00703555:
	branch Mem14[esi_15 + 0x18<32>:word32] == 0<32> l007035A3
l007035A3:
	word32 edx_263
	word32 ecx_262
	fn006E15D0(Mem14[0x00A16B7C<p32>:word32], 0x8D71D4<32>, out ecx_262, out edx_263)
	return 0xFFFFFFFF<32>
l0070355B:
	branch dwArg08 < 0<32> l0070356D
l00703569:
	branch dwArg0C >= 0<32> l00703591
l0070356D:
	word32 eax_65 = Mem55[esi_15:word32]
	branch eax_65 == 0<32> l00703591
l00703573:
	word32 eax_77
	word32 edx_78
	word32 ecx_79
	call eax_65 (retsize: 4;)
		uses: ecx:ecx_79,edx:edx_78,Stack +0004:dwArg04,Stack +001C:dwArg04,Stack +0020:dwArg08,Stack +0024:dwArg0C
		defs: eax:eax_77,ecx:ecx_79,edx:edx_78
	branch eax_77 >= 0<32> l00703585
l00703585:
	branch dwArg08 >= 0<32> l0070358B
l00703589:
l0070358B:
	branch dwArg0C >= 0<32> l00703591
l0070358F:
l00703591:
	word32 eax_121
	word32 edx_122
	word32 ecx_123
	call Mem100[esi_15 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_123,edx:edx_122,Stack +0004:dwArg04,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C,Stack +0028:dwArg04,Stack +002C:dwArg08,Stack +0030:dwArg0C
		defs: eax:eax_121,ecx:ecx_123,edx:edx_122
	return eax_121
l0070357D:
	return 0xFFFFFFFF<32>
l00703529:
	branch fn006E0FC0() != 0<32> l00703545
l00703532:
	word32 edx_261
	word32 ecx_260
	fn006E0F80(Mem6[0x00A18720<p32>:word32], 0x8D6C90<32>, out ecx_260, out edx_261)
l00703545:
	return 0xFFFFFFFF<32>
fn00703520_exit:


word32 fn007035C0(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00704DA0
//      fn00728BE0
// MayUse:  Stack +0004:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx edi edx esi Top
// Preserved: esp
fn007035C0_entry:
l007035C0:
	branch dwArg04 != 0<32> l007035E9
l007035E9:
	word32 edx_177
	word32 eax_17 = fn006F2650(0<32>, out edx_177)
	branch eax_17 == 0<32> l00703619
l007035FA:
	word32 eax_32 = fn006F3930(eax_17, dwArg04)
	branch eax_32 != 0<32> l0070361E
l0070361E:
	word32 v13_41 = Mem30[eax_32:word32] + 0xFFFFFFFF<32>
	Mem42[eax_32:word32] = v13_41
	branch v13_41 != 0<32> l0070362F
l00703623:
	word32 ecx_45 = Mem42[eax_32 + 4<32>:word32]
	word32 edx_52
	call Mem42[ecx_45 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_45,edx:edx_52,Stack +0004:eax_32,Stack +0008:dwArg04,Stack +0014:dwArg04
		defs: edx:edx_52
l0070362F:
	return eax_17
l00703608:
	word32 v10_65 = Mem30[eax_17:word32] + 0xFFFFFFFF<32>
	Mem66[eax_17:word32] = v10_65
	branch v10_65 != 0<32> l00703619
l0070360D:
	word32 ecx_69 = Mem66[eax_17 + 4<32>:word32]
	word32 edx_76
	call Mem66[ecx_69 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_69,edx:edx_76,Stack +0004:eax_17,Stack +0008:dwArg04,Stack +0014:dwArg04
		defs: edx:edx_76
l00703619:
	return 0<32>
l007035C9:
	branch fn006E0FC0() != 0<32> l007035E5
l007035D2:
	word32 edx_179
	word32 ecx_178
	fn006E0F80(Mem6[0x00A18720<p32>:word32], 0x8D6C90<32>, out ecx_178, out edx_179)
l007035E5:
	return 0<32>
fn007035C0_exit:


word32 fn00703640(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0070BCC0
// MayUse:  Stack +0004:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx Top
// Preserved: esp
fn00703640_entry:
l00703640:
	branch dwArg04 == 0<32> l00703681
l00703648:
	word32 eax_9 = Mem0[dwArg04 + 4<32>:word32]
	branch eax_9 != 0xA1EB98<32> l00703661
l00703661:
	word32 ecx_12 = Mem0[eax_9 + 0x38<32>:word32]
	branch ecx_12 == 0<32> l00703681
l00703668:
	branch Mem0[ecx_12 + 4<32>:word32] == 0<32> l00703681
l0070366E:
	word32 eax_18 = Mem0[eax_9 + 0x34<32>:word32]
	branch eax_18 == 0<32> l0070367B
l00703675:
	branch Mem0[eax_18 + 0x10<32>:word32] != 0<32> l00703681
l00703681:
	return 0<32>
l0070367B:
	return 1<32>
l00703652:
	word32 edx_74
	return fn006DF7C0(dwArg04, 0x8D0B00<32>, out edx_74)
fn00703640_exit:


word32 fn00703690(word32 dwArg04, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00704080
//      fn007040D0
// MayUse:  Stack +0004:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ecx edx Top
// Preserved: esp
fn00703690_entry:
l00703690:
	word32 edx_31 = dwArg04
	branch dwArg04 != 0<32> l007036B8
l007036B8:
	word32 eax_10 = Mem0[Mem0[dwArg04 + 4<32>:word32] + 0x38<32>:word32]
	branch eax_10 == 0<32> l007036CE
l007036C2:
	word32 eax_14 = Mem0[eax_10:word32]
	branch eax_14 == 0<32> l007036CE
l007036CE:
	word32 ecx_108
	fn006E15D0(Mem0[0x00A16B7C<p32>:word32], 0x8D70D4<32>, out ecx_108, out edx_31)
l007036C8:
	word32 edx_40
	word32 eax_41
	word32 ecx_42
	call eax_14 (retsize: 0;)
		uses: ecx:ecx_42,Stack +0004:dwArg04
		defs: eax:eax_41,ecx:ecx_42,edx:edx_40
	edxOut = edx_40
	return eax_41
l00703698:
	branch fn006E0FC0() != 0<32> l007036E6
l007036E6:
	edxOut = edx_31
	return 0xFFFFFFFF<32>
l007036A1:
	word32 edx_59
	word32 ecx_107
	fn006E0F80(Mem0[0x00A18720<p32>:word32], 0x8D6C90<32>, out ecx_107, out edx_59)
	edxOut = edx_59
	return 0xFFFFFFFF<32>
fn00703690_exit:


word32 fn007036F0(ptr32 & ecxOut, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00657140
//      fn007533F0
//      fn00753C30
// MayUse: 
// LiveOut: eax ecx edx
// Trashed: SCZO eax ecx Top
// Preserved: esp
fn007036F0_entry:
l007036F0:
	word32 ecx_15
	word32 edx_33
	word32 esi_34
	word32 edi_35
	word32 eax_14 = fn00707680(dwArg04, dwArg08, 0<32>, out ecx_15, out edx_33, out esi_34, out edi_35)
	ecxOut = ecx_15
	edxOut = <invalid>
	return eax_14
fn007036F0_exit:


word32 fn00703710(word32 dwArg04, word32 dwArg08, word32 dwArg0C, ptr32 & ecxOut, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006DC1B0
//      fn00703780
//      fn00703AF0
//      fn00707680
//      fn00707B30
//      fn00707BD0
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut: eax ecx edx
// Trashed: SCZO eax ecx edx Top
// Preserved: esi esp
fn00703710_entry:
l00703710:
	word32 eax_7 = Mem0[Mem0[dwArg04 + 4<32>:word32] + 0x40<32>:word32]
	branch eax_7 == 0<32> l00703756
l00703756:
	word32 edx_20
	word32 ecx_21
	fn006E15D0(Mem0[0x00A16B7C<p32>:word32], 0x8D7204<32>, out ecx_21, out edx_20)
	ecxOut = ecx_21
	edxOut = edx_20
	return 0<32>
l0070371E:
	word32 esp_40
	word32 eax_43
	word32 ecx_42
	word32 edx_41
	call eax_7 (retsize: 4;)
		uses: ecx:dwArg08,Stack +0004:dwArg04,Stack +0008:dwArg08,Stack +000C:dwArg0C,Stack +0018:dwArg04,Stack +001C:dwArg08,Stack +0020:dwArg0C
		defs: eax:eax_43,ecx:ecx_42,edx:edx_41,esp:esp_40
	branch eax_43 != 0<32> l00703752
l00703735:
	branch fn006E0FC0() != 0<32> l00703752
l0070373E:
	word32 edx_55 = Mem39[0x00A18720<p32>:word32]
	Mem57[esp_40 + 8<32>:word32] = 0x8D7224<32>
	Mem59[esp_40 + 4<32>:word32] = edx_55
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	fn006E0F80(stackArg4, dwArg04, out ecx_42, out edx_41)
l00703752:
	ecxOut = ecx_42
	edxOut = edx_41
	return eax_43
fn00703710_exit:


word32 fn00703780(word32 eax, word32 dwArg04, ptr32 & ecxOut, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00703800
//      fn00703870
//      fn007038E0
// MayUse:  eax:[0..31] Stack +0004:[0..31]
// LiveOut: eax ecx edx
// Trashed: SCZO eax ecx edi edx esi Top
// Preserved: esp
fn00703780_entry:
l00703780:
	word32 esi_43 = eax
	branch eax == 0<32> l007037C2
l00703787:
	word32 eax_12 = Mem6[eax + 4<32>:word32]
	branch eax_12 == 0xA16588<32> l007037CB
l00703791:
	word32 edx_174
	word32 ecx_173
	branch fn006D5670(eax_12, 0xA16588<32>, out ecx_173, out edx_174) != 0<32> l007037CB
l007037A3:
	word32 eax_33 = fn006DFD20(1<32>, out ecx, out edx)
	branch eax_33 != 0<32> l007037C6
l007037C6:
	Mem42[eax_33 + 0xC<32>:word32] = eax
	esi_43 = eax_33
l007037CB:
	word32 ecx_127
	word32 edx_133
	word32 eax_61 = fn00703710(dwArg04, esi_43, 0<32>, out ecx_127, out edx_133)
	word32 v13_67 = Mem57[esi_43:word32] + 0xFFFFFFFF<32>
	Mem68[esi_43:word32] = v13_67
	branch v13_67 != 0<32> l007037EF
l007037E3:
	word32 eax_72 = Mem68[esi_43 + 4<32>:word32]
	call Mem68[eax_72 + 0x18<32>:word32] (retsize: 4;)
		uses: eax:eax_72,ecx:ecx_78,edx:edx_79,Stack +0004:esi_54,Stack +0014:dwArg04
		defs: ecx:ecx_78,edx:edx_79
l007037EF:
	ecxOut = ecx_127
	edxOut = edx_133
	return eax_61
l007037B1:
	word32 v9_92 = Mem31[eax:word32] + 0xFFFFFFFF<32>
	Mem93[eax:word32] = v9_92
	branch v9_92 != 0<32> l007037C2
l007037B6:
	word32 eax_96 = Mem93[eax + 4<32>:word32]
	call Mem93[eax_96 + 0x18<32>:word32] (retsize: 4;)
		uses: eax:eax_96,ecx:ecx_102,edx:edx_103,Stack +0004:eax,Stack +0010:dwArg04
		defs: ecx:ecx_102,edx:edx_103
l007037C2:
	ecxOut = ecx
	edxOut = edx
	return 0<32>
fn00703780_exit:


word32 fn00703800(word32 dwArg04, word32 dwArg08, ptr32 & ecxOut, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E1970
//      fn006E19F0
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax ecx edx
// Trashed: SCZO eax ecx esi Top
// Preserved: esp
fn00703800_entry:
l00703800:
	branch dwArg04 != 0<32> l00703829
l00703829:
	branch dwArg08 == 0<32> l0070384F
l00703831:
	branch Mem6[dwArg08:byte] == 0<8> l0070384F
l0070384F:
	word32 ecx_136
	word32 edx_137
	fn006DFD20(0<32>, out ecx_136, out edx_137)
	word32 ecx_33
	word32 edx_139
	word32 eax_32 = fn00703780(eax, dwArg04, out ecx_33, out edx_139)
	ecxOut = ecx_33
	edxOut = <invalid>
	return eax_32
l00703836:
	fn006EA240()
	word32 ecx_56
	word32 edx_140
	word32 eax_55 = fn00703780(eax, dwArg04, out ecx_56, out edx_140)
	ecxOut = ecx_56
	edxOut = <invalid>
	return eax_55
l00703809:
	branch fn006E0FC0() != 0<32> l00703825
l00703812:
	word32 edx_135
	fn006E0F80(Mem6[0x00A18720<p32>:word32], 0x8D6C90<32>, out ecx, out edx_135)
l00703825:
	ecxOut = ecx
	edxOut = <invalid>
	return 0<32>
fn00703800_exit:


word32 fn00703870(word32 dwArg04, word32 dwArg08, ptr32 & ecxOut, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E3D10
//      fn006E3E50
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax ecx edx
// Trashed: SCZO eax ecx esi Top
// Preserved: esp
fn00703870_entry:
l00703870:
	branch dwArg04 != 0<32> l00703899
l00703899:
	branch dwArg08 == 0<32> l007038BF
l007038A1:
	branch Mem6[dwArg08:byte] == 0<8> l007038BF
l007038BF:
	word32 ecx_136
	word32 edx_137
	fn006DFD20(0<32>, out ecx_136, out edx_137)
	word32 ecx_33
	word32 edx_139
	word32 eax_32 = fn00703780(eax, dwArg04, out ecx_33, out edx_139)
	ecxOut = ecx_33
	edxOut = <invalid>
	return eax_32
l007038A6:
	fn006EA260()
	word32 ecx_56
	word32 edx_140
	word32 eax_55 = fn00703780(eax, dwArg04, out ecx_56, out edx_140)
	ecxOut = ecx_56
	edxOut = <invalid>
	return eax_55
l00703879:
	branch fn006E0FC0() != 0<32> l00703895
l00703882:
	word32 edx_135
	fn006E0F80(Mem6[0x00A18720<p32>:word32], 0x8D6C90<32>, out ecx, out edx_135)
l00703895:
	ecxOut = ecx
	edxOut = <invalid>
	return 0<32>
fn00703870_exit:


word32 fn007038E0(word32 dwArg04, word32 dwArg08, word32 dwArg0C, ptr32 & ecxOut, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006F7890
//      fn006F82C0
//      fn006FCC90
//      fn006FE400
//      fn007040D0
//      fn00708210
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut: eax ecx edx
// Trashed: SCZO eax ebx ecx edi edx Top
// Preserved: esi esp
fn007038E0_entry:
l007038E0:
	word32 ebx_131 = 0<32>
	branch dwArg04 == 0<32> l00703993
l007038F0:
	branch dwArg08 == 0<32> l00703993
l00703993:
	branch fn006E0FC0() != 0<32> l007039B0
l0070399C:
	fn006E0F80(Mem14[0x00A18720<p32>:word32], 0x8D6C90<32>, out ecx, out edx)
l007039B0:
	ecxOut = ecx
	edxOut = edx
	return 0<32>
l007038FC:
	word32 edx_312
	word32 edi_313
	word32 eax_59 = fn006DF760(dwArg04, dwArg08, out edx_312, out edi_313)
	branch eax_59 != 0<32> l00703922
l00703922:
	word32 edx_126
	word32 ecx_125
	branch fn006DF870(eax_59) != 0<32> l0070394B
l0070394B:
	branch dwArg0C == 0<32> l00703967
l00703953:
	branch Mem70[dwArg0C:byte] == 0<8> l00703967
l00703967:
	word32 ecx_314
	word32 edx_315
	fn006DFD20(0<32>, out ecx_314, out edx_315)
l00703957:
	fn006EA240()
l00703971:
	ebx_131 = fn00703780(eax, eax_59, out ecx_125, out edx_126)
l0070392F:
	fn006E15D0(Mem70[0x00A16B7C<p32>:word32], dwArg04, out ecx_125, out edx_126)
l0070397C:
	word32 v13_151 = Mem150[eax_59:word32] + 0xFFFFFFFF<32>
	Mem152[eax_59:word32] = v13_151
	branch v13_151 != 0<32> l0070398D
l00703981:
	word32 edx_155 = Mem152[eax_59 + 4<32>:word32]
	call Mem152[edx_155 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_165,edx:edx_155,Stack +0004:eax_59,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0018:dwArg04,Stack +001C:dwArg08,Stack +0020:dwArg0C
		defs: ecx:ecx_165,edx:edx_166
l0070398D:
	ecxOut = ecx_125
	edxOut = edx_126
	return ebx_131
l0070390D:
	word32 ecx_188
	word32 edx_189
	fn006E0F80(Mem57[0x00A178F0<p32>:word32], dwArg04, out ecx_188, out edx_189)
	ecxOut = ecx_188
	edxOut = edx_189
	return 0<32>
fn007038E0_exit:


word32 fn00703AA0(word32 eax, ptr32 & ecxOut, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00703AF0
// MayUse:  eax:[0..31]
// LiveOut: eax ecx edx
// Trashed: SCZO eax ecx edi edx esi Top
// Preserved: ebx esp
fn00703AA0_entry:
l00703AA0:
	word32 edi_10 = 0<32>
	branch Mem9[eax:word32] == 0<32> l00703ABB
l00703AAA:
	eax_17 = eax
l00703AB0:
	word32 eax_17
	eax_17 = eax_17 + 4<32>
	edi_10 = edi_10 + 1<32>
	branch Mem9[eax_17:word32] != 0<32> l00703AB0
l00703ABB:
	word32 ecx_39
	word32 edx_38
	word32 eax_37 = fn006DFD20(edi_10, out ecx_39, out edx_38)
	branch eax_37 == 0<32> l00703AE5
l00703AC8:
	branch edi_10 <= 0<32> l00703AE5
l00703ACC:
	edx_38 = eax - 4<32> + 4<32>
	word32 esi_49 = eax_37 + 0xC<32>
l00703AD2:
	ecx_39 = Mem51[edx_38 + 0<32>:word32]
	Mem55[esi_49:word32] = ecx_39
	Mem57[ecx_39:word32] = Mem55[ecx_39:word32] + 1<32>
	edx_38 = edx_38 + 4<32>
	esi_49 = esi_49 + 4<32>
	edi_10 = edi_10 - 1<32>
	branch edi_10 != 0<32> l00703AD2
l00703AE5:
	ecxOut = ecx_39
	edxOut = edx_38
	return eax_37
fn00703AA0_exit:


word32 fn00703AF0(word32 dwArg04, ptr32 & ecxOut, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006F6AF0
//      fn006F9120
//      fn006FE160
//      fn00708C10
//      fn00708DC0
//      fn00717CB0
//      fn00719F20
// MayUse:  Stack +0004:[0..31]
// LiveOut: eax ecx edx
// Trashed: SCZO eax ecx edx esi Top
// Preserved: edi esp
fn00703AF0_entry:
l00703AF0:
	branch dwArg04 != 0<32> l00703B16
l00703B16:
	word32 ecx_13
	word32 edx_14
	word32 eax_12 = fn00703AA0(fp + 8<32>, out ecx_13, out edx_14)
	branch eax_12 != 0<32> l00703B28
l00703B28:
	word32 ecx_33
	word32 edx_103
	word32 eax_32 = fn00703710(dwArg04, dwArg04, 0<32>, out ecx_33, out edx_103)
	word32 v11_38 = Mem30[eax_12:word32] + 0xFFFFFFFF<32>
	Mem39[eax_12:word32] = v11_38
	branch v11_38 != 0<32> l00703B4C
l00703B40:
	word32 edx_43 = Mem39[eax_12 + 4<32>:word32]
	call Mem39[edx_43 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_49,edx:edx_43,Stack +0004:eax_12,Stack +0008:dwArg04,Stack +0014:dwArg04
		defs: ecx:ecx_49,edx:edx_50
l00703B4C:
	ecxOut = ecx_33
	edxOut = edx_103
	return eax_32
l00703B26:
	ecxOut = ecx_13
	edxOut = edx_14
	return eax_12
l00703AF7:
	branch fn006E0FC0() != 0<32> l00703B13
l00703B00:
	fn006E0F80(Mem0[0x00A18720<p32>:word32], 0x8D6C90<32>, out ecx, out edx)
l00703B13:
	ecxOut = ecx
	edxOut = edx
	return 0<32>
fn00703AF0_exit:


word32 fn00703B60(word32 dwArg04, ptr32 & ecxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00703BF0
//      fn00703CB0
//      fn00703F10
// MayUse:  Stack +0004:[0..31]
// LiveOut: eax ecx
// Trashed: SCZO eax ecx edx esi Top
// Preserved: esp
fn00703B60_entry:
l00703B60:
	word32 eax_12 = Mem0[0x00A6CD34<p32>:word32]
	branch eax_12 != 0<32> l00703B80
l00703B69:
	word32 ecx_13
	word32 edx_177
	eax_12 = fn006ECAC0(0x8D0D60<32>, out ecx_13, out edx_177)
	Mem20[0x00A6CD34<p32>:word32] = eax_12
	branch eax_12 != 0<32> l00703B80
l00703B80:
	word32 edx_176
	word32 ecx_126
	word32 eax_35 = fn006DE330(dwArg04, eax_12, out ecx_126, out edx_176)
	branch eax_35 != 0<32> l00703BB1
l00703BB1:
	word32 eax_45 = Mem32[eax_35 + 4<32>:word32]
	branch eax_45 == 0xA16588<32> l00703BE2
l00703BBB:
	word32 edx_180
	branch fn006D5670(eax_45, 0xA16588<32>, out ecx_126, out edx_180) != 0<32> l00703BE2
l00703BE2:
	ecxOut = ecx_126
	return eax_35
l00703BCD:
	word32 v10_69 = Mem51[eax_35:word32] + 0xFFFFFFFF<32>
	Mem70[eax_35:word32] = v10_69
	branch v10_69 != 0<32> l00703BDE
l00703BD2:
	word32 edx_73 = Mem70[eax_35 + 4<32>:word32]
	call Mem70[edx_73 + 0x18<32>:word32] (retsize: 4;)
		uses: edx:edx_73,Stack +0004:eax_35,Stack +0010:dwArg04
		defs: ecx:ecx_79
l00703BDE:
	ecxOut = ecx_126
	return 0<32>
l00703B95:
	word32 edx_178
	word32 ecx_106
	branch fn006E1110(out ecx_106, out edx_178) == 0<32> l00703BAD
l00703BA8:
	word32 edx_179
	fn006E1160(out ecx_106, out edx_179)
l00703BAD:
	ecxOut = ecx_106
	return 0<32>
l00703B7F:
	ecxOut = ecx_13
	return eax_12
fn00703B60_exit:


word32 fn00703BF0(word32 dwArg04, word32 dwArg08, ptr32 & ecxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00703BF0
//      fn00703D00
//      fn00703F10
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax ecx
// Trashed: SCZO eax ebx ecx edi edx esi Top
// Preserved: ebp esp
fn00703BF0_entry:
l00703BF0:
	word32 esi_122 = 0<32>
	branch dwArg04 != dwArg08 l00703C0A
l00703C0A:
	word32 eax_18 = Mem13[dwArg08 + 4<32>:word32]
	branch eax_18 == 0xA16588<32> l00703C26
l00703C14:
	word32 ecx_294
	word32 edx_295
	branch fn006D5670(eax_18, 0xA16588<32>, out ecx_294, out edx_295) == 0<32> l00703C40
l00703C26:
	word32 edx_38 = Mem37[dwArg08 + 8<32>:word32]
	word32 eax_39 = 0<32>
	branch edx_38 <= 0<32> l00703C40
l00703C2F:
	ecx = dwArg08 + 0xC<32>
l00703C32:
	branch dwArg04 == Mem37[ecx:word32] l00703C01
l00703C36:
	eax_39 = eax_39 + 1<32>
	ecx = ecx + 4<32>
	branch eax_39 < edx_38 l00703C32
l00703C40:
	word32 ecx_108
	word32 eax_76 = fn00703B60(dwArg04, out ecx_108)
	branch eax_76 != 0<32> l00703C5E
l00703C5E:
	word32 ebx_86 = Mem66[eax_76 + 8<32>:word32]
	word32 edi_102 = 0<32>
	branch ebx_86 <= 0<32> l00703C96
l00703C67:
	word32 esi_117 = eax_76 + 0xC<32>
l00703C70:
	branch fn00703BF0(Mem93[esi_117:word32], dwArg04, out ecx_108) != 0<32> l00703C92
l00703C88:
	edi_102 = edi_102 + 1<32>
	esi_117 = esi_117 + 4<32>
	branch edi_102 < ebx_86 l00703C70
l00703C92:
	esi_122 = dwArg04
l00703C96:
	word32 v15_126 = Mem125[eax_76:word32] + 0xFFFFFFFF<32>
	Mem127[eax_76:word32] = v15_126
	branch v15_126 != 0<32> l00703CA8
l00703C9C:
	word32 edx_130 = Mem127[eax_76 + 4<32>:word32]
	call Mem127[edx_130 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_145,edx:edx_130,Stack +0004:eax_76,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +001C:dwArg04,Stack +0020:dwArg08
		defs: ecx:ecx_145
l00703CA8:
	ecxOut = ecx_108
	return esi_122
l00703C50:
	word32 eax_171 = 0<32> - (fn006E0FC0() == 0<32>)
	ecxOut = ecx_108
	return eax_171
l00703C01:
	ecxOut = ecx
	return 1<32>
fn00703BF0_exit:


word32 fn00703CB0(ptr32 & ecxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00703D00
//      fn00703F10
// MayUse: 
// LiveOut: eax ecx
// Trashed: SCZO eax ecx edx Top
// Preserved: esp
fn00703CB0_entry:
l00703CB0:
	word32 ecx_27
	word32 eax_8 = fn00703B60(eax, out ecx_27)
	branch eax_8 != 0<32> l00703CDD
l00703CDD:
	word32 v10_17 = Mem6[eax_8:word32] + 0xFFFFFFFF<32>
	Mem18[eax_8:word32] = v10_17
	branch v10_17 != 0<32> l00703CEE
l00703CE2:
	word32 ecx_21 = Mem18[eax_8 + 4<32>:word32]
	call Mem18[ecx_21 + 0x18<32>:word32] (retsize: 4;)
		uses: eax:eax_8,ecx:ecx_21,Stack +0004:eax_8
		defs: ecx:ecx_27
l00703CEE:
	ecxOut = ecx_27
	return 0xFFFFFFFF<32>
l00703CBD:
	branch fn006E0FC0() != 0<32> l00703CDA
l00703CC6:
	word32 edx_92
	fn006E0F80(Mem6[0x00A16B7C<p32>:word32], dwArg04, out ecx_27, out edx_92)
l00703CDA:
	ecxOut = ecx_27
	return 0<32>
fn00703CB0_exit:


word32 fn00703D00(word32 dwArg04, word32 dwArg08, word32 dwArg0C)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00703D00
//      fn00704700
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn00703D00_entry:
l00703D00:
	word32 ebx_10 = 0<32>
	branch Mem9[0x00A6CD38<p32>:word32] != 0<32> l00703D28
l00703D0C:
	word32 edx_648
	word32 ecx_647
	word32 eax_17 = fn006ECAC0(0x8B299C<32>, out ecx_647, out edx_648)
	Mem24[0x00A6CD38<p32>:word32] = eax_17
	branch eax_17 != 0<32> l00703D28
l00703D28:
	word32 eax_37 = Mem35[dwArg08 + 4<32>:word32]
	branch eax_37 != 0xA1E968<32> l00703D5B
l00703D3D:
	branch Mem42[dwArg04 + 4<32>:word32] != 0xA1EB98<32> l00703D5B
l00703D5B:
	branch eax_37 == 0xA15380<32> l00703E62
l00703D66:
	word32 ecx_650
	word32 edx_651
	branch fn006D5670(eax_37, 0xA15380<32>, out ecx_650, out edx_651) != 0<32> l00703E62
l00703E62:
	word32 eax_69 = Mem67[dwArg04 + 4<32>:word32]
	branch eax_69 == dwArg08 l00703E9C
l00703E69:
	word32 ecx_660
	word32 edx_661
	branch fn006D5670(eax_69, dwArg08, out ecx_660, out edx_661) != 0<32> l00703E9C
l00703E9C:
	return 1<32>
l00703E77:
	ebx_10 = 0<32>
	word32 edx_662
	word32 ecx_118
	word32 eax_119 = fn006DE330(dwArg04, Mem78[0x00A6CD38<p32>:word32], out ecx_118, out edx_662)
	branch eax_119 != 0<32> l00703EA9
l00703EA9:
	branch eax_119 == Mem108[dwArg04 + 4<32>:word32] l00703ED6
l00703EAE:
	word32 eax_130 = Mem108[eax_119 + 4<32>:word32]
	branch eax_130 == 0xA15380<32> l00703ECA
l00703EB8:
	word32 edx_668
	branch fn006D5670(eax_130, 0xA15380<32>, out ecx_118, out edx_668) == 0<32> l00703ED6
l00703ECA:
	word32 edx_667
	ebx_10 = fn006D5670(eax_119, dwArg08, out ecx_118, out edx_667)
l00703ED6:
	word32 v15_167 = Mem166[eax_119:word32] + 0xFFFFFFFF<32>
	Mem168[eax_119:word32] = v15_167
	branch v15_167 != 0<32> l00703EE7
l00703EDB:
	word32 edx_171 = Mem168[eax_119 + 4<32>:word32]
	call Mem168[edx_171 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_176,edx:edx_171,Stack +0004:eax_119,Stack +0020:dwArg04,Stack +0024:dwArg08
l00703E8F:
	word32 ecx_663
	word32 edx_664
	fn006E1160(out ecx_663, out edx_664)
	return 0<32>
l00703D7C:
	word32 eax_209 = Mem53[dwArg08 + 4<32>:word32]
	branch eax_209 == 0xA16588<32> l00703DF8
l00703D86:
	word32 edx_653
	word32 ecx_652
	branch fn006D5670(eax_209, 0xA16588<32>, out ecx_652, out edx_653) != 0<32> l00703DF8
l00703DF8:
	branch dwArg0C != 0<32> l00703E1C
l00703E1C:
	word32 ebp_234 = Mem228[dwArg08 + 8<32>:word32]
	word32 edi_235 = 0<32>
	branch ebp_234 <= 0<32> l00703EE7
l00703E29:
	word32 esi_240 = dwArg08 + 0xC<32>
l00703E33:
	word32 eax_260 = fn00703D00(dwArg04, Mem243[esi_240:word32], dwArg0C + 0xFFFFFFFF<32>)
	ebx_10 = eax_260
	branch eax_260 != 0<32> l00703EE7
l00703E52:
	edi_235 = edi_235 + 1<32>
	esi_240 = esi_240 + 4<32>
	branch edi_235 < ebp_234 l00703E33
l00703E5C:
	return eax_260
l00703E00:
	word32 ecx_665
	word32 edx_666
	fn006E0F80(Mem228[0x00A175E0<p32>:word32], 0x8D727C<32>, out ecx_665, out edx_666)
l00703D98:
	word32 ecx_654
	branch fn00703CB0(out ecx_654) == 0<32> l00703E13
l00703E13:
	return 0xFFFFFFFF<32>
l00703DAB:
	word32 edx_656
	word32 ecx_655
	word32 eax_339 = fn006DE330(dwArg04, Mem304[0x00A6CD38<p32>:word32], out ecx_655, out edx_656)
	branch eax_339 != 0<32> l00703DCF
l00703DCF:
	word32 ecx_657
	word32 eax_354 = fn00703BF0(eax_339, dwArg08, out ecx_657)
	word32 v16_359 = Mem351[eax_339:word32] + 0xFFFFFFFF<32>
	Mem360[eax_339:word32] = v16_359
	ebx_10 = eax_354
	branch v16_359 != 0<32> l00703EE7
l00703EE7:
	return ebx_10
l00703DE4:
	word32 ecx_378 = Mem360[eax_339 + 4<32>:word32]
	word32 edx_385
	call Mem360[ecx_378 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_378,edx:edx_385,Stack +0004:eax_339,Stack +0020:dwArg04,Stack +0024:dwArg08,Stack +0028:dwArg0C
		defs: edx:edx_385
	return eax_354
l00703DC0:
	word32 edx_659
	word32 ecx_658
	fn006E1160(out ecx_658, out edx_659)
	return 0<32>
l00703D46:
	word32 ecx_649
	return fn0070C700(Mem42[dwArg04 + 8<32>:word32], dwArg08, out ecx_649)
l00703D22:
	return 0xFFFFFFFF<32>
fn00703D00_exit:


word32 fn00703F10(word32 ebx, word32 ebp, word32 dwArg04, word32 dwArg08, ptr32 & ecxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00703F10
//      fn00704020
// MayUse:  ebp:[0..31] ebx:[0..31] Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax ecx
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn00703F10_entry:
l00703F10:
	word32 eax_112
	branch Mem10[dwArg04 + 4<32>:word32] != 0xA1E968<32> l00703F45
l00703F24:
	branch Mem10[dwArg08 + 4<32>:word32] != 0xA1E968<32> l00703F45
l00703F45:
	word32 eax_24 = fn00703B60(dwArg04, out ecx)
	word32 esp_29 = fp - 8<32>
	branch eax_24 != 0<32> l00703F74
l00703F74:
	word32 v11_33 = Mem20[eax_24:word32] + 0xFFFFFFFF<32>
	Mem34[eax_24:word32] = v11_33
	branch v11_33 != 0<32> l00703F85
l00703F79:
	word32 ecx_37 = Mem34[eax_24 + 4<32>:word32]
	word32 esp_41
	word32 edx_44
	call Mem34[ecx_37 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_37,edx:edx_44,Stack +0004:eax_24,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0014:dwArg04,Stack +0018:dwArg08
		defs: ecx:ecx_43,edx:edx_44,esp:esp_41
	esp_29 = esp_41 + 4<32>
l00703F85:
	word32 eax_51 = Mem50[dwArg08 + 4<32>:word32]
	branch eax_51 == 0xA16588<32> l00703FC1
l00703F8F:
	word32 esp_55 = esp_29 - 4<i32>
	Mem56[esp_55:word32] = 0xA16588<32>
	Mem58[esp_55 - 4<i32>:word32] = eax_51
	word32 edx_367
	branch fn006D5670(Mem58[esp_55 - 4<i32>:word32], Mem58[esp_55:word32], out ecx, out edx_367) != 0<32> l00703FC1
l00703FC1:
	word32 eax_72 = Mem71[esp_29 + 0x14<32>:word32]
	word32 esp_75 = esp_29 - 4<i32>
	Mem80[esp_75:word32] = ebx
	word32 ebx_82 = Mem80[dwArg08 + 8<32>:word32]
	branch eax_72 != 0<32> l00703FE7
l00703FE7:
	Mem92[esp_75 - 4<i32>:word32] = ebp
	word32 edi_108 = 0<32>
	branch ebx_82 <= 0<32> l00704013
l00703FEE:
	word32 esi_122 = dwArg08 + 0xC<32>
l00703FF4:
	word32 esp_99 = esp_29 - 8<i32>
	word32 ecx_98 = Mem97[esi_122:word32]
	word32 edx_100 = Mem97[esp_99 + 0x14<32>:word32]
	Mem103[esp_99 - 4<i32>:word32] = eax_72 - 1<32>
	Mem105[esp_99 - 8<i32>:word32] = ecx_98
	Mem107[esp_99 - 12<i32>:word32] = edx_100
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	eax_112 = fn00703F10(ebx_82, eax_72 - 1<32>, stackArg4, dwArg04, out ecx)
	branch eax_112 != 0<32> l00704015
l00704009:
	edi_108 = edi_108 + 1<32>
	esi_122 = esi_122 + 4<32>
	branch edi_108 < ebx_82 l00703FF4
l00704013:
	eax_112 = 0<32>
l00704015:
l00703FCD:
	word32 eax_136 = Mem80[0x00A175E0<p32>:word32]
	Mem138[esp_75 - 4<i32>:word32] = 0x8D727C<32>
	Mem140[esp_75 - 8<i32>:word32] = eax_136
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_147
	word32 edx_370
	fn006E0F80(stackArg4, dwArg04, out ecx_147, out edx_370)
	ecxOut = ecx_147
	return 0xFFFFFFFF<32>
l00703FA1:
	Mem162[esp_55:word32] = 0x8D72E8<32>
	branch fn00703CB0(out ecx) == 0<32> l00703F6E
l00703FB4:
	Mem175[esp_55:word32] = dwArg08
	Mem177[esp_55 - 4<i32>:word32] = dwArg04
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_180
	word32 eax_179 = fn00703BF0(stackArg4, dwArg04, out ecx_180)
	ecxOut = ecx_180
	return eax_179
l00703F52:
	branch fn006E0FC0() != 0<32> l00703F6E
l00703F5B:
	word32 edx_366
	fn006E0F80(Mem20[0x00A16B7C<p32>:word32], dwArg04, out ecx, out edx_366)
l00703F6E:
	ecxOut = ecx
	return 0xFFFFFFFF<32>
l00703F29:
	eax_112 = CONVERT(CONVERT(dwArg04 == dwArg08, bool, int8), int8, uint32) (alias)
	branch eax_112 != 0<32> l00704017
l00704017:
	ecxOut = ecx
	return eax_112
l00703F38:
	word32 ecx_238
	word32 eax_237 = fn0070C700(dwArg04, dwArg08, out ecx_238)
	ecxOut = ecx_238
	return eax_237
fn00703F10_exit:


word32 fn00704020(ptr32 & ecxOut, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E0FD0
//      fn006E1BD0
// MayUse: 
// LiveOut: eax ecx edx
// Trashed: SCZO eax ecx Top
// Preserved: esp
fn00704020_entry:
l00704020:
	fn00706DA0()
	word32 ecx_15
	word32 eax_16 = fn00703F10(ebx, ebp, dwArg04, dwArg08, out ecx_15)
	ecxOut = ecx_15
	edxOut = <invalid>
	return eax_16
fn00704020_exit:


word32 fn00704040(word32 dwArg04, ptr32 & ecxOut, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006FCC90
//      fn00704BA0
//      fn007072E0
//      fn00735890
//      fn007389B0
// MayUse:  Stack +0004:[0..31]
// LiveOut: eax ecx edx
// Trashed: SCZO ecx edx Top
// Preserved: esi esp
fn00704040_entry:
l00704040:
	word32 ecx_6 = Mem0[dwArg04 + 4<32>:word32]
	word32 esp_13
	word32 eax_14
	word32 ecx_15
	word32 edx_16
	call Mem0[ecx_6 + 0x70<32>:word32] (retsize: 4;)
		uses: eax:dwArg04,ecx:ecx_6,Stack +0004:dwArg04,Stack +0010:dwArg04
		defs: eax:eax_14,ecx:ecx_15,edx:edx_16,esp:esp_13
	branch eax_14 != 0<32> l00704079
l00704057:
	branch fn006E0FC0() == 0<32> l00704077
l00704060:
	Mem30[esp_13:word32] = Mem12[0x00A16D00<p32>:word32]
	branch fn006E1110(out ecx_15, out edx_16) == 0<32> l00704077
l00704072:
	fn006E1160(out ecx_15, out edx_16)
l00704077:
l00704079:
	ecxOut = ecx_15
	edxOut = edx_16
	return eax_14
fn00704040_exit:


word32 fn00704080(word32 dwArg04, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00726570
//      fn00735890
//      fn00753C30
// MayUse:  Stack +0004:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ecx edx Top
// Preserved: esp
fn00704080_entry:
l00704080:
	branch dwArg04 != 0<32> l007040A8
l007040A8:
	word32 eax_10 = Mem0[Mem0[dwArg04 + 4<32>:word32] + 0x34<32>:word32]
	branch eax_10 == 0<32> l007040BE
l007040B2:
	word32 eax_14 = Mem0[eax_10:word32]
	branch eax_14 == 0<32> l007040BE
l007040BE:
l007040C2_thunk_fn00703690:
	word32 edx_25
	word32 eax_24 = fn00703690(dwArg04, out edx_25)
	edxOut = edx_25
	return eax_24
l007040B8:
	word32 eax_31
	word32 edx_32
	call eax_14 (retsize: 0;)
		uses: edx:edx_32,Stack +0004:dwArg04
		defs: eax:eax_31,edx:edx_32
	edxOut = edx_32
	return eax_31
l00704088:
	branch fn006E0FC0() != 0<32> l007040A4
l00704091:
	word32 ecx_93
	fn006E0F80(Mem0[0x00A18720<p32>:word32], 0x8D6C90<32>, out ecx_93, out edx)
l007040A4:
	edxOut = edx
	return 0xFFFFFFFF<32>
fn00704080_exit:


word32 fn007040D0(word32 edi, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006F3930
//      fn00704BA0
// MayUse:  edi:[0..31] Stack +0004:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx edi edx esi Top
// Preserved: esp
fn007040D0_entry:
l007040D0:
	word32 eax_150
	word32 esp_41 = fp - 0xC<32>
	branch dwArg04 != 0<32> l007040FA
l007040FA:
	word32 esp_26
	word32 eax_13 = Mem7[Mem7[dwArg04 + 4<32>:word32] + 0x34<32>:word32]
	branch eax_13 == 0<32> l0070410F
l00704104:
	word32 eax_17 = Mem7[eax_13:word32]
	branch eax_17 == 0<32> l0070410F
l0070410F:
	word32 edx_373
	eax_150 = fn00703690(dwArg04, out edx_373)
	esp_26 = fp - 0x10<32>
l0070410A:
	call eax_17 (retsize: 4;)
		uses: Stack +0004:dwArg04,Stack +0018:dwArg04
		defs: eax:eax_35,esp:esp_34
l00704115:
	esp_41 = esp_26 + 4<32>
	branch eax_150 != 0xFFFFFFFF<32> l00704217
l007040DC:
	branch fn006E0FC0() != 0<32> l00704121
l007040E5:
	word32 ecx_371
	word32 edx_372
	fn006E0F80(Mem7[0x00A18720<p32>:word32], 0x8D6C90<32>, out ecx_371, out edx_372)
	esp_41 = fp - 0xC<32>
l00704121:
	word32 esp_66 = esp_41 - 4<i32>
	Mem67[esp_66:word32] = Mem62[0x00A16B7C<p32>:word32]
	word32 ecx_369
	word32 edx_370
	branch fn006E1110(out ecx_369, out edx_370) != 0<32> l0070414A
l00704134:
	Mem84[esp_66:word32] = Mem67[0x00A178F0<p32>:word32]
	word32 ecx_378
	word32 edx_379
	branch fn006E1110(out ecx_378, out edx_379) == 0<32> l00704214
l0070414A:
	word32 esp_97 = esp_41 - 4<i32>
	Mem98[esp_97:word32] = esp_41 + 0x10<32>
	Mem101[esp_97 - 4<i32>:word32] = esp_97 + 8<32>
	Mem104[esp_97 - 8<i32>:word32] = esp_97 + 0xC<32>
	fn006E1130(Mem104[esp_97 - 8<i32>:word32], Mem104[esp_97 - 4<i32>:word32], Mem104[esp_97:word32])
	Mem113[esp_97 - 12<i32>:word32] = 0<32>
	Mem115[esp_97 - 16<i32>:word32] = 0x8D1E78<32>
	Mem118[esp_97 - 20<i32>:word32] = dwArg04
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 stackArg12 = <invalid>
	word32 ecx_376
	word32 edx_377
	word32 eax_121 = fn007038E0(stackArg4, dwArg04, stackArg12, out ecx_376, out edx_377)
	branch eax_121 == 0<32> l007041FD
l007041FD:
	word32 ecx_132 = Mem118[esp_97 + 8<32>:word32]
	word32 edx_133 = Mem118[esp_97 + 0xC<32>:word32]
	Mem135[esp_97:word32] = Mem118[esp_97 + 0x14<32>:word32]
	Mem137[esp_97 - 4<32>:word32] = ecx_132
	Mem139[esp_97 - 8<32>:word32] = edx_133
	word32 edx_381
	word32 ecx_380
	fn006E0E00(Mem139[esp_97:word32], out ecx_380, out edx_381)
l00704214:
	eax_150 = 0xFFFFFFFF<32>
l00704217:
	return eax_150
l00704178:
	Mem167[esp_97:word32] = edi
	Mem169[esp_97 - 4<32>:word32] = eax_121
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_383
	word32 edx_384
	word32 esi_385
	word32 edi_386
	word32 eax_171 = fn007051A0(edi, stackArg4, out ecx_383, out edx_384, out esi_385, out edi_386)
	word32 v12_177 = Mem169[eax_121:word32] + 0xFFFFFFFF<32>
	Mem178[eax_121:word32] = v12_177
	word32 esp_176 = esp_97
	branch v12_177 != 0<32> l00704195
l00704189:
	word32 ecx_182 = Mem178[eax_121 + 4<32>:word32]
	word32 edx_183 = Mem178[ecx_182 + 0x18<32>:word32]
	Mem185[esp_97 - 4<32>:word32] = eax_121
	word32 esp_186
	call edx_183 (retsize: 4;)
		uses: ecx:ecx_182,Stack +0008:dwArg04
		defs: esp:esp_186
	esp_176 = esp_186 + 4<32>
l00704195:
	word32 eax_196 = Mem195[esp_176 + 0xC<32>:word32]
	branch eax_196 == 0<32> l007041B5
l0070419D:
	Mem201[eax_196:word32] = Mem195[eax_196:word32] + 0xFFFFFFFF<32>
	word32 eax_202 = Mem201[esp_176 + 0xC<32>:word32]
	branch Mem201[eax_202:word32] != 0<32> l007041B5
l007041A9:
	word32 ecx_205 = Mem201[eax_202 + 4<32>:word32]
	word32 edx_206 = Mem201[ecx_205 + 0x18<32>:word32]
	Mem208[esp_176 - 4<i32>:word32] = eax_202
	word32 esp_212
	call edx_206 (retsize: 4;)
		uses: ecx:ecx_205,Stack +0008:dwArg04
		defs: esp:esp_212
	esp_176 = esp_212 + 4<32>
l007041B5:
	word32 eax_222 = Mem221[esp_176 + 8<32>:word32]
	branch eax_222 == 0<32> l007041D5
l007041BD:
	Mem227[eax_222:word32] = Mem221[eax_222:word32] + 0xFFFFFFFF<32>
	word32 eax_228 = Mem227[esp_176 + 8<32>:word32]
	branch Mem227[eax_228:word32] != 0<32> l007041D5
l007041C9:
	word32 ecx_231 = Mem227[eax_228 + 4<32>:word32]
	word32 edx_232 = Mem227[ecx_231 + 0x18<32>:word32]
	Mem234[esp_176 - 4<i32>:word32] = eax_228
	word32 esp_238
	call edx_232 (retsize: 4;)
		uses: ecx:ecx_231,Stack +0008:dwArg04
		defs: esp:esp_238
	esp_176 = esp_238 + 4<32>
l007041D5:
	word32 eax_248 = Mem247[esp_176 + 0x14<32>:word32]
	branch eax_248 == 0<32> l007041F5
l007041DD:
	Mem253[eax_248:word32] = Mem247[eax_248:word32] + 0xFFFFFFFF<32>
	word32 eax_254 = Mem253[esp_176 + 0x14<32>:word32]
	branch Mem253[eax_254:word32] != 0<32> l007041F5
l007041E9:
	word32 ecx_257 = Mem253[eax_254 + 4<32>:word32]
	word32 edx_258 = Mem253[ecx_257 + 0x18<32>:word32]
	Mem260[esp_176 - 4<i32>:word32] = eax_254
	call edx_258 (retsize: 4;)
		uses: ecx:ecx_257,Stack +0008:dwArg04
l007041F5:
	return eax_171
fn007040D0_exit:


word32 fn00704220(word32 dwArg04, word32 dwArg08, ptr32 & ecxOut, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006F9120
//      fn006FCC90
//      fn00707E00
//      fn00708DC0
//      fn00726570
//      fn0073B310
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax ecx edx
// Trashed: SCZO eax ebx ecx edi edx esi Top
// Preserved: esp
fn00704220_entry:
l00704220:
	branch dwArg04 == 0<32> l007042DB
l0070422D:
	branch dwArg08 == 0<32> l007042DB
l007042DB:
	branch fn006E0FC0() != 0<32> l007042F8
l007042E4:
	fn006E0F80(Mem6[0x00A18720<p32>:word32], 0x8D6C90<32>, out ecx, out edx)
l007042F8:
	ecxOut = ecx
	edxOut = edx
	return 0<32>
l00704239:
	word32 esi_46 = Mem45[dwArg04 + 4<32>:word32]
	word32 ecx_47 = Mem45[esi_46 + 0x38<32>:word32]
	branch ecx_47 == 0<32> l00704255
l00704244:
	word32 ecx_51 = Mem45[ecx_47 + 4<32>:word32]
	branch ecx_51 == 0<32> l00704255
l00704255:
	word32 edx_103
	word32 ecx_102
	word32 edi_61 = Mem59[esi_46 + 0x34<32>:word32]
	branch edi_61 == 0<32> l007042BE
l0070425D:
	word32 edx_66 = Mem59[dwArg08 + 4<32>:word32]
	word32 ecx_67 = Mem59[edx_66 + 0x30<32>:word32]
	branch ecx_67 == 0<32> l007042A7
l00704267:
	branch (Mem59[edx_66 + 0x54<32>:word32] & 0x20000<32>) == 0<32> l007042A7
l00704270:
	branch Mem59[ecx_67 + 0x98<32>:word32] == 0<32> l007042A7
l007042A7:
	branch Mem59[edi_61 + 0xC<32>:word32] == 0<32> l007042BE
l007042BE:
	fn006E15D0(Mem59[0x00A16B7C<p32>:word32], 0x8D7344<32>, out ecx_102, out edx_103)
l007042AD:
	word32 ecx_112
	word32 edx_113
	word32 eax_111 = fn00701800(out ecx_112, out edx_113)
	ecxOut = ecx_112
	edxOut = edx_113
	return eax_111
l00704279:
	branch fn00702C30(dwArg08, Mem59[0x00A17CA4<p32>:word32], out ecx_102, out edx_103) != 0xFFFFFFFF<32> l00704299
l00704290:
	branch fn006E0FC0() != 0<32> l007042D5
l007042D5:
	ecxOut = ecx_102
	edxOut = edx_103
	return 0<32>
l00704299:
	word32 ecx_165
	word32 edx_166
	word32 eax_164 = fn00703180(dwArg04, dwArg04, out ecx_165, out edx_166)
	ecxOut = ecx_165
	edxOut = edx_166
	return eax_164
l0070424B:
	word32 eax_182
	word32 ecx_183
	word32 edx_184
	call ecx_51 (retsize: 4;)
		uses: ecx:ecx_183,edx:edx_184,Stack +0004:dwArg04,Stack +0008:dwArg08,Stack +0018:dwArg04,Stack +001C:dwArg08
		defs: eax:eax_182,ecx:ecx_183,edx:edx_184
	ecxOut = ecx_183
	edxOut = edx_184
	return eax_182
fn00704220_exit:


word32 fn00704300(word32 dwArg04, word32 dwArg08, word32 dwArg0C, ptr32 & ecxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00707F70
//      fn00708210
//      fn00708DC0
//      fn0073B2B0
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut: eax ecx
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn00704300_entry:
l00704300:
	branch dwArg04 == 0<32> l007043D2
l0070430E:
	branch dwArg08 == 0<32> l007043D2
l0070431A:
	branch dwArg0C == 0<32> l007043D2
l007043D2:
	branch fn006E0FC0() != 0<32> l007043EF
l007043DB:
	word32 edx_339
	fn006E0F80(Mem12[0x00A18720<p32>:word32], 0x8D6C90<32>, out ecx, out edx_339)
l007043EF:
	ecxOut = ecx
	return 0xFFFFFFFF<32>
l00704326:
	word32 esi_57 = Mem56[dwArg04 + 4<32>:word32]
	word32 ecx_58 = Mem56[esi_57 + 0x38<32>:word32]
	branch ecx_58 == 0<32> l00704344
l00704331:
	word32 ecx_62 = Mem56[ecx_58 + 8<32>:word32]
	branch ecx_62 == 0<32> l00704344
l00704344:
	word32 edi_72 = Mem70[esi_57 + 0x34<32>:word32]
	branch edi_72 == 0<32> l007043B3
l0070434C:
	word32 ecx_136
	word32 edx_77 = Mem70[dwArg08 + 4<32>:word32]
	word32 ecx_78 = Mem70[edx_77 + 0x30<32>:word32]
	branch ecx_78 == 0<32> l00704398
l00704356:
	branch (Mem70[edx_77 + 0x54<32>:word32] & 0x20000<32>) == 0<32> l00704398
l0070435F:
	branch Mem70[ecx_78 + 0x98<32>:word32] == 0<32> l00704398
l00704398:
	branch Mem70[edi_72 + 0x14<32>:word32] == 0<32> l007043B3
l007043B3:
	word32 ecx_116
	word32 edx_340
	fn006E15D0(Mem70[0x00A16B7C<p32>:word32], 0x8D713C<32>, out ecx_116, out edx_340)
	ecxOut = ecx_116
	return 0xFFFFFFFF<32>
l0070439E:
	word32 edx_342
	fn00701800(out ecx_136, out edx_342)
l00704368:
	word32 edx_341
	branch fn00702C30(dwArg08, Mem70[0x00A17CA4<p32>:word32], out ecx_136, out edx_341) != 0xFFFFFFFF<32> l00704388
l0070437F:
	branch fn006E0FC0() != 0<32> l007043AB
l007043AB:
	ecxOut = ecx_136
	return 0xFFFFFFFF<32>
l00704388:
	word32 ecx_189
	word32 eax_188 = fn00703300(dwArg04, dwArg04, dwArg08, out ecx_189)
	ecxOut = ecx_189
	return eax_188
l00704338:
	word32 eax_210
	word32 ecx_211
	word32 edx_212
	call ecx_62 (retsize: 4;)
		uses: ecx:ecx_211,edx:edx_212,Stack +0004:dwArg04,Stack +0008:dwArg08,Stack +000C:dwArg0C,Stack +0020:dwArg04,Stack +0024:dwArg08,Stack +0028:dwArg0C
		defs: eax:eax_210,ecx:ecx_211,edx:edx_212
	ecxOut = ecx_211
	return eax_210
fn00704300_exit:


word32 fn00704400(word32 dwArg04, word32 dwArg08, ptr32 & ecxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00707F70
//      fn00708DC0
//      fn0073B2B0
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax ecx
// Trashed: SCZO eax ebx ecx edi edx esi Top
// Preserved: esp
fn00704400_entry:
l00704400:
	branch dwArg04 == 0<32> l007044C1
l0070440D:
	branch dwArg08 == 0<32> l007044C1
l007044C1:
	branch fn006E0FC0() != 0<32> l007044DE
l007044CA:
	word32 edx_299
	fn006E0F80(Mem6[0x00A18720<p32>:word32], 0x8D6C90<32>, out ecx, out edx_299)
l007044DE:
	ecxOut = ecx
	return 0xFFFFFFFF<32>
l00704419:
	word32 esi_47 = Mem46[dwArg04 + 4<32>:word32]
	word32 ecx_48 = Mem46[esi_47 + 0x38<32>:word32]
	branch ecx_48 == 0<32> l00704437
l00704424:
	word32 ecx_52 = Mem46[ecx_48 + 8<32>:word32]
	branch ecx_52 == 0<32> l00704437
l00704437:
	word32 edi_62 = Mem60[esi_47 + 0x34<32>:word32]
	branch edi_62 == 0<32> l007044A3
l0070443F:
	word32 ecx_121
	word32 edx_67 = Mem60[dwArg08 + 4<32>:word32]
	word32 ecx_68 = Mem60[edx_67 + 0x30<32>:word32]
	branch ecx_68 == 0<32> l00704489
l00704449:
	branch (Mem60[edx_67 + 0x54<32>:word32] & 0x20000<32>) == 0<32> l00704489
l00704452:
	branch Mem60[ecx_68 + 0x98<32>:word32] == 0<32> l00704489
l00704489:
	branch Mem60[edi_62 + 0x14<32>:word32] == 0<32> l007044A3
l007044A3:
	word32 ecx_103
	word32 edx_300
	fn006E15D0(Mem60[0x00A16B7C<p32>:word32], 0x8D7398<32>, out ecx_103, out edx_300)
	ecxOut = ecx_103
	return 0xFFFFFFFF<32>
l0070448F:
	word32 edx_303
	fn00701800(out ecx_121, out edx_303)
l0070445B:
	word32 edx_301
	branch fn00702C30(dwArg08, Mem60[0x00A17CA4<p32>:word32], out ecx_121, out edx_301) != 0xFFFFFFFF<32> l0070447B
l00704472:
	branch fn006E0FC0() != 0<32> l0070449C
l0070449C:
	ecxOut = ecx_121
	return 0xFFFFFFFF<32>
l0070447B:
	word32 ecx_169
	word32 edx_302
	word32 eax_168 = fn00703390(dwArg04, dwArg04, out ecx_169, out edx_302)
	ecxOut = ecx_169
	return eax_168
l0070442B:
	word32 eax_188
	word32 ecx_189
	word32 edx_190
	call ecx_52 (retsize: 4;)
		uses: ecx:ecx_189,edx:edx_190,Stack +0004:dwArg04,Stack +0008:dwArg08,Stack +000C:0<32>,Stack +001C:dwArg04,Stack +0020:dwArg08
		defs: eax:eax_188,ecx:ecx_189,edx:edx_190
	ecxOut = ecx_189
	return eax_188
fn00704400_exit:


word32 fn007044F0(word32 edx, word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00704560
//      fn00704610
// MayUse:  edx:[0..31] Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx edx Top
// Preserved: esi esp
fn007044F0_entry:
l007044F0:
	word32 ecx_6 = Mem0[edx + 4<32>:word32]
	word32 eax_7 = Mem0[ecx_6 + 0x30<32>:word32]
	branch eax_7 == 0<32> l0070453F
l007044FA:
	branch (Mem0[ecx_6 + 0x54<32>:word32] & 0x20000<32>) == 0<32> l0070453F
l00704503:
	branch Mem0[eax_7 + 0x98<32>:word32] == 0<32> l0070453F
l0070453F:
	word32 edx_126
	word32 ecx_125
	fn006E15D0(Mem0[0x00A16B7C<p32>:word32], 0x8D73C8<32>, out ecx_125, out edx_126)
	return 0<32>
l0070450C:
	word32 edx_48
	word32 ecx_127
	word32 eax_49 = fn00702C30(edx, Mem0[0x00A18598<p32>:word32], out ecx_127, out edx_48)
	branch eax_49 != 0xFFFFFFFF<32> l00704530
l00704523:
	branch fn006E0FC0() == 0<32> l00704530
l00704530:
	word32 eax_73
	call dwArg04 (retsize: 4;)
		uses: ecx:dwArg08,edx:edx_48,Stack +0004:dwArg08,Stack +0008:eax_49,Stack +0014:dwArg04,Stack +0018:dwArg08
		defs: eax:eax_73
	return eax_73
l0070452C:
	return 0<32>
fn007044F0_exit:


word32 fn00704560(word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00708DC0
//      fn00726570
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn00704560_entry:
l00704560:
	word32 eax_111 = fn00701B50(dwArg04, dwArg08, 8<32>)
	word32 esp_31 = fp - 0x10<32>
	branch eax_111 != 0xA16480<32> l007045FD
l0070457F:
	word32 ebx_36 = Mem23[Mem23[dwArg04 + 4<32>:word32] + 0x34<32>:word32]
	word32 ebp_37 = Mem23[Mem23[dwArg08 + 4<32>:word32] + 0x34<32>:word32]
	word32 v12_38 = Mem23[eax_111:word32] + 0xFFFFFFFF<32>
	Mem39[eax_111:word32] = v12_38
	branch v12_38 != 0<32> l0070459C
l00704590:
	word32 ecx_42 = Mem39[eax_111 + 4<32>:word32]
	word32 esp_46
	call Mem39[ecx_42 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_42,Stack +0004:eax_24,Stack +001C:dwArg04,Stack +0020:dwArg08
		defs: esp:esp_46
	esp_31 = esp_46 + 4<32>
l0070459C:
	branch ebx_36 == 0<32> l007045B8
l007045A0:
	word32 ebx_59 = Mem58[ebx_36 + 8<32>:word32]
	branch ebx_59 == 0<32> l007045B8
l007045B8:
	branch ebp_37 == 0<32> l007045D4
l007045BC:
	word32 eax_69 = Mem58[ebp_37 + 8<32>:word32]
	branch eax_69 == 0<32> l007045D4
l007045D4:
	word32 eax_83 = Mem58[Mem58[dwArg04 + 4<32>:word32] + 0xC<32>:word32]
	word32 esp_87 = esp_31 - 4<i32>
	Mem88[esp_87:word32] = Mem58[Mem58[dwArg08 + 4<32>:word32] + 0xC<32>:word32]
	word32 ecx_89 = Mem88[0x00A16B7C<p32>:word32]
	Mem91[esp_87 - 4<i32>:word32] = eax_83
	Mem93[esp_87 - 8<i32>:word32] = 0x8A7F90<32>
	Mem95[esp_87 - 12<i32>:word32] = 0x8D6D48<32>
	Mem97[esp_87 - 16<i32>:word32] = ecx_89
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_242
	word32 edx_243
	fn006E15D0(stackArg4, dwArg04, out ecx_242, out edx_243)
	eax_111 = 0<32>
l007045FD:
	return eax_111
l007045C3:
	word32 esp_124 = esp_31 - 4<i32>
	Mem125[esp_124:word32] = dwArg08
	Mem127[esp_124 - 4<i32>:word32] = eax_69
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	return fn007044F0(dwArg04, stackArg4, dwArg04)
l007045A7:
	word32 esp_145 = esp_31 - 4<i32>
	Mem146[esp_145:word32] = dwArg04
	Mem148[esp_145 - 4<i32>:word32] = ebx_59
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	return fn007044F0(dwArg08, stackArg4, dwArg04)
fn00704560_exit:


word32 fn00704610(word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00708DC0
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn00704610_entry:
l00704610:
	word32 eax_185
	word32 eax_15 = Mem13[dwArg04 + 4<32>:word32]
	word32 ecx_16 = Mem13[eax_15 + 0x30<32>:word32]
	word32 esp_19 = fp - 16<i32>
	branch ecx_16 == 0<32> l00704656
l00704626:
	branch (Mem21[eax_15 + 0x54<32>:byte] & 8<8>) == 0<8> l00704656
l0070462C:
	word32 ecx_26 = Mem21[ecx_16 + 0x64<32>:word32]
	branch ecx_26 == 0<32> l00704656
l00704633:
	word32 esp_34
	call ecx_26 (retsize: 4;)
		uses: Stack +0004:dwArg04,Stack +0008:dwArg08,Stack +0020:dwArg04,Stack +0024:dwArg08
		defs: eax:eax_35,esp:esp_34
	esp_19 = esp_34 + 8<32>
	branch eax_185 != 0xA16480<32> l007046FB
l00704645:
	word32 v13_43 = Mem33[eax_185:word32] + 0xFFFFFFFF<32>
	Mem44[eax_185:word32] = v13_43
	branch v13_43 != 0<32> l00704656
l0070464A:
	word32 ecx_47 = Mem44[eax_185 + 4<32>:word32]
	word32 edx_48 = Mem44[ecx_47 + 0x18<32>:word32]
	Mem50[esp_34 + 4<32>:word32] = eax_185
	word32 esp_51
	call edx_48 (retsize: 4;)
		uses: ecx:ecx_47,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: esp:esp_51
	esp_19 = esp_51 + 4<32>
l00704656:
	word32 esp_60 = esp_19 - 4<i32>
	Mem61[esp_60:word32] = 8<32>
	Mem64[esp_60 - 4<i32>:word32] = dwArg08
	Mem67[esp_60 - 8<i32>:word32] = dwArg04
	eax_185 = fn00701B50(Mem67[esp_60 - 8<i32>:word32], Mem67[esp_60 - 4<i32>:word32], Mem67[esp_60:word32])
	word32 esp_112 = esp_60 + 4<32>
	branch eax_185 != 0xA16480<32> l007046FB
l0070466D:
	word32 edi_80 = Mem67[Mem67[dwArg04 + 4<32>:word32] + 0x34<32>:word32]
	word32 ebx_81 = Mem67[Mem67[dwArg08 + 4<32>:word32] + 0x34<32>:word32]
	word32 v15_82 = Mem67[eax_185:word32] + 0xFFFFFFFF<32>
	Mem83[eax_185:word32] = v15_82
	branch v15_82 != 0<32> l0070468A
l0070467E:
	word32 ecx_86 = Mem83[eax_185 + 4<32>:word32]
	word32 edx_87 = Mem83[ecx_86 + 0x18<32>:word32]
	Mem89[esp_60:word32] = eax_185
	word32 esp_91
	call edx_87 (retsize: 4;)
		uses: ecx:ecx_86,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: esp:esp_91
	esp_112 = esp_91 + 4<32>
l0070468A:
	branch edi_80 == 0<32> l007046B6
l007046B6:
	branch ebx_81 == 0<32> l007046D2
l007046BA:
	word32 ebx_108 = Mem107[ebx_81 + 8<32>:word32]
	branch ebx_108 == 0<32> l007046D2
l007046C1:
	word32 esp_113 = esp_112 - 4<i32>
	Mem115[esp_113:word32] = dwArg08
	Mem117[esp_113 - 4<i32>:word32] = ebx_108
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	return fn007044F0(dwArg04, stackArg4, dwArg04)
l0070468E:
	word32 eax_141
	branch (Mem107[Mem107[dwArg04 + 4<32>:word32] + 0x54<32>:byte] & 8<8>) == 0<8> l0070469E
l00704697:
	eax_141 = Mem107[edi_80 + 0x24<32>:word32]
	branch eax_141 != 0<32> l007046A5
l0070469E:
	eax_141 = Mem107[edi_80 + 8<32>:word32]
	branch eax_141 == 0<32> l007046D2
l007046D2:
	word32 ecx_159 = Mem107[Mem107[dwArg04 + 4<32>:word32] + 0xC<32>:word32]
	word32 esp_162 = esp_112 - 4<i32>
	Mem163[esp_162:word32] = Mem107[Mem107[dwArg08 + 4<32>:word32] + 0xC<32>:word32]
	word32 edx_164 = Mem163[0x00A16B7C<p32>:word32]
	Mem166[esp_162 - 4<i32>:word32] = ecx_159
	Mem168[esp_162 - 8<i32>:word32] = 0x8D73FC<32>
	Mem170[esp_162 - 12<i32>:word32] = 0x8D6D48<32>
	Mem172[esp_162 - 16<i32>:word32] = edx_164
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 edx_318
	word32 ecx_317
	fn006E15D0(stackArg4, dwArg04, out ecx_317, out edx_318)
	eax_185 = 0<32>
l007046FB:
	return eax_185
l007046A5:
	word32 esp_199 = esp_112 - 4<i32>
	Mem201[esp_199:word32] = dwArg04
	Mem204[esp_199 - 4<i32>:word32] = eax_141
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	return fn007044F0(dwArg08, stackArg4, dwArg04)
fn00704610_exit:


word32 fn00704700(word32 dwArg04, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E5710
//      fn00704B00
//      fn00725DA0
// MayUse:  Stack +0004:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax esi Top
// Preserved: esp
fn00704700_entry:
l00704700:
	branch dwArg04 == 0<32> l00704722
l00704709:
	branch Mem6[dwArg04 + 4<32>:word32] != 0xA1EB98<32> l00704722
l00704722:
	branch fn00703D00(dwArg04, 0xA1D1B8<32>, fn00706DA0()) != 0<32> l00704755
l0070473A:
	branch dwArg04 == 0<32> l00704755
l0070473E:
	word32 eax_35 = Mem21[Mem21[dwArg04 + 4<32>:word32] + 0x34<32>:word32]
	branch eax_35 == 0<32> l00704755
l00704748:
	branch Mem21[eax_35 + 0xC<32>:word32] == 0<32> l00704755
l00704755:
	edxOut = <invalid>
	return 0<32>
l0070474E:
	edxOut = <invalid>
	return 1<32>
l00704712:
	word32 edx_97
	word32 eax_56 = fn006DF7C0(dwArg04, 0x8D0B00<32>, out edx_97)
	edxOut = <invalid>
	return eax_56
fn00704700_exit:


word32 fn00704B00(word32 dwArg04, ptr32 & ecxOut, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006F3930
//      fn006FCC90
//      fn00704BA0
//      fn00704DA0
//      fn00704E40
//      fn007072E0
//      fn00708DC0
//      fn00735890
//      fn007389B0
// MayUse:  Stack +0004:[0..31]
// LiveOut: eax ecx edx
// Trashed: SCZO eax ecx edx esi Top
// Preserved: esp
fn00704B00_entry:
l00704B00:
	word32 eax_8 = Mem6[dwArg04 + 4<32>:word32]
	branch (Mem6[eax_8 + 0x54<32>:byte] & 0x80<8>) == 0<8> l00704B15
l00704B0E:
	word32 eax_12 = Mem6[eax_8 + 0x6C<32>:word32]
	branch eax_12 != 0<32> l00704B4C
l00704B4C:
	word32 esp_18
	word32 eax_19
	word32 ecx_142
	word32 edx_145
	call eax_12 (retsize: 4;)
		uses: Stack +0004:dwArg04,Stack +0010:dwArg04
		defs: eax:eax_19,ecx:ecx_20,edx:edx_21,esp:esp_18
	word32 esi_24 = eax_19
	branch eax_19 == 0<32> l00704B92
l00704B58:
	word32 eax_29 = Mem17[eax_19 + 4<32>:word32]
	branch (Mem17[eax_29 + 0x54<32>:byte] & 0x80<8>) == 0<8> l00704B67
l00704B61:
	branch Mem17[eax_29 + 0x70<32>:word32] != 0<32> l00704B92
l00704B67:
	word32 ecx_38 = Mem17[0x00A16B7C<p32>:word32]
	Mem41[esp_18:word32] = Mem17[eax_29 + 0xC<32>:word32]
	Mem43[esp_18 - 4<i32>:word32] = 0x8D744C<32>
	Mem45[esp_18 - 8<i32>:word32] = ecx_38
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	fn006E15D0(stackArg4, dwArg04, out ecx_142, out edx_145)
	word32 v11_55 = Mem45[eax_19:word32] + 0xFFFFFFFF<32>
	Mem56[eax_19:word32] = v11_55
	branch v11_55 != 0<32> l00704B90
l00704B84:
	word32 edx_59 = Mem56[eax_19 + 4<32>:word32]
	word32 eax_60 = Mem56[edx_59 + 0x18<32>:word32]
	Mem62[esp_18:word32] = eax_19
	call eax_60 (retsize: 4;)
		uses: edx:edx_59,Stack +0008:dwArg04
		defs: ecx:ecx_65,edx:edx_66
l00704B90:
	esi_24 = 0<32>
l00704B92:
	ecxOut = ecx_142
	edxOut = edx_145
	return esi_24
l00704B15:
	word32 edx_191
	branch fn00704700(dwArg04, out edx_191) == 0<32> l00704B2D
l00704B2D:
	word32 ecx_108
	word32 edx_109
	fn006E15D0(Mem85[0x00A16B7C<p32>:word32], dwArg04, out ecx_108, out edx_109)
	ecxOut = ecx_108
	edxOut = edx_109
	return 0<32>
l00704B22:
	word32 ecx_122
	word32 edx_123
	word32 eax_121 = fn00725DA0(dwArg04, out ecx_122, out edx_123)
	ecxOut = ecx_122
	edxOut = edx_123
	return eax_121
fn00704B00_exit:


word32 fn00704BA0(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00707BD0
// MayUse:  Stack +0004:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn00704BA0_entry:
l00704BA0:
	branch dwArg04 != 0<32> l00704BCB
l00704BCB:
	word32 eax_14 = Mem9[dwArg04 + 4<32>:word32]
	branch eax_14 != 0xA16588<32> l00704BDD
l00704BDD:
	branch eax_14 == 0xA1BAF0<32> l00704D8A
l00704BE8:
	word32 edx_677
	word32 ecx_676
	branch fn006D5670(eax_14, 0xA1BAF0<32>, out ecx_676, out edx_677) != 0<32> l00704D8A
l00704D8A:
	return fn006F4F00(dwArg04)
l00704BFE:
	word32 edx_679
	word32 ecx_678
	word32 eax_59 = fn00704B00(dwArg04, out ecx_678, out edx_679)
	word32 ebx_240 = eax_59
	branch eax_59 != 0<32> l00704C16
l00704C16:
	word32 eax_76 = fn007040D0(edi, dwArg04)
	word32 edi_122 = eax_76
	branch eax_76 >= 0<32> l00704C77
l00704C26:
	branch fn006E0FC0() == 0<32> l00704C6D
l00704C2F:
	word32 ecx_684
	word32 edx_685
	branch fn006E1110(out ecx_684, out edx_685) != 0<32> l00704C6D
l00704C42:
	word32 ecx_686
	word32 edx_687
	branch fn006E1110(out ecx_686, out edx_687) != 0<32> l00704C6D
l00704C6D:
	word32 edx_683
	word32 ecx_682
	fn006E1160(out ecx_682, out edx_683)
	edi_122 = 0xA<32>
l00704C77:
	word32 edx_681
	word32 ecx_680
	word32 eax_142 = fn006DFD20(edi_122, out ecx_680, out edx_681)
	word32 esp_146 = fp - 0x14<32>
	branch eax_142 == 0<32> l00704D71
l00704C8D:
	word32 ecx_688
	word32 edx_689
	word32 eax_158 = fn00704040(eax_59, out ecx_688, out edx_689)
	word32 ebp_153 = 0<32>
	word32 esi_162 = eax_158
	branch eax_158 == 0<32> l00704CED
l00704C9E:
	word32 ebx_167 = 0xC<32>
l00704CA3:
	branch ebp_153 < edi_122 l00704CC9
l00704CA7:
	word32 esp_199
	word32 edi_173 = edi_122 + 0xA<32>
	edi_122 = edi_173 + (edi_173 >> 2<32>)
	branch edi_122 < edi_122 l00704D27
l00704D27:
	word32 ecx_692
	word32 edx_693
	fn006E1210(out ecx_692, out edx_693)
	word32 v19_191 = Mem190[esi_162:word32] + 0xFFFFFFFF<32>
	Mem192[esi_162:word32] = v19_191
	esp_146 = fp - 0x14<32>
	branch v19_191 != 0<32> l00704D4D
l00704D31:
	word32 eax_195 = Mem192[esi_162 + 4<32>:word32]
	word32 ecx_196 = Mem192[eax_195 + 0x18<32>:word32]
	word32 edx_202
	call ecx_196 (retsize: 4;)
		uses: eax:eax_195,ecx:ecx_196,edx:edx_202,Stack +0004:esi_180,Stack +0008:dwArg04,Stack +0020:dwArg04
		defs: edx:edx_202,esp:esp_199
l00704CB7:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg0 = <invalid>
	esp_146 = fp - 0x14<32>
	word32 ecx_211
	branch fn006E0B00(stackArg0, fp - 4<32>, dwArg04, out ecx_211) != 0<32> l00704D3C
l00704D3C:
	word32 v18_220 = Mem209[esi_162:word32] + 0xFFFFFFFF<32>
	Mem221[esi_162:word32] = v18_220
	branch v18_220 != 0<32> l00704D4D
l00704D41:
	word32 edx_224 = Mem221[esi_162 + 4<32>:word32]
	call Mem221[edx_224 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_211,edx:edx_224,Stack +0004:esi_180,Stack +0008:dwArg04,Stack +0020:dwArg04
		defs: esp:esp_228
l00704D4A:
	esp_146 = esp_199 + 4<32>
l00704D4D:
	ebx_240 = Mem238[esp_146 + 0x18<32>:word32]
l00704CC9:
	Mem247[ebx_167 + eax_142:word32] = esi_162
	word32 ecx_690
	word32 edx_691
	word32 eax_258 = fn00704040(dwArg04, out ecx_690, out edx_691)
	ebp_153 = ebp_153 + 1<32>
	ebx_167 = ebx_167 + 4<32>
	esi_162 = eax_258
	branch eax_258 != 0<32> l00704CA3
l00704CE9:
	ebx_240 = dwArg04
l00704CED:
	esp_146 = fp - 0x14<32>
	branch fn006E0FC0() != 0<32> l00704D51
l00704CF6:
	branch ebp_153 >= edi_122 l00704D0C
l00704CFA:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg0 = <invalid>
	esp_146 = fp - 0x14<32>
	word32 ecx_696
	branch fn006E0B00(stackArg0, fp - 4<32>, dwArg04, out ecx_696) != 0<32> l00704D51
l00704D51:
	word32 eax_299 = Mem297[esp_146 + 0x10<32>:word32]
	branch eax_299 == 0<32> l00704D71
l00704D59:
	Mem304[eax_299:word32] = Mem297[eax_299:word32] + 0xFFFFFFFF<32>
	word32 eax_305 = Mem304[esp_146 + 0x10<32>:word32]
	branch Mem304[eax_305:word32] != 0<32> l00704D71
l00704D65:
	word32 ecx_308 = Mem304[eax_305 + 4<32>:word32]
	word32 edx_309 = Mem304[ecx_308 + 0x18<32>:word32]
	Mem311[esp_146 - 4<i32>:word32] = eax_305
	word32 esp_325
	word32 edx_328
	call edx_309 (retsize: 4;)
		uses: ecx:ecx_308,edx:edx_328,Stack +0008:dwArg04
		defs: edx:edx_328,esp:esp_325
	esp_146 = esp_325 + 4<32>
l00704D71:
	word32 v17_335 = Mem334[ebx_240:word32] + 0xFFFFFFFF<32>
	Mem336[ebx_240:word32] = v17_335
	branch v17_335 != 0<32> l00704D82
l00704D76:
	word32 eax_339 = Mem336[ebx_240 + 4<32>:word32]
	word32 ecx_340 = Mem336[eax_339 + 0x18<32>:word32]
	Mem343[esp_146 - 4<i32>:word32] = ebx_240
	word32 edx_351
	call ecx_340 (retsize: 4;)
		uses: eax:eax_339,ecx:ecx_340,edx:edx_351,Stack +0008:dwArg04
		defs: edx:edx_351
l00704D82:
	return 0<32>
l00704D0C:
	word32 v21_373 = Mem372[ebx_240:word32] + 0xFFFFFFFF<32>
	Mem374[ebx_240:word32] = v21_373
	branch v21_373 != 0<32> l00704D1D
l00704D11:
	word32 ecx_377 = Mem374[ebx_240 + 4<32>:word32]
	word32 edx_389
	call Mem374[ecx_377 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_377,edx:edx_389,Stack +0004:ebx_284,Stack +0008:dwArg04,Stack +0020:dwArg04
		defs: edx:edx_389
l00704D1D:
	return eax_142
l00704C55:
	word32 v15_407 = Mem104[eax_59:word32] + 0xFFFFFFFF<32>
	Mem408[eax_59:word32] = v15_407
	branch v15_407 != 0<32> l00704C66
l00704C5A:
	word32 eax_411 = Mem408[eax_59 + 4<32>:word32]
	word32 ecx_412 = Mem408[eax_411 + 0x18<32>:word32]
	word32 edx_418
	call ecx_412 (retsize: 4;)
		uses: eax:eax_411,ecx:ecx_412,edx:edx_418,Stack +0004:eax_59,Stack +0008:dwArg04,Stack +001C:dwArg04
		defs: edx:edx_418
l00704C66:
	return 0<32>
l00704C12:
	return eax_59
l00704BD5:
	Mem443[dwArg04:word32] = Mem9[dwArg04:word32] + 1<32>
	return dwArg04
l00704BAA:
	branch fn006E0FC0() != 0<32> l00704BC6
l00704BB3:
	word32 ecx_674
	word32 edx_675
	fn006E0F80(Mem9[0x00A18720<p32>:word32], 0x8D6C90<32>, out ecx_674, out edx_675)
l00704BC6:
	return 0<32>
fn00704BA0_exit:


word32 fn00704DA0(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006F31C0
//      fn006F3930
// MayUse:  Stack +0004:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx edi edx Top
// Preserved: esi esp
fn00704DA0_entry:
l00704DA0:
	branch dwArg04 != 0<32> l00704DC7
l00704DC7:
	word32 ecx_9 = Mem0[dwArg04 + 4<32>:word32]
	branch ecx_9 == 0xA1BAF0<32> l00704E36
l00704DD2:
	branch ecx_9 == 0xA16588<32> l00704E36
l00704E36:
	Mem17[dwArg04:word32] = Mem0[dwArg04:word32] + 1<32>
	return dwArg04
l00704DDA:
	word32 ecx_207
	word32 edx_208
	word32 eax_25 = fn00704B00(dwArg04, out ecx_207, out edx_208)
	branch eax_25 != 0<32> l00704E14
l00704E14:
	word32 eax_41 = fn007035C0(eax_25)
	word32 v13_47 = Mem39[eax_25:word32] + 0xFFFFFFFF<32>
	Mem48[eax_25:word32] = v13_47
	branch v13_47 != 0<32> l00704E31
l00704E25:
	word32 ecx_52 = Mem48[eax_25 + 4<32>:word32]
	word32 edx_59
	call Mem48[ecx_52 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_52,edx:edx_59,Stack +0004:eax_25,Stack +0008:dwArg04,Stack +0014:dwArg04
		defs: edx:edx_59
l00704E31:
	return eax_41
l00704DEA:
	word32 ecx_209
	word32 edx_210
	branch fn006E1110(out ecx_209, out edx_210) == 0<32> l00704E10
l00704DFD:
	word32 ecx_211
	word32 edx_212
	fn006E0F80(Mem74[0x00A16B7C<p32>:word32], dwArg04, out ecx_211, out edx_212)
l00704E10:
	return 0<32>
l00704DA8:
	branch fn006E0FC0() != 0<32> l00704DC4
l00704DB1:
	word32 edx_206
	word32 ecx_205
	fn006E0F80(Mem0[0x00A18720<p32>:word32], 0x8D6C90<32>, out ecx_205, out edx_206)
l00704DC4:
	return 0<32>
fn00704DA0_exit:


word32 fn00704E40(word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00704FE0
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ebx ecx edi edx esi Top
// Preserved: ebp esp
fn00704E40_entry:
l00704E40:
	word32 ebx_11 = 0<32>
	branch dwArg04 == 0<32> l00704F96
l00704E50:
	branch dwArg08 == 0<32> l00704F96
l00704F96:
	branch fn006E0FC0() != 0<32> l00704FB3
l00704F9F:
	word32 edx_438
	word32 ecx_437
	fn006E0F80(Mem9[0x00A18720<p32>:word32], 0x8D6C90<32>, out ecx_437, out edx_438)
l00704FB3:
	return 0xFFFFFFFF<32>
l00704E5A:
	word32 ecx_433
	word32 edx_434
	word32 eax_54 = fn00704B00(dwArg04, out ecx_433, out edx_434)
	branch eax_54 != 0<32> l00704E8C
l00704E8C:
	word32 esp_117 = fp - 16<i32>
l00704E91:
	word32 esp_124
	word32 eax_69 = Mem68[eax_54 + 4<32>:word32]
	word32 ecx_70 = Mem68[eax_69 + 0x70<32>:word32]
	Mem73[esp_117 - 4<i32>:word32] = eax_54
	word32 esp_78
	word32 eax_79
	word32 ecx_80
	word32 edx_81
	call ecx_70 (retsize: 4;)
		uses: eax:eax_69,ecx:ecx_80,edx:edx_81,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: eax:eax_79,ecx:ecx_80,edx:edx_81,esp:esp_78
	branch eax_79 == 0<32> l00704F0C
l00704F0C:
	branch fn006E0FC0() == 0<32> l00704F2D
l00704F15:
	Mem95[esp_78:word32] = Mem73[0x00A16D00<p32>:word32]
	word32 edx_442
	word32 ecx_441
	branch fn006E1110(out ecx_441, out edx_442) == 0<32> l00704F2D
l00704F28:
	word32 ecx_443
	word32 edx_444
	fn006E1160(out ecx_443, out edx_444)
l00704F2D:
	esp_117 = esp_78 + 4<32>
	branch fn006E0FC0() != 0<32> l00704F7A
l00704F36:
	branch Mem118[esp_78 + 0x20<32>:word32] != 2<32> l00704F7D
l00704F3D:
	word32 eax_121 = Mem118[0x00A17E2C<p32>:word32]
	Mem123[esp_78:word32] = 0x8D74BC<32>
	Mem125[esp_78 - 4<i32>:word32] = eax_121
	esp_124 = esp_78 - 4<i32>
l00704EA3:
	word32 edx_126 = Mem73[esp_78 + 0x1C<32>:word32]
	Mem128[esp_78:word32] = 2<32>
	Mem130[esp_78 - 4<i32>:word32] = eax_79
	Mem132[esp_78 - 8<i32>:word32] = edx_126
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 edx_440
	word32 eax_134 = fn006DF5A0(stackArg4, dwArg04, dwArg08, out edx_440)
	word32 v14_140 = Mem132[eax_79:word32] + 0xFFFFFFFF<32>
	Mem141[eax_79:word32] = v14_140
	esp_117 = esp_78 + 4<32>
	branch v14_140 != 0<32> l00704EC6
l00704EBA:
	word32 eax_145 = Mem141[eax_79 + 4<32>:word32]
	word32 ecx_146 = Mem141[eax_145 + 0x18<32>:word32]
	Mem148[esp_78:word32] = eax_79
	word32 esp_149
	word32 ecx_151
	word32 edx_152
	call ecx_146 (retsize: 4;)
		uses: eax:eax_145,ecx:ecx_151,edx:edx_152,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: ecx:ecx_151,edx:edx_152,esp:esp_149
	esp_117 = esp_149 + 4<32>
l00704EC6:
	branch eax_134 < 0<32> l00704F7A
l00704ECE:
	branch eax_134 <= 0<32> l00704EE3
l00704ED0:
	word32 eax_163 = Mem162[esp_117 + 0x1C<32>:word32]
	branch eax_163 == 1<32> l00704EFF
l00704EFF:
	branch ebx_11 == 0x7FFFFFFF<32> l00704F66
l00704F66:
	word32 edx_170 = Mem162[0x00A18598<p32>:word32]
	word32 esp_171 = esp_117 - 4<i32>
	Mem172[esp_171:word32] = 0x8D747C<32>
	Mem174[esp_171 - 4<i32>:word32] = edx_170
	esp_124 = esp_171 - 4<i32>
l00704F07:
	ebx_11 = ebx_11 + 1<32>
l00704ED9:
	branch eax_163 == 2<32> l00704F51
l00704F51:
	branch Mem162[esp_117 + 0x14<32>:word32] == 0<32> l00704F7D
l00704F58:
	word32 ecx_182 = Mem162[0x00A18598<p32>:word32]
	word32 esp_183 = esp_117 - 4<i32>
	Mem184[esp_183:word32] = 0x8D749C<32>
	Mem186[esp_183 - 4<i32>:word32] = ecx_182
	esp_124 = esp_183 - 4<i32>
l00704F72:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 edx_447
	word32 ecx_446
	fn006E0F80(stackArg4, dwArg04, out ecx_446, out edx_447)
	esp_117 = esp_124 + 8<32>
l00704F7A:
	ebx_11 = 0xFFFFFFFF<32>
l00704EDE:
	branch eax_163 == 3<32> l00704F4A
l00704F4A:
	ebx_11 = 1<32>
l00704F7D:
	word32 v16_222 = Mem219[eax_54:word32] + 0xFFFFFFFF<32>
	Mem223[eax_54:word32] = v16_222
	word32 esp_228 = esp_117 + 4<i32>
	branch v16_222 != 0<32> l00704F90
l00704F84:
	word32 eax_230 = Mem223[eax_54 + 4<32>:word32]
	word32 ecx_231 = Mem223[eax_230 + 0x18<32>:word32]
	Mem233[esp_228 - 4<i32>:word32] = eax_54
	word32 ecx_241
	word32 edx_242
	call ecx_231 (retsize: 4;)
		uses: eax:eax_230,ecx:ecx_241,edx:edx_242,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: ecx:ecx_241,edx:edx_242
l00704F90:
	return ebx_11
l00704EE3:
	branch Mem162[esp_117 + 0x1C<32>:word32] != 2<32> l00704E91
l00704EEA:
	branch ebx_11 != 0x7FFFFFFF<32> l00704EFA
l00704EF2:
	Mem264[esp_117 + 0x14<32>:word32] = 1<32>
l00704EFA:
	ebx_11 = ebx_11 + 1<32>
l00704E6A:
	word32 edx_436
	word32 ecx_435
	fn006E15D0(Mem52[0x00A16B7C<p32>:word32], dwArg04, out ecx_435, out edx_436)
	return 0xFFFFFFFF<32>
fn00704E40_exit:


word32 fn00704FE0(word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00708130
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx Top
// Preserved: esp
fn00704FE0_entry:
l00704FE0:
	word32 eax_6 = Mem0[dwArg04 + 4<32>:word32]
	branch (Mem0[eax_6 + 0x54<32>:byte] & 2<8>) == 0<8> l00705001
l00704FED:
	word32 eax_10 = Mem0[eax_6 + 0x34<32>:word32]
	branch eax_10 == 0<32> l00705001
l00704FF4:
	word32 eax_14 = Mem0[eax_10 + 0x1C<32>:word32]
	branch eax_14 == 0<32> l00705001
l00705001:
	return fn00704E40(dwArg04, dwArg08)
l00704FFB:
	word32 eax_39
	call eax_14 (retsize: 0;)
		uses: Stack +0004:dwArg04,Stack +0008:dwArg08
		defs: eax:eax_39
	return eax_39
fn00704FE0_exit:


word32 fn00705040()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E9BD0
// MayUse: 
// LiveOut: eax
// Trashed: eax Top
// Preserved: esp
fn00705040_entry:
l00705040:
	return 0x7FFFFFFF<32>
fn00705040_exit:


word32 fn00705050(ptr32 & ecxOut, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn007050A0
// MayUse: 
// LiveOut: eax ecx edx
// Trashed: SCZO eax ecx edx Top
// Preserved: esi esp
fn00705050_entry:
l00705050:
	word32 eax_6 = malloc(0x3DC<32>)
	branch eax_6 != 0<32> l00705067
l00705067:
	Mem12[eax_6:word32] = Mem5[0x00A6D158<p32>:word32]
	Mem13[0x00A6D158<p32>:word32] = eax_6
	word32 ecx_19 = eax_6 + 0x3D0<32> + 4<32>
	branch eax_6 + 0x3D0<32> <=u eax_6 + 4<32> l00705090
l00705084:
	edx = ecx_19 - 0xC<32>
	Mem24[ecx_19 + 0<32>:word32] = edx
	ecx_19 = edx
	branch edx >u eax_6 + 4<32> l00705084
l00705090:
	Mem33[ecx_19 + 4<32>:word32] = 0<32>
	ecxOut = ecx_19
	edxOut = edx
	return eax_6 + 0x3D0<32>
l00705062:
l00705062_thunk_fn006E1210:
	word32 ecx_40
	word32 edx_41
	word32 eax_39 = fn006E1210(out ecx_40, out edx_41)
	ecxOut = ecx_40
	edxOut = edx_41
	return eax_39
fn00705050_exit:


word32 fn007050A0(word32 dwArg04, ptr32 & ecxOut, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E1DE0
//      fn006E9BD0
//      fn00705120
//      fn00708DC0
//      fn00711280
//      fn00726260
//      fn00726340
//      fn007276E0
//      fn0072A940
//      fn0072AC20
//      fn00731A20
//      fn007367D0
//      fn0073D140
//      fn00747610
//      fn00747890
//      fn00747A80
//      fn00748190
// MayUse:  Stack +0004:[0..31]
// LiveOut: eax ecx edx
// Trashed: SCZO eax ecx edx esi Top
// Preserved: esp
fn007050A0_entry:
l007050A0:
	branch dwArg04 >u 0x100<32> l007050BB
l007050BB:
	word32 eax_11 = Mem6[0x00A6D15C<p32>:word32]
	branch eax_11 != 0<32> l007050D4
l007050C4:
	word32 edx_17
	word32 ecx_18
	eax_11 = fn00705050(out ecx_18, out edx_17)
	Mem24[0x00A6D15C<p32>:word32] = eax_11
	branch eax_11 != 0<32> l007050D4
l007050D4:
	word32 edx_28 = Mem27[eax_11 + 4<32>:word32]
	Mem31[eax_11 + 8<32>:word32] = dwArg04
	Mem32[0x00A6D15C<p32>:word32] = edx_28
	word32 ecx_29 = eax_11 + 4<32>
	Mem33[ecx_29:word32] = 0xA1E7E8<32>
	Mem34[eax_11:word32] = 1<32>
	ecxOut = ecx_29
	edxOut = edx_28
	return eax_11
l007050D2:
	ecxOut = ecx_18
	edxOut = edx_17
	return eax_11
l007050AF:
	word32 eax_40 = Mem6[dwArg04 * 4<32> + 0xA6CD54<32>:word32]
	Mem42[eax_40:word32] = Mem6[eax_40:word32] + 1<32>
	ecxOut = ecx
	edxOut = edx
	return eax_40
fn007050A0_exit:


word32 fn00705120(word32 dwArg04, ptr32 & ecxOut, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E3770
//      fn006E38B0
//      fn0072F230
//      fn00735890
// MayUse:  Stack +0004:[0..31]
// LiveOut: eax ecx edx
// Trashed: SCZO eax ecx Top
// Preserved: esp
fn00705120_entry:
l00705120:
	branch dwArg04 >u 0x80000001<32> l00705138
l00705138:
l007114A0:
	word32 ecx_23
	word32 edx_65
	word32 eax_22 = fn00710CB0(fp + 4<32>, 4<32>, 1<32>, 1<32>, out ecx_23, out edx_65)
	ecxOut = ecx_23
	edxOut = <invalid>
	return eax_22
l0070512F:
l00705133_thunk_fn007050A0:
	word32 ecx_31
	word32 edx_64
	word32 eax_30 = fn007050A0(dwArg04, out ecx_31, out edx_64)
	ecxOut = ecx_31
	edxOut = <invalid>
	return eax_30
fn00705120_exit:


word32 fn007051A0(word32 edi, word32 dwArg04, ptr32 & ecxOut, ptr32 & edxOut, ptr32 & esiOut, ptr32 & ediOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00656570
//      fn006DC1B0
//      fn006E5C60
//      fn006E7D90
//      fn006E8D90
//      fn007040D0
//      fn007052C0
//      fn00708DC0
//      fn007108F0
//      fn007114E0
//      fn007276E0
//      fn0072FBB0
//      fn00731A20
//      fn00735890
//      fn0073B870
//      fn00748140
// MayUse:  edi:[0..31] Stack +0004:[0..31]
// LiveOut: eax ecx edi edx esi
// Trashed: SCZO eax ecx edi edx esi Top
// Preserved: esp
fn007051A0_entry:
l007051A0:
	word32 edx_112
	word32 ecx_113
	branch dwArg04 == 0<32> l007052A6
l007051AD:
	word32 eax_11 = Mem6[dwArg04 + 4<32>:word32]
	branch eax_11 == 0xA1E7E8<32> l007051C9
l007051B7:
	branch fn006D5670(eax_11, 0xA1E7E8<32>, out ecx, out edx) == 0<32> l007051CE
l007051CE:
	word32 eax_30 = Mem17[Mem17[dwArg04 + 4<32>:word32] + 0x30<32>:word32]
	branch eax_30 == 0<32> l007052A6
l007051DC:
	word32 eax_34 = Mem17[eax_30 + 0x48<32>:word32]
	branch eax_34 == 0<32> l007052A6
l007052A6:
	fn006E0F80(Mem38[0x00A16B7C<p32>:word32], 0x8D7510<32>, out ecx_113, out edx_112)
l007051E7:
	word32 esp_57
	word32 eax_58
	call eax_34 (retsize: 4;)
		uses: ecx:ecx_60,edx:edx_59,Stack +0004:dwArg04,Stack +0010:dwArg04
		defs: eax:eax_58,ecx:ecx_60,edx:edx_59,esp:esp_57
	branch eax_58 == 0<32> l007052BA
l007052BA:
	ecxOut = ecx_113
	edxOut = edx_112
	esiOut = <invalid>
	ediOut = edi
	return 0xFFFFFFFF<32>
l007051F7:
	word32 edi_102
	word32 eax_76 = Mem56[eax_58 + 4<32>:word32]
	Mem80[esp_57:word32] = edi
	branch eax_76 == 0xA1E7E8<32> l0070528D
l00705206:
	Mem83[esp_57 - 4<i32>:word32] = 0xA1E7E8<32>
	Mem85[esp_57 - 8<i32>:word32] = eax_76
	branch fn006D5670(Mem85[esp_57 - 8<i32>:word32], Mem85[esp_57 - 4<i32>:word32], out ecx_113, out edx_112) != 0<32> l0070528D
l0070528D:
	word32 v14_99 = Mem98[eax_58:word32] + 0xFFFFFFFF<32>
	Mem100[eax_58:word32] = v14_99
	edi_102 = Mem100[eax_58 + 8<32>:word32]
	branch v14_99 != 0<32> l007052A1
l00705295:
	word32 eax_104 = Mem100[eax_58 + 4<32>:word32]
	word32 ecx_105 = Mem100[eax_104 + 0x18<32>:word32]
	Mem108[esp_57 - 4<i32>:word32] = eax_58
	call ecx_105 (retsize: 4;)
		uses: eax:eax_104,ecx:ecx_113,edx:edx_112,Stack +0008:dwArg04
		defs: ecx:ecx_113,edx:edx_112
l00705218:
	word32 eax_118 = Mem85[eax_58 + 4<32>:word32]
	branch eax_118 == 0xA1F400<32> l0070525E
l00705222:
	Mem122[esp_57 - 4<i32>:word32] = 0xA1F400<32>
	Mem124[esp_57 - 8<i32>:word32] = eax_118
	word32 esp_132 = esp_57
	word32 edx_340
	word32 ecx_339
	branch fn006D5670(Mem124[esp_57 - 8<i32>:word32], Mem124[esp_57 - 4<i32>:word32], out ecx_339, out edx_340) != 0<32> l0070525E
l0070525E:
	Mem139[esp_57 - 4<i32>:word32] = eax_58
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 eax_143 = fn007108F0(stackArg4, out ecx_113, out edx_112)
	word32 v13_149 = Mem139[eax_58:word32] + 0xFFFFFFFF<32>
	Mem150[eax_58:word32] = v13_149
	edi_102 = eax_143
	branch v13_149 != 0<32> l0070527A
l0070526E:
	word32 ecx_154 = Mem150[eax_58 + 4<32>:word32]
	word32 edx_155 = Mem150[ecx_154 + 0x18<32>:word32]
	Mem157[esp_57 - 4<i32>:word32] = eax_58
	call edx_155 (retsize: 4;)
		uses: ecx:ecx_154,edx:edx_160,Stack +0008:dwArg04
		defs: ecx:ecx_161,edx:edx_160
l0070527A:
	branch eax_143 != 0xFFFFFFFF<32> l007052A1
l0070527F:
	word32 eax_169 = fn006E0FC0()
	branch eax_169 == 0<32> l007052A1
l007052A1:
	ecxOut = ecx_113
	edxOut = edx_112
	esiOut = <invalid>
	ediOut = dwArg04
	return edi_102
l00705288:
	ecxOut = ecx_113
	edxOut = edx_112
	esiOut = <invalid>
	ediOut = dwArg04
	return eax_169 | eax_143
l00705234:
	word32 v11_190 = Mem124[eax_58:word32] + 0xFFFFFFFF<32>
	Mem191[eax_58:word32] = v11_190
	branch v11_190 != 0<32> l00705245
l00705239:
	word32 ecx_194 = Mem191[eax_58 + 4<32>:word32]
	word32 edx_195 = Mem191[ecx_194 + 0x18<32>:word32]
	Mem197[esp_57 - 4<i32>:word32] = eax_58
	word32 esp_198
	word32 edx_200
	call edx_195 (retsize: 4;)
		uses: ecx:ecx_194,edx:edx_200,Stack +0008:dwArg04
		defs: edx:edx_200,esp:esp_198
	esp_132 = esp_198 + 4<32>
l00705245:
	word32 eax_207 = Mem206[0x00A16B7C<p32>:word32]
	word32 esp_209 = esp_132 - 4<i32>
	Mem210[esp_209:word32] = 0x8D7528<32>
	Mem212[esp_209 - 4<i32>:word32] = eax_207
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 edx_218
	word32 ecx_219
	fn006E0F80(stackArg4, dwArg04, out ecx_219, out edx_218)
	ecxOut = ecx_219
	edxOut = edx_218
	esiOut = <invalid>
	ediOut = dwArg04
	return 0xFFFFFFFF<32>
l007051C9:
	word32 eax_232 = Mem231[dwArg04 + 8<32>:word32]
	ecxOut = ecx
	edxOut = edx
	esiOut = <invalid>
	ediOut = edi
	return eax_232
fn007051A0_exit:


word32 fn007052C0(word32 dwArg04, ptr32 & ecxOut, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00702C30
//      fn00708DC0
// MayUse:  Stack +0004:[0..31]
// LiveOut: eax ecx edx
// Trashed: SCZO eax ecx edx Top
// Preserved: esi esp
fn007052C0_entry:
l007052C0:
	branch dwArg04 != 0<32> l007052E1
l007052E1:
	word32 eax_11 = Mem6[dwArg04 + 4<32>:word32]
	branch eax_11 == 0xA1E7E8<32> l0070532F
l007052EB:
	branch fn006D5670(eax_11, 0xA1E7E8<32>, out ecx, out edx) != 0<32> l0070532F
l0070532F:
	word32 eax_31 = Mem30[dwArg04 + 8<32>:word32]
	ecxOut = ecx
	edxOut = edx
	return eax_31
l007052FD:
	word32 eax_35 = Mem17[dwArg04 + 4<32>:word32]
	branch eax_35 == 0xA1F400<32> l00705324
l00705307:
	word32 ecx_153
	word32 edx_154
	branch fn006D5670(eax_35, 0xA1F400<32>, out ecx_153, out edx_154) != 0<32> l00705324
l00705324:
	word32 ecx_61
	word32 edx_62
	word32 eax_59 = fn007109D0(dwArg04, out ecx_61, out edx_62)
	ecxOut = ecx_61
	edxOut = edx_62
	return eax_59
l00705319:
	word32 ecx_73
	word32 edx_74
	word32 esi_156
	word32 edi_157
	word32 eax_71 = fn007051A0(edi, dwArg04, out ecx_73, out edx_74, out esi_156, out edi_157)
	ecxOut = ecx_73
	edxOut = edx_74
	return eax_71
l007052C9:
	word32 ecx_88
	word32 edx_89
	fn006E0F80(Mem6[0x00A16B7C<p32>:word32], 0x8D7510<32>, out ecx_88, out edx_89)
	ecxOut = ecx_88
	edxOut = edx_89
	return 0xFFFFFFFF<32>
fn007052C0_exit:


word32 fn00705340(word32 edi, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E5C60
//      fn00710B80
// MayUse:  edi:[0..31] Stack +0004:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx edi edx esi Top
// Preserved: esp
fn00705340_entry:
l00705340:
	branch dwArg04 == 0<32> l00705469
l0070534D:
	word32 eax_11 = Mem6[dwArg04 + 4<32>:word32]
	branch eax_11 == 0xA1E7E8<32> l00705369
l00705357:
	word32 edx_377
	word32 ecx_376
	branch fn006D5670(eax_11, 0xA1E7E8<32>, out ecx_376, out edx_377) == 0<32> l0070536E
l0070536E:
	word32 eax_29 = Mem17[dwArg04 + 4<32>:word32]
	branch eax_29 == 0xA1F400<32> l0070538A
l00705378:
	word32 ecx_378
	word32 edx_379
	branch fn006D5670(eax_29, 0xA1F400<32>, out ecx_378, out edx_379) == 0<32> l00705395
l00705395:
	word32 eax_48 = Mem35[Mem35[dwArg04 + 4<32>:word32] + 0x30<32>:word32]
	branch eax_48 == 0<32> l00705469
l007053A3:
	word32 eax_52 = Mem35[eax_48 + 0x48<32>:word32]
	branch eax_52 == 0<32> l00705469
l00705469:
	word32 edx_375
	word32 ecx_374
	fn006E0F80(Mem56[0x00A16B7C<p32>:word32], 0x8D7510<32>, out ecx_374, out edx_375)
l007053AE:
	word32 esp_75
	word32 eax_76
	word32 edx_77
	word32 ecx_78
	call eax_52 (retsize: 4;)
		uses: ecx:ecx_78,edx:edx_77,Stack +0004:dwArg04,Stack +0010:dwArg04
		defs: eax:eax_76,ecx:ecx_78,edx:edx_77,esp:esp_75
	branch eax_76 == 0<32> l0070547D
l0070547D:
	return 0xFFFFFFFF<32>
l007053BE:
	word32 edi_120
	word32 eax_94 = Mem74[eax_76 + 4<32>:word32]
	Mem98[esp_75:word32] = edi
	branch eax_94 == 0xA1E7E8<32> l00705450
l007053CD:
	Mem101[esp_75 - 4<i32>:word32] = 0xA1E7E8<32>
	Mem103[esp_75 - 8<i32>:word32] = eax_94
	word32 edx_381
	word32 ecx_380
	branch fn006D5670(Mem103[esp_75 - 8<i32>:word32], Mem103[esp_75 - 4<i32>:word32], out ecx_380, out edx_381) != 0<32> l00705450
l00705450:
	word32 v14_117 = Mem116[eax_76:word32] + 0xFFFFFFFF<32>
	Mem118[eax_76:word32] = v14_117
	edi_120 = Mem118[eax_76 + 8<32>:word32]
	branch v14_117 != 0<32> l00705464
l00705458:
	word32 eax_122 = Mem118[eax_76 + 4<32>:word32]
	word32 ecx_123 = Mem118[eax_122 + 0x18<32>:word32]
	Mem126[esp_75 - 4<i32>:word32] = eax_76
	word32 edx_130
	word32 ecx_131
	call ecx_123 (retsize: 4;)
		uses: eax:eax_122,ecx:ecx_131,edx:edx_130,Stack +0008:dwArg04
		defs: ecx:ecx_131,edx:edx_130
l007053DF:
	word32 eax_136 = Mem103[eax_76 + 4<32>:word32]
	branch eax_136 == 0xA1F400<32> l00705425
l007053E9:
	Mem140[esp_75 - 4<i32>:word32] = 0xA1F400<32>
	Mem142[esp_75 - 8<i32>:word32] = eax_136
	word32 esp_150 = esp_75
	word32 edx_384
	word32 ecx_383
	branch fn006D5670(Mem142[esp_75 - 8<i32>:word32], Mem142[esp_75 - 4<i32>:word32], out ecx_383, out edx_384) != 0<32> l00705425
l00705425:
	Mem157[esp_75 - 4<i32>:word32] = eax_76
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 eax_161 = fn00710B80(stackArg4)
	word32 v13_167 = Mem157[eax_76:word32] + 0xFFFFFFFF<32>
	Mem168[eax_76:word32] = v13_167
	edi_120 = eax_161
	branch v13_167 != 0<32> l00705441
l00705435:
	word32 ecx_172 = Mem168[eax_76 + 4<32>:word32]
	word32 edx_173 = Mem168[ecx_172 + 0x18<32>:word32]
	Mem175[esp_75 - 4<i32>:word32] = eax_76
	word32 edx_178
	call edx_173 (retsize: 4;)
		uses: ecx:ecx_172,edx:edx_178,Stack +0008:dwArg04
		defs: edx:edx_178
l00705441:
	branch fn006E0FC0() == 0<32> l00705464
l00705464:
	return edi_120
l0070544A:
	return 0xFFFFFFFF<32>
l007053FB:
	word32 v11_206 = Mem142[eax_76:word32] + 0xFFFFFFFF<32>
	Mem207[eax_76:word32] = v11_206
	branch v11_206 != 0<32> l0070540C
l00705400:
	word32 ecx_210 = Mem207[eax_76 + 4<32>:word32]
	word32 edx_211 = Mem207[ecx_210 + 0x18<32>:word32]
	Mem213[esp_75 - 4<i32>:word32] = eax_76
	word32 esp_214
	word32 edx_216
	call edx_211 (retsize: 4;)
		uses: ecx:ecx_210,edx:edx_216,Stack +0008:dwArg04
		defs: edx:edx_216,esp:esp_214
	esp_150 = esp_214 + 4<32>
l0070540C:
	word32 eax_223 = Mem222[0x00A16B7C<p32>:word32]
	word32 esp_225 = esp_150 - 4<i32>
	Mem226[esp_225:word32] = 0x8D7528<32>
	Mem228[esp_225 - 4<i32>:word32] = eax_223
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_386
	word32 edx_387
	fn006E0F80(stackArg4, dwArg04, out ecx_386, out edx_387)
	return 0xFFFFFFFF<32>
l0070538A:
	return fn00710B80(dwArg04)
l00705369:
	return Mem263[dwArg04 + 8<32>:word32]
fn00705340_exit:


void fn00706900()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E8910
// MayUse: 
// LiveOut:
// Trashed: SCZO eax ecx edx Top
// Preserved: ebp ebx edi esi esp
fn00706900_entry:
l00706900:
	word32 esp_15 = fp - 0x1C<32>
	word32 esi_18 = 0xA6CD40<32>
	word32 edi_19 = 0x105<32>
l00706911:
	word32 eax_22 = Mem21[esi_18:word32]
	branch eax_22 == 0<32> l0070692E
l00706919:
	Mem27[eax_22:word32] = Mem21[eax_22:word32] + 0xFFFFFFFF<32>
	word32 eax_28 = Mem27[esi_18:word32]
	branch Mem27[eax_28:word32] != 0<32> l0070692E
l00706922:
	word32 ecx_31 = Mem27[eax_28 + 4<32>:word32]
	word32 edx_32 = Mem27[ecx_31 + 0x18<32>:word32]
	Mem35[esp_15 - 4<i32>:word32] = eax_28
	word32 esp_39
	call edx_32 (retsize: 4;)
		uses: ecx:ecx_31
		defs: esp:esp_39
	esp_15 = esp_39 + 4<32>
l0070692E:
	Mem49[esi_18:word32] = 0<32>
	esi_18 = esi_18 + 4<32>
	edi_19 = edi_19 - 1<32>
	branch edi_19 >= 0<32> l00706911
l00706938:
	word32 edx_213 = Mem49[0x00A6D158<p32>:word32]
	Mem58[esp_15 + 0x14<32>:word32] = 0<32>
	Mem59[esp_15 + 0x18<32>:word32] = 0<32>
	Mem60[esp_15 + 0x10<32>:word32] = 0<32>
	Mem61[0x00A6D158<p32>:word32] = 0<32>
	Mem62[0x00A6D15C<p32>:word32] = 0<32>
	branch edx_213 == 0<32> l00706A70
l0070695E:
l00706960:
	Mem68[esp_15 + 0x14<32>:word32] = Mem66[esp_15 + 0x14<32>:word32] + 1<32>
	word32 eax_127 = edx_213 + 4<32>
	word32 ebp_104 = 0<32>
	word32 ecx_74 = eax_127
	word32 esi_100 = 0x29<32>
l00706971:
	branch Mem68[ecx_74 + 4<32>:word32] != 0xA1E7E8<32> l00706983
l0070697B:
	branch Mem68[ecx_74:word32] == 0<32> l00706983
l00706980:
	ebp_104 = ebp_104 + 1<32>
l00706983:
	branch Mem68[ecx_74 + 0x10<32>:word32] != 0xA1E7E8<32> l00706991
l00706988:
	branch Mem68[ecx_74 + 0xC<32>:word32] == 0<32> l00706991
l0070698E:
	ebp_104 = ebp_104 + 1<32>
l00706991:
	ecx_74 = ecx_74 + 0x18<32>
	esi_100 = esi_100 - 1<32>
	branch esi_100 != 0<32> l00706971
l00706999:
	word32 ebx_111 = Mem68[edx_213:word32]
	branch ebp_104 == 0<32> l00706A53
l00706A53:
	word32 esp_116 = esp_15 - 4<i32>
	Mem117[esp_116:word32] = edx_213
	free(Mem117[esp_116:(ptr32 void)])
	Mem120[esp_116 + 0x1C<32>:word32] = Mem117[esp_116 + 0x1C<32>:word32] + 1<32>
l007069A3:
	Mem123[edx_213:word32] = Mem68[0x00A6D158<p32>:word32]
	Mem124[0x00A6D158<p32>:word32] = edx_213
	word32 edi_125 = 0x29<32>
l007069B6:
	branch Mem128[eax_127 + 4<32>:word32] != 0xA1E7E8<32> l007069EE
l007069C0:
	word32 edx_131 = Mem128[eax_127:word32]
	branch edx_131 == 0<32> l007069EE
l007069EE:
	Mem138[eax_127 + 4<32>:word32] = Mem128[0x00A6D15C<p32>:word32]
	Mem139[0x00A6D15C<p32>:word32] = eax_127
l007069C6:
	word32 ecx_140 = Mem128[eax_127 + 8<32>:word32]
	branch ecx_140 < 0xFFFFFFFB<32> l007069FC
l007069CE:
	branch ecx_140 >= 0x101<32> l007069FC
l007069D6:
	branch Mem128[ecx_140 * 4<32> + 0xA6CD54<32>:word32] != 0<32> l007069FC
l007069E0:
	Mem149[eax_127:word32] = edx_131 + 1<32>
	Mem150[ecx_140 * 4<32> + 0xA6CD54<32>:word32] = eax_127
l007069FC:
	branch Mem152[eax_127 + 0x10<32>:word32] != 0xA1E7E8<32> l00706A33
l00706A01:
	word32 esi_157 = Mem152[eax_127 + 0xC<32>:word32]
	word32 edx_160 = eax_127 + 0xC<32>
	branch esi_157 == 0<32> l00706A33
l00706A33:
	Mem166[eax_127 + 0x10<32>:word32] = Mem152[0x00A6D15C<p32>:word32]
	Mem167[0x00A6D15C<p32>:word32] = eax_127 + 0xC<32>
l00706A0B:
	word32 ecx_168 = Mem152[eax_127 + 0x14<32>:word32]
	branch ecx_168 < 0xFFFFFFFB<32> l00706A45
l00706A13:
	branch ecx_168 >= 0x101<32> l00706A45
l00706A1B:
	branch Mem152[ecx_168 * 4<32> + 0xA6CD54<32>:word32] != 0<32> l00706A45
l00706A25:
	Mem177[edx_160:word32] = esi_157 + 1<32>
	Mem178[ecx_168 * 4<32> + 0xA6CD54<32>:word32] = edx_160
l00706A45:
	eax_127 = eax_127 + 0x18<32>
	edi_125 = edi_125 - 1<32>
	branch edi_125 != 0<32> l007069B6
l00706A51:
l00706A62:
	Mem204[esp_15 + 0x10<32>:word32] = Mem195[esp_15 + 0x10<32>:word32] + ebp_104
	edx_213 = ebx_111
	branch ebx_111 != 0<32> l00706960
l00706A70:
	branch Mem215[0x00A74AF0<p32>:word32] == 0<32> l00706B4B
l00706A7D:
	word32 esp_308
	Mem221[esp_15 - 4<i32>:word32] = 0x8D7718<32>
	word32 esp_241
	word32 eax_242
	word32 ecx_243
	call _iob_func (retsize: 4;)
		uses: ecx:ecx_243
		defs: eax:eax_242,ecx:ecx_243,esp:esp_241
	Mem250[esp_241 - 4<i32>:word32] = eax_242 + 0x40<32>
	fprintf(Mem250[esp_241 - 4<i32>:(ptr32 FILE)], Mem250[esp_241:(ptr32 charconst )], 0<32>)
	word32 esi_252 = Mem250[esp_241 + 0x14<32>:word32]
	branch esi_252 != 0<32> l00706AB3
l00706AB3:
	word32 edx_257 = Mem250[esp_241 + 0x18<32>:word32]
	word32 ecx_259 = 0x8A698F<32>
	branch edx_257 == 1<32> l00706AC6
l00706AC1:
	ecx_259 = 0x8B22AC<32>
l00706AC6:
	word32 eax_264 = 0x8A698F<32>
	branch esi_252 == 1<32> l00706AD5
l00706AD0:
	eax_264 = 0x8B22AC<32>
l00706AD5:
	Mem272[esp_241:word32] = ecx_259
	Mem276[esp_241 - 4<i32>:word32] = edx_257
	word32 edx_277 = edx_257 - Mem276[esp_241 + 0x1C<32>:word32]
	Mem280[esp_241 - 8<i32>:word32] = edx_277
	Mem283[esp_241 - 12<i32>:word32] = eax_264
	Mem286[esp_241 - 16<i32>:word32] = esi_252
	Mem288[esp_241 - 20<i32>:word32] = 0x8D76EC<32>
	word32 esp_297
	word32 eax_298
	word32 ecx_299
	call _iob_func (retsize: 4;)
		uses: ecx:ecx_299,edx:edx_277
		defs: eax:eax_298,ecx:ecx_299,esp:esp_297
	Mem306[esp_297 - 4<i32>:word32] = eax_298 + 0x40<32>
	fprintf(Mem306[esp_297 - 4<i32>:(ptr32 FILE)], Mem306[esp_297:(ptr32 charconst )], 0<32>)
	esp_308 = esp_297 + 0x18<32>
l00706AA1:
	Mem311[esp_241:word32] = 0x8A6DE8<32>
	word32 esp_312
	word32 eax_313
	word32 ecx_314
	call _iob_func (retsize: 4;)
		uses: ecx:ecx_314
		defs: eax:eax_313,ecx:ecx_314,esp:esp_312
	Mem320[esp_312 - 4<i32>:word32] = eax_313 + 0x40<32>
	fprintf(Mem320[esp_312 - 4<i32>:(ptr32 FILE)], Mem320[esp_312:(ptr32 charconst )], 0<32>)
	esp_308 = esp_312 + 4<32>
l00706AEE:
	branch Mem324[0x00A74AF0<p32>:word32] <= 1<32> l00706B4B
l00706AF7:
	word32 eax_327 = Mem324[0x00A6D158<p32>:word32]
	Mem331[esp_308 + 0x18<32>:word32] = eax_327
	branch eax_327 == 0<32> l00706B4B
l00706B04:
	word32 esi_336 = Mem334[esp_308 + 0x18<32>:word32] + 4<32>
	word32 ebp_338 = 0x52<32>
l00706B10:
	branch Mem340[esi_336 + 4<32>:word32] != 0xA1E7E8<32> l00706B35
l00706B19:
	word32 eax_343 = Mem340[esi_336:word32]
	branch eax_343 == 0<32> l00706B35
l00706B1F:
	word32 ecx_347 = Mem340[esi_336 + 8<32>:word32]
	word32 esp_349 = esp_308 - 4<i32>
	Mem350[esp_349:word32] = ecx_347
	Mem352[esp_349 - 4<i32>:word32] = eax_343
	Mem354[esp_349 - 8<i32>:word32] = esi_336
	Mem356[esp_349 - 12<i32>:word32] = 0x8D76C4<32>
	word32 esp_361
	word32 eax_362
	call _iob_func (retsize: 4;)
		uses: ecx:ecx_347
		defs: eax:eax_362,esp:esp_361
	Mem369[esp_361 - 4<i32>:word32] = eax_362 + 0x40<32>
	fprintf(Mem369[esp_361 - 4<i32>:(ptr32 FILE)], Mem369[esp_361:(ptr32 charconst )], 0<32>)
	esp_308 = esp_361 + 0x10<32>
l00706B35:
	esi_336 = esi_336 + 0xC<32>
	ebp_338 = ebp_338 - 1<32>
	branch ebp_338 != 0<32> l00706B10
l00706B3D:
	word32 eax_382 = Mem380[Mem380[esp_308 + 0x18<32>:word32]:word32]
	Mem385[esp_308 + 0x18<32>:word32] = eax_382
	branch eax_382 != 0<32> l00706B04
l00706B4B:
	return
fn00706900_exit:


word32 fn00706BE0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006F5C60
//      fn007556D0
//      fn007558B0
// MayUse: 
// LiveOut: ecx
// Trashed: SCZO ecx Top
// Preserved: esi esp
fn00706BE0_entry:
l00706BE0:
	word32 ecx_10
	branch fn007158B0(0<32>, out ecx_10) != 0<32> l00706BFE
l00706BF1:
	fn006E86F0(0x8D7784<32>)
l00706BFE:
	word32 eax_26 = Mem25[0x00A6D260<p32>:word32]
	branch eax_26 == 0<32> l00706C10
l00706C07:
	fn0074F570(eax_26)
l00706C10:
	return ecx_10
fn00706BE0_exit:


void fn00706C20(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006F5C60
//      fn007556D0
//      fn007558B0
// MayUse:  Stack +0004:[0..31]
// LiveOut:
// Trashed: SCZO eax ecx Top
// Preserved: ebx edi esi esp
fn00706C20_entry:
l00706C20:
	branch dwArg04 != 0<32> l00706C36
l00706C29:
	fn006E86F0(0x8D77A4<32>)
l00706C36:
	branch Mem20[0x00A6D260<p32>:word32] == 0<32> l00706C61
l00706C3F:
	word32 edi_34 = Mem32[_errno():word32]
	word32 ecx_84
	fn0074F540(Mem32[0x00A6D260<p32>:word32], 1<32>, out ecx_84)
	Mem49[_errno():word32] = edi_34
l00706C61:
	word32 ecx_83
	fn007158B0(dwArg04, out ecx_83)
	return
fn00706C20_exit:


word32 fn00706CF0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00708DC0
// MayUse: 
// LiveOut: eax
// Trashed: SCZO eax ecx edx Top
// Preserved: esp
fn00706CF0_entry:
l00706CF0:
	branch Mem0[0x00A6D264<p32>:word32] == 0<32> l00706D06
l00706CF9:
	branch fn0074F680() != Mem0[0x00A6D264<p32>:word32] l00706D77
l00706D06:
	branch Mem0[0x00A6D278<p32>:word32] != 0<32> l00706D77
l00706D0F:
	Mem17[0x00A6D278<p32>:word32] = 1<32>
	Mem18[0x00A6D270<p32>:word32] = 0<32>
	word32 eax_19 = Mem18[0x00A6D268<p32>:word32]
	branch eax_19 == Mem18[0x00A6D26C<p32>:word32] l00706D6D
l00706D32:
	word32 eax_27 = eax_19 + 1<32>
	word32 ecx_25 = Mem24[eax_19 * 8<32> + 0xA6D160<32>:word32]
	word32 edx_26 = Mem24[eax_19 * 8<32> + 0xA6D164<32>:word32]
	word32 eax_28 = eax_27 & 0x8000001F<32>
	branch (eax_27 & 0x8000001F<32>) >= 0<32> l00706D4F
l00706D4A:
	eax_28 = ((eax_27 & 0x8000001F<32>) - 1<32> | 0xFFFFFFE0<32>) + 1<32>
l00706D4F:
	Mem43[0x00A6D268<p32>:word32] = eax_28
	word32 eax_48
	word32 ecx_49
	word32 edx_50
	call ecx_25 (retsize: 4;)
		uses: ecx:ecx_49,edx:edx_50,Stack +0004:edx_26
		defs: eax:eax_48,ecx:ecx_49,edx:edx_50
	branch eax_48 < 0<32> l00706D7A
l00706D7A:
	Mem57[0x00A6D278<p32>:word32] = 0<32>
	Mem58[0x00A6D270<p32>:word32] = 1<32>
	return 0xFFFFFFFF<32>
l00706D5E:
	eax_19 = Mem43[0x00A6D268<p32>:word32]
	branch eax_19 != Mem43[0x00A6D26C<p32>:word32] l00706D32
l00706D6D:
	Mem66[0x00A6D278<p32>:word32] = 0<32>
l00706D77:
	return 0<32>
fn00706CF0_exit:


word32 fn00706DA0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00704020
//      fn00704700
// MayUse: 
// LiveOut: eax
// Trashed: eax Top
// Preserved: esp
fn00706DA0_entry:
l00706DA0:
	return Mem0[0x00A1E8A8<p32>:word32]
fn00706DA0_exit:


word32 fn00706DC0(word32 edx, word32 ebx, word32 edi, selector es, selector ds, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006DF4C0
//      fn00708DC0
// MayUse:  cs:[0..15] ds:[0..15] ebx:[0..31] edi:[0..31] edx:[0..31] es:[0..15] fs:[0..15] gs:[0..15] ss:[0..15]
// LiveOut: eax edx
// Trashed: SCZDOP eax ecx edx Top
// Preserved: esi esp
fn00706DC0_entry:
l00706DC0:
	word32 esi_7 = Mem6[0x00A6D67C<p32>:word32]
	branch fn006E8800(edx, ebx, esi_7, edi, es, ds) == 0<32> l00706DEC
l00706DEC:
	word32 eax_28 = Mem6[esi_7 + 0xC<32>:word32]
	word32 ecx_29 = Mem6[0x00A1E8A8<p32>:word32]
	branch eax_28 <= ecx_29 l00706E1D
l00706E1D:
	Mem32[0x00A1E8AC<p32>:word32] = ecx_29
	edxOut = edx
	return 0<32>
l00706DF9:
	Mem43[esi_7 + 0xC<32>:word32] = eax_28 + 0xFFFFFFFF<32>
	word32 edx_52
	word32 ecx_119
	fn006E15D0(Mem43[0x00A175E0<p32>:word32], 0x8D77C8<32>, out ecx_119, out edx_52)
	edxOut = edx_52
	return 0xFFFFFFFF<32>
l00706DD0:
	Mem62[esi_7 + 0xC<32>:word32] = Mem6[esi_7 + 0xC<32>:word32] + 0xFFFFFFFF<32>
	word32 edx_72
	word32 ecx_118
	fn006E0F80(Mem62[0x00A188A8<p32>:word32], 0x8D77EC<32>, out ecx_118, out edx_72)
	edxOut = edx_72
	return 0xFFFFFFFF<32>
fn00706DC0_exit:


void fn00706E30(word32 eax, word32 edi, word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00708DC0
// MayUse:  eax:[0..31] edi:[0..31] Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut:
// Trashed: SCZO eax ebp ebx ecx edx esi Top
// Preserved: esp
fn00706E30_entry:
l00706E30:
	word32 edx_6 = Mem0[eax + 8<32>:word32]
	word32 esp_132 = fp - 12<i32>
	branch Mem0[edx_6 + 0x2C<32>:word32] != 0<32> l00706E80
l00706E40:
	branch Mem17[eax + 0x34<32>:word32] != 0<32> l00706E54
l00706E46:
	Mem22[0x00A163B8<p32>:word32] = Mem17[0x00A163B8<p32>:word32] + 1<32>
	Mem24[eax + 0x34<32>:word32] = 0xA163B8<32>
l00706E54:
	word32 ecx_27 = Mem26[eax + 0x34<32>:word32]
	Mem29[ecx_27:word32] = Mem26[ecx_27:word32] + 1<32>
	word32 ecx_30 = Mem29[eax + 0x38<32>:word32]
	branch ecx_30 == 0<32> l00706E64
l00706E61:
	Mem35[ecx_30:word32] = Mem29[ecx_30:word32] + 1<32>
l00706E64:
	word32 ecx_39 = Mem38[eax + 0x3C<32>:word32]
	branch ecx_39 == 0<32> l00706E6E
l00706E6B:
	Mem44[ecx_39:word32] = Mem38[ecx_39:word32] + 1<32>
l00706E6E:
	Mem52[edx_6 + 0x2C<32>:word32] = Mem47[eax + 0x34<32>:word32]
	Mem54[edx_6 + 0x30<32>:word32] = Mem52[eax + 0x38<32>:word32]
	Mem56[edx_6 + 0x34<32>:word32] = Mem54[eax + 0x3C<32>:word32]
l00706E80:
	word32 ecx_59 = Mem58[eax + 0x34<32>:word32]
	word32 esi_60 = Mem58[eax + 0x38<32>:word32]
	word32 ebx_61 = Mem58[eax + 0x3C<32>:word32]
	Mem68[edi:word32] = Mem58[edi:word32] + 1<32>
	branch dwArg04 == 0<32> l00706E94
l00706E90:
	Mem77[dwArg04:word32] = Mem68[dwArg04:word32] + 1<32>
l00706E94:
	branch dwArg08 == 0<32> l00706E9F
l00706E9C:
	Mem90[dwArg08:word32] = Mem84[dwArg08:word32] + 1<32>
l00706E9F:
	Mem100[eax + 0x34<32>:word32] = edi
	Mem103[eax + 0x38<32>:word32] = dwArg04
	Mem105[eax + 0x3C<32>:word32] = dwArg08
	branch ecx_59 == 0<32> l00706EBD
l00706EAC:
	word32 v20_107 = Mem105[ecx_59:word32] + 0xFFFFFFFF<32>
	Mem108[ecx_59:word32] = v20_107
	branch v20_107 != 0<32> l00706EBD
l00706EB1:
	word32 edx_111 = Mem108[ecx_59 + 4<32>:word32]
	word32 eax_112 = Mem108[edx_111 + 0x18<32>:word32]
	word32 esp_126
	call eax_112 (retsize: 4;)
		uses: eax:eax_112,edx:edx_111,Stack +0004:ecx_59,Stack +0018:dwArg04,Stack +001C:dwArg08
		defs: eax:eax_128,esp:esp_126
	esp_132 = esp_126 + 4<32>
l00706EBD:
	branch esi_60 == 0<32> l00706ED2
l00706EC1:
	word32 v22_139 = Mem138[esi_60:word32] + 0xFFFFFFFF<32>
	Mem140[esi_60:word32] = v22_139
	branch v22_139 != 0<32> l00706ED2
l00706EC6:
	word32 ecx_143 = Mem140[esi_60 + 4<32>:word32]
	word32 edx_144 = Mem140[ecx_143 + 0x18<32>:word32]
	Mem147[esp_132 - 4<i32>:word32] = esi_60
	word32 esp_153
	call edx_144 (retsize: 4;)
		uses: eax:eax_148,ecx:ecx_143,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: esp:esp_153
	esp_132 = esp_153 + 4<32>
l00706ED2:
	branch ebx_61 == 0<32> l00706EE7
l00706ED6:
	word32 v23_166 = Mem165[ebx_61:word32] + 0xFFFFFFFF<32>
	Mem167[ebx_61:word32] = v23_166
	branch v23_166 != 0<32> l00706EE7
l00706EDB:
	word32 eax_170 = Mem167[ebx_61 + 4<32>:word32]
	word32 ecx_171 = Mem167[eax_170 + 0x18<32>:word32]
	Mem174[esp_132 - 4<i32>:word32] = ebx_61
	word32 esp_179
	call ecx_171 (retsize: 4;)
		uses: eax:eax_170,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: esp:esp_179
	esp_132 = esp_179 + 4<32>
l00706EE7:
	word32 esp_188 = esp_132 - 4<i32>
	Mem190[esp_188:word32] = edi
	Mem192[esp_188 - 4<i32>:word32] = 0x8D54AC<32>
	word32 edi_267
	fn00715E50(dwArg04, out edi_267)
	Mem206[esp_188 - 8<i32>:word32] = dwArg04
	Mem208[esp_188 - 12<i32>:word32] = 0x8D54A0<32>
	word32 edi_268
	fn00715E50(dwArg04, out edi_268)
	Mem223[esp_188 + 0x14<32>:word32] = 0x8D5490<32>
l00706F0B_thunk_fn00715E50:
	word32 edi_269
	fn00715E50(dwArg08, out edi_269)
	return
fn00706E30_exit:


void fn00706F10(word32 eax)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00708DC0
// MayUse:  eax:[0..31]
// LiveOut:
// Trashed: SCZO eax ebx ecx edi edx esi Top
// Preserved: esp
fn00706F10_entry:
l00706F10:
	word32 esi_14 = Mem13[eax + 8<32>:word32]
	word32 ecx_15 = Mem13[esi_14 + 0x2C<32>:word32]
	word32 edx_6 = Mem0[eax + 0x34<32>:word32]
	word32 ebx_10 = Mem9[eax + 0x3C<32>:word32]
	word32 edi_19 = Mem18[eax + 0x38<32>:word32]
	Mem21[ecx_15:word32] = Mem18[ecx_15:word32] + 1<32>
	word32 esp_100 = fp - 12<i32>
	word32 ecx_22 = Mem21[esi_14 + 0x30<32>:word32]
	branch ecx_22 == 0<32> l00706F2F
l00706F2C:
	Mem27[ecx_22:word32] = Mem21[ecx_22:word32] + 1<32>
l00706F2F:
	word32 ecx_31 = Mem30[esi_14 + 0x34<32>:word32]
	branch ecx_31 == 0<32> l00706F39
l00706F36:
	Mem36[ecx_31:word32] = Mem30[ecx_31:word32] + 1<32>
l00706F39:
	Mem47[eax + 0x34<32>:word32] = Mem43[esi_14 + 0x2C<32>:word32]
	Mem49[eax + 0x38<32>:word32] = Mem47[esi_14 + 0x30<32>:word32]
	Mem51[eax + 0x3C<32>:word32] = Mem49[esi_14 + 0x34<32>:word32]
	branch edx_6 == 0<32> l00706F60
l00706F4F:
	word32 v16_53 = Mem51[edx_6:word32] + 0xFFFFFFFF<32>
	Mem54[edx_6:word32] = v16_53
	branch v16_53 != 0<32> l00706F60
l00706F54:
	word32 eax_57 = Mem54[edx_6 + 4<32>:word32]
	word32 esp_69
	call Mem54[eax_57 + 0x18<32>:word32] (retsize: 4;)
		uses: eax:eax_57,Stack +0004:edx_6
		defs: eax:eax_71,esp:esp_69
	esp_100 = esp_69 + 4<32>
l00706F60:
	branch edi_19 == 0<32> l00706F75
l00706F64:
	word32 v17_82 = Mem81[edi_19:word32] + 0xFFFFFFFF<32>
	Mem83[edi_19:word32] = v17_82
	branch v17_82 != 0<32> l00706F75
l00706F69:
	word32 edx_86 = Mem83[edi_19 + 4<32>:word32]
	word32 eax_87 = Mem83[edx_86 + 0x18<32>:word32]
	Mem90[esp_100 - 4<i32>:word32] = edi_19
	word32 esp_94
	call eax_87 (retsize: 4;)
		uses: eax:eax_87,edx:edx_86
		defs: eax:eax_96,esp:esp_94
	esp_100 = esp_94 + 4<32>
l00706F75:
	branch ebx_10 == 0<32> l00706F8A
l00706F79:
	word32 v18_107 = Mem106[ebx_10:word32] + 0xFFFFFFFF<32>
	Mem108[ebx_10:word32] = v18_107
	branch v18_107 != 0<32> l00706F8A
l00706F7E:
	word32 ecx_111 = Mem108[ebx_10 + 4<32>:word32]
	word32 edx_112 = Mem108[ecx_111 + 0x18<32>:word32]
	Mem115[esp_100 - 4<i32>:word32] = ebx_10
	word32 esp_121
	call edx_112 (retsize: 4;)
		uses: eax:eax_116,ecx:ecx_111
		defs: esp:esp_121
	esp_100 = esp_121 + 4<32>
l00706F8A:
	word32 esp_133 = esp_100 - 4<i32>
	Mem134[esp_133:word32] = Mem130[esi_14 + 0x2C<32>:word32]
	Mem136[esp_133 - 4<i32>:word32] = 0x8D54AC<32>
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg8 = <invalid>
	word32 edi_313
	fn00715E50(stackArg8, out edi_313)
	Mem148[esp_133 - 8<i32>:word32] = Mem136[esi_14 + 0x30<32>:word32]
	Mem150[esp_133 - 12<i32>:word32] = 0x8D54A0<32>
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg8 = <invalid>
	word32 edi_315
	fn00715E50(stackArg8, out edi_315)
	Mem159[esp_133 - 16<i32>:word32] = Mem150[esi_14 + 0x34<32>:word32]
	Mem161[esp_133 - 20<i32>:word32] = 0x8D5490<32>
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg8 = <invalid>
	word32 edi_317
	fn00715E50(stackArg8, out edi_317)
	word32 eax_168 = Mem161[esi_14 + 0x2C<32>:word32]
	word32 edi_169 = Mem161[esi_14 + 0x30<32>:word32]
	word32 ebx_170 = Mem161[esi_14 + 0x34<32>:word32]
	Mem172[esi_14 + 0x2C<32>:word32] = 0<32>
	Mem173[esi_14 + 0x30<32>:word32] = 0<32>
	Mem174[esi_14 + 0x34<32>:word32] = 0<32>
	word32 v19_175 = Mem174[eax_168:word32] + 0xFFFFFFFF<32>
	Mem176[eax_168:word32] = v19_175
	word32 esp_171 = esp_133 + 4<32>
	branch v19_175 != 0<32> l00706FE6
l00706FDA:
	word32 ecx_179 = Mem176[eax_168 + 4<32>:word32]
	word32 edx_180 = Mem176[ecx_179 + 0x18<32>:word32]
	Mem182[esp_133:word32] = eax_168
	word32 esp_183
	call edx_180 (retsize: 4;)
		uses: eax:eax_168,ecx:ecx_179
		defs: esp:esp_183
	esp_171 = esp_183 + 4<32>
l00706FE6:
	branch edi_169 == 0<32> l00706FFB
l00706FEA:
	word32 v20_196 = Mem195[edi_169:word32] + 0xFFFFFFFF<32>
	Mem197[edi_169:word32] = v20_196
	branch v20_196 != 0<32> l00706FFB
l00706FEF:
	word32 eax_200 = Mem197[edi_169 + 4<32>:word32]
	word32 ecx_201 = Mem197[eax_200 + 0x18<32>:word32]
	Mem204[esp_171 - 4<i32>:word32] = edi_169
	word32 esp_208
	call ecx_201 (retsize: 4;)
		uses: eax:eax_200
		defs: esp:esp_208
	esp_171 = esp_208 + 4<32>
l00706FFB:
	branch ebx_170 == 0<32> l00707010
l00706FFF:
	word32 v21_221 = Mem220[ebx_170:word32] + 0xFFFFFFFF<32>
	Mem222[ebx_170:word32] = v21_221
	branch v21_221 != 0<32> l00707010
l00707004:
	word32 edx_225 = Mem222[ebx_170 + 4<32>:word32]
	word32 eax_226 = Mem222[edx_225 + 0x18<32>:word32]
	Mem229[esp_171 - 4<i32>:word32] = ebx_170
	call eax_226 (retsize: 4;)
		uses: eax:eax_226,edx:edx_225
l00707010:
	return
fn00706F10_exit:


word32 fn00707020(word32 dwArg04, word32 dwArg0C)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00708DC0
// MayUse:  Stack +0004:[0..31] Stack +000C:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx edx Top
// Preserved: esp
fn00707020_entry:
	word32 esp_130 = fp
l00707020:
	word32 eax_39 = dwArg0C
	branch dwArg04 != 0<32> l00707073
l0070702B:
	word32 eax_8 = Mem0[0x00A6D67C<p32>:word32]
	word32 ecx_13 = Mem0[eax_8 + 0x34<32>:word32]
	branch ecx_13 != 0<32> l0070703C
l00707037:
	ecx_13 = 0xA163B8<32>
l0070703C:
	word32 eax_22 = Mem21[eax_8 + 0x3C<32>:word32]
	dwArg04 = ecx_13
	word32 edx_20 = Mem18[eax_8 + 0x38<32>:word32]
	dwArg0C = eax_22
	branch ecx_13 == 0<32> l00707059
l00707052:
	Mem26[ecx_13:word32] = Mem23[ecx_13:word32] + 1<32>
l00707059:
	branch edx_20 == 0<32> l00707068
l00707061:
	Mem36[edx_20:word32] = Mem30[edx_20:word32] + 1<32>
l00707068:
	eax_39 = eax_22
	branch eax_22 == 0<32> l00707073
l0070706C:
	Mem46[eax_22:word32] = Mem44[eax_22:word32] + 1<32>
	eax_39 = eax_22
l00707073:
	word32 esp_275
	word32 esp_265
	branch eax_39 != 0xA163B8<32> l00707108
l00707108:
	branch eax_39 == 0<32> l0070709E
l0070710C:
	branch Mem56[eax_39 + 4<32>:word32] == 0xA25E40<32> l0070709E
l00707115:
	esp_265 = fp - 8<i32>
l0070707E:
	Mem66[eax_39:word32] = Mem56[eax_39:word32] + 0xFFFFFFFF<32>
	branch Mem66[dwArg0C:word32] != 0<32> l00707096
l0070708A:
	word32 ecx_70 = Mem66[dwArg0C + 4<32>:word32]
	word32 esp_78
	call Mem66[ecx_70 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_70,Stack +0004:dwArg0C_445,Stack +000C:dwArg04_447,Stack +0014:dwArg0C_445
		defs: esp:esp_78
	esp_130 = esp_78 + 4<32>
l00707096:
	Mem87[esp_130 + 0xC<32>:word32] = 0<32>
l0070709E:
	branch Mem89[esp_130 + 8<32>:word32] != 0<32> l007070B4
l007070A5:
	Mem93[0x00A163B8<p32>:word32] = Mem89[0x00A163B8<p32>:word32] + 1<32>
	Mem95[esp_130 + 8<32>:word32] = 0xA163B8<32>
l007070B4:
	word32 eax_98 = Mem97[esp_130 + 4<32>:word32]
	branch Mem97[eax_98 + 4<32>:word32] == 0xA16588<32> l007070D6
l007070C1:
	word32 ecx_101 = Mem97[eax_98 + 4<32>:word32]
	word32 esp_102 = esp_130 - 4<i32>
	Mem103[esp_102:word32] = 0xA16588<32>
	Mem105[esp_102 - 4<i32>:word32] = ecx_101
	word32 ecx_556
	word32 edx_557
	branch fn006D5670(Mem105[esp_102 - 4<i32>:word32], Mem105[esp_102:word32], out ecx_556, out edx_557) == 0<32> l00707125
l007070D6:
	word32 esp_120 = esp_130 - 4<i32>
	Mem121[esp_120:word32] = Mem118[esp_130 + 4<32>:word32]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	esp_130 = esp_120 + 4<32>
	word32 ecx_554
	word32 edx_555
	branch fn006DFE20(stackArg4, out ecx_554, out edx_555) <= 0<32> l00707125
l00707125:
	word32 ecx_135 = Mem134[esp_130 + 4<32>:word32]
	word32 eax_136 = Mem134[ecx_135 + 4<32>:word32]
	branch eax_136 != 0xA1B450<32> l00707155
l00707155:
	branch eax_136 == 0xA1E968<32> l007072A1
l00707160:
	branch eax_136 == 0xA15380<32> l0070717F
l00707167:
	word32 esp_144 = esp_130 - 4<i32>
	Mem145[esp_144:word32] = 0xA15380<32>
	Mem147[esp_144 - 4<i32>:word32] = eax_136
	word32 ecx_569
	word32 edx_570
	branch fn006D5670(Mem147[esp_144 - 4<i32>:word32], Mem147[esp_144:word32], out ecx_569, out edx_570) == 0<32> l00707197
l0070717B:
	ecx_135 = Mem147[esp_144 + 8<32>:word32]
l0070717F:
	word32 esp_163 = esp_130 - 4<i32>
	Mem164[esp_163:word32] = Mem160[0x00A169F0<p32>:word32]
	Mem167[esp_163 - 4<i32>:word32] = ecx_135
	word32 ecx_567
	word32 edx_568
	branch fn006D5670(Mem167[esp_163 - 4<i32>:word32], Mem167[esp_163:word32], out ecx_567, out edx_568) != 0<32> l007072A1
l007072A1:
	word32 esp_181 = esp_130 - 4<i32>
	Mem182[esp_181:word32] = esp_130 + 0xC<32>
	Mem185[esp_181 - 4<i32>:word32] = esp_181 + 0xC<32>
	Mem188[esp_181 - 8<i32>:word32] = esp_181 + 8<32>
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ebp_564
	word32 esi_565
	word32 edi_566
	fn006E1BD0(stackArg4, dwArg04, out ebp_564, out esi_565, out edi_566)
l00707197:
	word32 eax_202 = Mem201[esp_130 + 4<32>:word32]
	branch Mem201[eax_202 + 4<32>:word32] == 0xA1EB98<32> l007071DB
l007071A4:
	word32 edx_206 = Mem201[eax_202 + 4<32>:word32]
	word32 esp_207 = esp_130 - 4<i32>
	Mem208[esp_207:word32] = Mem201[0x00A169F0<p32>:word32]
	Mem210[esp_207 - 4<i32>:word32] = edx_206
	word32 ecx_571
	word32 edx_572
	branch fn006D5670(Mem210[esp_207 - 4<i32>:word32], Mem210[esp_207:word32], out ecx_571, out edx_572) != 0<32> l007071DB
l007071DB:
	word32 esp_222 = esp_130
	word32 eax_224 = Mem223[esp_130 + 8<32>:word32]
	branch eax_224 == 0xA163B8<32> l00707260
l00707260:
	Mem228[eax_224:word32] = Mem223[eax_224:word32] + 0xFFFFFFFF<32>
	word32 eax_229 = Mem228[esp_130 + 8<32>:word32]
	branch Mem228[eax_229:word32] != 0<32> l00707278
l0070726C:
	word32 ecx_232 = Mem228[eax_229 + 4<32>:word32]
	word32 edx_233 = Mem228[ecx_232 + 0x18<32>:word32]
	Mem235[esp_130 - 4<i32>:word32] = eax_229
	word32 esp_238
	call edx_233 (retsize: 4;)
		uses: ecx:ecx_232,Stack +0008:dwArg04_447,Stack +0010:dwArg0C_445
		defs: esp:esp_238
	esp_222 = esp_238 + 4<32>
l00707278:
	word32 eax_248 = Mem247[esp_222 + 4<32>:word32]
	Mem249[esp_222 + 8<32>:word32] = eax_248
	branch Mem249[eax_248 + 4<32>:word32] != 0xA1EB98<32> l00707295
l00707295:
	word32 eax_252 = Mem249[eax_248 + 4<32>:word32]
	Mem253[esp_222 + 4<32>:word32] = eax_252
	Mem255[eax_252:word32] = Mem253[eax_252:word32] + 1<32>
l00707289:
	word32 eax_257 = Mem249[eax_248 + 8<32>:word32]
	Mem258[esp_222 + 4<32>:word32] = eax_257
	Mem260[eax_257:word32] = Mem258[eax_257:word32] + 1<32>
l007071E6:
	word32 ecx_262 = Mem223[0x00A16B7C<p32>:word32]
	word32 esp_263 = esp_130 - 4<i32>
	Mem264[esp_263:word32] = 0x8D77FC<32>
	Mem266[esp_263 - 4<i32>:word32] = ecx_262
	esp_265 = esp_263 - 4<i32>
l007071F2:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_551
	word32 edx_552
	fn006E0F80(stackArg4, dwArg04, out ecx_551, out edx_552)
	esp_275 = esp_265 + 8<32>
l007071BB:
	word32 eax_280 = Mem210[0x00A16B7C<p32>:word32]
	Mem282[esp_207:word32] = Mem210[Mem210[Mem210[esp_207 + 8<32>:word32] + 4<32>:word32] + 0xC<32>:word32]
	Mem284[esp_207 - 4<i32>:word32] = 0x8D7830<32>
	Mem286[esp_207 - 8<i32>:word32] = eax_280
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_574
	word32 edx_575
	fn006E15D0(stackArg4, dwArg04, out ecx_574, out edx_575)
	esp_275 = esp_207 + 4<32>
l00707133:
	word32 eax_295 = Mem134[0x00A18A34<p32>:word32]
	word32 esp_296 = esp_130 - 4<i32>
	Mem297[esp_296:word32] = 1<32>
	Mem299[esp_296 - 4<i32>:word32] = 0x8D7878<32>
	Mem301[esp_296 - 8<i32>:word32] = eax_295
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 stackArg12 = <invalid>
	esp_275 = esp_296 + 4<32>
	word32 edx_560
	branch fn006E1970(stackArg4, dwArg04, stackArg12, out edx_560) != 0<32> l007071FA
l007071FA:
	word32 eax_315 = Mem313[esp_275 + 8<32>:word32]
	branch eax_315 == 0<32> l0070721A
l00707202:
	Mem320[eax_315:word32] = Mem313[eax_315:word32] + 0xFFFFFFFF<32>
	word32 eax_321 = Mem320[esp_275 + 8<32>:word32]
	branch Mem320[eax_321:word32] != 0<32> l0070721A
l0070720E:
	word32 edx_324 = Mem320[eax_321 + 4<32>:word32]
	Mem326[esp_275 - 4<i32>:word32] = eax_321
	word32 esp_329
	call Mem326[edx_324 + 0x18<32>:word32] (retsize: 4;)
		uses: edx:edx_324,Stack +0008:dwArg04_447,Stack +0010:dwArg0C_445
		defs: esp:esp_329
	esp_275 = esp_329 + 4<32>
l0070721A:
	word32 eax_339 = Mem338[esp_275 + 4<32>:word32]
	branch eax_339 == 0<32> l0070723A
l00707222:
	Mem344[eax_339:word32] = Mem338[eax_339:word32] + 0xFFFFFFFF<32>
	word32 eax_345 = Mem344[esp_275 + 4<32>:word32]
	branch Mem344[eax_345:word32] != 0<32> l0070723A
l0070722E:
	word32 ecx_348 = Mem344[eax_345 + 4<32>:word32]
	word32 edx_349 = Mem344[ecx_348 + 0x18<32>:word32]
	Mem351[esp_275 - 4<i32>:word32] = eax_345
	word32 esp_353
	call edx_349 (retsize: 4;)
		uses: ecx:ecx_348,Stack +0008:dwArg04_447,Stack +0010:dwArg0C_445
		defs: esp:esp_353
	esp_275 = esp_353 + 4<32>
l0070723A:
	word32 eax_363 = Mem362[esp_275 + 0xC<32>:word32]
	branch eax_363 == 0<32> l0070725A
l00707242:
	Mem368[eax_363:word32] = Mem362[eax_363:word32] + 0xFFFFFFFF<32>
	word32 eax_369 = Mem368[esp_275 + 0xC<32>:word32]
	branch Mem368[eax_369:word32] != 0<32> l0070725A
l0070724E:
	word32 ecx_372 = Mem368[eax_369 + 4<32>:word32]
	word32 edx_373 = Mem368[ecx_372 + 0x18<32>:word32]
	Mem375[esp_275 - 4<i32>:word32] = eax_369
	call edx_373 (retsize: 4;)
		uses: ecx:ecx_372,Stack +0008:dwArg04_447,Stack +0010:dwArg0C_445
l0070725A:
	return 2<32>
l00707150:
l007072B8:
	word32 edx_562
	word32 ecx_561
	fn006E0E00(dwArg0C, out ecx_561, out edx_562)
	word32 eax_410 = CONVERT(CONVERT(dwArg0C != 0<32>, bool, int8), int8, uint32)
	return eax_410 + 2<32> + eax_410
fn00707020_exit:
l007070E7:
	word32 eax_412 = Mem121[esp_120 + 8<32>:word32]
	word32 ecx_413 = Mem121[eax_412 + 0xC<32>:word32]
	Mem414[esp_120 + 8<32>:word32] = ecx_413
	Mem416[ecx_413:word32] = Mem414[ecx_413:word32] + 1<32>
	word32 v15_417 = Mem416[eax_412:word32] + 0xFFFFFFFF<32>
	Mem418[eax_412:word32] = v15_417
	branch v15_417 != 0<32> l007070B4
l007070FA:
	word32 ecx_421 = Mem418[eax_412 + 4<32>:word32]
	word32 edx_422 = Mem418[ecx_421 + 0x18<32>:word32]
	Mem424[esp_120:word32] = eax_412
	word32 esp_425
	call edx_422 (retsize: 4;)
		uses: ecx:ecx_421,Stack +0008:dwArg04_447,Stack +0010:dwArg0C_445
		defs: esp:esp_425
	esp_130 = esp_425 + 4<32>


word32 fn007072E0(word32 ecx, word32 ebx)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00708DC0
// MayUse:  ebx:[0..31] ecx:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx edx Top
// Preserved: ebp edi esi esp
fn007072E0_entry:
l007072E0:
	word32 edi_158 = ecx
	word32 esi_155 = 0<32>
	word32 edx_356
	word32 ecx_355
	word32 eax_22 = fn00704B00(eax, out ecx_355, out edx_356)
	branch eax_22 == 0<32> l007073D6
l007072FA:
	word32 esp_110
	branch ebx <= 0<32> l00707319
l007072FE:
	edi_158 = ecx
l00707300:
	word32 ecx_358
	word32 edx_359
	word32 eax_47 = fn00704040(eax_22, out ecx_358, out edx_359)
	esp_110 = fp - 0xC<32>
	branch eax_47 == 0<32> l0070734A
l0070734A:
	branch fn006E0FC0() != 0<32> l0070739E
l00707353:
	branch esi_155 == 1<32> l00707362
l0070735D:
l00707362:
	word32 edx_365
	word32 ecx_364
	fn006E15D0(Mem39[0x00A17E2C<p32>:word32], 0x8D78EC<32>, out ecx_364, out edx_365)
	esp_110 = fp - 0xC<32>
l0070730D:
	edi_158 = edi_158 - 4<32>
	Mem92[edi_158:word32] = eax_47
	esi_155 = esi_155 + 1<32>
	branch esi_155 < ebx l00707300
l00707319:
	word32 ecx_106
	word32 edx_357
	word32 eax_105 = fn00704040(eax_22, out ecx_106, out edx_357)
	esp_110 = fp - 0xC<32>
	branch eax_105 != 0<32> l0070737A
l0070737A:
	word32 v16_114 = Mem97[eax_105:word32] + 0xFFFFFFFF<32>
	Mem115[eax_105:word32] = v16_114
	branch v16_114 != 0<32> l0070738B
l0070737F:
	word32 ecx_118 = Mem115[eax_105 + 4<32>:word32]
	word32 esp_122
	call Mem115[ecx_118 + 0x18<32>:word32] (retsize: 4;)
		uses: eax:eax_105,ecx:ecx_118,Stack +0004:eax_105
		defs: esp:esp_122
	esp_110 = esp_122 + 4<32>
l0070738B:
	word32 eax_131 = Mem130[0x00A17E2C<p32>:word32]
	word32 esp_133 = esp_110 - 4<i32>
	Mem134[esp_133:word32] = 0x8D78D0<32>
	Mem136[esp_133 - 4<i32>:word32] = eax_131
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 stackArg8 = <invalid>
	word32 ecx_362
	word32 edx_363
	fn006E0F80(stackArg4, stackArg8, out ecx_362, out edx_363)
	esp_110 = esp_133 + 4<32>
l00707326:
	branch fn006E0FC0() != 0<32> l0070739E
l0070739E:
	branch esi_155 <= 0<32> l007073C4
l007073A2:
	word32 eax_160 = Mem159[edi_158:word32]
	Mem162[eax_160:word32] = Mem159[eax_160:word32] + 0xFFFFFFFF<32>
	word32 eax_163 = Mem162[edi_158:word32]
	branch Mem162[eax_163:word32] != 0<32> l007073BA
l007073AE:
	word32 ecx_166 = Mem162[eax_163 + 4<32>:word32]
	word32 edx_167 = Mem162[ecx_166 + 0x18<32>:word32]
	Mem170[esp_110 - 4<i32>:word32] = eax_163
	word32 esp_175
	call edx_167 (retsize: 4;)
		uses: eax:eax_163,ecx:ecx_166
		defs: esp:esp_175
	esp_110 = esp_175 + 4<32>
l007073BA:
	esi_155 = esi_155 - 1<32>
	edi_158 = edi_158 + 4<32>
	branch esi_155 > 0<32> l007073A2
l007073C4:
	word32 v18_195 = Mem192[eax_22:word32] + 0xFFFFFFFF<32>
	Mem196[eax_22:word32] = v18_195
	branch v18_195 != 0<32> l007073D6
l007073CA:
	word32 eax_199 = Mem196[eax_22 + 4<32>:word32]
	word32 ecx_200 = Mem196[eax_199 + 0x18<32>:word32]
	Mem205[esp_110 - 4<i32>:word32] = eax_22
	call ecx_200 (retsize: 4;)
		uses: eax:eax_199,ecx:ecx_200
l007073D6:
	return 0<32>
l0070732F:
	word32 v14_234 = Mem97[eax_22:word32] + 0xFFFFFFFF<32>
	Mem235[eax_22:word32] = v14_234
	branch v14_234 != 0<32> l00707341
l00707335:
	word32 edx_238 = Mem235[eax_22 + 4<32>:word32]
	word32 eax_239 = Mem235[edx_238 + 0x18<32>:word32]
	call eax_239 (retsize: 4;)
		uses: eax:eax_239,ecx:ecx_106,edx:edx_238,Stack +0004:eax_22
l00707341:
	return 1<32>
fn007072E0_exit:


word32 fn007073E0(word32 eax, word32 ecx, word32 edx, word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00707430
//      fn00708590
//      fn00708880
//      fn00708DC0
// MayUse:  eax:[0..31] ecx:[0..31] edx:[0..31] Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx edx Top
// Preserved: esi esp
fn007073E0_entry:
l007073E0:
	word32 esi_8 = Mem6[eax + 0x38<32>:word32]
	branch Mem6[esi_8 + 0x10<32>:word32] == 0<32> l007073EE
l007073EE:
	Mem22[esi_8 + 0x10<32>:word32] = 1<32>
	Mem23[esi_8 + 0x14<32>:word32] = 0<32>
	word32 eax_25
	call dwArg04 (retsize: 4;)
		uses: eax:dwArg08,ecx:ecx,edx:edx,Stack +0004:dwArg08,Stack +0008:eax,Stack +000C:edx,Stack +0010:ecx,Stack +001C:dwArg04,Stack +0020:dwArg08
		defs: eax:eax_25
	branch Mem23[esi_8 + 0x1C<32>:word32] != 0<32> l00707422
l00707411:
	branch Mem23[esi_8 + 0x18<32>:word32] != 0<32> l00707422
l00707422:
	Mem38[esi_8 + 0x10<32>:word32] = Mem23[esi_8 + 0x10<32>:word32] + 0xFFFFFFFF<32>
	Mem41[esi_8 + 0x14<32>:word32] = 1<32>
	return eax_25
l00707417:
	Mem47[esi_8 + 0x10<32>:word32] = Mem23[esi_8 + 0x10<32>:word32] + 0xFFFFFFFF<32>
	Mem49[esi_8 + 0x14<32>:word32] = 0<32>
	return eax_25
l007073EA:
	return 0<32>
fn007073E0_exit:


word32 fn00707430(word32 ebx, word32 esi, word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00708DC0
// MayUse:  ebx:[0..31] esi:[0..31] Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31] Stack +0010:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ecx edx Top
// Preserved: ebp edi esp
fn00707430_entry:
l00707430:
	word32 eax_6 = Mem0[esi + 0x3C<32>:word32]
	word32 edi_15 = 0<32>
	branch eax_6 < Mem14[ebx:word32] l0070747D
l00707442:
	branch eax_6 >= Mem14[dwArg0C:word32] l0070747D
l0070747D:
	word32 eax_34 = fn007355A0(Mem14[esi + 0x10<32>:word32], eax_6, fp - 8<32>)
	branch eax_34 < 0<32> l007074B2
l00707493:
	Mem45[esi + 0x40<32>:word32] = eax_34
	edi_15 = fn007073E0(esi, 0xA163B8<32>, 2<32>, dwArg04, dwArg08)
l007074B2:
	Mem72[ebx:word32] = dwLoc08
	Mem73[dwArg0C:word32] = dwLoc04
l0070744A:
	branch eax_6 > Mem14[dwArg10:word32] l007074C2
l007074C2:
	Mem89[dwArg10:word32] = Mem79[esi + 0x3C<32>:word32]
	edxOut = <invalid>
	return edi_15
l00707452:
	word32 eax_102 = fn007073E0(esi, 0xA163B8<32>, 2<32>, dwArg04, dwArg08)
	Mem114[dwArg10:word32] = Mem98[esi + 0x3C<32>:word32]
	edxOut = <invalid>
	return eax_102
fn00707430_exit:


word32 fn007075C0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0072EC10
// MayUse: 
// LiveOut: eax
// Trashed: SCZO eax Top
// Preserved: esp
fn007075C0_entry:
l007075C0:
	word32 eax_5 = Mem0[0x00A6D67C<p32>:word32]
	word32 eax_9
	call Mem7[0x00A6D680<p32>:word32] (retsize: 4;)
		uses: eax:eax_5,Stack +0004:eax_5
		defs: eax:eax_9
	return eax_9
fn007075C0_exit:


word32 fn007075D0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn007367D0
// MayUse: 
// LiveOut: eax
// Trashed: SCZO eax ecx edx Top
// Preserved: esp
fn007075D0_entry:
l007075D0:
	word32 eax_5 = Mem0[0x00A6D67C<p32>:word32]
	word32 eax_9
	call Mem7[0x00A6D680<p32>:word32] (retsize: 4;)
		uses: eax:eax_5,Stack +0004:eax_5
		defs: eax:eax_9
	branch eax_9 != 0<32> l007075E4
l007075E4:
	return CONVERT(CONVERT(Mem7[eax_9 + 0x14<32>:word32] != Mem7[Mem7[Mem7[eax_9 + 0x38<32>:word32] + 4<32>:word32] + 0x10<32>:word32], bool, int8), int8, uint32)
l007075E3:
	return eax_9
fn007075D0_exit:


word32 fn00707600(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0070BCC0
// MayUse:  Stack +0004:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx edx Top
// Preserved: esi esp
fn00707600_entry:
l00707600:
	word32 eax_5 = Mem0[0x00A6D67C<p32>:word32]
	word32 eax_12
	call Mem10[0x00A6D680<p32>:word32] (retsize: 4;)
		uses: eax:eax_5,Stack +0004:eax_5
		defs: eax:eax_12
	word32 ecx_18 = Mem10[dwArg04:word32]
	word32 eax_37 = CONVERT(CONVERT(ecx_18 != 0<32>, bool, int8), int8, uint32)
	branch eax_12 == 0<32> l0070763A
l00707623:
	word32 edx_29 = Mem10[Mem10[eax_12 + 0x10<32>:word32] + 0x14<32>:word32]
	branch (edx_29 & 0xE000<32>) == 0<32> l0070763A
l00707631:
	Mem38[dwArg04:word32] = ecx_18 | edx_29 & 0xE000<32>
	eax_37 = 1<32>
l0070763A:
	return eax_37
fn00707600_exit:


word32 fn00707640(ptr32 & ebxOut, ptr32 & ediOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E8060
//      fn006E8730
//      fn006E8D90
// MayUse: 
// LiveOut: eax ebx edi
// Trashed: SCZO eax ebx ecx edi edx Top
// Preserved: esi esp
fn00707640_entry:
l00707640:
	word32 ecx_98
	word32 edx_99
	word32 eax_9 = fn00715DD0(out ecx_98, out edx_99)
	branch eax_9 != 0<32> l00707658
l00707658:
	word32 esi_30
	branch fn00731A20(eax_9, 0<32>, out ebx, out esi_30, out edi) == 0<32> l00707654
l00707667:
	word32 edi_44
	word32 edx_100
	word32 esi_101
	word32 eax_47 = fn00731D30(0x8A6DE8<32>, esi_30, out edx_100, out esi_101, out edi_44)
	ebxOut = ebx
	ediOut = edi_44
	return eax_47
l00707654:
	ebxOut = ebx
	ediOut = edi
	return 0<32>
fn00707640_exit:


word32 fn00707680(word32 dwArg04, word32 dwArg08, word32 dwArg0C, ptr32 & ecxOut, ptr32 & edxOut, ptr32 & esiOut, ptr32 & ediOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E1BD0
//      fn006E8730
//      fn006E8D90
//      fn007036F0
//      fn00708DC0
//      fn0072EC10
//      fn00731B10
//      fn0074EB10
//      fn0074ED80
//      fn0074EE90
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut: eax ecx edi edx esi
// Trashed: SCZO eax ecx edi edx esi Top
// Preserved: esp
fn00707680_entry:
l00707680:
	word32 esi_101 = dwArg08
	branch dwArg08 != 0<32> l0070769A
l0070769A:
	word32 eax_11 = Mem6[dwArg08 + 4<32>:word32]
	branch eax_11 == 0xA16588<32> l007076CD
l007076A4:
	word32 ecx_265
	word32 edx_266
	branch fn006D5670(eax_11, 0xA16588<32>, out ecx_265, out edx_266) != 0<32> l007076CD
l007076CD:
	Mem32[dwArg08:word32] = Mem30[dwArg08:word32] + 1<32>
l007076B6:
	word32 ecx_41
	word32 edx_42
	fn006E0F80(Mem17[0x00A16B7C<p32>:word32], 0x8D7934<32>, out ecx_41, out edx_42)
	ecxOut = ecx_41
	edxOut = edx_42
	esiOut = <invalid>
	ediOut = <invalid>
	return 0<32>
l00707689:
	word32 ecx_55
	word32 edx_56
	word32 eax_54 = fn006DFD20(dwArg08, out ecx_55, out edx_56)
	esi_101 = eax_54
	branch eax_54 != 0<32> l007076D0
l007076D0:
	branch dwArg0C == 0<32> l0070771F
l007076D9:
	word32 eax_75 = Mem70[dwArg0C + 4<32>:word32]
	branch eax_75 == 0xA1D1B8<32> l0070771F
l007076E3:
	word32 ecx_267
	word32 edx_268
	branch fn006D5670(eax_75, 0xA1D1B8<32>, out ecx_267, out edx_268) != 0<32> l0070771F
l0070771F:
	word32 ecx_110
	word32 edx_111
	word32 eax_109 = fn00703710(dwArg04, esi_101, dwArg08, out ecx_110, out edx_111)
	word32 v14_115 = Mem104[esi_101:word32] + 0xFFFFFFFF<32>
	Mem116[esi_101:word32] = v14_115
	branch v14_115 != 0<32> l00707741
l00707735:
	word32 edx_120 = Mem116[esi_101 + 4<32>:word32]
	call Mem116[edx_120 + 0x18<32>:word32] (retsize: 4;)
		uses: edx:edx_120,Stack +0004:esi_101,Stack +000C:dwArg08,Stack +0014:dwArg04,Stack +0018:dwArg08,Stack +001C:dwArg0C
		defs: ecx:ecx_126,edx:edx_127
l00707741:
	ecxOut = ecx_110
	edxOut = edx_111
	esiOut = <invalid>
	ediOut = <invalid>
	return eax_109
l007076F5:
	word32 ecx_147
	word32 edx_148
	fn006E0F80(Mem81[0x00A16B7C<p32>:word32], 0x8D7910<32>, out ecx_147, out edx_148)
	word32 v12_152 = Mem144[esi_101:word32] + 0xFFFFFFFF<32>
	Mem153[esi_101:word32] = v12_152
	branch v12_152 != 0<32> l0070771A
l0070770E:
	word32 edx_156 = Mem153[esi_101 + 4<32>:word32]
	call Mem153[edx_156 + 0x18<32>:word32] (retsize: 4;)
		uses: edx:edx_156,Stack +0004:esi_101,Stack +000C:dwArg08,Stack +0014:dwArg04,Stack +0018:dwArg08,Stack +001C:dwArg0C
		defs: ecx:ecx_162,edx:edx_163
l0070771A:
	ecxOut = ecx_147
	edxOut = edx_148
	esiOut = <invalid>
	ediOut = <invalid>
	return 0<32>
l00707698:
	ecxOut = ecx_55
	edxOut = edx_56
	esiOut = <invalid>
	ediOut = <invalid>
	return eax_54
fn00707680_exit:


word32 fn00707750(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00707950
//      fn00707BD0
// MayUse:  Stack +0004:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx edi edx Top
// Preserved: edi esp
fn00707750_entry:
l00707750:
	word32 eax_11 = dwArg04
	branch Mem0[dwArg04 + 4<32>:word32] != 0xA1ED20<32> l00707768
l0070775E:
l00707760:
	eax_11 = Mem0[eax_11 + 8<32>:word32]
	branch Mem0[eax_11 + 4<32>:word32] == 0xA1ED20<32> l00707760
l00707768:
	word32 ecx_19 = Mem0[eax_11 + 4<32>:word32]
	branch ecx_19 != 0xA249B8<32> l0070777F
l0070777F:
	branch ecx_19 != 0xA1C698<32> l0070778D
l0070778D:
	branch ecx_19 != 0xA1E968<32> l007077A1
l007077A1:
	branch ecx_19 != 0xA1EB98<32> l007077B8
l007077B8:
	return Mem0[ecx_19 + 0xC<32>:word32]
l007077A9:
	word32 ecx_30 = Mem0[Mem0[eax_11 + 8<32>:word32] + 0x10<32>:word32]
l007077B3_thunk_fn006ECC50:
	word32 ecx_109
	word32 edx_110
	word32 esi_111
	return fn006ECC50(ecx_30, out ecx_109, out edx_110, out esi_111)
l00707795:
	word32 edx_44 = Mem0[eax_11 + 0x10<32>:word32]
l0070779C_thunk_fn006ECC50:
	word32 ecx_106
	word32 edx_107
	word32 esi_108
	return fn006ECC50(edx_44, out ecx_106, out edx_107, out esi_108)
l00707787:
	return Mem0[Mem0[eax_11 + 8<32>:word32]:word32]
l00707773:
	word32 eax_54 = Mem0[eax_11 + 0x1C<32>:word32]
l0070777A_thunk_fn006ECC50:
	word32 ecx_103
	word32 edx_104
	word32 esi_105
	return fn006ECC50(eax_54, out ecx_103, out edx_104, out esi_105)
fn00707750_exit:


word32 fn007077C0(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00707950
//      fn00707BD0
// MayUse:  Stack +0004:[0..31]
// LiveOut: eax
// Trashed: SCZO eax Top
// Preserved: esp
fn007077C0_entry:
l007077C0:
	word32 eax_6 = Mem0[dwArg04 + 4<32>:word32]
	branch eax_6 != 0xA1ED20<32> l007077D4
l007077D4:
	branch eax_6 == 0xA249B8<32> l007077CE
l007077DB:
	branch eax_6 == 0xA1C698<32> l007077CE
l007077E2:
	branch eax_6 != 0xA1E968<32> l007077EF
l007077EF:
	word32 eax_16 = 0x8D795C<32>
	branch eax_6 == 0xA1EB98<32> l00707800
l007077FB:
	eax_16 = 0x8D7954<32>
l00707800:
	return eax_16
l007077E9:
	return 0x8D7968<32>
l007077CE:
	return 0x8CE83C<32>
fn007077C0_exit:


void fn00707810(byte bArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00708880
// MayUse:  Stack +0004:[0..7]
// LiveOut:
// Trashed: SCZO eax ecx edx Top
// Preserved: esp
fn00707810_entry:
l00707810:
	word32 edx_7 = Mem0[0x00A16B7C<p32>:word32]
	branch (bArg04 & 4<8>) == 0<8> l00707833
l00707833:
	word32 ecx_69
	word32 edx_70
	fn006E15D0(edx_7, 0x8D7978<32>, out ecx_69, out edx_70)
	return
l00707824:
	word32 ecx_71
	word32 edx_72
	fn006E15D0(edx_7, 0x8D79A8<32>, out ecx_71, out edx_72)
	return
fn00707810_exit:


word32 fn00707850(word32 eax, word32 ecx, word32 dwArg04, word32 dwArg08, word32 dwArg0C)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00708880
// MayUse:  eax:[0..31] ecx:[0..31] Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn00707850_entry:
l00707850:
	word32 edx_6 = Mem0[ecx + 8<32>:word32]
	word32 esi_16 = Mem15[ecx + 0xC<32>:word32]
	branch Mem19[ecx + 0x10<32>:word32] != 0<32> l00707905
l00707905:
l0070786B:
	branch Mem19[edx_6 + 8<32>:word32] != eax l0070790B
l00707874:
	branch dwArg0C != 0<32> l0070790B
l0070787E:
	branch Mem19[edx_6 + 0x14<32>:word32] != 0x43<32> l0070790B
l0070790B:
	word32 edx_285
	return fn0070B600(edx_6, esi_16, 0<32>, dwArg08, dwArg0C, out edx_285)
l00707888:
	word32 ebx_94 = Mem19[0x00A6D67C<p32>:word32]
	word32 edx_286
	word32 eax_106 = fn0073AFB0(ebx_94, edx_6, esi_16, out edx_286)
	branch eax_106 != 0<32> l007078A5
l007078A5:
	word32 eax_118 = Mem102[dwArg04:word32] - eax * 4<32>
	word32 ecx_119 = 0<32>
	branch eax <= 0<32> l007078D8
l007078BC:
l007078C0:
	word32 edx_125 = Mem124[eax_118:word32]
	Mem127[edx_125:word32] = Mem124[edx_125:word32] + 1<32>
	Mem131[eax_106 + 0x138<32> + ecx_119 * 4<32>:word32] = Mem127[eax_118:word32]
	ecx_119 = ecx_119 + 1<32>
	eax_118 = eax_118 + 4<32>
	branch ecx_119 < eax l007078C0
l007078D8:
	word32 edx_289
	word32 eax_156 = fn00708DC0(es, ds, eax_106, dwArg04, out edx_289)
	Mem160[ebx_94 + 0xC<32>:word32] = Mem143[ebx_94 + 0xC<32>:word32] + 1<32>
	word32 v17_162 = Mem160[eax_106:word32] + 0xFFFFFFFF<32>
	Mem163[eax_106:word32] = v17_162
	branch v17_162 != 0<32> l007078FA
l007078EE:
	word32 eax_167 = Mem163[eax_106 + 4<32>:word32]
	word32 ecx_168 = Mem163[eax_167 + 0x18<32>:word32]
	call ecx_168 (retsize: 4;)
		uses: eax:eax_167,ecx:ecx_168,Stack +0004:eax_106,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C,Stack +001C:dwArg04,Stack +0020:dwArg08,Stack +0024:dwArg0C
l007078FA:
	Mem182[ebx_94 + 0xC<32>:word32] = Mem180[ebx_94 + 0xC<32>:word32] + 0xFFFFFFFF<32>
	return eax_156
l007078A0:
	return eax_106
fn00707850_exit:


word32 fn00707950(word32 eax, word32 ebx, word32 dwArg04, ptr32 & ecxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00707B30
//      fn00707BD0
// MayUse:  eax:[0..31] ebx:[0..31] Stack +0004:[0..31]
// LiveOut: eax ecx
// Trashed: SCZO eax ebp ecx edi edx esi Top
// Preserved: esp
fn00707950_entry:
l00707950:
	word32 ebp_30
	branch eax != 0<32> l00707962
l00707962:
	word32 edx_447
	word32 eax_22 = fn006FDE60(eax, out edx_447)
	word32 v11_27 = Mem19[eax:word32] + 0xFFFFFFFF<32>
	Mem28[eax:word32] = v11_27
	ebp_30 = eax_22
	branch v11_27 != 0<32> l0070797E
l00707972:
	word32 eax_32 = Mem28[eax + 4<32>:word32]
	word32 ecx_33 = Mem28[eax_32 + 0x18<32>:word32]
	call ecx_33 (retsize: 4;)
		uses: eax:eax_32,ecx:ecx_33,Stack +0004:eax
l00707959:
	word32 ecx_448
	word32 edx_449
	ebp_30 = fn006FDCC0(out ecx_448, out edx_449)
l0070797E:
	branch ebp_30 != 0<32> l00707988
l00707988:
	word32 esp_225 = fp - 16<i32>
	branch dwArg04 < 1<32> l007079EB
l00707990:
	Mem68[ebx:word32] = Mem66[ebx:word32] + 0xFFFFFFFC<32>
	word32 eax_69 = Mem68[ebx:word32]
	word32 edi_70 = Mem68[eax_69:word32]
	Mem73[ebx:word32] = eax_69 + 0xFFFFFFFC<32>
	word32 esi_74 = Mem73[eax_69 + 0xFFFFFFFC<32>:word32]
	word32 esp_76 = esp_225 - 4<i32>
	Mem77[esp_76:word32] = esi_74
	Mem80[esp_76 - 4<i32>:word32] = ebp_30
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 edx_452
	word32 ecx_451
	branch fn006FBCC0(stackArg4, dwArg04 - 1<32>, out ecx_451, out edx_452) != 0<32> l007079F2
l007079F2:
	Mem94[esp_76:word32] = esi_74
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_454
	word32 esi_456
	word32 edx_455
	word32 eax_97 = fn006ECC50(stackArg4, out ecx_454, out edx_455, out esi_456)
	word32 ecx_101 = Mem94[esp_76 + 0x1C<32>:word32]
	Mem105[esp_76:word32] = eax_97
	Mem107[esp_76 - 4<i32>:word32] = ecx_101
	Mem116[esp_76 - 4<i32>:word32] = fn007077C0(Mem107[esp_76 - 4<i32>:word32])
	Mem118[esp_76 - 8<i32>:word32] = ecx_101
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	Mem128[esp_76 - 8<i32>:word32] = fn00707750(stackArg4)
	word32 eax_129 = Mem128[0x00A16B7C<p32>:word32]
	Mem131[esp_76 - 12<i32>:word32] = 0x8D79D0<32>
	Mem133[esp_76 - 16<i32>:word32] = eax_129
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 edx_459
	word32 ecx_135
	word32 eax_136 = fn006E15D0(stackArg4, dwArg04 - 1<32>, out ecx_135, out edx_459)
	word32 v19_141 = Mem133[esi_74:word32] + 0xFFFFFFFF<32>
	Mem142[esi_74:word32] = v19_141
	word32 esp_140 = esp_76 + 4<32>
	branch v19_141 != 0<32> l00707A38
l00707A2C:
	word32 ecx_145 = Mem142[esi_74 + 4<32>:word32]
	word32 edx_146 = Mem142[ecx_145 + 0x18<32>:word32]
	Mem148[esp_76:word32] = esi_74
	word32 esp_149
	call edx_146 (retsize: 4;)
		uses: eax:eax_136,ecx:ecx_145,Stack +0008:dwArg04 - 1<32>
		defs: ecx:ecx_150,esp:esp_149
	esp_140 = esp_149 + 4<32>
l00707A38:
	word32 v21_159 = Mem158[edi_70:word32] + 0xFFFFFFFF<32>
	Mem160[edi_70:word32] = v21_159
	branch v21_159 != 0<32> l00707A49
l00707A3D:
	word32 eax_163 = Mem160[edi_70 + 4<32>:word32]
	word32 ecx_164 = Mem160[eax_163 + 0x18<32>:word32]
	Mem167[esp_140 - 4<i32>:word32] = edi_70
	word32 esp_171
	call ecx_164 (retsize: 4;)
		uses: eax:eax_163,ecx:ecx_164,Stack +0008:dwArg04 - 1<32>
		defs: ecx:ecx_172,esp:esp_171
	esp_140 = esp_171 + 4<32>
l00707A49:
	word32 v23_181 = Mem180[ebp_30:word32] + 0xFFFFFFFF<32>
	Mem182[ebp_30:word32] = v23_181
	branch v23_181 != 0<32> l00707A74
l00707A4F:
	word32 edx_185 = Mem182[ebp_30 + 4<32>:word32]
	word32 eax_186 = Mem182[edx_185 + 0x18<32>:word32]
	Mem189[esp_140 - 4<i32>:word32] = ebp_30
	call eax_186 (retsize: 4;)
		uses: eax:eax_186,ecx:ecx_190,edx:edx_185,Stack +0008:dwArg04 - 1<32>
	ecxOut = <invalid>
	return 0<32>
l007079AC:
	Mem214[esp_76:word32] = edi_70
	Mem216[esp_76 - 4<i32>:word32] = esi_74
	Mem218[esp_76 - 8<i32>:word32] = ebp_30
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 stackArg12 = <invalid>
	word32 ecx_220
	word32 edi_464
	word32 edx_462
	word32 ebx_463
	word32 eax_221 = fn006FBD90(stackArg4, dwArg04 - 1<32>, stackArg12, out ecx_220, out edx_462, out ebx_463, out edi_464)
	word32 v17_226 = Mem218[esi_74:word32] + 0xFFFFFFFF<32>
	Mem227[esi_74:word32] = v17_226
	Mem229[esp_76 + 0x10<32>:word32] = eax_221
	esp_225 = esp_76 + 4<32>
	branch v17_226 != 0<32> l007079CC
l007079C0:
	word32 edx_231 = Mem229[esi_74 + 4<32>:word32]
	word32 eax_232 = Mem229[edx_231 + 0x18<32>:word32]
	Mem234[esp_76:word32] = esi_74
	word32 esp_235
	call eax_232 (retsize: 4;)
		uses: eax:eax_232,ecx:ecx_220,edx:edx_231,Stack +0008:dwArg04 - 1<32>
		defs: eax:eax_237,esp:esp_235
	esp_225 = esp_235 + 4<32>
l007079CC:
	word32 v20_245 = Mem244[edi_70:word32] + 0xFFFFFFFF<32>
	Mem246[edi_70:word32] = v20_245
	branch v20_245 != 0<32> l007079DD
l007079D1:
	word32 ecx_249 = Mem246[edi_70 + 4<32>:word32]
	word32 edx_250 = Mem246[ecx_249 + 0x18<32>:word32]
	Mem253[esp_225 - 4<i32>:word32] = edi_70
	word32 esp_258
	call edx_250 (retsize: 4;)
		uses: eax:eax_256,ecx:ecx_249,Stack +0008:dwArg04 - 1<32>
		defs: eax:eax_260,esp:esp_258
	esp_225 = esp_258 + 4<32>
l007079DD:
	branch Mem267[esp_225 + 0xC<32>:word32] != 0<32> l00707A62
l00707A62:
	word32 v24_271 = Mem267[ebp_30:word32] + 0xFFFFFFFF<32>
	Mem272[ebp_30:word32] = v24_271
	branch v24_271 != 0<32> l00707A74
l00707A68:
	word32 ecx_275 = Mem272[ebp_30 + 4<32>:word32]
	word32 edx_276 = Mem272[ecx_275 + 0x18<32>:word32]
	Mem278[esp_225 - 4<i32>:word32] = ebp_30
	call edx_276 (retsize: 4;)
		uses: eax:eax_280,ecx:ecx_275,Stack +0008:dwArg04 - 1<32>
l00707A74:
	ecxOut = <invalid>
	return 0<32>
l007079E4:
	word32 v22_304 = Mem267[esp_225 + 0x14<32>:word32] - 1<32>
	Mem305[esp_225 + 0x14<32>:word32] = v22_304
	branch v22_304 >= 0<32> l00707990
l007079EB:
	ecxOut = <invalid>
	return ebp_30
l00707982:
	ecxOut = <invalid>
	return 0<32>
fn00707950_exit:


word32 fn00707A80(word32 eax, word32 edi, word32 dwArg04, word32 dwArg08, ptr32 & ecxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00707BD0
// MayUse:  eax:[0..31] edi:[0..31] Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax ecx
// Trashed: SCZO eax ebx ecx edx Top
// Preserved: ebp esi esp
fn00707A80_entry:
l00707A80:
	word32 ebp_44 = dwArg04
	word32 edx_145
	word32 ecx_106
	word32 eax_17 = fn006DFD20(eax + dwArg04, out ecx_106, out edx_145)
	branch eax_17 != 0<32> l00707A9B
l00707A9B:
	branch dwArg04 <= 0<32> l00707AC3
l00707A9F:
	word32 ebx_32 = eax_17 + 0xC<32> + eax * 4<32>
	word32 edx_33 = dwArg08 + 0xC<32>
l00707AB0:
	ecx_106 = Mem36[edx_33:word32]
	Mem39[ecx_106:word32] = Mem36[ecx_106:word32] + 1<32>
	Mem41[ebx_32:word32] = ecx_106
	edx_33 = edx_33 + 4<32>
	ebx_32 = ebx_32 + 4<32>
	ebp_44 = ebp_44 - 1<32>
	branch ebp_44 != 0<32> l00707AB0
l00707AC2:
l00707AC3:
	word32 esi_53 = eax - 1<32>
	branch eax < 1<32> l00707AE3
l00707AC8:
	ecx_106 = eax_17 + 0xC<32> + (eax - 1<32>) * 4<32>
l00707AD0:
	Mem64[edi:word32] = Mem62[edi:word32] + 0xFFFFFFFC<32>
	Mem68[ecx_106:word32] = Mem64[Mem64[edi:word32]:word32]
	esi_53 = esi_53 - 1<32>
	ecx_106 = ecx_106 - 4<32>
	branch esi_53 >= 0<32> l00707AD0
l00707AE3:
	ecxOut = ecx_106
	return <invalid>
l00707A98:
	ecxOut = ecx_106
	return <invalid>
fn00707A80_exit:


word32 fn00707AF0(word32 eax, word32 esi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00708880
// MayUse:  eax:[0..31] esi:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx edx Top
// Preserved: edi esp
fn00707AF0_entry:
l00707AF0:
	word32 edx_82
	word32 ecx_81
	word32 eax_12 = fn006DFD20(eax, out ecx_81, out edx_82)
	branch eax_12 != 0<32> l00707B02
l00707B02:
	word32 edi_21 = eax - 1<32>
	branch eax < 1<32> l00707B23
l00707B07:
	word32 ecx_24 = eax_12 + 0xC<32> + (eax - 1<32>) * 4<32>
l00707B10:
	Mem28[esi:word32] = Mem26[esi:word32] + 0xFFFFFFFC<32>
	Mem32[ecx_24:word32] = Mem28[Mem28[esi:word32]:word32]
	edi_21 = edi_21 - 1<32>
	ecx_24 = ecx_24 - 4<32>
	branch edi_21 >= 0<32> l00707B10
l00707B23:
	return
l00707B00:
	return
fn00707AF0_exit:


word32 fn00707B30(word32 eax, word32 ecx, word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00708880
// MayUse:  eax:[0..31] ecx:[0..31] Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn00707B30_entry:
l00707B30:
	word32 edi_13 = 0<32>
	word32 ebp_114 = 0<32>
	branch eax <= 0<32> l00707B53
l00707B3D:
	word32 ecx_232
	word32 eax_29 = fn00707950(0<32>, ecx, eax, out ecx_232)
	edi_13 = eax_29
	branch eax_29 == 0<32> l00707BBF
l00707B53:
	word32 ecx_230
	word32 edx_231
	word32 eax_55 = fn006DFD20(dwArg08, out ecx_230, out edx_231)
	word32 esp_110 = fp - 0x10<32>
	branch eax_55 == 0<32> l00707BA9
l00707B67:
	word32 eax_66 = dwArg08 + 0xFFFFFFFF<32>
	branch dwArg08 < 0xFFFFFFFF<32> l00707B87
l00707B70:
	word32 ecx_69 = eax_55 + 0xC<32> + (dwArg08 + 0xFFFFFFFF<32>) * 4<32>
l00707B74:
	Mem73[ecx:word32] = Mem71[ecx:word32] + 0xFFFFFFFC<32>
	Mem77[ecx_69:word32] = Mem73[Mem73[ecx:word32]:word32]
	eax_66 = eax_66 - 1<32>
	ecx_69 = ecx_69 - 4<32>
	branch eax_66 >= 0<32> l00707B74
l00707B87:
	word32 edx_234
	word32 ecx_233
	word32 eax_105 = fn00703710(dwArg04, dwArg04, edi_13, out ecx_233, out edx_234)
	word32 v17_111 = Mem97[eax_55:word32] + 0xFFFFFFFF<32>
	Mem112[eax_55:word32] = v17_111
	esp_110 = fp - 0x10<32>
	ebp_114 = eax_105
	branch v17_111 != 0<32> l00707BA9
l00707B9D:
	word32 ecx_116 = Mem112[eax_55 + 4<32>:word32]
	word32 esp_120
	call Mem112[ecx_116 + 0x18<32>:word32] (retsize: 4;)
		uses: eax:eax_105,ecx:ecx_116,Stack +0004:eax_55,Stack +0008:dwArg04,Stack +001C:dwArg04,Stack +0020:dwArg08
		defs: esp:esp_120
	esp_110 = esp_120 + 4<32>
l00707BA9:
	word32 esp_134 = esp_110 + 4<i32>
	branch edi_13 == 0<32> l00707BBF
l00707BAE:
	word32 v18_136 = Mem132[edi_13:word32] + 0xFFFFFFFF<32>
	Mem137[edi_13:word32] = v18_136
	branch v18_136 != 0<32> l00707BBF
l00707BB3:
	word32 eax_140 = Mem137[edi_13 + 4<32>:word32]
	word32 ecx_141 = Mem137[eax_140 + 0x18<32>:word32]
	Mem143[esp_134 - 4<i32>:word32] = edi_13
	call ecx_141 (retsize: 4;)
		uses: eax:eax_140,ecx:ecx_141,Stack +0008:dwArg04,Stack +000C:dwArg08
l00707BBF:
	return ebp_114
fn00707B30_exit:


word32 fn00707BD0(word32 eax, word32 dwArg04, byte bArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00708DC0
// MayUse:  eax:[0..31] Stack +0004:[0..31] Stack +0008:[0..7]
// LiveOut: eax
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn00707BD0_entry:
l00707BD0:
	word32 ecx_148
	word32 esp_154
	word32 ebp_113 = 0<32>
	word32 edi_117 = 0<32>
	word32 esi_153 = 0<32>
	branch (bArg08 & 2<8>) == 0<8> l00707C3F
l00707BE8:
	Mem29[eax:word32] = Mem26[eax:word32] + 0xFFFFFFFC<32>
	esi_153 = Mem29[Mem29[eax:word32]:word32]
	branch esi_153 == 0<32> l00707C0F
l00707BF3:
	word32 eax_34 = Mem29[esi_153 + 4<32>:word32]
	branch eax_34 == 0xA1D1B8<32> l00707C3F
l00707BFD:
	word32 ecx_503
	word32 edx_504
	branch fn006D5670(eax_34, 0xA1D1B8<32>, out ecx_503, out edx_504) != 0<32> l00707C3F
l00707C3F:
	word32 esp_110 = fp - 20<i32>
	branch (bArg08 & 1<8>) == 0<8> l00707CD8
l00707C4A:
	Mem59[eax:word32] = Mem53[eax:word32] + 0xFFFFFFFC<32>
	ebp_113 = Mem59[Mem59[eax:word32]:word32]
	word32 eax_62 = Mem59[ebp_113 + 4<32>:word32]
	branch eax_62 == 0xA16588<32> l00707CD5
l00707C5B:
	esp_110 = fp - 0x14<32>
	word32 ecx_505
	word32 edx_506
	branch fn006D5670(eax_62, 0xA16588<32>, out ecx_505, out edx_506) != 0<32> l00707CD5
l00707C6D:
	word32 eax_87 = fn00704BA0(ebp_113)
	esp_110 = fp - 0x14<32>
	branch eax_87 != 0<32> l00707CC1
l00707CC1:
	word32 v17_96 = Mem81[ebp_113:word32] + 0xFFFFFFFF<32>
	Mem97[ebp_113:word32] = v17_96
	branch v17_96 != 0<32> l00707CD3
l00707CC7:
	word32 eax_100 = Mem97[ebp_113 + 4<32>:word32]
	word32 ecx_101 = Mem97[eax_100 + 0x18<32>:word32]
	word32 esp_104
	call ecx_101 (retsize: 4;)
		uses: eax:eax_100,ecx:ecx_101,Stack +0004:ebp_61,Stack +000C:bArg08,Stack +0020:dwArg04,Stack +0024:bArg08
		defs: esp:esp_104
	esp_110 = esp_104 + 4<32>
l00707CD3:
	ebp_113 = eax_87
l00707CD5:
	edi_117 = Mem115[ebp_113 + 8<32>:word32]
l00707CD8:
	word32 eax_122 = Mem121[esp_110 + 0x24<32>:word32]
	branch eax_122 <= 0<32> l00707CF6
l00707CE0:
	word32 esp_126 = esp_110 - 4<i32>
	Mem127[esp_126:word32] = Mem121[esp_110 + 0x18<32>:word32]
	Mem129[esp_126 - 4<i32>:word32] = eax_122
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 eax_149 = fn00707950(esi_153, eax, stackArg4, out ecx_148)
	esi_153 = eax_149
	esp_154 = esp_126 + 4<32>
	branch eax_149 == 0<32> l00707D45
l00707CF6:
	word32 eax_160 = Mem159[esp_110 + 0x20<32>:word32]
	word32 esp_161 = esp_110 - 4<i32>
	Mem163[esp_161:word32] = ebp_113
	Mem166[esp_161 - 4<i32>:word32] = edi_117
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 eax_174 = fn00707A80(eax_160, eax, stackArg4, dwArg04, out ecx_148)
	esp_154 = esp_161 + 4<32>
	branch eax_174 == 0<32> l00707D30
l00707D0C:
	word32 eax_183 = Mem166[esp_161 + 0x1C<32>:word32]
	Mem185[esp_161:word32] = esi_153
	Mem187[esp_161 - 4<i32>:word32] = eax_174
	Mem189[esp_161 - 8<i32>:word32] = eax_183
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 edx_512
	word32 eax_192 = fn00703710(stackArg4, dwArg04, bArg08, out ecx_148, out edx_512)
	word32 v19_197 = Mem189[eax_174:word32] + 0xFFFFFFFF<32>
	Mem198[eax_174:word32] = v19_197
	Mem200[esp_161 + 0x14<32>:word32] = eax_192
	esp_154 = esp_161 + 4<32>
	branch v19_197 != 0<32> l00707D30
l00707D24:
	word32 ecx_202 = Mem200[eax_174 + 4<32>:word32]
	word32 edx_203 = Mem200[ecx_202 + 0x18<32>:word32]
	Mem205[esp_161:word32] = eax_174
	word32 esp_206
	call edx_203 (retsize: 4;)
		uses: eax:eax_192,ecx:ecx_202,Stack +0008:dwArg04,Stack +000C:bArg08
		defs: ecx:ecx_207,esp:esp_206
	esp_154 = esp_206 + 4<32>
l00707C7C:
	esp_154 = fp - 0x14<32>
	word32 edx_507
	branch fn006E1110(out ecx_148, out edx_507) == 0<32> l00707D30
l00707C93:
	fn007077C0(dwArg04)
	fn00707750(dwArg04)
	word32 edx_508
	fn006E15D0(Mem240[0x00A16B7C<p32>:word32], 0x8D7A0C<32>, out ecx_148, out edx_508)
	esp_154 = fp - 0x14<32>
l00707C0F:
	fn007077C0(dwArg04)
	fn00707750(dwArg04)
	word32 edx_502
	fn006E15D0(Mem294[0x00A16B7C<p32>:word32], dwArg04, out ecx_148, out edx_502)
	esp_154 = fp - 0x14<32>
l00707D30:
	branch esi_153 == 0<32> l00707D45
l00707D34:
	word32 v16_313 = Mem312[esi_153:word32] + 0xFFFFFFFF<32>
	Mem314[esi_153:word32] = v16_313
	branch v16_313 != 0<32> l00707D45
l00707D39:
	word32 eax_317 = Mem314[esi_153 + 4<32>:word32]
	word32 ecx_318 = Mem314[eax_317 + 0x18<32>:word32]
	Mem321[esp_154 - 4<i32>:word32] = esi_153
	word32 esp_326
	call ecx_318 (retsize: 4;)
		uses: eax:eax_317,ecx:ecx_318,Stack +0008:dwArg04,Stack +000C:bArg08
		defs: ecx:ecx_327,esp:esp_326
	esp_154 = esp_326 + 4<32>
l00707D45:
	branch ebp_113 == 0<32> l00707D5B
l00707D49:
	word32 v18_339 = Mem338[ebp_113:word32] + 0xFFFFFFFF<32>
	Mem340[ebp_113:word32] = v18_339
	branch v18_339 != 0<32> l00707D5B
l00707D4F:
	word32 edx_343 = Mem340[ebp_113 + 4<32>:word32]
	word32 eax_344 = Mem340[edx_343 + 0x18<32>:word32]
	Mem347[esp_154 - 4<i32>:word32] = ebp_113
	call eax_344 (retsize: 4;)
		uses: eax:eax_344,ecx:ecx_348,edx:edx_343,Stack +0008:dwArg04,Stack +000C:bArg08
l00707D5B:
	return 0<32>
fn00707BD0_exit:


word32 fn00707D70(word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00707E00
//      fn00707F70
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx edx esi Top
// Preserved: esp
fn00707D70_entry:
l00707D70:
	branch dwArg04 == 0<32> l00707DF0
l00707D79:
	word32 esi_31
	word32 eax_11 = Mem6[dwArg04 + 4<32>:word32]
	branch eax_11 == 0xA1E7E8<32> l00707DE7
l00707D83:
	word32 ecx_166
	word32 edx_167
	branch fn006D5670(eax_11, 0xA1E7E8<32>, out ecx_166, out edx_167) != 0<32> l00707DE7
l00707DE7:
	esi_31 = Mem30[dwArg04 + 8<32>:word32]
l00707D95:
	word32 ecx_32 = Mem17[dwArg04 + 4<32>:word32]
	word32 eax_33 = Mem17[ecx_32 + 0x30<32>:word32]
	branch eax_33 == 0<32> l00707DD0
l00707D9F:
	branch (Mem17[ecx_32 + 0x54<32>:word32] & 0x20000<32>) == 0<32> l00707DD0
l00707DA8:
	branch Mem17[eax_33 + 0x98<32>:word32] == 0<32> l00707DD0
l00707DD0:
	word32 edx_169
	word32 ecx_168
	fn006E0F80(Mem17[0x00A16B7C<p32>:word32], 0x8D7A68<32>, out ecx_168, out edx_169)
	return 0<32>
l00707DB1:
	word32 edx_171
	word32 ecx_170
	word32 eax_68 = fn00702C30(dwArg04, 0<32>, out ecx_170, out edx_171)
	esi_31 = eax_68
	branch eax_68 != 0xFFFFFFFF<32> l00707DEA
l00707DC3:
	branch fn006E0FC0() == 0<32> l00707DEA
l00707DEA:
	Mem86[dwArg08:word32] = esi_31
l00707DF0:
	return 1<32>
l00707DCC:
	return 0<32>
fn00707D70_exit:


word32 fn00707E00(word32 eax, word32 ecx, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00708DC0
// MayUse:  eax:[0..31] ecx:[0..31] Stack +0004:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ebp ecx edi edx esi Top
// Preserved: esp
fn00707E00_entry:
l00707E00:
	word32 eax_20 = Mem16[Mem16[dwArg04 + 4<32>:word32] + 0x34<32>:word32]
	branch eax_20 == 0<32> l00707F2C
l00707E1A:
	branch Mem16[eax_20 + 0x10<32>:word32] == 0<32> l00707F2C
l00707E24:
	branch ecx == 0<32> l00707E88
l00707E28:
	word32 eax_30 = Mem16[ecx + 4<32>:word32]
	branch eax_30 == 0xA1E7E8<32> l00707E88
l00707E32:
	word32 ecx_365
	word32 edx_366
	branch fn006D5670(eax_30, 0xA1E7E8<32>, out ecx_365, out edx_366) != 0<32> l00707E88
l00707E44:
	word32 eax_48 = Mem36[ecx + 4<32>:word32]
	branch eax_48 == 0xA1F400<32> l00707E88
l00707E4E:
	word32 ecx_367
	word32 edx_368
	branch fn006D5670(eax_48, 0xA1F400<32>, out ecx_367, out edx_368) != 0<32> l00707E88
l00707E60:
	word32 eax_66 = Mem54[ecx + 4<32>:word32]
	word32 ecx_67 = Mem54[eax_66 + 0x30<32>:word32]
	branch ecx_67 == 0<32> l00707F2C
l00707E6E:
	branch (Mem54[eax_66 + 0x54<32>:word32] & 0x20000<32>) == 0<32> l00707F2C
l00707E7B:
	branch Mem54[ecx_67 + 0x98<32>:word32] == 0<32> l00707F2C
l00707E88:
	branch eax == 0<32> l00707EE0
l00707E8C:
	word32 eax_81 = Mem80[eax + 4<32>:word32]
	branch eax_81 == 0xA1E7E8<32> l00707EE0
l00707E96:
	word32 ecx_369
	word32 edx_370
	branch fn006D5670(eax_81, 0xA1E7E8<32>, out ecx_369, out edx_370) != 0<32> l00707EE0
l00707EA8:
	word32 eax_100 = Mem88[eax + 4<32>:word32]
	branch eax_100 == 0xA1F400<32> l00707EE0
l00707EB2:
	word32 ecx_371
	word32 edx_372
	branch fn006D5670(eax_100, 0xA1F400<32>, out ecx_371, out edx_372) != 0<32> l00707EE0
l00707EC4:
	word32 eax_118 = Mem106[eax + 4<32>:word32]
	word32 ecx_119 = Mem106[eax_118 + 0x30<32>:word32]
	branch ecx_119 == 0<32> l00707F2C
l00707ECE:
	branch (Mem106[eax_118 + 0x54<32>:word32] & 0x20000<32>) == 0<32> l00707F2C
l00707ED7:
	branch Mem106[ecx_119 + 0x98<32>:word32] == 0<32> l00707F2C
l00707F2C:
	word32 eax_146 = fn0072F1E0(ecx, eax, 0<32>)
	branch eax_146 == 0<32> l00707F62
l00707F3E:
	word32 ecx_160
	word32 edx_373
	word32 eax_161 = fn00704220(dwArg04, dwArg04, out ecx_160, out edx_373)
	word32 v13_166 = Mem158[eax_146:word32] + 0xFFFFFFFF<32>
	Mem167[eax_146:word32] = v13_166
	branch v13_166 != 0<32> l00707F5B
l00707F4F:
	word32 edx_171 = Mem167[eax_146 + 4<32>:word32]
	word32 eax_172 = Mem167[edx_171 + 0x18<32>:word32]
	call eax_172 (retsize: 4;)
		uses: eax:eax_172,ecx:ecx_160,edx:edx_171,Stack +0004:eax_146,Stack +0008:dwArg04,Stack +001C:dwArg04
l00707F5B:
	return eax_161
l00707EE0:
	branch fn00707D70(ecx, fp - 4<32>) == 0<32> l00707F62
l00707F02:
	branch fn00707D70(eax, 0x7FFFFFFF<32>) == 0<32> l00707F62
l00707F62:
	return 0<32>
l00707F14:
	return fn00703210(dwArg04, 0x7FFFFFFF<32>, 0x7FFFFFFF<32>)
fn00707E00_exit:


word32 fn00707F70(word32 eax, word32 ecx, word32 ebx, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00708DC0
// MayUse:  eax:[0..31] ebx:[0..31] ecx:[0..31] Stack +0004:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx edi edx esi Top
// Preserved: esp
fn00707F70_entry:
l00707F70:
	word32 eax_15 = Mem10[Mem10[ebx + 4<32>:word32] + 0x34<32>:word32]
	branch eax_15 == 0<32> l007080CC
l00707F87:
	branch Mem10[eax_15 + 0x18<32>:word32] == 0<32> l007080CC
l00707F91:
	branch ecx == 0<32> l00707FF5
l00707F95:
	word32 eax_26 = Mem10[ecx + 4<32>:word32]
	branch eax_26 == 0xA1E7E8<32> l00707FF5
l00707F9F:
	word32 ecx_410
	word32 edx_411
	branch fn006D5670(eax_26, 0xA1E7E8<32>, out ecx_410, out edx_411) != 0<32> l00707FF5
l00707FB1:
	word32 eax_44 = Mem32[ecx + 4<32>:word32]
	branch eax_44 == 0xA1F400<32> l00707FF5
l00707FBB:
	word32 ecx_412
	word32 edx_413
	branch fn006D5670(eax_44, 0xA1F400<32>, out ecx_412, out edx_413) != 0<32> l00707FF5
l00707FCD:
	word32 eax_62 = Mem50[ecx + 4<32>:word32]
	word32 ecx_63 = Mem50[eax_62 + 0x30<32>:word32]
	branch ecx_63 == 0<32> l007080CC
l00707FDB:
	branch (Mem50[eax_62 + 0x54<32>:word32] & 0x20000<32>) == 0<32> l007080CC
l00707FE8:
	branch Mem50[ecx_63 + 0x98<32>:word32] == 0<32> l007080CC
l00707FF5:
	branch eax == 0<32> l00708055
l00707FF9:
	word32 eax_77 = Mem76[eax + 4<32>:word32]
	branch eax_77 == 0xA1E7E8<32> l00708055
l00708003:
	word32 edx_415
	word32 ecx_414
	branch fn006D5670(eax_77, 0xA1E7E8<32>, out ecx_414, out edx_415) != 0<32> l00708055
l00708015:
	word32 eax_96 = Mem84[eax + 4<32>:word32]
	branch eax_96 == 0xA1F400<32> l00708055
l0070801F:
	word32 ecx_416
	word32 edx_417
	branch fn006D5670(eax_96, 0xA1F400<32>, out ecx_416, out edx_417) != 0<32> l00708055
l00708031:
	word32 eax_114 = Mem102[eax + 4<32>:word32]
	word32 ecx_115 = Mem102[eax_114 + 0x30<32>:word32]
	branch ecx_115 == 0<32> l007080CC
l0070803F:
	branch (Mem102[eax_114 + 0x54<32>:word32] & 0x20000<32>) == 0<32> l007080CC
l0070804C:
	branch Mem102[ecx_115 + 0x98<32>:word32] == 0<32> l007080CC
l007080CC:
	word32 eax_141 = fn0072F1E0(ecx, eax, 0<32>)
	branch eax_141 == 0<32> l00708118
l007080DE:
	word32 eax_160
	branch dwArg04 == 0<32> l007080F3
l007080F3:
	word32 ecx_418
	eax_160 = fn00704400(ebx, eax_141, out ecx_418)
l007080E6:
	word32 ecx_419
	eax_160 = fn00704300(ebx, eax_141, dwArg04, out ecx_419)
l007080FD:
	word32 v13_183 = Mem182[eax_141:word32] + 0xFFFFFFFF<32>
	Mem184[eax_141:word32] = v13_183
	branch v13_183 != 0<32> l00708110
l00708104:
	word32 ecx_189 = Mem184[eax_141 + 4<32>:word32]
	call Mem184[ecx_189 + 0x18<32>:word32] (retsize: 4;)
		uses: eax:eax_186,ecx:ecx_189,Stack +0004:eax_141,Stack +001C:dwArg04
l00708110:
	return eax_160
l00708055:
	branch fn00707D70(ecx, fp - 4<32>) == 0<32> l00708118
l0070807B:
	branch fn00707D70(eax, fp - 8<32>) == 0<32> l00708118
l00708118:
	return 0xFFFFFFFF<32>
l00708091:
	branch dwArg04 != 0<32> l007080B2
l007080B2:
	return fn00703420(ebx, 0<32>, 0x7FFFFFFF<32>, dwArg04)
l00708099:
	return fn00703520(ebx, 0<32>, 0x7FFFFFFF<32>)
fn00707F70_exit:


word32 fn00708130(word32 eax, word32 ecx, word32 esi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00708DC0
// MayUse:  eax:[0..31] ecx:[0..31] esi:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx edx Top
// Preserved: esp
fn00708130_entry:
l00708130:
	branch esi >u 0xA<32> l0070819B
l0070819B:
	word32 edx_161
	return fn006DF4C0(ecx, eax, esi, out edx_161)
l00708138:
	bool v20_105
	word32 eax_30
	switch (esi - 6<32>) { l00708155 l00708166 l0070813F l0070814A l0070817F }
l0070817F:
	word32 ecx_162
	word32 edx_163
	eax_30 = fn006E0FD0(ecx, eax, out ecx_162, out edx_163)
l0070814A:
	eax_30 = CONVERT(CONVERT(ecx != eax, bool, int8), int8, uint32)
l0070813F:
	eax_30 = CONVERT(CONVERT(ecx == eax, bool, int8), int8, uint32)
l00708166:
	word32 eax_56 = fn00704FE0(eax, ecx)
	branch eax_56 < 0<32> l00708163
l00708174:
	eax_30 = CONVERT(CONVERT(eax_56 == 0<32>, bool, int8), int8, uint32)
l00708189:
	v20_105 = eax_30 != 0<32>
l00708155:
	word32 eax_81 = fn00704FE0(eax, ecx)
	v20_105 = eax_81 != 0<32>
	branch eax_81 >= 0<32> l0070818B
l0070818B:
	word32 eax_89 = 0xA191E4<32>
	branch v20_105 l00708197
l00708192:
	eax_89 = 0xA191D8<32>
l00708197:
	Mem100[eax_89:word32] = Mem96[eax_89:word32] + 1<32>
	return eax_89
l00708163:
	return 0<32>
fn00708130_exit:


word32 fn007081C0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00708DC0
// MayUse: 
// LiveOut: eax
// Trashed: SCZO ecx edx esi Top
// Preserved: esp
fn007081C0_entry:
l007081C0:
	word32 ecx_109
	word32 edx_110
	word32 eax_14 = fn006DE330(eax, edi, out ecx_109, out edx_110)
	branch eax_14 != 0<32> l00708201
l007081D1:
	word32 ecx_111
	word32 edx_112
	branch fn006E1110(out ecx_111, out edx_112) == 0<32> l007081FF
l007081E4:
	word32 ecx_113
	word32 edx_114
	word32 esi_115
	fn006ECC50(edi, out ecx_113, out edx_114, out esi_115)
	word32 ecx_116
	word32 edx_117
	fn006E15D0(Mem38[0x00A16F8C<p32>:word32], 0x8D7AAC<32>, out ecx_116, out edx_117)
l007081FF:
l00708201:
	return eax_14
fn007081C0_exit:


word32 fn00708210(word32 ebp, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00708DC0
// MayUse:  ebp:[0..31] Stack +0008:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn00708210_entry:
l00708210:
	word32 edi_589
	word32 edx_588
	word32 eax_21 = fn006DF760(dwArg08, 0x8D5F08<32>, out edx_588, out edi_589)
	word32 edi_15 = dwArg08
	word32 ebx_115 = eax_21
	word32 esp_101 = fp - 0x14<32>
	branch eax_21 != 0<32> l007082C5
l0070823A:
	word32 ecx_594
	word32 edx_595
	branch fn006E1110(out ecx_594, out edx_595) == 0<32> l0070828C
l0070824C:
	word32 ecx_596
	word32 edx_597
	fn006E1160(out ecx_596, out edx_597)
	word32 edx_598
	word32 edi_599
	word32 eax_57 = fn006DF760(dwArg08, 0x8AC17C<32>, out edx_598, out edi_599)
	branch eax_57 != 0<32> l00708296
l00708296:
	word32 edx_601
	word32 ecx_600
	word32 eax_74 = fn007038E0(eax_57, 0x8B0A10<32>, dwArg08, out ecx_600, out edx_601)
	word32 v17_80 = Mem72[eax_57:word32] + 0xFFFFFFFF<32>
	Mem81[eax_57:word32] = v17_80
	esp_101 = fp - 0x14<32>
	ebx_115 = eax_74
	branch v17_80 != 0<32> l007082B9
l007082AD:
	word32 eax_85 = Mem81[eax_57 + 4<32>:word32]
	word32 esp_89
	call Mem81[eax_85 + 0x18<32>:word32] (retsize: 4;)
		uses: eax:eax_85,Stack +0004:eax_57,Stack +000C:dwArg08,Stack +0024:dwArg08
		defs: esp:esp_89
	esp_101 = esp_89 + 4<32>
l007082B9:
	branch eax_74 == 0<32> l0070828C
l007082BD:
	Mem102[esp_101 + 0xC<32>:word32] = 1<32>
l007082C5:
	word32 esp_163
	word32 esp_104 = esp_101 - 4<i32>
	Mem108[esp_104:word32] = ebp
	Mem113[esp_104 - 4<i32>:word32] = 0<32>
	Mem116[esp_104 - 8<i32>:word32] = ebx_115
	Mem117[esp_104 + 0x14<32>:word32] = 0<32>
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 stackArg8 = <invalid>
	word32 ecx_592
	word32 edx_593
	word32 eax_125 = fn00703180(stackArg4, stackArg8, out ecx_592, out edx_593)
	word32 ebp_109 = 0<32>
	word32 esi_130 = eax_125
	word32 esp_131 = esp_104
	branch eax_125 == 0<32> l0070839F
l007082E0:
	branch Mem136[esp_131 + 0x10<32>:word32] == 0<32> l0070831C
l007082E7:
	word32 eax_140 = Mem136[esi_130 + 4<32>:word32]
	branch eax_140 == 0xA1B450<32> l00708303
l007082F1:
	word32 esp_143 = esp_131 - 4<i32>
	Mem144[esp_143:word32] = 0xA1B450<32>
	Mem146[esp_143 - 4<i32>:word32] = eax_140
	word32 edx_613
	word32 ecx_612
	branch fn006D5670(Mem146[esp_143 - 4<i32>:word32], Mem146[esp_143:word32], out ecx_612, out edx_613) == 0<32> l0070831C
l00708303:
	esp_163 = esp_131
	branch Mem159[esi_130 + 0x14<32>:byte] != 0x5F<8> l0070831C
l0070831C:
	word32 esp_164 = esp_131 - 4<i32>
	Mem166[esp_164:word32] = esi_130
	Mem171[esp_164 - 4<i32>:word32] = edi_15
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 stackArg8 = <invalid>
	word32 ecx_610
	word32 edx_611
	word32 eax_182 = fn006DE330(stackArg4, stackArg8, out ecx_610, out edx_611)
	branch eax_182 != 0<32> l00708331
l00708331:
	word32 eax_202
	word32 eax_192 = Mem171[esp_164 + 0x20<32>:word32]
	Mem195[esp_164:word32] = eax_182
	Mem197[esp_164 - 4<i32>:word32] = esi_130
	Mem199[esp_164 - 8<i32>:word32] = eax_192
	branch Mem171[eax_192 + 4<32>:word32] != 0xA1D1B8<32> l00708348
l00708348:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 stackArg8 = <invalid>
	word32 ecx_622
	eax_202 = fn00704300(stackArg4, stackArg8, dwArg08, out ecx_622)
l00708341:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 stackArg8 = <invalid>
	word32 edi_628
	word32 ebx_627
	word32 edx_626
	word32 ecx_625
	eax_202 = fn006FBD90(stackArg4, stackArg8, dwArg08, out ecx_625, out edx_626, out ebx_627, out edi_628)
l0070834D:
	ebp_109 = eax_202
l0070832C:
	ebp_109 = 0xFFFFFFFF<32>
l00708352:
	word32 v16_225 = Mem223[esi_130:word32] + 0xFFFFFFFF<32>
	Mem226[esi_130:word32] = v16_225
	esp_163 = esp_131
	branch v16_225 != 0<32> l00708363
l00708357:
	word32 ecx_229 = Mem226[esi_130 + 4<32>:word32]
	word32 edx_230 = Mem226[ecx_229 + 0x18<32>:word32]
	Mem233[esp_131 - 4<i32>:word32] = esi_130
	word32 esp_241
	call edx_230 (retsize: 4;)
		uses: ecx:ecx_229,Stack +000C:dwArg08
		defs: esp:esp_241
	esp_163 = esp_241 + 4<32>
l00708363:
	branch eax_182 == 0<32> l00708378
l00708367:
	word32 v18_254 = Mem253[eax_182:word32] + 0xFFFFFFFF<32>
	Mem255[eax_182:word32] = v18_254
	branch v18_254 != 0<32> l00708378
l0070836C:
	word32 eax_258 = Mem255[eax_182 + 4<32>:word32]
	word32 ecx_259 = Mem255[eax_258 + 0x18<32>:word32]
	Mem262[esp_163 - 4<i32>:word32] = eax_182
	word32 esp_267
	call ecx_259 (retsize: 4;)
		uses: eax:eax_258,Stack +000C:dwArg08
		defs: esp:esp_267
	esp_163 = esp_267 + 4<32>
l00708378:
	branch ebp_109 != 0<32> l007083BC
l0070837C:
	edi_15 = Mem280[esp_163 + 0x20<32>:word32]
l00708309:
	word32 v14_282 = Mem159[esi_130:word32] + 0xFFFFFFFF<32>
	Mem283[esi_130:word32] = v14_282
	branch v14_282 != 0<32> l00708380
l0070830E:
	word32 edx_286 = Mem283[esi_130 + 4<32>:word32]
	word32 eax_287 = Mem283[edx_286 + 0x18<32>:word32]
	Mem289[esp_131 - 4<i32>:word32] = esi_130
	word32 esp_290
	call eax_287 (retsize: 4;)
		uses: edx:edx_286,Stack +000C:dwArg08
		defs: esp:esp_290
	esp_163 = esp_290 + 4<32>
l00708380:
	word32 eax_300 = Mem299[esp_163 + 0x14<32>:word32]
	word32 esp_303 = esp_163 - 4<i32>
	Mem304[esp_303:word32] = eax_300 + 1<32>
	Mem308[esp_303 - 4<i32>:word32] = ebx_115
	Mem309[esp_303 + 0x18<32>:word32] = eax_300 + 1<32>
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 stackArg8 = <invalid>
	word32 edx_617
	word32 ecx_616
	word32 eax_317 = fn00703180(stackArg4, stackArg8, out ecx_616, out edx_617)
	esi_130 = eax_317
	esp_131 = esp_303 + 4<32>
	branch eax_317 != 0<32> l007082E0
l0070839F:
	word32 esp_330 = esp_131 - 4<i32>
	Mem331[esp_330:word32] = Mem327[0x00A17CA4<p32>:word32]
	esp_163 = esp_330 + 4<32>
	word32 ecx_606
	word32 edx_607
	branch fn006E1110(out ecx_606, out edx_607) != 0<32> l007083B7
l007083B7:
	word32 ecx_618
	word32 edx_619
	fn006E1160(out ecx_618, out edx_619)
l007083B2:
	ebp_109 = 0xFFFFFFFF<32>
l007083BC:
	word32 v15_359 = Mem358[ebx_115:word32] + 0xFFFFFFFF<32>
	Mem360[ebx_115:word32] = v15_359
	branch v15_359 != 0<32> l007083CD
l007083C1:
	word32 eax_363 = Mem360[ebx_115 + 4<32>:word32]
	word32 ecx_364 = Mem360[eax_363 + 0x18<32>:word32]
	Mem367[esp_163 - 4<i32>:word32] = ebx_115
	call ecx_364 (retsize: 4;)
		uses: eax:eax_363,Stack +000C:dwArg08
l007083CD:
	return ebp_109
l00708265:
	word32 ecx_602
	word32 edx_603
	branch fn006E1110(out ecx_602, out edx_603) == 0<32> l0070828C
l00708278:
	word32 ecx_604
	word32 edx_605
	fn006E0F80(Mem397[0x00A16F8C<p32>:word32], 0x8D7AC8<32>, out ecx_604, out edx_605)
l0070828C:
	return 0xFFFFFFFF<32>
fn00708210_exit:


void fn007083E0(word32 eax)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00708DC0
// MayUse:  eax:[0..31]
// LiveOut:
// Trashed: SCZO eax ecx Top
// Preserved: esp
fn007083E0_entry:
l007083E0:
	branch eax == 0<32> l00708404
l007083E4:
	word32 ecx_61
	word32 edx_62
	word32 esi_63
	branch fn006ECC50(eax, out ecx_61, out edx_62, out esi_63) == 0<32> l00708404
l007083F1:
	word32 ecx_64
	word32 edx_65
	fn006E15D0(dwArg04, dwArg08, out ecx_64, out edx_65)
l00708404:
	return
fn007083E0_exit:


word32 fn00708410(word32 ecx, word32 edx, word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00708DC0
// MayUse:  ecx:[0..31] edx:[0..31] Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn00708410_entry:
l00708410:
	word32 ebp_16 = Mem14[dwArg04 + 8<32>:word32]
	word32 esp_12 = fp - 12<i32>
	word32 esi_135 = dwArg04
	branch Mem6[dwArg08 + 8<32>:word32] + ebp_16 >= 0<32> l00708443
l00708443:
	branch Mem17[dwArg04:word32] != 2<32> l0070851F
l0070844C:
	word32 eax_23 = CONVERT(Mem17[ecx:byte], byte, word32)
	word32 esp_107 = fp - 20<i32>
	branch eax_23 == 0x5A<32> l007084D1
l007084D1:
	word32 edi_36 = Mem31[edx + 0x1C<32>:word32]
	word32 ebx_42 = Mem31[Mem31[Mem31[edx + 0x10<32>:word32] + 0x20<32>:word32] + 0xC<32> + ((CONVERT(Mem31[ecx + 2<32>:byte], byte, word32) << 8<32>) + CONVERT(Mem31[ecx + 1<32>:byte], byte, word32)) * 4<32>:word32]
	branch Mem31[edi_36 + 4<32>:word32] != 0xA1D1B8<32> l0070851D
l007084F4:
	esi_135 = dwArg04
	esp_107 = fp - 0x14<32>
	word32 ecx_345
	word32 edx_346
	branch fn006FBCC0(edi_36, ebx_42, out ecx_345, out edx_346) != dwArg04 l0070851D
l00708506:
	esp_107 = fp - 0x14<32>
	branch fn006FBE60(edi_36, dwArg04) == 0<32> l00708519
l00708514:
	word32 ecx_347
	word32 edx_348
	fn006E1160(out ecx_347, out edx_348)
l00708456:
	branch eax_23 == 0x7D<32> l00708497
l00708497:
	word32 eax_85 = (CONVERT(Mem31[ecx + 2<32>:byte], byte, word32) << 8<32>) + CONVERT(Mem31[ecx + 1<32>:byte], byte, word32)
	word32 ecx_86 = Mem31[edx + 0x138<32> + eax_85 * 4<32>:word32]
	branch ecx_86 != dwArg04 l0070851D
l007084AF:
	Mem91[edx + 0x138<32> + eax_85 * 4<32>:word32] = 0<32>
	branch ecx_86 == 0<32> l0070851D
l007084BE:
	word32 v15_93 = Mem91[ecx_86:word32] + 0xFFFFFFFF<32>
	Mem94[ecx_86:word32] = v15_93
	branch v15_93 != 0<32> l00708519
l007084C3:
	word32 edx_97 = Mem94[ecx_86 + 4<32>:word32]
	word32 esp_101
	call Mem94[edx_97 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_86,edx:edx_97,Stack +0004:ecx_86,Stack +0020:dwArg04,Stack +0024:dwArg08
		defs: esp:esp_101
	esp_107 = esp_101 + 4<32>
l0070845B:
	branch eax_23 != 0x89<32> l0070851D
l00708464:
	word32 edx_118 = Mem31[edx + 0x138<32> + (((CONVERT(Mem31[ecx + 2<32>:byte], byte, word32) << 8<32>) + Mem31[Mem31[edx + 0x10<32>:word32] + 0xC<32>:word32]) + CONVERT(Mem31[ecx + 1<32>:byte], byte, word32)) * 4<32>:word32]
	branch Mem31[edx_118 + 8<32>:word32] != dwArg04 l0070851D
l00708487:
	word32 ecx_340
	fn00750420(edx_118, 0<32>, out ecx_340)
	esp_107 = fp - 0x14<32>
l00708519:
	esi_135 = Mem134[esp_107 + 0x18<32>:word32]
l0070851D:
	esp_12 = esp_107 + 8<i32>
l0070851F:
	branch Mem144[esi_135:word32] != 1<32> l00708569
l00708524:
	branch Mem144[esi_135 + 0x10<32>:word32] != 0<32> l00708569
l00708569:
	word32 esp_153 = esp_12 - 4<i32>
	Mem154[esp_153:word32] = Mem144[esp_12 + 0x14<32>:word32]
	Mem157[esp_153 - 4<i32>:word32] = esp_153 + 0x14<32>
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	fn006EC440(stackArg4, dwArg04)
	return dwArg04
l0070852A:
	word32 esi_190 = Mem144[esp_12 + 8<32>:word32]
	word32 esp_192 = esp_12 - 4<i32>
	Mem193[esp_192:word32] = esi_190 + ebp_16
	Mem196[esp_192 - 4<i32>:word32] = esp_192 + 0x14<32>
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_343
	word32 edx_344
	branch fn006EC4F0(stackArg4, dwArg04, out ecx_343, out edx_344) != 0<32> l0070843D
l00708547:
	memcpy(dwArg04 + 0x14<32> + ebp_16, dwArg08 + 0x14<32>, esi_190)
	return dwArg04
l00708429:
	word32 edx_339
	word32 ecx_338
	fn006E0F80(Mem17[0x00A18598<p32>:word32], 0x8D48B0<32>, out ecx_338, out edx_339)
l0070843D:
	return 0<32>
fn00708410_exit:


void fn00708590(word32 dwArg04, word32 dwArg08, word32 dwArg0C)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00708DC0
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut:
// Trashed: SCZO eax ecx edi edx esi Top
// Preserved: esp
fn00708590_entry:
l00708590:
	fn006E1130(fp - 8<32>, fp - 0xC<32>, fp - 4<32>)
	branch dwLoc0C != 0<32> l007085C1
l007085B2:
	Mem28[0x00A163B8<p32>:word32] = Mem14[0x00A163B8<p32>:word32] + 1<32>
	dwLoc0C = 0xA163B8<32>
l007085C1:
	word32 ecx_324
	word32 edx_325
	word32 esi_326
	word32 eax_51 = fn006DFF80(3<32>, out ecx_324, out edx_325, out esi_326)
	branch eax_51 != 0<32> l007085F9
l007085F9:
	word32 eax_74 = fn007073E0(dwArg0C, eax_51, 1<32>, dwArg04, dwArg08)
	word32 v13_82 = Mem71[eax_51:word32] + 0xFFFFFFFF<32>
	Mem83[eax_51:word32] = v13_82
	branch v13_82 != 0<32> l0070862A
l0070861E:
	word32 edx_87 = Mem83[eax_51 + 4<32>:word32]
	call Mem83[edx_87 + 0x18<32>:word32] (retsize: 4;)
		uses: edx:edx_87,Stack +0000:dwLoc04,Stack +0004:eax_51,Stack +0010:dwLoc0C_243,Stack +0014:dwLoc08,Stack +0018:dwLoc04,Stack +0020:dwArg04,Stack +0024:dwArg08,Stack +0028:dwArg0C,Stack +FFFFFFF8:dwLoc0C_243,Stack +FFFFFFFC:dwLoc08
l0070862A:
	word32 esp_106 = fp - 16<i32>
	branch eax_74 != 0<32> l0070864B
l0070864B:
	branch dwLoc08 == 0<32> l00708667
l0070864F:
	Mem112[dwLoc08:word32] = Mem100[dwLoc08:word32] + 0xFFFFFFFF<32>
	branch Mem112[dwLoc08:word32] != 0<32> l00708667
l0070865B:
	word32 ecx_116 = Mem112[dwLoc08 + 4<32>:word32]
	word32 esp_122
	call Mem112[ecx_116 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_116,Stack +0000:dwLoc04,Stack +0004:dwLoc08,Stack +000C:dwLoc0C_243,Stack +0010:dwLoc08,Stack +0014:dwLoc04,Stack +001C:dwArg04,Stack +0020:dwArg08,Stack +0024:dwArg0C,Stack +FFFFFFF8:dwLoc0C_243,Stack +FFFFFFFC:dwLoc08
		defs: esp:esp_122
	esp_106 = esp_122 + 4<32>
l00708667:
	word32 eax_132 = Mem131[esp_106 + 4<32>:word32]
	branch eax_132 == 0<32> l00708687
l0070866F:
	Mem137[eax_132:word32] = Mem131[eax_132:word32] + 0xFFFFFFFF<32>
	word32 eax_138 = Mem137[esp_106 + 4<32>:word32]
	branch Mem137[eax_138:word32] != 0<32> l00708687
l0070867B:
	word32 ecx_141 = Mem137[eax_138 + 4<32>:word32]
	word32 edx_142 = Mem137[ecx_141 + 0x18<32>:word32]
	Mem144[esp_106 - 4<i32>:word32] = eax_138
	word32 esp_148
	call edx_142 (retsize: 4;)
		uses: ecx:ecx_141,Stack +0000:dwLoc04,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C,Stack +FFFFFFF8:dwLoc0C_243,Stack +FFFFFFFC:dwLoc08
		defs: esp:esp_148
	esp_106 = esp_148 + 4<32>
l00708687:
	word32 eax_158 = Mem157[esp_106 + 0xC<32>:word32]
	branch eax_158 == 0<32> l007086A7
l0070868F:
	Mem163[eax_158:word32] = Mem157[eax_158:word32] + 0xFFFFFFFF<32>
	word32 eax_164 = Mem163[esp_106 + 0xC<32>:word32]
	branch Mem163[eax_164:word32] != 0<32> l007086A7
l0070869B:
	word32 ecx_167 = Mem163[eax_164 + 4<32>:word32]
	word32 edx_168 = Mem163[ecx_167 + 0x18<32>:word32]
	Mem170[esp_106 - 4<i32>:word32] = eax_164
	call edx_168 (retsize: 4;)
		uses: ecx:ecx_167,Stack +0000:dwLoc04,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C,Stack +FFFFFFF8:dwLoc0C_243,Stack +FFFFFFFC:dwLoc08
l007086A7:
	return
l00708633:
	word32 edx_330
	word32 ecx_329
	fn006E0E00(dwLoc04, out ecx_329, out edx_330)
	return
l007085DD:
	word32 edx_328
	word32 ecx_327
	fn006E0E00(dwLoc04, out ecx_327, out edx_328)
	return
fn00708590_exit:


word32 fn007086B0(word32 edi, word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00708880
//      fn00708DC0
// MayUse:  edi:[0..31] Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31] Stack +0010:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx edx Top
// Preserved: esi esp
fn007086B0_entry:
l007086B0:
	fn006E1130(fp - 0xC<32>, fp - 8<32>, fp - 4<32>)
	word32 esi_26 = Mem17[edi + 0x38<32>:word32]
	branch Mem17[esi_26 + 0x10<32>:word32] != 0<32> l00708719
l007086D4:
	word32 ecx_54
	Mem41[esi_26 + 0x10<32>:word32] = 1<32>
	Mem42[esi_26 + 0x14<32>:word32] = 0<32>
	word32 esp_43
	word32 eax_44
	call dwArg04 (retsize: 4;)
		uses: eax:dwArg10,ecx:dwArg0C,edx:dwArg08,Stack +0004:dwArg08,Stack +000C:dwArg0C,Stack +0010:dwArg10,Stack +0028:dwArg04,Stack +002C:dwArg08,Stack +0030:dwArg0C,Stack +0034:dwArg10
		defs: eax:eax_44,esp:esp_43
	word32 esp_122 = esp_43 + 0x10<32>
	branch Mem42[esi_26 + 0x1C<32>:word32] != 0<32> l00708709
l007086FF:
	branch Mem42[esi_26 + 0x18<32>:word32] != 0<32> l00708709
l00708709:
	ecx_54 = 1<32>
l00708705:
	ecx_54 = 0<32>
l0070870E:
	Mem63[esi_26 + 0x10<32>:word32] = Mem42[esi_26 + 0x10<32>:word32] + 0xFFFFFFFF<32>
	Mem69[esi_26 + 0x14<32>:word32] = ecx_54
	branch eax_44 != 0<32> l00708737
l00708737:
	word32 eax_73 = Mem69[esp_43 + 0x14<32>:word32]
	branch eax_73 == 0<32> l00708757
l0070873F:
	Mem78[eax_73:word32] = Mem69[eax_73:word32] + 0xFFFFFFFF<32>
	word32 eax_79 = Mem78[esp_43 + 0x14<32>:word32]
	branch Mem78[eax_79:word32] != 0<32> l00708757
l0070874B:
	word32 ecx_82 = Mem78[eax_79 + 4<32>:word32]
	word32 edx_83 = Mem78[ecx_82 + 0x18<32>:word32]
	Mem85[esp_43 + 0xC<32>:word32] = eax_79
	word32 esp_90
	call edx_83 (retsize: 4;)
		uses: ecx:ecx_82,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C,Stack +0014:dwArg10
		defs: esp:esp_90
	esp_122 = esp_90 + 4<32>
l00708757:
	word32 eax_100 = Mem99[esp_122 + 8<32>:word32]
	branch eax_100 == 0<32> l00708777
l0070875F:
	Mem105[eax_100:word32] = Mem99[eax_100:word32] + 0xFFFFFFFF<32>
	word32 eax_106 = Mem105[esp_122 + 8<32>:word32]
	branch Mem105[eax_106:word32] != 0<32> l00708777
l0070876B:
	word32 ecx_109 = Mem105[eax_106 + 4<32>:word32]
	word32 edx_110 = Mem105[ecx_109 + 0x18<32>:word32]
	Mem112[esp_122 - 4<i32>:word32] = eax_106
	word32 esp_116
	call edx_110 (retsize: 4;)
		uses: ecx:ecx_109,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C,Stack +0014:dwArg10
		defs: esp:esp_116
	esp_122 = esp_116 + 4<32>
l00708777:
	word32 eax_126 = Mem125[esp_122 + 0xC<32>:word32]
	branch eax_126 == 0<32> l00708797
l0070877F:
	Mem131[eax_126:word32] = Mem125[eax_126:word32] + 0xFFFFFFFF<32>
	word32 eax_132 = Mem131[esp_122 + 0xC<32>:word32]
	branch Mem131[eax_132:word32] != 0<32> l00708797
l0070878B:
	word32 ecx_135 = Mem131[eax_132 + 4<32>:word32]
	word32 edx_136 = Mem131[ecx_135 + 0x18<32>:word32]
	Mem138[esp_122 - 4<i32>:word32] = eax_132
	call edx_136 (retsize: 4;)
		uses: ecx:ecx_135,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C,Stack +0014:dwArg10
l00708797:
	return 0xFFFFFFFF<32>
l00708719:
	word32 edx_264
	word32 ecx_263
	fn006E0E00(dwLoc04, out ecx_263, out edx_264)
	return 0<32>
fn007086B0_exit:


word32 fn00708800()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006F6490
// MayUse: 
// LiveOut: eax
// Trashed: SCZO eax ecx Top
// Preserved: esp
fn00708800_entry:
l00708800:
	word32 eax_5 = Mem0[0x00A6D67C<p32>:word32]
	word32 eax_9
	call Mem7[0x00A6D680<p32>:word32] (retsize: 4;)
		uses: eax:eax_5,Stack +0004:eax_5
		defs: eax:eax_9
	branch eax_9 != 0<32> l0070881F
l0070881F:
	return Mem7[eax_9 + 0x14<32>:word32]
l00708813:
	return Mem7[Mem7[Mem7[0x00A6D67C<p32>:word32] + 4<32>:word32] + 0x10<32>:word32]
fn00708800_exit:


word32 fn00708860()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006F9120
// MayUse: 
// LiveOut: eax
// Trashed: SCZO eax Top
// Preserved: esp
fn00708860_entry:
l00708860:
	word32 eax_5 = Mem0[0x00A6D67C<p32>:word32]
	word32 eax_9
	call Mem7[0x00A6D680<p32>:word32] (retsize: 4;)
		uses: eax:eax_5,Stack +0004:eax_5
		defs: eax:eax_9
	branch eax_9 != 0<32> l00708874
l00708874:
	return Mem7[eax_9 + 0x18<32>:word32]
l00708873:
	return eax_9
fn00708860_exit:


word32 fn00708880(word32 eax, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00708DC0
// MayUse:  eax:[0..31] Stack +0004:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn00708880_entry:
	byte ah_16 = SLICE(eax, byte, 8)
l00708880:
	word32 esp_150
	word32 esp_335
	word32 eax_115
	word32 ecx_149
	word32 ebp_17 = CONVERT(ah_16, byte, word32)
	word32 ecx_129 = (eax & 0xFF<32>) + ebp_17 * 2<32>
	word32 edx_23 = Mem13[dwArg04:word32] - (ecx_129 * 4<32> + 4<32>)
	word32 edi_27 = Mem26[edx_23:word32]
	word32 esi_147 = eax & 0xFF<32>
	word32 esp_24 = fp - 0x1C<32>
	word32 eax_28 = Mem26[edi_27 + 4<32>:word32]
	branch eax_28 != 0xA1C698<32> l00708B48
l007088BC:
	branch ebp_17 != 0<32> l00708B48
l00708B48:
	branch eax_28 != 0xA1ED20<32> l00708B89
l00708B4F:
	word32 ebx_41 = Mem31[edi_27 + 0xC<32>:word32]
	branch ebx_41 == 0<32> l00708B89
l00708B89:
	Mem48[edi_27:word32] = Mem31[edi_27:word32] + 1<32>
l00708B56:
	Mem51[ebx_41:word32] = Mem31[ebx_41:word32] + 1<32>
	edi_27 = Mem51[edi_27 + 8<32>:word32]
	Mem54[edi_27:word32] = Mem51[edi_27:word32] + 1<32>
	word32 eax_56 = Mem54[edx_23:word32]
	Mem58[eax_56:word32] = Mem54[eax_56:word32] + 0xFFFFFFFF<32>
	word32 eax_59 = Mem58[edx_23:word32]
	branch Mem58[eax_59:word32] != 0<32> l00708B7F
l00708B6B:
	word32 ecx_62 = Mem58[eax_59 + 4<32>:word32]
	word32 esp_70
	call Mem58[ecx_62 + 0x18<32>:word32] (retsize: 4;)
		uses: eax:eax_59,ecx:ecx_62,Stack +0004:eax_59,Stack +0028:dwArg04
		defs: esp:esp_70
	edx_23 = Mem66[esp_70 + 0x18<32>:word32]
	ecx_129 = Mem66[esp_70 + 0x1C<32>:word32]
	esp_24 = esp_70 + 4<32>
l00708B7F:
	Mem84[edx_23:word32] = ebx_41
	esi_147 = (eax & 0xFF<32>) + 1<32>
	ecx_129 = ecx_129 + 1<32>
l00708B8C:
	branch Mem91[edi_27 + 4<32>:word32] != 0xA249B8<32> l00708BAA
l00708BAA:
	word32 ecx_97 = Mem91[esp_24 + 0x20<32>:word32]
	word32 esp_98 = esp_24 - 4<i32>
	Mem101[esp_98:word32] = esi_147
	Mem103[esp_98 - 4<i32>:word32] = edi_27
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	eax_115 = fn00707B30(ebp_17, ecx_97, stackArg4, dwArg04)
l00708B95:
	word32 eax_122 = Mem91[esp_24 + 0x20<32>:word32]
	word32 esp_123 = esp_24 - 4<i32>
	Mem124[esp_123:word32] = ebp_17
	Mem126[esp_123 - 4<i32>:word32] = esi_147
	Mem128[esp_123 - 8<i32>:word32] = eax_122
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 stackArg12 = <invalid>
	eax_115 = fn00707850(ecx_129, edi_27, stackArg4, dwArg04, stackArg12)
l00708BBA:
	word32 v21_143 = Mem142[edi_27:word32] + 0xFFFFFFFF<32>
	Mem144[edi_27:word32] = v21_143
	esp_150 = esp_24
	esi_147 = eax_115
	branch v21_143 != 0<32> l00708BCD
l00708BC1:
	ecx_149 = Mem144[edi_27 + 4<32>:word32]
	Mem152[esp_24 - 4<i32>:word32] = edi_27
l007088C4:
	word32 ecx_153 = Mem31[edi_27 + 8<32>:word32]
	word32 eax_154 = Mem31[ecx_153 + 8<32>:word32]
	byte al_155 = SLICE(eax_154, byte, 0)
	word32 ebx_158 = Mem31[0x00A6D67C<p32>:word32]
	branch (al_155 & 0xC<8>) == 0<8> l00708A87
l00708A87:
	word32 eax_163 = fn00707AF0(eax & 0xFF<32>, dwArg04)
	branch Mem31[ebx_158 + 0x14<32>:word32] == 0<32> l00708B22
l00708A9E:
	word32 eax_171 = Mem31[ebx_158 + 0x18<32>:word32]
	branch eax_171 == 0<32> l00708B22
l00708B22:
	eax_115 = fn006F9540(edi_27, dwArg04, 0<32>)
	esp_150 = fp - 0x1C<32>
	esi_147 = eax_115
l00708AA5:
	eax_115 = fn007073E0(Mem201[ebx_158 + 8<32>:word32], edi_27, 4<32>, eax_171, Mem31[ebx_158 + 0x20<32>:word32])
	esp_150 = fp - 0x1C<32>
	branch eax_115 == 0<32> l00708AC4
l00708AC4:
	word32 eax_223 = fn006F9540(edi_27, dwArg04, 0<32>)
	esi_147 = eax_223
	eax_115 = Mem221[ebx_158 + 0x18<32>:word32]
	esp_150 = fp - 0x1C<32>
	branch eax_115 == 0<32> l00708B30
l00708AD9:
	branch eax_223 != 0<32> l00708AF2
l00708AF2:
	eax_115 = fn007073E0(Mem241[ebx_158 + 8<32>:word32], edi_27, 6<32>, eax_115, Mem221[ebx_158 + 0x20<32>:word32])
	esp_150 = fp - 0x1C<32>
	branch eax_115 == 0<32> l00708B30
l00708B0D:
	word32 v22_256 = Mem241[eax_223:word32] + 0xFFFFFFFF<32>
	Mem257[eax_223:word32] = v22_256
	branch v22_256 != 0<32> l00708B1E
l00708B12:
	word32 edx_260 = Mem257[eax_223 + 4<32>:word32]
	word32 eax_261 = Mem257[edx_260 + 0x18<32>:word32]
	word32 esp_264
	call eax_261 (retsize: 4;)
		uses: eax:eax_261,edx:edx_260,Stack +0004:eax_223,Stack +0008:dwArg04,Stack +0028:dwArg04
		defs: eax:eax_265,esp:esp_264
	esp_150 = esp_264 + 4<32>
l00708B1E:
	esi_147 = 0<32>
l00708ADD:
	eax_115 = fn007086B0(Mem277[ebx_158 + 8<32>:word32], eax_115, Mem221[ebx_158 + 0x20<32>:word32], 5<32>, edi_27)
	esp_150 = fp - 0x1C<32>
l00708AC0:
	esi_147 = 0<32>
l00708B30:
	branch eax_163 == 0<32> l00708BCD
l00708B38:
	word32 v20_304 = Mem302[eax_163:word32] + 0xFFFFFFFF<32>
	Mem305[eax_163:word32] = v20_304
	branch v20_304 != 0<32> l00708BCD
l00708B42:
	ecx_149 = Mem305[eax_163 + 4<32>:word32]
	Mem312[esp_150 - 4<i32>:word32] = eax_163
l00708BC5:
	call Mem314[ecx_149 + 0x18<32>:word32] (retsize: 4;)
		uses: eax:eax_324,Stack +0008:dwArg04
		defs: esp:esp_335
l007088D8:
	word32 ebp_343 = Mem31[ecx_153 + 4<32>:word32]
	word32 ecx_344 = Mem31[edi_27 + 0xC<32>:word32]
	branch (al_155 & 4<8>) == 0<8> l007089A0
l007088EA:
	branch (eax & 0xFF<32>) != 0<32> l007089A0
l007089A0:
	branch (al_155 & 8<8>) == 0<8> l00708A73
l007089A8:
	branch (eax & 0xFF<32>) != 1<32> l00708A73
l00708A73:
	fn00707810(eax_154)
	esp_150 = fp - 0x1C<32>
	esi_147 = 0<32>
l007089B1:
	word32 eax_388 = Mem345[dwArg04:word32]
	Mem390[dwArg04:word32] = eax_388 + 0xFFFFFFFC<32>
	word32 eax_389 = eax_388 + 0xFFFFFFFC<32>
	word32 esi_392 = Mem390[eax_388 + 0xFFFFFFFC<32>:word32]
	branch Mem390[ebx_158 + 0x14<32>:word32] == 0<32> l00708A4F
l007089CC:
	eax_389 = Mem393[ebx_158 + 0x18<32>:word32]
	branch eax_389 == 0<32> l00708A4F
l00708A4F:
	word32 esp_412
	word32 eax_413
	call ebp_343 (retsize: 4;)
		uses: eax:eax_409,Stack +0004:ecx_344,Stack +0008:esi_392,Stack +002C:dwArg04
		defs: eax:eax_413,esp:esp_412
	esp_150 = esp_412 + 8<32>
	esi_147 = eax_413
l007089D3:
	word32 eax_429 = fn007073E0(Mem425[ebx_158 + 8<32>:word32], edi_27, 4<32>, eax_389, Mem393[ebx_158 + 0x20<32>:word32])
	esp_150 = fp - 0x1C<32>
	branch eax_429 == 0<32> l007089F2
l007089F2:
	word32 esp_445
	word32 eax_446
	call ebp_343 (retsize: 4;)
		uses: eax:eax_429,edx:ecx_344,Stack +0004:ecx_344,Stack +0008:esi_392,Stack +002C:dwArg04
		defs: eax:eax_446,esp:esp_445
	esi_147 = eax_446
	word32 eax_452 = Mem444[ebx_158 + 0x18<32>:word32]
	esp_150 = esp_445 + 8<32>
	branch eax_452 == 0<32> l00708A58
l00708A06:
	branch eax_446 != 0<32> l00708A1F
l00708A1F:
	Mem462[esp_445 + 4<32>:word32] = Mem444[ebx_158 + 0x20<32>:word32]
	Mem464[esp_445:word32] = eax_452
	esp_150 = esp_445 + 8<32>
	branch fn007073E0(Mem464[ebx_158 + 8<32>:word32], edi_27, 6<32>, Mem464[esp_445:word32], Mem464[esp_445 + 4<i32>:word32]) == 0<32> l00708A58
l00708A3A:
	word32 v28_479 = Mem464[eax_446:word32] + 0xFFFFFFFF<32>
	Mem480[eax_446:word32] = v28_479
	branch v28_479 != 0<32> l00708A4B
l00708A3F:
	word32 eax_483 = Mem480[eax_446 + 4<32>:word32]
	word32 ecx_484 = Mem480[eax_483 + 0x18<32>:word32]
	Mem486[esp_445 + 4<32>:word32] = eax_446
	word32 esp_487
	call ecx_484 (retsize: 4;)
		uses: eax:eax_483,Stack +0008:dwArg04
		defs: esp:esp_487
	esp_150 = esp_487 + 4<32>
l00708A4B:
	esi_147 = 0<32>
l00708A0A:
	word32 ecx_498 = Mem444[ebx_158 + 0x20<32>:word32]
	Mem500[esp_445 + 4<32>:word32] = edi_27
	word32 edi_501 = Mem500[ebx_158 + 8<32>:word32]
	Mem503[esp_445:word32] = 5<32>
	Mem505[esp_445 - 4<i32>:word32] = ecx_498
	Mem507[esp_445 - 8<i32>:word32] = eax_452
	fn007086B0(edi_501, Mem507[esp_445 - 8<i32>:word32], Mem507[esp_445 - 4<i32>:word32], Mem507[esp_445:word32], Mem507[esp_445 + 4<i32>:word32])
	esp_150 = esp_445 + 8<32>
l007089EE:
	esi_147 = 0<32>
l00708A58:
	word32 eax_524 = Mem522[esp_150 + 0x18<32>:word32]
	word32 v27_525 = Mem522[eax_524:word32] + 0xFFFFFFFF<32>
	Mem526[eax_524:word32] = v27_525
	branch v27_525 != 0<32> l00708BCD
l00708A65:
	word32 edx_529 = Mem526[eax_524 + 4<32>:word32]
	Mem531[esp_150 - 4<i32>:word32] = eax_524
	word32 eax_532 = Mem531[edx_529 + 0x18<32>:word32]
	call eax_532 (retsize: 4;)
		uses: eax:eax_532,edx:edx_529,Stack +0008:dwArg04
		defs: esp:esp_542
l00708BCA:
	esp_150 = esp_335 + 4<32>
l007088F2:
	branch Mem345[ebx_158 + 0x14<32>:word32] == (eax & 0xFF<32>) l00708991
l007088FB:
	eax_154 = Mem345[ebx_158 + 0x18<32>:word32]
	branch eax_154 == 0<32> l00708991
l00708991:
	word32 esp_569
	word32 eax_570
	call ebp_343 (retsize: 4;)
		uses: eax:eax_566,Stack +0004:ecx_344,Stack +0008:0<32>,Stack +002C:dwArg04
		defs: eax:eax_570,esp:esp_569
	esp_150 = esp_569 + 8<32>
	esi_147 = eax_570
l00708906:
	word32 eax_586 = fn007073E0(Mem582[ebx_158 + 8<32>:word32], edi_27, 4<32>, eax_154, Mem345[ebx_158 + 0x20<32>:word32])
	esp_150 = fp - 0x1C<32>
	branch eax_586 != 0<32> l00708BCD
l00708925:
	word32 esp_602
	word32 eax_603
	call ebp_343 (retsize: 4;)
		uses: eax:eax_586,edx:ecx_344,Stack +0004:ecx_344,Stack +0008:0<32>,Stack +002C:dwArg04
		defs: eax:eax_603,esp:esp_602
	esi_147 = eax_603
	word32 eax_609 = Mem601[ebx_158 + 0x18<32>:word32]
	esp_150 = esp_602 + 8<32>
	branch eax_609 == 0<32> l00708BCD
l0070893E:
	branch eax_603 != 0<32> l0070895A
l0070895A:
	Mem619[esp_602 + 4<32>:word32] = Mem601[ebx_158 + 0x20<32>:word32]
	Mem621[esp_602:word32] = eax_609
	esp_150 = esp_602 + 8<32>
	branch fn007073E0(Mem621[ebx_158 + 8<32>:word32], edi_27, 6<32>, Mem621[esp_602:word32], Mem621[esp_602 + 4<i32>:word32]) == 0<32> l00708BCD
l00708979:
	word32 v23_636 = Mem621[eax_603:word32] + 0xFFFFFFFF<32>
	Mem637[eax_603:word32] = v23_636
	branch v23_636 != 0<32> l0070898A
l0070897E:
	word32 eax_640 = Mem637[eax_603 + 4<32>:word32]
	word32 ecx_641 = Mem637[eax_640 + 0x18<32>:word32]
	Mem643[esp_602 + 4<32>:word32] = eax_603
	word32 esp_644
	call ecx_641 (retsize: 4;)
		uses: eax:eax_640,Stack +0008:dwArg04
		defs: esp:esp_644
	esp_150 = esp_644 + 4<32>
l0070898A:
	esi_147 = 0<32>
l00708942:
	word32 ecx_655 = Mem601[ebx_158 + 0x20<32>:word32]
	Mem657[esp_602 + 4<32>:word32] = edi_27
	word32 edi_658 = Mem657[ebx_158 + 8<32>:word32]
	Mem660[esp_602:word32] = 5<32>
	Mem662[esp_602 - 4<i32>:word32] = ecx_655
	Mem664[esp_602 - 8<i32>:word32] = eax_609
	fn007086B0(edi_658, Mem664[esp_602 - 8<i32>:word32], Mem664[esp_602 - 4<i32>:word32], Mem664[esp_602:word32], Mem664[esp_602 + 4<i32>:word32])
	esp_150 = esp_602 + 8<32>
l00708BCD:
	word32 ebx_679 = Mem676[esp_150 + 0x14<32>:word32]
	word32 edi_680 = Mem676[esp_150 + 0x20<32>:word32]
	branch Mem676[edi_680:word32] <=u ebx_679 l00708BFC
l00708BD9:
	word32 esp_683 = esp_150
l00708BE0:
	Mem687[edi_680:word32] = Mem685[edi_680:word32] + 0xFFFFFFFC<32>
	word32 eax_689 = Mem687[Mem687[edi_680:word32]:word32]
	word32 v26_690 = Mem687[eax_689:word32] + 0xFFFFFFFF<32>
	Mem691[eax_689:word32] = v26_690
	branch v26_690 != 0<32> l00708BF8
l00708BEC:
	word32 ecx_694 = Mem691[eax_689 + 4<32>:word32]
	word32 edx_695 = Mem691[ecx_694 + 0x18<32>:word32]
	Mem698[esp_683 - 4<i32>:word32] = eax_689
	word32 esp_703
	call edx_695 (retsize: 4;)
		uses: eax:eax_689,ecx:ecx_694,Stack +0008:dwArg04
		defs: esp:esp_703
	esp_683 = esp_703 + 4<32>
l00708BF8:
	branch Mem712[edi_680:word32] >u ebx_679 l00708BE0
l00708BFC:
	return esi_147
fn00708880_exit:


word32 fn00708C10(word32 ebx, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00708DC0
// MayUse:  ebx:[0..31] Stack +0004:[0..31]
// LiveOut: eax
// Trashed: SCZO ebp ecx edi edx esi Top
// Preserved: esp
fn00708C10_entry:
l00708C10:
	word32 esi_147
	word32 esp_148
	word32 eax_9 = Mem7[dwArg04 + 4<32>:word32]
	branch eax_9 == 0xA1D1B8<32> l00708C36
l00708C24:
	word32 ecx_466
	word32 edx_467
	branch fn006D5670(eax_9, 0xA1D1B8<32>, out ecx_466, out edx_467) == 0<32> l00708C4E
l00708C36:
	word32 ecx_462
	word32 edx_463
	word32 edi_465
	word32 esi_464
	word32 eax_43 = fn006FD8B0(dwArg04, 0x8D7B2C<32>, out ecx_462, out edx_463, out esi_464, out edi_465)
	esi_147 = eax_43
	esp_148 = fp - 0x14<32>
	branch eax_43 != 0<32> l00708CE0
l00708C4E:
	word32 eax_57 = Mem56[ebx + 4<32>:word32]
	branch eax_57 == 0xA16588<32> l00708C6A
l00708C58:
	word32 ecx_468
	word32 edx_469
	branch fn006D5670(eax_57, 0xA16588<32>, out ecx_468, out edx_469) == 0<32> l00708C91
l00708C6A:
	branch Mem77[ebx + 8<32>:word32] <= 0<32> l00708C91
l00708C91:
	word32 eax_81 = Mem80[0x00A6D67C<p32>:word32]
	word32 esp_99
	word32 eax_100
	call Mem85[0x00A6D680<p32>:word32] (retsize: 4;)
		uses: eax:eax_81,Stack +0004:eax_81,Stack +0008:dwArg04,Stack +0020:dwArg04
		defs: eax:eax_100,esp:esp_99
	branch eax_100 == 0<32> l00708CDB
l00708CA4:
	word32 esi_109 = Mem85[eax_100 + 0x18<32>:word32]
	branch esi_109 == 0<32> l00708CDB
l00708CAB:
	word32 eax_113 = Mem85[esi_109 + 4<32>:word32]
	branch eax_113 == 0xA1D1B8<32> l00708CC7
l00708CB5:
	Mem117[esp_99:word32] = 0xA1D1B8<32>
	Mem119[esp_99 - 4<i32>:word32] = eax_113
	word32 edx_483
	word32 ecx_482
	branch fn006D5670(Mem119[esp_99 - 4<i32>:word32], Mem119[esp_99:word32], out ecx_482, out edx_483) == 0<32> l00708CDB
l00708CC7:
	Mem133[esp_99:word32] = 0x8D7B2C<32>
	Mem136[esp_99 - 4<i32>:word32] = esi_109
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 edx_479
	word32 esi_480
	word32 edi_481
	word32 ecx_478
	word32 eax_142 = fn006FD8B0(stackArg4, dwArg04, out ecx_478, out edx_479, out esi_480, out edi_481)
	esi_147 = eax_142
	esp_148 = esp_99 + 4<32>
	branch eax_142 != 0<32> l00708CE0
l00708CDB:
	esp_148 = esp_99 + 4<32>
	esi_147 = 0xA1E968<32>
l00708C70:
	word32 edi_153 = Mem77[ebx + 0xC<32>:word32]
	word32 edx_470
	word32 edi_471
	word32 eax_159 = fn006DF760(edi_153, dwArg04, out edx_470, out edi_471)
	esi_147 = eax_159
	esp_148 = fp - 0x14<32>
	branch eax_159 != 0<32> l00708CE3
l00708C87:
	word32 ecx_475
	word32 edx_476
	fn006E1160(out ecx_475, out edx_476)
	esi_147 = Mem157[edi_153 + 4<32>:word32]
l00708CE0:
	Mem181[esi_147:word32] = Mem178[esi_147:word32] + 1<32>
l00708CE3:
	word32 eax_187 = Mem186[esp_148 + 0x1C<32>:word32]
	word32 esp_188 = esp_148 - 4<i32>
	Mem189[esp_188:word32] = 0<32>
	Mem194[esp_188 - 4<i32>:word32] = dwArg04
	Mem199[esp_188 - 8<i32>:word32] = ebx
	Mem201[esp_188 - 12<i32>:word32] = eax_187
	Mem204[esp_188 - 16<i32>:word32] = esi_147
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_473
	word32 edx_474
	word32 eax_212 = fn00703AF0(stackArg4, out ecx_473, out edx_474)
	word32 v13_218 = Mem204[esi_147:word32] + 0xFFFFFFFF<32>
	Mem219[esi_147:word32] = v13_218
	word32 esp_217 = esp_188 + 4<32>
	branch v13_218 != 0<32> l00708D08
l00708CFC:
	word32 ecx_223 = Mem219[esi_147 + 4<32>:word32]
	word32 edx_224 = Mem219[ecx_223 + 0x18<32>:word32]
	Mem226[esp_188:word32] = esi_147
	word32 esp_227
	call edx_224 (retsize: 4;)
		uses: ecx:ecx_223,Stack +0008:dwArg04
		defs: esp:esp_227
	esp_217 = esp_227 + 4<32>
l00708D08:
	branch eax_212 != 0<32> l00708DB1
l00708D10:
	word32 esp_242 = esp_217 - 4<i32>
	Mem243[esp_242:word32] = Mem239[0x00A16B7C<p32>:word32]
	word32 edx_485
	word32 ecx_484
	branch fn006E1110(out ecx_484, out edx_485) == 0<32> l00708DB1
l00708D26:
	word32 esp_290
	Mem260[esp_242:word32] = esp_242 + 0x10<32>
	Mem263[esp_242 - 4<i32>:word32] = esp_242 + 0x1C<32>
	Mem266[esp_242 - 8<i32>:word32] = esp_242 + 0x14<32>
	fn006E1130(Mem266[esp_242 - 8<i32>:word32], Mem266[esp_242 - 4<i32>:word32], Mem266[esp_242:word32])
	word32 eax_274 = Mem266[esp_242 + 0x1C<32>:word32]
	branch Mem266[eax_274 + 4<32>:word32] == 0xA1B450<32> l00708D63
l00708D4A:
	word32 ecx_278 = Mem266[eax_274 + 4<32>:word32]
	Mem280[esp_242:word32] = 0xA1B450<32>
	Mem282[esp_242 - 4<i32>:word32] = ecx_278
	esp_290 = esp_242 + 4<32>
	word32 ecx_486
	word32 edx_487
	branch fn006D5670(Mem282[esp_242 - 4<i32>:word32], Mem282[esp_242:word32], out ecx_486, out edx_487) == 0<32> l00708D9A
l00708D5F:
	eax_274 = Mem282[esp_242 + 0x1C<32>:word32]
l00708D63:
	Mem300[esp_242:word32] = eax_274 + 0x14<32>
	Mem302[esp_242 - 4<i32>:word32] = 0x8D7AFC<32>
	word32 eax_309 = fn006F2070()
	esp_290 = esp_242 + 4<32>
	branch eax_309 == 0<32> l00708D9A
l00708D7A:
	word32 eax_319 = Mem302[esp_242 + 0x1C<32>:word32]
	Mem321[eax_319:word32] = Mem302[eax_319:word32] + 0xFFFFFFFF<32>
	word32 eax_322 = Mem321[esp_242 + 0x1C<32>:word32]
	branch Mem321[eax_322:word32] != 0<32> l00708D96
l00708D8A:
	word32 edx_325 = Mem321[eax_322 + 4<32>:word32]
	Mem327[esp_242:word32] = eax_322
	word32 esp_329
	call Mem327[edx_325 + 0x18<32>:word32] (retsize: 4;)
		uses: edx:edx_325,Stack +0008:dwArg04
		defs: esp:esp_329
	esp_290 = esp_329 + 4<32>
l00708D96:
	Mem339[esp_290 + 0x18<32>:word32] = eax_309
l00708D9A:
	word32 edx_343 = Mem341[esp_290 + 0x18<32>:word32]
	word32 eax_344 = Mem341[esp_290 + 0x10<32>:word32]
	word32 esp_345 = esp_290 - 4<i32>
	Mem346[esp_345:word32] = Mem341[esp_290 + 0xC<32>:word32]
	Mem348[esp_345 - 4<i32>:word32] = edx_343
	Mem350[esp_345 - 8<i32>:word32] = eax_344
	word32 ecx_488
	word32 edx_489
	fn006E0E00(Mem350[esp_345:word32], out ecx_488, out edx_489)
l00708DB1:
	return eax_212
fn00708C10_exit:


word32 fn00708DC0(selector es, selector ds, word32 dwArg04, word32 dwArg08, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00707850
//      fn0070B600
// MayUse:  cs:[0..15] ds:[0..15] es:[0..15] fs:[0..15] gs:[0..15] ss:[0..15] Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax edx
// Trashed: SCZDOP eax ebp ebx ecx edi edx esi Top
// Preserved: cs ds es esp fs gs ss
fn00708DC0_entry:
l00708DC0:
	word32 esi_11 = Mem10[0x00A6D67C<p32>:word32]
	branch dwArg04 != 0<32> l00708DFA
l00708DFA:
	Mem28[esi_11 + 0xC<32>:word32] = Mem25[esi_11 + 0xC<32>:word32] + 1<32>
	word32 eax_29 = Mem28[0x00A1E8AC<p32>:word32]
	word32 ecx_30 = Mem28[0x00A6D67C<p32>:word32]
	Mem32[0x00A1E8AC<p32>:word32] = eax_29 - 1<32>
	branch Mem32[ecx_30 + 0xC<32>:word32] <= eax_29 - 1<32> l00708E27
l00708E16:
	branch fn00706DC0(edx, 0<32>, dwArg04, es, ds, out edx) != 0<32> l00708DF1
l00708E27:
	Mem52[esi_11 + 8<32>:word32] = dwArg04
	branch Mem48[esi_11 + 0x14<32>:word32] == 0<32> l00708E7B
l00708E2F:
	word32 eax_54 = Mem52[esi_11 + 0x1C<32>:word32]
	branch eax_54 == 0<32> l00708E53
l00708E36:
	branch fn007086B0(dwArg04, eax_54, Mem52[esi_11 + 0x24<32>:word32], 0<32>, 0xA163B8<32>) != 0<32> l0070B382
l00708E51:
l00708E53:
	word32 eax_83 = Mem82[esi_11 + 0x18<32>:word32]
	branch eax_83 == 0<32> l00708E7B
l00708E5A:
	branch fn007086B0(dwArg04, eax_83, Mem82[esi_11 + 0x20<32>:word32], 0<32>, 0xA163B8<32>) != 0<32> l0070B382
l00708E75:
l00708E7B:
	word32 esi_1003
	word32 ebx_1517
	word32 edi_1088
	word32 ebp_1059 = Mem135[dwArg04 + 0x24<32>:word32]
	Mem140[dwArg04 + 0x24<32>:word32] = 0<32>
	word32 esp_1012 = fp - 0x6C<32>
	esi_1003 = esi_11
	branch dwArg08 == 0<32> l00708F23
l00708ED8:
	esi_1003 = esi_11
l00708EE0:
	edi_1088 = Mem148[esp_1012 + 0x14<32>:word32]
l00708EE4:
	ebx_1517 = Mem151[esp_1012 + 0x1C<32>:word32]
	branch ebx_1517 != 1<32> l0070B00F
l0070B00F:
	branch ebx_1517 == 2<32> l0070B019
l0070B014:
	branch ebx_1517 != 4<32> l0070B044
l00708EF1:
	branch Mem151[esp_1012 + 0x18<32>:word32] != 0<32> l00708EFC
l00708EF8:
	branch edi_1088 != 0<32> l00708F23
l00708EFC:
	Mem166[esp_1012 + 0x1C<32>:word32] = 2<32>
	ebx_1517 = Mem166[esp_1012 + 0x1C<32>:word32]
	Mem168[esp_1012 + 0x14<32>:word32] = 0xA163B8<32>
	Mem169[esp_1012 + 0x18<32>:word32] = 0<32>
l0070B019:
	branch fn006E0FC0() != 0<32> l0070B044
l0070B044:
	branch ebx_1517 != 2<32> l0070B071
l0070B071:
	branch ebx_1517 != 4<32> l0070B080
l0070B080:
	branch ebx_1517 == 1<32> l00708F23
l0070B076:
	Mem184[esp_1012 + 0x1C<32>:word32] = 2<32>
l0070B022:
	word32 ecx_186 = Mem185[0x00A18720<p32>:word32]
	word32 esp_187 = esp_1012 - 4<i32>
	Mem188[esp_187:word32] = 0x8D7B3C<32>
	Mem190[esp_187 - 4<i32>:word32] = ecx_186
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 edx_10911
	word32 ecx_10910
	fn006E0F80(stackArg4, dwArg04, out ecx_10910, out edx_10911)
	Mem201[esp_187 + 0x20<32>:word32] = 2<32>
	ebx_1517 = Mem201[esp_187 + 0x20<32>:word32]
	esp_1012 = esp_187 + 4<32>
l0070B049:
	word32 esi_208 = Mem206[esp_1012 + 0x70<32>:word32]
	word32 esp_209 = esp_1012 - 4<i32>
	Mem210[esp_209:word32] = esi_208
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	fn0072F7F0(stackArg4)
	word32 ecx_229 = Mem210[esp_209 + 0x2C<32>:word32]
	word32 eax_230 = Mem210[ecx_229 + 0x1C<32>:word32]
	esp_1012 = esp_209 + 4<32>
	branch eax_230 == 0<32> l0070B08D
l0070B061:
	word32 edx_235 = Mem210[ecx_229 + 0x24<32>:word32]
	Mem237[esp_209:word32] = esi_208
	Mem239[esp_209 - 4<i32>:word32] = edx_235
	Mem241[esp_209 - 8<i32>:word32] = eax_230
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	fn00708590(stackArg4, dwArg04, dwArg08)
	esp_1012 = esp_209 + 4<32>
l0070B08D:
	word32 edi_252 = Mem251[esp_1012 + 0x70<32>:word32]
l0070B091:
	branch Mem254[edi_252 + 0x44<32>:word32] <= 0<32> l0070B239
l0070B239:
	branch (ebp_1059 - Mem254[edi_252 + 0x20<32>:word32] & 0xFFFFFFFC<32>) == 0<32> l0070B26D
l0070B246:
	word32 eax_265 = Mem264[ebp_1059 - 4<32>:word32]
	ebp_1059 = ebp_1059 - 4<32>
	branch eax_265 == 0<32> l0070B261
l0070B250:
	word32 v135_270 = Mem264[eax_265:word32] + 0xFFFFFFFF<32>
	Mem271[eax_265:word32] = v135_270
	branch v135_270 != 0<32> l0070B261
l0070B255:
	word32 ecx_274 = Mem271[eax_265 + 4<32>:word32]
	word32 edx_275 = Mem271[ecx_274 + 0x18<32>:word32]
	Mem278[esp_1012 - 4<i32>:word32] = eax_265
	word32 esp_283
	word32 edx_286
	call edx_275 (retsize: 4;)
		uses: eax:eax_265,ecx:ecx_274,edx:edx_286,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: edx:edx_286,esp:esp_283
	esp_1012 = esp_283 + 4<32>
l0070B261:
	branch (ebp_1059 - Mem294[edi_252 + 0x20<32>:word32] & 0xFFFFFFFC<32>) != 0<32> l0070B246
l0070B26D:
	branch ebx_1517 == 8<32> l0070B27A
l0070B272:
	Mem307[esp_1012 + 0x2C<32>:word32] = 0<32>
l0070B09B:
	word32 esp_308 = esp_1012 - 4<i32>
	Mem309[esp_308:word32] = edi_252
	word32 eax_310 = fn0073B280(Mem309[esp_308:word32])
	esi_1003 = eax_310
	esp_1012 = esp_308 + 4<32>
	branch Mem309[eax_310:word32] != 0x78<32> l0070B0B0
l0070B0AB:
	branch ebx_1517 == 0x20<32> l0070B109
l0070B109:
	word32 edx_322 = Mem309[eax_310 + 4<32>:word32]
	word32 eax_323 = Mem309[eax_310:word32]
	Mem325[esp_308:word32] = Mem309[eax_310 + 8<32>:word32]
	Mem327[esp_308 - 4<i32>:word32] = edx_322
	Mem329[esp_308 - 8<i32>:word32] = eax_323
	Mem331[esp_308 - 12<i32>:word32] = edi_252
	fn0073B240(Mem331[esp_308 - 12<i32>:word32], Mem331[esp_308 - 8<i32>:word32], Mem331[esp_308 - 4<i32>:word32], Mem331[esp_308:word32])
	word32 ecx_339 = Mem331[esp_308 + 0x30<32>:word32]
	word32 eax_341 = Mem331[ecx_339 + 8<32>:word32] + Mem331[esp_308 + 0x3C<32>:word32]
	word32 v134_343 = Mem331[ecx_339:word32] + 0xFFFFFFFF<32>
	Mem344[ecx_339:word32] = v134_343
	Mem346[esp_308 + 0x20<32>:word32] = 1<32>
	Mem347[esp_308 + 0x24<32>:word32] = eax_341
	esp_1012 = esp_308 + 4<32>
	branch v134_343 != 0<32> l00708F23
l0070B13D:
	word32 edx_349 = Mem347[ecx_339 + 4<32>:word32]
	word32 eax_350 = Mem347[edx_349 + 0x18<32>:word32]
	Mem352[esp_308:word32] = ecx_339
	word32 esp_354
	word32 ecx_356
	call eax_350 (retsize: 4;)
		uses: eax:eax_350,ecx:ecx_356,edx:edx_349,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: ecx:ecx_356,esp:esp_354
	esp_1012 = esp_354 + 4<32>
l0070B0B0:
	branch ebp_1059 - Mem309[edi_252 + 0x20<32>:word32] >> 2<32> <= Mem309[eax_310 + 8<32>:word32] l0070B0E8
l0070B0BD:
l0070B0C0:
	word32 eax_376 = Mem375[ebp_1059 - 4<32>:word32]
	ebp_1059 = ebp_1059 - 4<32>
	branch eax_376 == 0<32> l0070B0DB
l0070B0CA:
	word32 v16_381 = Mem375[eax_376:word32] + 0xFFFFFFFF<32>
	Mem382[eax_376:word32] = v16_381
	branch v16_381 != 0<32> l0070B0DB
l0070B0CF:
	word32 ecx_385 = Mem382[eax_376 + 4<32>:word32]
	word32 edx_386 = Mem382[ecx_385 + 0x18<32>:word32]
	Mem389[esp_1012 - 4<i32>:word32] = eax_376
	word32 esp_394
	word32 edx_397
	call edx_386 (retsize: 4;)
		uses: eax:eax_376,ecx:ecx_385,edx:edx_397,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: edx:edx_397,esp:esp_394
	esp_1012 = esp_394 + 4<32>
l0070B0DB:
	branch ebp_1059 - Mem405[edi_252 + 0x20<32>:word32] >> 2<32> > Mem405[eax_310 + 8<32>:word32] l0070B0C0
l0070B0E8:
	byte bl_427 = SLICE(ebx_1517, byte, 0)
	word32 eax_413 = Mem412[eax_310:word32]
	branch eax_413 != 0x78<32> l0070B0F8
l0070B0EF:
	branch ebx_1517 == 0x10<32> l0070B206
l0070B0F8:
	branch eax_413 == 0x7A<32> l0070B14E
l0070B14E:
	branch ebx_1517 != 2<32> l0070B1E8
l0070B1E8:
	branch (bl_427 & 0x28<8>) == 0<8> l0070B1F7
l0070B1ED:
	Mem439[ebp_1059:word32] = Mem412[esp_1012 + 0x2C<32>:word32]
	ebp_1059 = ebp_1059 + 4<32>
l0070B1F7:
	word32 esp_443 = esp_1012 - 4<i32>
	Mem445[esp_443:word32] = ebx_1517
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_11001
	word32 edx_11002
	Mem466[ebp_1059:word32] = fn007050A0(stackArg4, out ecx_11001, out edx_11002)
	esp_1012 = esp_443 + 4<32>
l0070B0FD:
	branch eax_413 != 0x79<32> l0070B091
l0070B102:
	branch ebx_1517 != 2<32> l0070B091
l0070B107:
l0070B157:
	word32 esp_473 = esp_1012 - 4<i32>
	Mem474[esp_473:word32] = esp_1012 + 0x48<32>
	Mem477[esp_473 - 4<i32>:word32] = esp_473 + 0x40<32>
	Mem480[esp_473 - 8<i32>:word32] = esp_473 + 0x50<32>
	fn006E1130(Mem480[esp_473 - 8<i32>:word32], Mem480[esp_473 - 4<i32>:word32], Mem480[esp_473:word32])
	esp_1012 = esp_473 + 4<32>
	branch Mem480[esp_473 + 0x40<32>:word32] != 0<32> l0070B184
l0070B175:
	Mem492[0x00A163B8<p32>:word32] = Mem480[0x00A163B8<p32>:word32] + 1<32>
	Mem494[esp_473 + 0x40<32>:word32] = 0xA163B8<32>
l0070B184:
	branch Mem497[eax_310:word32] != 0x79<32> l0070B1B7
l0070B189:
	Mem503[esp_473:word32] = esp_473 + 0x4C<32>
	Mem506[esp_473 - 4<i32>:word32] = esp_473 + 0x40<32>
	Mem509[esp_473 - 8<i32>:word32] = esp_473 + 0x50<32>
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ebp_10994
	word32 esi_10995
	word32 edi_10996
	fn006E1BD0(stackArg4, dwArg04, out ebp_10994, out esi_10995, out edi_10996)
	word32 edx_525 = Mem509[esp_473 + 0x40<32>:word32]
	word32 edi_526 = Mem509[esp_473 + 0x50<32>:word32]
	word32 eax_527 = Mem509[esp_473 + 0x2C<32>:word32]
	Mem529[esp_473 - 12<i32>:word32] = Mem509[esp_473 + 0x4C<32>:word32]
	Mem531[esp_473 - 16<i32>:word32] = edx_525
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	fn00706E30(eax_527, edi_526, stackArg4, dwArg04)
	esp_1012 = esp_473
l0070B1B7:
	word32 eax_543 = Mem542[esp_1012 + 0x48<32>:word32]
	branch eax_543 != 0<32> l0070B1CF
l0070B1CF:
	Mem548[ebp_1059:word32] = eax_543
l0070B1BF:
	Mem550[0x00A163B8<p32>:word32] = Mem542[0x00A163B8<p32>:word32] + 1<32>
	Mem552[ebp_1059:word32] = 0xA163B8<32>
l0070B1D2:
	word32 ecx_556 = Mem554[esp_1012 + 0x4C<32>:word32]
	word32 ebp_558 = ebp_1059 + 4<32>
	Mem559[ebp_558:word32] = Mem554[esp_1012 + 0x3C<32>:word32]
	Mem562[ebp_558 + 4<32>:word32] = ecx_556
	ebp_1059 = ebp_558 + 4<32>
l0070B203:
	ebp_1059 = ebp_1059 + 4<32>
l0070B206:
	esi_1003 = Mem570[eax_310 + 4<32>:word32] + Mem570[esp_1012 + 0x38<32>:word32]
	Mem577[esp_1012 + 0x1C<32>:word32] = 1<32>
l00708F1F:
	Mem580[esp_1012 + 0x20<32>:word32] = esi_1003
l00708F23:
	word32 v17_582 = Mem581[0x00A1E8B4<p32>:word32] + 0xFFFFFFFF<32>
	Mem583[0x00A1E8B4<p32>:word32] = v17_582
	branch v17_582 >= 0<32> l00709025
l00708F36:
	branch Mem583[Mem583[esp_1012 + 0x20<32>:word32]:byte] == 0x7A<8> l00709025
l00708F43:
	word32 edi_592 = Mem583[esp_1012 + 0x28<32>:word32]
	Mem593[0x00A1E8B4<p32>:word32] = Mem583[0x00A1E8B0<p32>:word32]
	word32 ecx_594 = Mem593[0x00A6D270<p32>:word32]
	Mem596[edi_592 + 0x44<32>:word32] = Mem593[edi_592 + 0x44<32>:word32] + 1<32>
	branch ecx_594 == 0<32> l00708F8D
l00708F5F:
	branch fn00706CF0() >= 0<32> l00708F79
l00708F79:
	branch Mem596[0x00A6D270<p32>:word32] == 0<32> l00708F8D
l00708F83:
	Mem614[0x00A1E8B4<p32>:word32] = 0<32>
l00708F8D:
	branch Mem615[0x00A6D260<p32>:word32] == 0<32> l00709025
l00708F9A:
	word32 esp_619 = esp_1012 - 4<i32>
	Mem620[esp_619:word32] = 0<32>
	word32 ecx_10914
	branch fn007158B0(Mem620[esp_619:word32], out ecx_10914) == edi_592 l00708FB5
l00708FA8:
	Mem628[esp_619:word32] = 0x8D7DA8<32>
	fn006E86F0(Mem628[esp_619:word32])
l00708FB5:
	word32 esp_639 = esp_1012 - 4<i32>
	Mem640[esp_639:word32] = Mem636[0x00A6D260<p32>:word32]
	fn0074F570(Mem640[esp_639:word32])
	word32 ecx_646 = Mem640[0x00A6D260<p32>:word32]
	Mem648[esp_639 - 4<i32>:word32] = 1<32>
	Mem650[esp_639 - 8<i32>:word32] = ecx_646
	word32 ecx_10915
	fn0074F540(Mem650[esp_639 - 8<i32>:word32], Mem650[esp_639 - 4<i32>:word32], out ecx_10915)
	Mem659[esp_639 - 12<i32>:word32] = edi_592
	word32 ecx_10916
	branch fn007158B0(Mem659[esp_639 - 12<i32>:word32], out ecx_10916) == 0<32> l00708FE8
l00708FDB:
	Mem667[esp_639:word32] = 0x8D7D90<32>
	fn006E86F0(Mem667[esp_639:word32])
l00708FE8:
	esi_1003 = Mem676[edi_592 + 0x4C<32>:word32]
	branch esi_1003 == 0<32> l00709025
l00709025:
	edi_1088 = Mem683[esp_1012 + 0x14<32>:word32]
l00709030:
	word32 edx_2591 = Mem687[esp_11188 + 0x70<32>:word32]
	word32 eax_691 = Mem687[esp_11188 + 0x28<32>:word32]
	Mem692[edx_2591 + 0x3C<32>:word32] = Mem687[esp_11188 + 0x20<32>:word32] - Mem687[esp_11188 + 0x38<32>:word32]
	branch Mem692[eax_691 + 0x1C<32>:word32] == 0<32> l007090A4
l00709049:
	branch Mem692[eax_691 + 0x10<32>:word32] != 0<32> l007090A4
l00709051:
	word32 esp_700 = esp_11188 - 4<i32>
	Mem701[esp_700:word32] = esp_11188 + 0x5C<32>
	Mem704[esp_700 - 4<i32>:word32] = esp_700 + 0x64<32>
	Mem707[edx_2591 + 0x24<32>:word32] = ebp_1059
	word32 edx_709 = Mem707[eax_691 + 0x1C<32>:word32]
	Mem711[esp_700 - 8<i32>:word32] = Mem707[eax_691 + 0x24<32>:word32]
	Mem713[esp_700 - 12<i32>:word32] = edx_709
	Mem722[esp_700 + 0x1C<32>:word32] = fn00707430(esp_700 + 0x68<32>, edx_2591, Mem713[esp_700 - 12<i32>:word32], Mem713[esp_700 - 8<i32>:word32], Mem713[esp_700 - 4<i32>:word32], Mem713[esp_700:word32], out edx_2591)
	Mem727[esp_700 + 0x24<32>:word32] = Mem722[edx_2591 + 0x3C<32>:word32] + Mem722[esp_700 + 0x3C<32>:word32]
	esi_1003 = edx_2591
	esp_1012 = esp_700 + 4<32>
	word32 eax_728 = Mem727[edx_2591 + 0x24<32>:word32]
	branch eax_728 == 0<32> l00709099
l0070908E:
	Mem734[edx_2591 + 0x24<32>:word32] = 0<32>
	ebp_1059 = eax_728
l00709099:
	branch Mem736[esp_700 + 0x1C<32>:word32] != 0<32> l00708EE4
l007090A4:
	word32 eax_741 = Mem740[esp_11188 + 0x20<32>:word32]
	word32 ecx_742 = CONVERT(Mem740[eax_741:byte], byte, word32)
	Mem746[esp_11188 + 0x20<32>:word32] = eax_741 + 1<32>
	word32 ebx_2263 = 0<32>
	branch ecx_742 < 0x5A<32> l007090D0
l007090B9:
	word32 ebx_748 = CONVERT(Mem746[eax_741 + 2<32>:byte], byte, word32)
	edx_2591 = CONVERT(Mem746[eax_741 + 1<32>:byte], byte, word32)
	Mem752[esp_11188 + 0x20<32>:word32] = eax_741 + 3<32>
	ebx_2263 = (ebx_748 << 8<32>) + edx_2591
l007090D0:
	byte bh_777 = SLICE(ebx_2263, byte, 8)
	esp_1012 = esp_11188
	byte cl_5290 = SLICE(ecx_742, byte, 0)
	word32 eax_757 = ecx_742 - 1<32>
	branch eax_757 >u 0x8E<32> l0070AFC3
l007090DE:
	word32 eax_4865
	word32 esp_1335
	word32 eax_6175
	word32 eax_6285
	word32 esp_6295
	word32 ebx_3903
	word32 eax_3913
	word32 eax_3945
	word32 ebx_3935
	word32 esp_5175
	word32 ebx_3920
	word32 eax_3930
	word32 esp_5026
	word32 eax_2933
	word32 ecx_2954
	word32 edx_5353
	word32 ebx_2779
	word32 eax_2791
	word32 ebx_3987
	word32 ebx_3985
	word32 ebx_1685
	word32 esp_1782
	word32 eax_4033 = CONVERT(Mem760[eax_757 + 0x70B530<32>:byte], byte, word32)
	esp_11188 = esp_1012
	switch (eax_4033) { l00709397 l0070914D l00709162 l007091A6 l00709181 l0070AFC3 l0070AFC3 l0070AFC3 l00709030 l007094C0 l007094F3 l00709526 l00709585 l0070AFC3 l00709593 l0070AFC3 l0070AFC3 l00709899 l007095BC l00709601 l00709646 l007096C9 l007096DF l00709764 l007097BC l007096B0 l00709694 l00709982 l00709966 l00709AFB l00709AFB l00709AFB l00709AFB l0070AFC3 l0070AFC3 l0070AFC3 l0070AFC3 l0070AFC3 l0070AFC3 l00709B87 l00709B87 l00709B87 l00709B87 l0070AFC3 l0070AFC3 l0070AFC3 l0070AFC3 l0070AFC3 l0070AFC3 l00709C3E l00709C3E l00709C3E l00709C3E l0070AFC3 l007099B4 l00709A20 l0070992B l00709944 l0070999B l00709CAD l00709CF7 l00709816 l0070982F l0070984B l00709864 l0070987D l0070990D l007093CD l0070AFC3 l00709D3A l00709DFF l00709F96 l00709DEF l00709F88 l00709A78 l00709A91 l00709AAD l00709AC6 l00709ADF l0070AB2E l0070AB89 l0070A07E l0070A0B4 l0070A941 l0070A0CB l0070B21A l0070A133 l0070A17C l0070A280 l0070A2CF l0070A343 l0070AA3F l0070941E l0070AFC3 l0070A3B0 l0070A3D5 l0070A3FC l0070A444 l007091B7 l00709133 l0070A477 l0070A72F l0070A771 l0070A7B1 l0070A7C7 l00709212 l0070A7FD l0070A99F l0070AFC3 l00709335 l0070933E l00709371 l007098FE l0070AFC3 l0070AFC3 l0070A54F l0070AFC3 l0070AFC3 l0070AB3B l0070AB64 l0070AB64 l0070AB64 l0070AFC3 l0070910E l00709462 l0070A618 l0070AFC3 l0070AFC3 l0070AFC3 l0070A01A l0070ACB6 l0070ADBE l0070AF47 l0070AE70 l0070A654 l0070A66D l0070A6F6 l0070AFC3 l0070AFC3 l0070ACDD l0070ACDD l0070ACDD l007090EC }
l007090EC:
	word32 eax_763 = Mem760[esp_11188 + 0x20<32>:word32]
	ecx_742 = CONVERT(Mem760[eax_763:byte], byte, word32)
	word32 edx_765 = CONVERT(Mem760[eax_763 + 2<32>:byte], byte, word32)
	Mem767[esp_11188 + 0x20<32>:word32] = eax_763 + 3<32>
	edx_2591 = (edx_765 << 8<32>) + CONVERT(Mem767[eax_763 + 1<32>:byte], byte, word32)
	ebx_2263 = ebx_2263 << 0x10<32> | edx_2591
l0070ACDD:
	word32 ecx_780 = ecx_742 + 1<32>
	word32 eax_778 = CONVERT(bh_777, byte, word32)
	Mem793[esp_11188 + 0x24<32>:word32] = eax_778
	Mem794[esp_11188 + 0x50<32>:word32] = ecx_780 & 3<32>
	word32 edi_788 = ebx_2263 & 0xFF<32>
	byte cl_789 = SLICE(ecx_780 & 3<32>, byte, 0)
	word32 eax_795 = edi_788 + eax_778 * 2<32>
	branch (cl_789 & 1<8>) == 0<8> l0070AD01
l0070ACFE:
	eax_795 = eax_795 + 1<32>
l0070AD01:
	word32 ecx_864 = ecx_780 & 3<32>
	branch (cl_789 & 2<8>) == 0<8> l0070AD09
l0070AD06:
	eax_795 = eax_795 + 1<32>
l0070AD09:
	word32 ebx_815 = ebp_1059 - (eax_795 * 4<32> + 4<32>)
	esi_1003 = Mem794[ebx_815:word32]
	branch Mem794[esi_1003 + 4<32>:word32] != 0xA1ED20<32> l0070AD5A
l0070AD1F:
	word32 edx_821 = Mem794[esi_1003 + 0xC<32>:word32]
	Mem826[esp_11188 + 0x58<32>:word32] = edx_821
	branch edx_821 == 0<32> l0070AD5A
l0070AD5A:
	Mem831[esi_1003:word32] = Mem829[esi_1003:word32] + 1<32>
l0070AD2A:
	word32 edx_863
	Mem834[edx_821:word32] = Mem826[edx_821:word32] + 1<32>
	esi_1003 = Mem834[esi_1003 + 8<32>:word32]
	Mem837[esi_1003:word32] = Mem834[esi_1003:word32] + 1<32>
	word32 eax_838 = Mem837[ebx_815:word32]
	Mem840[eax_838:word32] = Mem837[eax_838:word32] + 0xFFFFFFFF<32>
	word32 eax_841 = Mem840[ebx_815:word32]
	branch Mem840[eax_841:word32] != 0<32> l0070AD53
l0070AD3F:
	word32 ecx_844 = Mem840[eax_841 + 4<32>:word32]
	word32 edx_845 = Mem840[ecx_844 + 0x18<32>:word32]
	Mem847[esp_11188 - 4<i32>:word32] = eax_841
	word32 esp_857
	call edx_845 (retsize: 4;)
		uses: eax:eax_841,ecx:ecx_844,edx:edx_863,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: esp:esp_857
	edx_863 = Mem847[esp_857 + 0x5C<32>:word32]
	ecx_864 = Mem847[esp_857 + 0x54<32>:word32]
	esp_1012 = esp_857 + 4<32>
	edx_821 = edx_863
l0070AD53:
	Mem869[ebx_815:word32] = edx_821
	edi_788 = edi_788 + 1<32>
l0070AD5D:
	word32 esp_878 = esp_1012 - 4<i32>
	Mem879[esp_878:word32] = Mem876[esp_1012 + 0x24<32>:word32]
	Mem883[esp_878 - 4<i32>:word32] = edi_788
	Mem892[esp_878 - 8<i32>:word32] = ecx_864
	Mem896[esp_878 - 12<i32>:word32] = esi_1003
	Mem901[esp_878 + 0x5C<32>:word32] = ebp_1059
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 eax_908 = fn00707BD0(esp_878 + 0x5C<32>, stackArg4, dwArg04)
	word32 ebp_913 = Mem901[esp_878 + 0x5C<32>:word32]
	word32 v35_915 = Mem901[esi_1003:word32] + 0xFFFFFFFF<32>
	Mem916[esi_1003:word32] = v35_915
	Mem919[esp_878 + 0x18<32>:word32] = eax_908
	esp_1012 = esp_878 + 4<32>
	edi_1088 = eax_908
	branch v35_915 != 0<32> l0070AD90
l0070AD84:
	word32 ecx_921 = Mem919[esi_1003 + 4<32>:word32]
	word32 edx_922 = Mem919[ecx_921 + 0x18<32>:word32]
	Mem924[esp_878:word32] = esi_1003
	word32 esp_925
	word32 edx_928
	call edx_922 (retsize: 4;)
		uses: eax:eax_908,ecx:ecx_921,edx:edx_928,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: edx:edx_928,esp:esp_925
	esp_1012 = esp_925 + 4<32>
l0070AD90:
	branch ebp_913 <=u ebx_815 l0070ADB3
l0070AD94:
	word32 eax_939 = Mem938[ebp_913 - 4<32>:word32]
	word32 v37_941 = Mem938[eax_939:word32] + 0xFFFFFFFF<32>
	Mem942[eax_939:word32] = v37_941
	Mem945[esp_1012 + 0x10<32>:word32] = eax_939
	ebp_913 = ebp_913 - 4<32>
	branch v37_941 != 0<32> l0070ADAF
l0070ADA3:
	word32 ecx_947 = Mem945[eax_939 + 4<32>:word32]
	word32 edx_948 = Mem945[ecx_947 + 0x18<32>:word32]
	Mem950[esp_1012 - 4<i32>:word32] = eax_939
	word32 esp_955
	word32 edx_958
	call edx_948 (retsize: 4;)
		uses: eax:eax_939,ecx:ecx_947,edx:edx_958,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: edx:edx_958,esp:esp_955
	esp_1012 = esp_955 + 4<32>
l0070ADAF:
	branch ebp_913 >u ebx_815 l0070AD94
l0070ADB3:
	Mem971[ebp_913:word32] = eax_908
	ebp_1059 = ebp_913 + 4<32>
l0070A6F6:
	esi_1003 = Mem760[ebp_1059 - 4<32>:word32]
	word32 ebx_976 = Mem760[Mem760[esp_11188 + 0x44<32>:word32] + ebx_2263 * 4<32>:word32]
	word32 esp_979 = esp_11188 - 4<i32>
	Mem980[esp_979:word32] = esi_1003
	Mem982[esp_979 - 4<i32>:word32] = ebx_976
	Mem983[esp_979 + 0x14<32>:word32] = esi_1003
	Mem984[esp_979 + 0x18<32>:word32] = ebx_976
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_10987
	fn00750420(stackArg4, dwArg04, out ecx_10987)
	ebp_1059 = ebp_1059 - 4<32>
	esp_1012 = esp_979 + 4<32>
l0070A66D:
	edi_1088 = Mem760[Mem760[esp_11188 + 0x44<32>:word32] + ebx_2263 * 4<32>:word32]
	word32 esp_999 = esp_11188 - 4<i32>
	Mem1000[esp_999:word32] = edi_1088
	Mem1001[esp_999 + 0x18<32>:word32] = edi_1088
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 eax_1007 = fn007503F0(stackArg4)
	Mem1015[esp_999 + 0x14<32>:word32] = eax_1007
	esp_1012 = esp_999 + 4<32>
	branch eax_1007 == 0<32> l0070A694
l0070A694:
	Mem1017[esp_999 + 0x1C<32>:word32] = 0xFFFFFFFF<32>
	branch fn006E0FC0() != 0<32> l00708EE4
l0070A6A9:
	word32 edx_1022 = Mem1017[esp_999 + 0x44<32>:word32]
	word32 ecx_1023 = Mem1017[edx_1022 + 0x2C<32>:word32]
	word32 eax_1024 = Mem1017[ecx_1023 + 8<32>:word32]
	branch ebx_2263 >= eax_1024 l0070A6D4
l0070A6D4:
	word32 ecx_1027 = Mem1017[0x00A17768<p32>:word32]
	word32 eax_1031 = Mem1017[Mem1017[edx_1022 + 0x28<32>:word32] + 0xC<32> + (ebx_2263 - eax_1024) * 4<32>:word32]
	Mem1033[esp_999:word32] = 0x8D7BC8<32>
	Mem1035[esp_999 - 4<i32>:word32] = ecx_1027
	fn007083E0(eax_1031)
	esp_1012 = esp_999 + 4<32>
l0070A6B7:
	word32 edx_1044 = Mem1017[0x00A1776C<p32>:word32]
	word32 eax_1045 = Mem1017[ecx_1023 + 0xC<32> + ebx_2263 * 4<32>:word32]
	Mem1047[esp_999:word32] = 0x8D7D58<32>
	Mem1049[esp_999 - 4<i32>:word32] = edx_1044
	fn007083E0(eax_1045)
	esp_1012 = esp_999 + 4<32>
l0070A689:
	Mem1058[ebp_1059:word32] = eax_1007
	ebp_1059 = ebp_1059 + 4<32>
l0070A654:
	word32 ebx_1062 = Mem760[Mem760[esp_11188 + 0x44<32>:word32] + ebx_2263 * 4<32>:word32]
	Mem1064[ebx_1062:word32] = Mem760[ebx_1062:word32] + 1<32>
	Mem1065[ebp_1059:word32] = ebx_1062
	Mem1066[esp_11188 + 0x14<32>:word32] = ebx_1062
	ebp_1059 = ebp_1059 + 4<32>
l0070AE70:
	esi_1003 = Mem760[ebp_1059 - 4<32>:word32]
	word32 esp_1074 = esp_11188 - 4<i32>
	Mem1075[esp_1074:word32] = Mem760[Mem760[esp_11188 + 0x70<32>:word32] + 0x18<32>:word32]
	Mem1077[esp_1074 - 4<i32>:word32] = esi_1003
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 eax_1079 = fn00725010(stackArg4, dwArg04)
	word32 v41_1085 = Mem1077[esi_1003:word32] + 0xFFFFFFFF<32>
	Mem1086[esi_1003:word32] = v41_1085
	Mem1089[esp_1074 + 0x18<32>:word32] = eax_1079
	ebp_1059 = ebp_1059 - 4<32>
	esp_1012 = esp_1074 + 4<32>
	edi_1088 = eax_1079
	branch v41_1085 != 0<32> l0070AE9E
l0070AE92:
	word32 ecx_1091 = Mem1089[esi_1003 + 4<32>:word32]
	word32 edx_1092 = Mem1089[ecx_1091 + 0x18<32>:word32]
	Mem1094[esp_1074:word32] = esi_1003
	word32 esp_1095
	word32 edx_1098
	call edx_1092 (retsize: 4;)
		uses: eax:eax_1079,ecx:ecx_1091,edx:edx_1098,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: edx:edx_1098,esp:esp_1095
	esp_1012 = esp_1095 + 4<32>
l0070AE9E:
	branch eax_1079 == 0<32> l0070AE65
l0070AEA2:
	esi_1003 = Mem1108[ebp_1059 - 4<32>:word32]
	word32 esp_1113 = esp_1012 - 4<i32>
	Mem1114[esp_1113:word32] = esi_1003
	Mem1116[esp_1113 - 4<i32>:word32] = eax_1079
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 eax_1121 = fn007251F0(stackArg4, dwArg04)
	word32 v48_1127 = Mem1116[esi_1003:word32] + 0xFFFFFFFF<32>
	Mem1128[esi_1003:word32] = v48_1127
	Mem1130[esp_1113 + 0x1C<32>:word32] = eax_1121
	ebp_1059 = ebp_1059 - 4<32>
	esp_1012 = esp_1113 + 4<32>
	branch v48_1127 != 0<32> l0070AEC7
l0070AEBB:
	word32 eax_1132 = Mem1130[esi_1003 + 4<32>:word32]
	word32 ecx_1133 = Mem1130[eax_1132 + 0x18<32>:word32]
	Mem1135[esp_1113:word32] = esi_1003
	word32 esp_1136
	word32 ecx_1138
	word32 edx_1139
	call ecx_1133 (retsize: 4;)
		uses: eax:eax_1132,ecx:ecx_1138,edx:edx_1139,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: ecx:ecx_1138,edx:edx_1139,esp:esp_1136
	esp_1012 = esp_1136 + 4<32>
l0070AEC7:
	branch ebx_2263 <= 0<32> l0070AE65
l0070AECB:
	word32 esp_1148 = esp_1012 - 4<i32>
	Mem1149[esp_1148:word32] = ebx_2263
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_11021
	word32 edx_11022
	word32 eax_1156 = fn006DFD20(stackArg4, out ecx_11021, out edx_11022)
	esi_1003 = eax_1156
	esp_1012 = esp_1148 + 4<32>
	branch eax_1156 != 0<32> l0070AEFA
l0070AEFA:
	word32 ebx_1166 = ebx_2263 - 1<32>
	branch ebx_1166 < 0<32> l0070AF19
l0070AEFF:
	word32 eax_1169 = eax_1156 + 0xC<32> + ebx_1166 * 4<32>
l0070AF03:
	word32 ecx_1172 = Mem1171[ebp_1059 - 4<32>:word32]
	Mem1175[eax_1169:word32] = ecx_1172
	Mem1182[esp_1148 + 0x14<32>:word32] = ecx_1172
	ebp_1059 = ebp_1059 - 4<32>
	ebx_1166 = ebx_1166 - 1<32>
	eax_1169 = eax_1169 - 4<32>
	branch ebx_1166 >= 0<32> l0070AF03
l0070AF19:
	Mem1188[esp_1148:word32] = eax_1156
	Mem1192[esp_1148 - 4<i32>:word32] = eax_1079
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 eax_1199 = fn00725150(stackArg4, dwArg04)
	word32 v54_1205 = Mem1192[eax_1156:word32] + 0xFFFFFFFF<32>
	Mem1206[eax_1156:word32] = v54_1205
	Mem1208[esp_1148 + 0x1C<32>:word32] = eax_1199
	esp_1012 = esp_1148 + 4<32>
	branch v54_1205 != 0<32> l0070AE65
l0070AF30:
	word32 ecx_1210 = Mem1208[eax_1156 + 4<32>:word32]
	word32 edx_1211 = Mem1208[ecx_1210 + 0x18<32>:word32]
	Mem1213[esp_1148:word32] = eax_1156
	word32 esp_1214
	word32 edx_1217
	call edx_1211 (retsize: 4;)
		uses: eax:eax_1199,ecx:ecx_1210,edx:edx_1217,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: edx:edx_1217,esp:esp_1214
	Mem1221[ebp_1059:word32] = eax_1079
	esp_1012 = esp_1214 + 4<32>
	ebp_1059 = ebp_1059 + 4<32>
l0070AEDA:
	word32 v52_1224 = Mem1149[eax_1079:word32] + 0xFFFFFFFF<32>
	Mem1225[eax_1079:word32] = v52_1224
	branch v52_1224 != 0<32> l0070A8FA
l0070AEE3:
	word32 edx_1228 = Mem1225[eax_1079 + 4<32>:word32]
	word32 eax_1229 = Mem1225[edx_1228 + 0x18<32>:word32]
	Mem1231[esp_1148:word32] = eax_1079
	word32 esp_1232
	word32 ecx_1234
	call eax_1229 (retsize: 4;)
		uses: eax:eax_1229,ecx:ecx_1234,edx:edx_1228,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: ecx:ecx_1234,esp:esp_1232
	Mem1242[esp_1232 + 0x18<32>:word32] = 0<32>
	esp_1012 = esp_1232 + 4<32>
	edi_1088 = 0<32>
l0070AF47:
	branch ebx_2263 != 3<32> l0070AF58
l0070AF58:
	Mem1245[esp_11188 + 0x10<32>:word32] = 0<32>
l0070AF4C:
	Mem1249[esp_11188 + 0x10<32>:word32] = Mem760[ebp_1059 - 4<32>:word32]
	ebp_1059 = ebp_1059 - 4<32>
l0070AF60:
	word32 ebx_1254 = Mem1251[ebp_1059 - 4<32>:word32]
	esi_1003 = Mem1251[ebp_1059 - 8<32>:word32]
	word32 esp_1258 = esp_11188 - 4<i32>
	Mem1259[esp_1258:word32] = Mem1251[esp_11188 + 0x10<32>:word32]
	Mem1261[esp_1258 - 4<i32>:word32] = ebx_1254
	Mem1263[esp_1258 - 8<i32>:word32] = esi_1003
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 eax_1268 = fn0072F1E0(stackArg4, dwArg04, dwArg08)
	word32 v43_1274 = Mem1263[esi_1003:word32] + 0xFFFFFFFF<32>
	Mem1275[esi_1003:word32] = v43_1274
	Mem1278[esp_1258 + 0x18<32>:word32] = eax_1268
	ebp_1059 = ebp_1059 - 4<32>
	esp_1012 = esp_1258 + 4<32>
	edi_1088 = eax_1268
	branch v43_1274 != 0<32> l0070AF8F
l0070AF83:
	word32 edx_1280 = Mem1278[esi_1003 + 4<32>:word32]
	word32 eax_1281 = Mem1278[edx_1280 + 0x18<32>:word32]
	Mem1283[esp_1258:word32] = esi_1003
	word32 esp_1284
	word32 ecx_1286
	call eax_1281 (retsize: 4;)
		uses: eax:eax_1281,ecx:ecx_1286,edx:edx_1280,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: eax:eax_1285,ecx:ecx_1286,esp:esp_1284
	esp_1012 = esp_1284 + 4<32>
l0070AF8F:
	word32 v45_1294 = Mem1293[ebx_1254:word32] + 0xFFFFFFFF<32>
	Mem1295[ebx_1254:word32] = v45_1294
	branch v45_1294 != 0<32> l0070AFA0
l0070AF94:
	word32 ecx_1298 = Mem1295[ebx_1254 + 4<32>:word32]
	word32 edx_1299 = Mem1295[ecx_1298 + 0x18<32>:word32]
	Mem1302[esp_1012 - 4<i32>:word32] = ebx_1254
	word32 esp_1308
	word32 edx_1311
	call edx_1299 (retsize: 4;)
		uses: eax:eax_1305,ecx:ecx_1298,edx:edx_1311,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: edx:edx_1311,esp:esp_1308
	esp_1012 = esp_1308 + 4<32>
l0070AFA0:
	word32 eax_1318 = Mem1317[esp_1012 + 0x10<32>:word32]
	branch eax_1318 == 0<32> l007094E3
l0070AFAC:
	word32 v47_1322 = Mem1317[eax_1318:word32] + 0xFFFFFFFF<32>
	Mem1323[eax_1318:word32] = v47_1322
	branch v47_1322 != 0<32> l007094E3
l0070AFB5:
	word32 ecx_1326 = Mem1323[eax_1318 + 4<32>:word32]
	word32 edx_1327 = Mem1323[ecx_1326 + 0x18<32>:word32]
	Mem1329[esp_1012 - 4<i32>:word32] = eax_1318
	word32 edx_1338
	call edx_1327 (retsize: 4;)
		uses: eax:eax_1318,ecx:ecx_1326,edx:edx_1338,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: edx:edx_1338,esp:esp_1335
l0070ADBE:
	esi_1003 = Mem760[ebp_1059 - 4<32>:word32]
	word32 esp_1346 = esp_11188 - 4<i32>
	Mem1347[esp_1346:word32] = Mem760[Mem760[esp_11188 + 0x70<32>:word32] + 0x18<32>:word32]
	Mem1349[esp_1346 - 4<i32>:word32] = esi_1003
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 eax_1351 = fn00725010(stackArg4, dwArg04)
	word32 v42_1357 = Mem1349[esi_1003:word32] + 0xFFFFFFFF<32>
	Mem1358[esi_1003:word32] = v42_1357
	Mem1361[esp_1346 + 0x18<32>:word32] = eax_1351
	ebp_1059 = ebp_1059 - 4<32>
	esp_1012 = esp_1346 + 4<32>
	edi_1088 = eax_1351
	branch v42_1357 != 0<32> l0070ADEC
l0070ADE0:
	word32 edx_1363 = Mem1361[esi_1003 + 4<32>:word32]
	word32 eax_1364 = Mem1361[edx_1363 + 0x18<32>:word32]
	Mem1366[esp_1346:word32] = esi_1003
	word32 esp_1367
	word32 ecx_1369
	call eax_1364 (retsize: 4;)
		uses: eax:eax_1364,ecx:ecx_1369,edx:edx_1363,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: ecx:ecx_1369,esp:esp_1367
	esp_1012 = esp_1367 + 4<32>
l0070ADEC:
	branch eax_1351 == 0<32> l0070AE65
l0070ADF0:
	branch ebx_2263 <= 0<32> l0070AE65
l0070ADF4:
	word32 esp_1383 = esp_1012 - 4<i32>
	Mem1384[esp_1383:word32] = ebx_2263
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 edx_11010
	word32 ecx_11009
	word32 eax_1390 = fn006DFD20(stackArg4, out ecx_11009, out edx_11010)
	esi_1003 = eax_1390
	esp_1012 = esp_1383 + 4<32>
	branch eax_1390 != 0<32> l0070AE23
l0070AE23:
	word32 ebx_1400 = ebx_2263 - 1<32>
	branch ebx_1400 < 0<32> l0070AE46
l0070AE28:
	word32 eax_1403 = eax_1390 + 0xC<32> + ebx_1400 * 4<32>
l0070AE30:
	word32 ecx_1407 = Mem1406[ebp_1059 - 4<32>:word32]
	Mem1410[eax_1403:word32] = ecx_1407
	Mem1417[esp_1383 + 0x14<32>:word32] = ecx_1407
	ebp_1059 = ebp_1059 - 4<32>
	ebx_1400 = ebx_1400 - 1<32>
	eax_1403 = eax_1403 - 4<32>
	branch ebx_1400 >= 0<32> l0070AE30
l0070AE46:
	Mem1423[esp_1383:word32] = eax_1390
	Mem1427[esp_1383 - 4<i32>:word32] = eax_1351
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 eax_1434 = fn00725150(stackArg4, dwArg04)
	word32 v46_1440 = Mem1427[eax_1390:word32] + 0xFFFFFFFF<32>
	Mem1441[eax_1390:word32] = v46_1440
	Mem1443[esp_1383 + 0x1C<32>:word32] = eax_1434
	esp_1012 = esp_1383 + 4<32>
	branch v46_1440 != 0<32> l0070AE65
l0070AE59:
	word32 eax_1445 = Mem1443[eax_1390 + 4<32>:word32]
	word32 ecx_1446 = Mem1443[eax_1445 + 0x18<32>:word32]
	Mem1448[esp_1383:word32] = eax_1390
	word32 esp_1449
	word32 ecx_1451
	word32 edx_1452
	call ecx_1446 (retsize: 4;)
		uses: eax:eax_1445,ecx:ecx_1451,edx:edx_1452,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: ecx:ecx_1451,edx:edx_1452,esp:esp_1449
	esp_1012 = esp_1449 + 4<32>
l0070AE65:
	Mem1459[ebp_1059:word32] = edi_1088
	ebp_1059 = ebp_1059 + 4<32>
l0070AE03:
	word32 v44_1462 = Mem1384[eax_1351:word32] + 0xFFFFFFFF<32>
	Mem1463[eax_1351:word32] = v44_1462
	branch v44_1462 != 0<32> l0070A8FA
l0070AE0C:
	word32 ecx_1466 = Mem1463[eax_1351 + 4<32>:word32]
	word32 edx_1467 = Mem1463[ecx_1466 + 0x18<32>:word32]
	Mem1469[esp_1383:word32] = eax_1351
	word32 esp_1470
	word32 edx_1473
	call edx_1467 (retsize: 4;)
		uses: eax:eax_1390,ecx:ecx_1466,edx:edx_1473,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: edx:edx_1473,esp:esp_1470
	Mem1480[esp_1470 + 0x18<32>:word32] = 0<32>
	esp_1012 = esp_1470 + 4<32>
	edi_1088 = 0<32>
l0070ACB6:
	word32 esp_1482 = esp_11188 - 4<i32>
	Mem1483[esp_1482:word32] = esp_11188 + 0x54<32>
	Mem1485[esp_1482 + 0x58<32>:word32] = ebp_1059
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 eax_1487 = fn00708880(ebx_2263, stackArg4)
	word32 eax_1493 = Mem1485[esp_1482 + 0x58<32>:word32]
	Mem1496[esp_1482 + 0x18<32>:word32] = eax_1487
	Mem1497[eax_1493:word32] = eax_1487
	edi_1088 = eax_1487
	esp_1012 = esp_1482 + 4<32>
	ebp_1059 = eax_1493 + 4<32>
l0070A01A:
	Mem1503[esp_11188 + 0x10<32>:word32] = 0<32>
	word32 eax_1499 = 0<32>
	word32 ecx_1500 = 0<32>
	word32 edx_1501 = 0<32>
	branch ebx_2263 >u 3<32> l0070A05A
l0070A05A:
	word32 eax_1505 = Mem1503[0x00A18720<p32>:word32]
	word32 esp_1506 = esp_11188 - 4<i32>
	Mem1507[esp_1506:word32] = 0x8D7CD8<32>
	Mem1509[esp_1506 - 4<i32>:word32] = eax_1505
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_11005
	word32 edx_11006
	fn006E0F80(stackArg4, dwArg04, out ecx_11005, out edx_11006)
	Mem1516[esp_1506 + 0x20<32>:word32] = 2<32>
	ebx_1517 = Mem1516[esp_1506 + 0x20<32>:word32]
	esp_1012 = esp_1506 + 4<32>
l0070A029:
	switch (ebx_2263) { l0070A046 l0070A03C l0070A036 l0070A030 }
l0070A030:
	edx_1501 = Mem1503[ebp_1059 - 4<32>:word32]
	ebp_1059 = ebp_1059 - 4<32>
l0070A036:
	ecx_1500 = Mem1503[ebp_1059 - 4<32>:word32]
	ebp_1059 = ebp_1059 - 4<32>
l0070A03C:
	eax_1499 = Mem1503[ebp_1059 - 4<32>:word32]
	Mem1535[esp_11188 + 0x10<32>:word32] = eax_1499
	ebp_1059 = ebp_1059 - 4<32>
l0070A046:
	word32 esp_1537 = esp_11188 - 4<i32>
	Mem1541[esp_1537:word32] = edx_1501
	Mem1545[esp_1537 - 4<i32>:word32] = ecx_1500
	Mem1548[esp_1537 - 8<i32>:word32] = eax_1499
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	Mem1570[esp_1537 + 0x20<32>:word32] = fn00707020(stackArg4, dwArg08)
	esp_1012 = esp_1537 + 4<32>
l0070A618:
	word32 eax_1571 = Mem760[esp_11188 + 0x70<32>:word32]
	edi_1088 = Mem760[eax_1571 + 0x138<32> + ebx_2263 * 4<32>:word32]
	Mem1575[esp_11188 + 0x14<32>:word32] = edi_1088
	branch edi_1088 == 0<32> l00709487
l0070A62F:
	Mem1577[eax_1571 + 0x138<32> + ebx_2263 * 4<32>:word32] = 0<32>
	word32 v49_1578 = Mem1577[edi_1088:word32] + 0xFFFFFFFF<32>
	Mem1579[edi_1088:word32] = v49_1578
	branch v49_1578 != 0<32> l00708F23
l0070A643:
	word32 ecx_1582 = Mem1579[edi_1088 + 4<32>:word32]
	word32 edx_1583 = Mem1579[ecx_1582 + 0x18<32>:word32]
	Mem1585[esp_11188 - 4<i32>:word32] = edi_1088
	word32 esp_1586
	word32 edx_1589
	call edx_1583 (retsize: 4;)
		uses: eax:eax_1571,ecx:ecx_1582,edx:edx_1589,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: edx:edx_1589,esp:esp_1586
	esp_1012 = esp_1586 + 4<32>
l0070910E:
	edi_1088 = Mem760[Mem760[esp_11188 + 0x70<32>:word32] + 0x138<32> + ebx_2263 * 4<32>:word32]
	Mem1598[esp_11188 + 0x14<32>:word32] = edi_1088
	branch edi_1088 == 0<32> l00709487
l00709487:
	word32 ecx_1603 = Mem1601[Mem1601[esp_11188 + 0x40<32>:word32] + 0x24<32>:word32]
	word32 esp_1604 = esp_11188 - 4<i32>
	Mem1606[esp_1604:word32] = ebx_2263
	Mem1608[esp_1604 - 4<i32>:word32] = ecx_1603
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 eax_1614 = fn006DFE60(stackArg4, dwArg04)
	word32 edx_1619 = Mem1608[0x00A1776C<p32>:word32]
	Mem1621[esp_1604 - 8<i32>:word32] = 0x8D7D58<32>
	Mem1623[esp_1604 - 12<i32>:word32] = edx_1619
	fn007083E0(eax_1614)
	esp_1012 = esp_1604 + 4<32>
l00709125:
	Mem1633[edi_1088:word32] = Mem1598[edi_1088:word32] + 1<32>
	Mem1634[ebp_1059:word32] = edi_1088
	ebp_1059 = ebp_1059 + 4<32>
l0070AB64:
	word32 eax_1639 = Mem760[esp_11188 + 0x70<32>:word32]
	word32 ebx_1645 = ebx_2263 - Mem760[esp_11188 + 0x38<32>:word32] + Mem760[esp_11188 + 0x20<32>:word32]
	word32 esp_1648 = esp_11188 - 4<i32>
	Mem1649[esp_1648:word32] = ebp_1059 - Mem760[eax_1639 + 0x20<32>:word32] >> 2<32>
	Mem1651[esp_1648 - 4<i32>:word32] = ebx_1645
	Mem1654[esp_1648 - 8<i32>:word32] = ecx_742
	Mem1656[esp_1648 - 12<i32>:word32] = eax_1639
	fn0073B240(Mem1656[esp_1648 - 12<i32>:word32], Mem1656[esp_1648 - 8<i32>:word32], Mem1656[esp_1648 - 4<i32>:word32], Mem1656[esp_1648:word32])
	esp_1012 = esp_1648 + 4<32>
l0070AB3B:
	word32 esp_1666 = esp_11188 - 4<i32>
	Mem1667[esp_1666:word32] = ebx_2263
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_10980
	word32 edx_10981
	word32 eax_1669 = fn007050A0(stackArg4, out ecx_10980, out edx_10981)
	Mem1677[esp_1666 + 0x30<32>:word32] = eax_1669
	esp_1012 = esp_1666 + 4<32>
	branch eax_1669 != 0<32> l0070AB57
l0070AB57:
	Mem1679[esp_1666 + 0x20<32>:word32] = 0x20<32>
l0070AB4C:
	Mem1683[esp_1666 + 0x18<32>:word32] = 0<32>
	edi_1088 = 0<32>
l0070A54F:
	ebx_1685 = Mem760[Mem760[esp_11188 + 0x30<32>:word32] + 0xC<32> + ebx_2263 * 4<32>:word32]
	Mem1687[esp_11188 + 0x10<32>:word32] = ebx_1685
	branch Mem760[ebx_1685 + 4<32>:word32] != 0xA1B450<32> l0070A5DC
l0070A564:
	esi_1003 = Mem1687[ebx_1685 + 0xC<32>:word32]
	branch esi_1003 == 0xFFFFFFFF<32> l0070A5DC
l0070A5DC:
	esi_1003 = Mem1687[esp_11188 + 0x70<32>:word32]
	word32 ecx_1695 = Mem1687[esi_1003 + 0x18<32>:word32]
	word32 esp_1696 = esp_11188 - 4<i32>
	Mem1698[esp_1696:word32] = ebx_1685
	Mem1700[esp_1696 - 4<i32>:word32] = ecx_1695
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_11015
	word32 edx_11016
	word32 eax_1706 = fn006FBCC0(stackArg4, dwArg04, out ecx_11015, out edx_11016)
	Mem1715[esp_1696 + 0x18<32>:word32] = eax_1706
	edi_1088 = eax_1706
	esp_1012 = esp_1696 + 4<32>
	branch eax_1706 != 0<32> l0070A5CE
l0070A5F7:
	word32 edx_1717 = Mem1715[esi_1003 + 0x14<32>:word32]
	Mem1719[esp_1696:word32] = ebx_1685
	Mem1721[esp_1696 - 4<i32>:word32] = edx_1717
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_11018
	word32 edx_11019
	word32 eax_1723 = fn006FBCC0(stackArg4, dwArg04, out ecx_11018, out edx_11019)
	Mem1732[esp_1696 + 0x18<32>:word32] = eax_1723
	edi_1088 = eax_1723
	esp_1012 = esp_1696 + 4<32>
	branch eax_1723 != 0<32> l0070A5CE
l0070A56C:
	word32 edi_1734 = Mem1687[esp_11188 + 0x70<32>:word32]
	word32 eax_1735 = Mem1687[edi_1734 + 0x18<32>:word32]
	word32 edx_1736 = Mem1687[eax_1735 + 0x18<32>:word32]
	word32 esp_1737 = esp_11188 - 4<i32>
	Mem1738[esp_1737:word32] = esi_1003
	Mem1740[esp_1737 - 4<i32>:word32] = ebx_1685
	Mem1742[esp_1737 - 8<i32>:word32] = eax_1735
	word32 esp_1743
	word32 eax_1744
	word32 ecx_1745
	word32 edx_1746
	call edx_1736 (retsize: 4;)
		uses: eax:eax_1735,ecx:ecx_1745,edx:edx_1746,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: eax:eax_1744,ecx:ecx_1745,edx:edx_1746,esp:esp_1743
	esp_1012 = esp_1743 + 0xC<32>
	branch eax_1744 != 0<32> l0070A58D
l0070A58D:
	word32 eax_1753 = Mem1742[eax_1744 + 8<32>:word32]
	Mem1756[esp_1743 + 0x20<32>:word32] = eax_1753
	branch eax_1753 == 0<32> l0070A5A6
l0070A5A6:
	word32 eax_1758 = Mem1756[edi_1734 + 0x14<32>:word32]
	Mem1760[esp_1743 + 8<32>:word32] = esi_1003
	Mem1762[esp_1743 + 4<32>:word32] = ebx_1685
	Mem1764[esp_1743:word32] = eax_1758
	word32 eax_1765 = Mem1764[eax_1758 + 0x18<32>:word32]
	word32 esp_1766
	word32 eax_1767
	word32 ecx_1768
	word32 edx_1769
	call eax_1765 (retsize: 4;)
		uses: eax:eax_1765,ecx:ecx_1768,edx:edx_1769,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: eax:eax_1767,ecx:ecx_1768,edx:edx_1769,esp:esp_1766
	esp_1012 = esp_1766 + 0xC<32>
	branch eax_1767 != 0<32> l0070A5C3
l0070A5C3:
	edi_1088 = Mem1764[eax_1767 + 8<32>:word32]
	Mem1779[esp_1766 + 0x20<32>:word32] = edi_1088
	branch edi_1088 == 0<32> l0070A60E
l0070A60E:
	esp_1782 = esp_1012 - 4<i32>
	Mem1783[esp_1782:word32] = 0x8D7C2C<32>
l0070A5B8:
	Mem1787[esp_1766 + 0x20<32>:word32] = 0<32>
	edi_1088 = 0<32>
l0070A598:
	Mem1789[eax_1753:word32] = Mem1756[eax_1753:word32] + 1<32>
	Mem1790[ebp_1059:word32] = eax_1753
	ebp_1059 = ebp_1059 + 4<32>
l0070A582:
	Mem1796[esp_1743 + 0x20<32>:word32] = 0<32>
	edi_1088 = 0<32>
l00709371:
	esi_1003 = Mem760[esp_11188 + 0x20<32>:word32]
l0070933E:
	esi_1003 = Mem760[esp_11188 + 0x20<32>:word32]
l00709335:
	Mem1800[esp_11188 + 0x20<32>:word32] = Mem760[esp_11188 + 0x20<32>:word32] + ebx_2263
l0070A99F:
	Mem1805[esp_11188 + 0x10<32>:word32] = Mem760[Mem760[esp_11188 + 0x30<32>:word32] + 0xC<32> + ebx_2263 * 4<32>:word32]
	word32 eax_1807 = fn007081C0()
	Mem1812[ebp_1059:word32] = eax_1807
	Mem1816[esp_11188 + 0x14<32>:word32] = eax_1807
	esp_1012 = esp_11188
	ebp_1059 = ebp_1059 + 4<32>
	branch eax_1807 != 0<32> l00708F23
l0070A9C5:
l0070A7FD:
	esi_1003 = Mem760[esp_11188 + 0x70<32>:word32]
	word32 edx_1820 = Mem760[esi_1003 + 0x14<32>:word32]
	word32 ecx_1821 = Mem760[Mem760[esp_11188 + 0x30<32>:word32] + 0xC<32> + ebx_2263 * 4<32>:word32]
	word32 esp_1822 = esp_11188 - 4<i32>
	Mem1823[esp_1822:word32] = 0x8D5F2C<32>
	Mem1825[esp_1822 - 4<i32>:word32] = edx_1820
	Mem1826[esp_1822 + 0x14<32>:word32] = ecx_1821
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 edi_10978
	word32 ecx_10975
	word32 edx_10976
	word32 esi_10977
	word32 eax_1828 = fn006FD8B0(stackArg4, dwArg04, out ecx_10975, out edx_10976, out esi_10977, out edi_10978)
	Mem1837[esp_1822 + 0x18<32>:word32] = eax_1828
	edi_1088 = eax_1828
	branch eax_1828 != 0<32> l0070A840
l0070A840:
	word32 eax_1897
	Mem1840[eax_1828:word32] = Mem1837[eax_1828:word32] + 1<32>
	word32 eax_1841 = Mem1840[ebp_1059 - 8<32>:word32]
	word32 ebx_1842 = Mem1840[ebp_1059 - 4<32>:word32]
	Mem1846[esp_1822:word32] = eax_1841
	Mem1847[esp_1822 + 0x28<32>:word32] = eax_1841
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	ebp_1059 = ebp_1059 - 4<32>
	word32 esi_11027
	word32 edi_11028
	word32 edx_11026
	word32 ecx_11025
	branch fn007051A0(eax_1828, stackArg4, out ecx_11025, out edx_11026, out esi_11027, out edi_11028) != 0xFFFFFFFF<32> l0070A890
l0070A85E:
	branch fn006E0FC0() != 0<32> l0070A890
l0070A890:
	word32 eax_1863 = Mem1847[esi_1003 + 0x1C<32>:word32]
	branch eax_1863 != 0<32> l0070A89C
l0070A897:
	eax_1863 = 0xA163B8<32>
l0070A89C:
	word32 edx_1873 = Mem1847[esi_1003 + 0x18<32>:word32]
	Mem1875[esp_1822:word32] = Mem1847[esp_1822 + 0x28<32>:word32]
	Mem1879[esp_1822 - 4<i32>:word32] = ebx_1842
	Mem1882[esp_1822 - 8<i32>:word32] = eax_1863
	word32 eax_1883 = Mem1882[esp_1822 + 0x14<32>:word32]
	Mem1885[esp_1822 - 12<i32>:word32] = edx_1873
	Mem1887[esp_1822 - 16<i32>:word32] = eax_1883
	Mem1889[esp_1822 - 20<i32>:word32] = 5<32>
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 esi_11043
	word32 ecx_11041
	word32 edx_11042
	eax_1897 = fn006DFF80(stackArg4, out ecx_11041, out edx_11042, out esi_11043)
	Mem1905[esp_1822 + 0x14<32>:word32] = eax_1897
	esi_1003 = eax_1897
l0070A867:
	word32 eax_1906 = Mem1847[esi_1003 + 0x1C<32>:word32]
	branch eax_1906 != 0<32> l0070A873
l0070A86E:
	eax_1906 = 0xA163B8<32>
l0070A873:
	word32 ecx_1913 = Mem1847[esi_1003 + 0x18<32>:word32]
	word32 edx_1915 = Mem1847[esp_1822 + 0x14<32>:word32]
	Mem1918[esp_1822:word32] = ebx_1842
	Mem1921[esp_1822 - 4<i32>:word32] = eax_1906
	Mem1923[esp_1822 - 8<i32>:word32] = ecx_1913
	Mem1925[esp_1822 - 12<i32>:word32] = edx_1915
	Mem1927[esp_1822 - 16<i32>:word32] = 4<32>
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 esi_11035
	word32 ecx_11033
	word32 edx_11034
	eax_1897 = fn006DFF80(stackArg4, out ecx_11033, out edx_11034, out esi_11035)
	Mem1940[esp_1822 + 0x14<32>:word32] = eax_1897
	esi_1003 = eax_1897
l0070A8BC:
	word32 v61_1943 = Mem1942[ebx_1842:word32] + 0xFFFFFFFF<32>
	Mem1944[ebx_1842:word32] = v61_1943
	esp_1012 = esp_11188
	branch v61_1943 != 0<32> l0070A8CD
l0070A8C1:
	word32 ecx_1947 = Mem1944[ebx_1842 + 4<32>:word32]
	word32 edx_1948 = Mem1944[ecx_1947 + 0x18<32>:word32]
	Mem1951[esp_11188 - 4<i32>:word32] = ebx_1842
	word32 esp_1957
	word32 edx_1960
	call edx_1948 (retsize: 4;)
		uses: eax:eax_1954,ecx:ecx_1947,edx:edx_1960,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: edx:edx_1960,esp:esp_1957
	esp_1012 = esp_1957 + 4<32>
l0070A8CD:
	word32 eax_1967 = Mem1966[esp_1012 + 0x24<32>:word32]
	word32 v62_1968 = Mem1966[eax_1967:word32] + 0xFFFFFFFF<32>
	Mem1969[eax_1967:word32] = v62_1968
	branch v62_1968 != 0<32> l0070A8E2
l0070A8D6:
	word32 ecx_1972 = Mem1969[eax_1967 + 4<32>:word32]
	word32 edx_1973 = Mem1969[ecx_1972 + 0x18<32>:word32]
	Mem1975[esp_1012 - 4<i32>:word32] = eax_1967
	word32 esp_1981
	word32 edx_1984
	call edx_1973 (retsize: 4;)
		uses: eax:eax_1967,ecx:ecx_1972,edx:edx_1984,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: edx:edx_1984,esp:esp_1981
	esp_1012 = esp_1981 + 4<32>
l0070A8E2:
	branch esi_1003 != 0<32> l0070A905
l0070A905:
	word32 esp_1994 = esp_1012 - 4<i32>
	Mem1995[esp_1994:word32] = 0<32>
	Mem1997[esp_1994 - 4<i32>:word32] = esi_1003
	Mem2000[esp_1994 - 8<i32>:word32] = eax_1828
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 edx_11046
	word32 esi_11047
	word32 edi_11048
	word32 ecx_11045
	word32 eax_2006 = fn00707680(stackArg4, dwArg04, dwArg08, out ecx_11045, out edx_11046, out esi_11047, out edi_11048)
	word32 v65_2012 = Mem2000[eax_1828:word32] + 0xFFFFFFFF<32>
	Mem2013[eax_1828:word32] = v65_2012
	Mem2016[esp_1994 + 0x18<32>:word32] = eax_2006
	esp_1012 = esp_1994 + 4<32>
	edi_1088 = eax_2006
	branch v65_2012 != 0<32> l0070A92A
l0070A91E:
	word32 edx_2018 = Mem2016[eax_1828 + 4<32>:word32]
	word32 eax_2019 = Mem2016[edx_2018 + 0x18<32>:word32]
	Mem2021[esp_1994:word32] = eax_1828
	word32 esp_2022
	word32 ecx_2024
	call eax_2019 (retsize: 4;)
		uses: eax:eax_2019,ecx:ecx_2024,edx:edx_2018,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: eax:eax_2023,ecx:ecx_2024,esp:esp_2022
	esp_1012 = esp_2022 + 4<32>
l0070A92A:
	word32 v73_2032 = Mem2031[esi_1003:word32] + 0xFFFFFFFF<32>
	Mem2033[esi_1003:word32] = v73_2032
	branch v73_2032 != 0<32> l007094E3
l0070A933:
	word32 ecx_2036 = Mem2033[esi_1003 + 4<32>:word32]
	word32 edx_2037 = Mem2033[ecx_2036 + 0x18<32>:word32]
	Mem2040[esp_1012 - 4<i32>:word32] = esi_1003
	word32 edx_2049
	call edx_2037 (retsize: 4;)
		uses: eax:eax_2043,ecx:ecx_2036,edx:edx_2049,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: edx:edx_2049,esp:esp_2046
l0070A8E6:
	word32 v64_2054 = Mem2053[eax_1828:word32] + 0xFFFFFFFF<32>
	Mem2055[eax_1828:word32] = v64_2054
	ebp_1059 = ebp_1059 + 0xFFFFFFFC<32>
	branch v64_2054 != 0<32> l0070A8FA
l0070A8EE:
	word32 eax_2058 = Mem2055[eax_1828 + 4<32>:word32]
	word32 ecx_2059 = Mem2055[eax_2058 + 0x18<32>:word32]
	Mem2061[esp_1012 - 4<i32>:word32] = eax_1828
	word32 esp_2063
	word32 ecx_2065
	word32 edx_2066
	call ecx_2059 (retsize: 4;)
		uses: eax:eax_2058,ecx:ecx_2065,edx:edx_2066,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: ecx:ecx_2065,edx:edx_2066,esp:esp_2063
	esp_1012 = esp_2063 + 4<32>
l0070A8FA:
	Mem2075[esp_1012 + 0x14<32>:word32] = 0<32>
	edi_1088 = 0<32>
l0070A828:
	word32 eax_2076 = Mem1837[0x00A16F8C<p32>:word32]
	Mem2078[esp_1822:word32] = 0x8D7BB0<32>
	Mem2080[esp_1822 - 4<i32>:word32] = eax_2076
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_11030
	word32 edx_11031
	fn006E0F80(stackArg4, dwArg04, out ecx_11030, out edx_11031)
	esp_1012 = esp_1822 + 4<32>
l00709212:
	esi_1003 = Mem760[ebp_1059 - 4<32>:word32]
	word32 edx_2090 = Mem760[ebp_1059 - 8<32>:word32]
	Mem2094[esp_11188 + 0x10<32>:word32] = esi_1003
	Mem2095[esp_11188 + 0x24<32>:word32] = edx_2090
	ebp_1059 = ebp_1059 - 4<32>
	branch Mem760[esi_1003 + 4<32>:word32] != 0xA1E7E8<32> l007092AD
l00709231:
	branch Mem2095[edx_2090 + 4<32>:word32] != 0xA1E7E8<32> l007092AD
l00709236:
	word32 eax_2100 = Mem2095[edx_2090 + 8<32>:word32]
	word32 ecx_2101 = Mem2095[esi_1003 + 8<32>:word32]
	branch ebx_2263 >u 9<32> l007092AD
l00709241:
	word32 eax_2135
	switch (ebx_2263) { l00709248 l00709253 l0070925E l00709269 l00709274 l0070927F l007092AD l007092AD l0070928A l00709293 }
l00709293:
	eax_2135 = CONVERT(CONVERT(edx_2090 != esi_1003, bool, int8), int8, uint32) (alias)
l0070928A:
	eax_2135 = CONVERT(CONVERT(edx_2090 == esi_1003, bool, int8), int8, uint32) (alias)
l007092AD:
	word32 eax_2121 = fn00708130(Mem2095[esp_11188 + 0x10<32>:word32], Mem2095[esp_11188 + 0x24<32>:word32], ebx_2263)
	esi_1003 = Mem2095[esp_11188 + 0x10<32>:word32]
	edx_2090 = Mem2095[esp_11188 + 0x24<32>:word32]
	edi_1088 = eax_2121
l0070927F:
	eax_2135 = CONVERT(CONVERT(eax_2100 >= ecx_2101, bool, int8), int8, uint32)
l00709274:
	eax_2135 = CONVERT(CONVERT(eax_2100 > ecx_2101, bool, int8), int8, uint32)
l00709269:
	eax_2135 = CONVERT(CONVERT(eax_2100 != ecx_2101, bool, int8), int8, uint32)
l0070925E:
	eax_2135 = CONVERT(CONVERT(eax_2100 == ecx_2101, bool, int8), int8, uint32)
l00709253:
	eax_2135 = CONVERT(CONVERT(eax_2100 <= ecx_2101, bool, int8), int8, uint32)
l00709248:
	eax_2135 = CONVERT(CONVERT(eax_2100 < ecx_2101, bool, int8), int8, uint32)
l0070929A:
	edi_1088 = 0xA191E4<32>
	branch eax_2135 != 0<32> l007092A8
l007092A3:
	edi_1088 = 0xA191D8<32>
l007092A8:
	Mem2185[edi_1088:word32] = Mem2095[edi_1088:word32] + 1<32>
l007092C6:
	word32 v59_2191 = Mem2190[edx_2090:word32] + 0xFFFFFFFF<32>
	Mem2192[edx_2090:word32] = v59_2191
	Mem2198[esp_11188 + 0x14<32>:word32] = edi_1088
	esp_1012 = esp_11188
	branch v59_2191 != 0<32> l007092DB
l007092CF:
	word32 eax_2200 = Mem2198[edx_2090 + 4<32>:word32]
	word32 ecx_2201 = Mem2198[eax_2200 + 0x18<32>:word32]
	Mem2203[esp_11188 - 4<i32>:word32] = edx_2090
	word32 esp_2216
	word32 ecx_2218
	word32 edx_2219
	call ecx_2201 (retsize: 4;)
		uses: eax:eax_2200,ecx:ecx_2218,edx:edx_2219,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: ecx:ecx_2218,edx:edx_2219,esp:esp_2216
	esp_1012 = esp_2216 + 4<32>
l007092DB:
	word32 v60_2226 = Mem2225[esi_1003:word32] + 0xFFFFFFFF<32>
	Mem2227[esi_1003:word32] = v60_2226
	branch v60_2226 != 0<32> l007092EC
l007092E0:
	word32 edx_2230 = Mem2227[esi_1003 + 4<32>:word32]
	word32 eax_2231 = Mem2227[edx_2230 + 0x18<32>:word32]
	Mem2234[esp_1012 - 4<i32>:word32] = esi_1003
	word32 esp_2239
	word32 ecx_2241
	call eax_2231 (retsize: 4;)
		uses: eax:eax_2231,ecx:ecx_2241,edx:edx_2230,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: ecx:ecx_2241,esp:esp_2239
	esp_1012 = esp_2239 + 4<32>
l007092EC:
	Mem2251[ebp_1059 - 4<32>:word32] = edi_1088
	branch edi_1088 == 0<32> l00708EE4
l007092F7:
	esi_1003 = Mem2251[esp_1012 + 0x20<32>:word32]
	byte al_2255 = Mem2251[esi_1003:byte]
	branch al_2255 != 0x6F<8> l00709317
l00709317:
	branch al_2255 != 0x70<8> l00708F23
l0070931F:
	ebx_2263 = (CONVERT(Mem2251[esi_1003 + 2<32>:byte], byte, word32) << 8<32>) + CONVERT(Mem2251[esi_1003 + 1<32>:byte], byte, word32)
	Mem2266[esp_1012 + 0x20<32>:word32] = esi_1003 + 3<32>
	esi_1003 = esi_1003 + 3<32>
l00709375:
	word32 eax_2269 = Mem2268[ebp_1059 - 4<32>:word32]
	Mem2272[esp_1012 + 0x10<32>:word32] = eax_2269
	branch eax_2269 != 0xA191D8<32> l007093B7
l007093B7:
	branch eax_2269 != 0xA191E4<32> l0070A9F8
l0070A9F8:
	word32 esp_2276 = esp_1012 - 4<i32>
	Mem2277[esp_2276:word32] = eax_2269
	word32 edx_11039
	word32 ecx_11038
	word32 eax_2278 = fn006DEA90(Mem2277[esp_2276:word32], out ecx_11038, out edx_11039)
	Mem2288[esp_2276 + 0x1C<32>:word32] = eax_2278
	esp_1012 = esp_2276 + 4<32>
	branch eax_2278 <= 0<32> l00709C2E
l0070AA0D:
	Mem2289[esp_2276 + 0x1C<32>:word32] = 0<32>
l007093C2:
	esi_1003 = esi_1003 + ebx_2263
	Mem2294[esp_1012 + 0x20<32>:word32] = esi_1003
l00709383:
	branch Mem2272[esi_1003:byte] != 1<8> l00709030
l0070938C:
	esi_1003 = Mem2272[esp_1012 + 0x20<32>:word32]
l00709301:
	ebx_2263 = (CONVERT(Mem2251[esi_1003 + 2<32>:byte], byte, word32) << 8<32>) + CONVERT(Mem2251[esi_1003 + 1<32>:byte], byte, word32)
	Mem2304[esp_1012 + 0x20<32>:word32] = esi_1003 + 3<32>
	esi_1003 = esi_1003 + 3<32>
l00709342:
	word32 eax_2307 = Mem2306[ebp_1059 - 4<32>:word32]
	Mem2310[esp_1012 + 0x10<32>:word32] = eax_2307
	branch eax_2307 != 0xA191E4<32> l0070935B
l0070935B:
	branch eax_2307 != 0xA191D8<32> l0070A9CA
l0070A9CA:
	word32 esp_2314 = esp_1012 - 4<i32>
	Mem2315[esp_2314:word32] = eax_2307
	word32 ecx_11036
	word32 edx_11037
	word32 eax_2316 = fn006DEA90(Mem2315[esp_2314:word32], out ecx_11036, out edx_11037)
	Mem2326[esp_2314 + 0x1C<32>:word32] = eax_2316
	esp_1012 = esp_2314 + 4<32>
	branch eax_2316 <= 0<32> l0070A9E8
l0070A9E8:
	branch Mem2326[esp_2314 + 0x1C<32>:word32] != 0<32> l00708EE4
l0070A9F3:
l0070A9DB:
	Mem2329[esp_2314 + 0x1C<32>:word32] = 0<32>
l00709366:
	esi_1003 = esi_1003 + ebx_2263
	Mem2334[esp_1012 + 0x20<32>:word32] = esi_1003
l00709350:
	branch Mem2310[esi_1003:byte] != 1<8> l00709030
l00709359:
l00709390:
	esi_1003 = esi_1003 + 1<32>
	Mem2341[esp_1012 + 0x20<32>:word32] = esi_1003
l0070A7C7:
	word32 ebx_2343 = Mem760[Mem760[esp_11188 + 0x30<32>:word32] + 0xC<32> + ebx_2263 * 4<32>:word32]
	esi_1003 = Mem760[ebp_1059 - 4<32>:word32]
	word32 esp_2345 = esp_11188 - 4<i32>
	Mem2346[esp_2345:word32] = ebx_2343
	Mem2348[esp_2345 - 4<i32>:word32] = esi_1003
	Mem2349[esp_2345 + 0x14<32>:word32] = ebx_2343
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 edx_10973
	word32 ecx_10972
	word32 eax_2351 = fn006DE330(stackArg4, dwArg04, out ecx_10972, out edx_10973)
	word32 v63_2357 = Mem2349[esi_1003:word32] + 0xFFFFFFFF<32>
	Mem2358[esi_1003:word32] = v63_2357
	Mem2361[esp_2345 + 0x18<32>:word32] = eax_2351
	esp_1012 = esp_2345 + 4<32>
	edi_1088 = eax_2351
	branch v63_2357 != 0<32> l007094E3
l0070A7EF:
	word32 ecx_2363 = Mem2361[esi_1003 + 4<32>:word32]
	word32 edx_2364 = Mem2361[ecx_2363 + 0x18<32>:word32]
	Mem2366[esp_2345:word32] = esi_1003
	word32 edx_2370
	call edx_2364 (retsize: 4;)
		uses: eax:eax_2351,ecx:ecx_2363,edx:edx_2370,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: edx:edx_2370,esp:esp_2367
l0070A7B1:
	word32 ecx_10969
	word32 edx_10970
	word32 eax_2374 = fn006FDCC0(out ecx_10969, out edx_10970)
	Mem2380[ebp_1059:word32] = eax_2374
	Mem2381[esp_11188 + 0x14<32>:word32] = eax_2374
	esp_1012 = esp_11188
	edi_1088 = eax_2374
	ebp_1059 = ebp_1059 + 4<32>
l0070A771:
	word32 esp_2384 = esp_11188 - 4<i32>
	Mem2385[esp_2384:word32] = ebx_2263
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 edx_10968
	word32 eax_2387 = fn006F2650(stackArg4, out edx_10968)
	Mem2396[esp_2384 + 0x18<32>:word32] = eax_2387
	edi_1088 = eax_2387
	esp_1012 = esp_2384 + 4<32>
	branch eax_2387 == 0<32> l00708EE4
l0070A788:
	word32 ebx_2398 = ebx_2263 - 1<32>
	branch ebx_2398 < 0<32> l0070A7A6
l0070A78D:
l0070A790:
	word32 eax_2404 = Mem2403[ebp_1059 - 4<32>:word32]
	ebx_2398 = ebx_2398 - 1<32>
	Mem2411[Mem2403[eax_2387 + 0xC<32>:word32] + 4<32> + ebx_2398 * 4<32>:word32] = eax_2404
	Mem2413[esp_2384 + 0x14<32>:word32] = eax_2404
	ebp_1059 = ebp_1059 - 4<32>
	branch ebx_2398 >= 0<32> l0070A790
l0070A7A6:
	Mem2417[ebp_1059:word32] = eax_2387
	ebp_1059 = ebp_1059 + 4<32>
l0070A72F:
	word32 esp_2420 = esp_11188 - 4<i32>
	Mem2421[esp_2420:word32] = ebx_2263
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_10965
	word32 edx_10966
	word32 eax_2423 = fn006DFD20(stackArg4, out ecx_10965, out edx_10966)
	Mem2432[esp_2420 + 0x18<32>:word32] = eax_2423
	edi_1088 = eax_2423
	esp_1012 = esp_2420 + 4<32>
	branch eax_2423 == 0<32> l00708EE4
l0070A746:
	word32 ebx_2434 = ebx_2263 - 1<32>
	branch ebx_2434 < 0<32> l0070A766
l0070A74B:
	word32 eax_2437 = eax_2423 + 0xC<32> + ebx_2434 * 4<32>
l0070A750:
	word32 ecx_2440 = Mem2439[ebp_1059 - 4<32>:word32]
	Mem2443[eax_2437:word32] = ecx_2440
	Mem2450[esp_2420 + 0x14<32>:word32] = ecx_2440
	ebp_1059 = ebp_1059 - 4<32>
	ebx_2434 = ebx_2434 - 1<32>
	eax_2437 = eax_2437 - 4<32>
	branch ebx_2434 >= 0<32> l0070A750
l0070A766:
	Mem2455[ebp_1059:word32] = eax_2423
	ebp_1059 = ebp_1059 + 4<32>
l0070A477:
	esi_1003 = Mem760[esp_11188 + 0x70<32>:word32]
	ebx_1685 = Mem760[Mem760[esp_11188 + 0x30<32>:word32] + 0xC<32> + ebx_2263 * 4<32>:word32]
	word32 eax_2461 = Mem760[esi_1003 + 0x1C<32>:word32]
	Mem2464[esp_11188 + 0x10<32>:word32] = ebx_1685
	word32 esp_2465 = esp_11188 - 4<i32>
	Mem2466[esp_2465:word32] = ebx_1685
	branch eax_2461 != 0<32> l0070A4B1
l0070A4B1:
	Mem2470[esp_2465 - 4<i32>:word32] = eax_2461
	branch Mem2466[eax_2461 + 4<32>:word32] != 0xA1D1B8<32> l0070A4D2
l0070A4D2:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_11054
	word32 edx_11055
	word32 eax_2473 = fn00704220(stackArg4, dwArg04, out ecx_11054, out edx_11055)
	Mem2482[esp_2465 + 0x18<32>:word32] = eax_2473
	edi_1088 = eax_2473
	esp_1012 = esp_2465 + 4<32>
	branch eax_2473 != 0<32> l0070A5D1
l0070A4E8:
	branch fn006E0FC0() == 0<32> l0070A50C
l0070A4F1:
	Mem2490[esp_2465:word32] = Mem2482[0x00A17E28<p32>:word32]
	esp_1012 = esp_2465 + 4<32>
	word32 edx_11066
	word32 ecx_11065
	branch fn006E1110(out ecx_11065, out edx_11066) == 0<32> l00708EE4
l0070A507:
	word32 ecx_11067
	word32 edx_11068
	fn006E1160(out ecx_11067, out edx_11068)
l0070A4BB:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_11057
	word32 edx_11058
	word32 eax_2509 = fn006FBCC0(stackArg4, dwArg04, out ecx_11057, out edx_11058)
	Mem2518[esp_2465 + 0x18<32>:word32] = eax_2509
	edi_1088 = eax_2509
	branch eax_2509 == 0<32> l0070A514
l0070A4CD:
	Mem2521[eax_2509:word32] = Mem2518[eax_2509:word32] + 1<32>
l0070A50C:
	esp_1012 = esp_11188
	branch edi_1088 != 0<32> l0070A5D1
l0070A514:
	word32 ecx_2531 = Mem2529[esi_1003 + 0x18<32>:word32]
	word32 esp_2534 = esp_11188 - 4<i32>
	Mem2537[esp_2534:word32] = ebx_1685
	Mem2539[esp_2534 - 4<i32>:word32] = ecx_2531
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_11060
	word32 edx_11061
	word32 eax_2548 = fn006FBCC0(stackArg4, dwArg04, out ecx_11060, out edx_11061)
	Mem2557[esp_2534 + 0x18<32>:word32] = eax_2548
	edi_1088 = eax_2548
	esp_1012 = esp_2534 + 4<32>
	branch eax_2548 != 0<32> l0070A5CE
l0070A52F:
	word32 edx_2559 = Mem2557[esi_1003 + 0x14<32>:word32]
	Mem2561[esp_2534:word32] = ebx_1685
	Mem2563[esp_2534 - 4<i32>:word32] = edx_2559
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 edx_11064
	word32 ecx_11063
	word32 eax_2565 = fn006FBCC0(stackArg4, dwArg04, out ecx_11063, out edx_11064)
	Mem2574[esp_2534 + 0x18<32>:word32] = eax_2565
	edi_1088 = eax_2565
	esp_1012 = esp_2534 + 4<32>
	branch eax_2565 != 0<32> l0070A5CE
l0070A5CE:
	Mem2579[edi_1088:word32] = Mem2577[edi_1088:word32] + 1<32>
l0070A5D1:
	Mem2584[ebp_1059:word32] = edi_1088
	ebp_1059 = ebp_1059 + 4<32>
l0070A54A:
l0070A48F:
	word32 edx_11049
	word32 eax_2614 = fn006DDDB0(eax_2461, edx_2591, ebx_1685, esi_1003, edi_1088, es, ds, Mem2466[esp_2465:word32], out edx_11049, out edi_1088)
	word32 edx_2625 = Mem2466[0x00A18720<p32>:word32]
	Mem2629[esp_2465:word32] = eax_2614 + 0x14<32>
	Mem2631[esp_2465 - 4<i32>:word32] = 0x8D7C10<32>
	Mem2633[esp_2465 - 8<i32>:word32] = edx_2625
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_11051
	word32 edx_11052
	fn006E15D0(stackArg4, dwArg04, out ecx_11051, out edx_11052)
	esp_1012 = esp_2465 + 8<32>
l00709133:
	edi_1088 = Mem760[Mem760[esp_11188 + 0x68<32>:word32] + 0xC<32> + ebx_2263 * 4<32>:word32]
	Mem2645[edi_1088:word32] = Mem760[edi_1088:word32] + 1<32>
	Mem2646[ebp_1059:word32] = edi_1088
	Mem2647[esp_11188 + 0x14<32>:word32] = edi_1088
	ebp_1059 = ebp_1059 + 4<32>
l007091B7:
	branch ebx_2263 != 2<32> l007091DE
l007091DE:
	branch ebx_2263 != 3<32> l007094AE
l007094AE:
	word32 esp_2654 = esp_11188 - 4<i32>
	Mem2655[esp_2654:word32] = 0x8D7D24<32>
	fn006E86F0(Mem2655[esp_2654:word32])
	esp_1012 = esp_2654 + 4<32>
l007091E7:
	edi_1088 = Mem760[ebp_1059 - 4<32>:word32]
	Mem2665[edi_1088:word32] = Mem760[edi_1088:word32] + 1<32>
	word32 ecx_2666 = Mem2665[ebp_1059 - 8<32>:word32]
	Mem2668[ecx_2666:word32] = Mem2665[ecx_2666:word32] + 1<32>
	word32 eax_2669 = Mem2668[ebp_1059 - 0xC<32>:word32]
	Mem2671[eax_2669:word32] = Mem2668[eax_2669:word32] + 1<32>
	Mem2674[esp_11188 + 0x14<32>:word32] = edi_1088
	Mem2675[esp_11188 + 0x10<32>:word32] = ecx_2666
	ebp_1059 = ebp_1059 + 0xC<32>
	Mem2676[ebp_1059 - 4<32>:word32] = edi_1088
	Mem2677[ebp_1059 - 8<32>:word32] = ecx_2666
	Mem2678[ebp_1059 - 0xC<32>:word32] = eax_2669
l007091BC:
	edi_1088 = Mem760[ebp_1059 - 4<32>:word32]
	Mem2681[edi_1088:word32] = Mem760[edi_1088:word32] + 1<32>
	word32 eax_2682 = Mem2681[ebp_1059 - 8<32>:word32]
	Mem2684[eax_2682:word32] = Mem2681[eax_2682:word32] + 1<32>
	Mem2687[esp_11188 + 0x14<32>:word32] = edi_1088
	Mem2688[esp_11188 + 0x10<32>:word32] = eax_2682
	ebp_1059 = ebp_1059 + 8<32>
	Mem2689[ebp_1059 - 4<32>:word32] = edi_1088
	Mem2690[ebp_1059 - 8<32>:word32] = eax_2682
l0070A444:
	ebx_1685 = Mem760[Mem760[esp_11188 + 0x30<32>:word32] + 0xC<32> + ebx_2263 * 4<32>:word32]
	word32 edx_2694 = Mem760[Mem760[esp_11188 + 0x70<32>:word32] + 0x18<32>:word32]
	word32 esp_2695 = esp_11188 - 4<i32>
	Mem2696[esp_2695:word32] = ebx_1685
	Mem2698[esp_2695 - 4<i32>:word32] = edx_2694
	Mem2699[esp_2695 + 0x14<32>:word32] = ebx_1685
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 eax_2701 = fn006FBE60(stackArg4, dwArg04)
	Mem2709[esp_2695 + 0x1C<32>:word32] = eax_2701
	esp_1012 = esp_2695 + 4<32>
	branch eax_2701 == 0<32> l00708EE4
l0070A46D:
	Mem2712[esp_2695:word32] = 0x8D7C2C<32>
	esp_1782 = esp_2695
l0070A3FC:
	esi_1003 = Mem760[ebp_1059 - 4<32>:word32]
	word32 ebx_2715 = Mem760[Mem760[esp_11188 + 0x30<32>:word32] + 0xC<32> + ebx_2263 * 4<32>:word32]
	word32 eax_2717 = Mem760[Mem760[esp_11188 + 0x70<32>:word32] + 0x18<32>:word32]
	word32 esp_2720 = esp_11188 - 4<i32>
	Mem2721[esp_2720:word32] = esi_1003
	Mem2723[esp_2720 - 4<i32>:word32] = ebx_2715
	Mem2725[esp_2720 - 8<i32>:word32] = eax_2717
	Mem2726[esp_2720 + 0x14<32>:word32] = ebx_2715
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ebx_10961
	word32 edi_10962
	word32 ecx_10959
	word32 edx_10960
	word32 eax_2728 = fn006FBD90(stackArg4, dwArg04, dwArg08, out ecx_10959, out edx_10960, out ebx_10961, out edi_10962)
	word32 v74_2734 = Mem2726[esi_1003:word32] + 0xFFFFFFFF<32>
	Mem2735[esi_1003:word32] = v74_2734
	Mem2738[esp_2720 + 0x1C<32>:word32] = eax_2728
	ebp_1059 = ebp_1059 - 4<32>
	esp_1012 = esp_2720 + 4<32>
	branch v74_2734 != 0<32> l0070A437
l0070A42B:
	word32 ecx_2740 = Mem2738[esi_1003 + 4<32>:word32]
	word32 edx_2741 = Mem2738[ecx_2740 + 0x18<32>:word32]
	Mem2743[esp_2720:word32] = esi_1003
	word32 esp_2744
	word32 edx_2747
	call edx_2741 (retsize: 4;)
		uses: eax:eax_2728,ecx:ecx_2740,edx:edx_2747,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: edx:edx_2747,esp:esp_2744
	esp_1012 = esp_2744 + 4<32>
l0070A437:
	branch eax_2728 == 0<32> l00708F23
l0070A43F:
l0070A3D5:
	word32 ebx_2757 = Mem760[Mem760[esp_11188 + 0x30<32>:word32] + 0xC<32> + ebx_2263 * 4<32>:word32]
	esi_1003 = Mem760[ebp_1059 - 4<32>:word32]
	word32 esp_2759 = esp_11188 - 4<i32>
	Mem2760[esp_2759:word32] = 0<32>
	Mem2764[esp_2759 - 4<i32>:word32] = ebx_2757
	Mem2766[esp_2759 - 8<i32>:word32] = esi_1003
	Mem2767[esp_2759 + 0x14<32>:word32] = ebx_2757
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_10956
	word32 edx_10957
	Mem2776[esp_2759 + 0x1C<32>:word32] = fn006DE430(stackArg4, dwArg04, dwArg08, out ecx_10956, out edx_10957)
	ebp_1059 = ebp_1059 - 4<32>
	esp_1012 = esp_2759 + 4<32>
l0070A3B0:
	word32 eax_2778 = Mem760[Mem760[esp_11188 + 0x30<32>:word32] + 0xC<32> + ebx_2263 * 4<32>:word32]
	ebx_2779 = Mem760[ebp_1059 - 8<32>:word32]
	esi_1003 = Mem760[ebp_1059 - 4<32>:word32]
	word32 esp_2781 = esp_11188 - 4<i32>
	Mem2782[esp_2781:word32] = ebx_2779
	Mem2784[esp_2781 - 4<i32>:word32] = eax_2778
	Mem2786[esp_2781 - 8<i32>:word32] = esi_1003
	Mem2787[esp_2781 + 0x14<32>:word32] = eax_2778
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	ebp_1059 = ebp_1059 + 0xFFFFFFF8<32>
	word32 ecx_10953
	word32 edx_10954
	eax_2791 = fn006DE430(stackArg4, dwArg04, dwArg08, out ecx_10953, out edx_10954)
l0070941E:
	esi_1003 = Mem760[esp_11188 + 0x20<32>:word32]
l0070A343:
	word32 edx_2799 = Mem760[esp_11188 + 0x70<32>:word32]
	edi_1088 = Mem760[edx_2799 + 0x1C<32>:word32]
	ebx_1685 = Mem760[Mem760[esp_11188 + 0x30<32>:word32] + 0xC<32> + ebx_2263 * 4<32>:word32]
	Mem2805[esp_11188 + 0x10<32>:word32] = ebx_1685
	Mem2806[esp_11188 + 0x14<32>:word32] = edi_1088
	word32 esp_2807 = esp_11188 - 4<i32>
	Mem2808[esp_2807:word32] = ebx_1685
	branch edi_1088 == 0<32> l0070A38E
l0070A38E:
	word32 edx_11069
	word32 eax_2810 = fn006DDDB0(eax_4033, edx_2799, ebx_1685, esi_1003, edi_1088, es, ds, Mem2808[esp_2807:word32], out edx_11069, out edi_1088)
	word32 ecx_2821 = Mem2808[0x00A18720<p32>:word32]
	Mem2825[esp_2807:word32] = eax_2810 + 0x14<32>
	Mem2827[esp_2807 - 4<i32>:word32] = 0x8D7C50<32>
	Mem2829[esp_2807 - 8<i32>:word32] = ecx_2821
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_11071
	word32 edx_11072
	fn006E15D0(stackArg4, dwArg04, out ecx_11071, out edx_11072)
	esp_1012 = esp_2807 + 8<32>
l0070A35F:
	Mem2839[esp_2807 - 4<i32>:word32] = edi_1088
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_11074
	word32 eax_2841 = fn00704400(stackArg4, dwArg04, out ecx_11074)
	Mem2849[esp_2807 + 0x1C<32>:word32] = eax_2841
	esp_1012 = esp_2807 + 4<32>
	branch eax_2841 == 0<32> l00708EE4
l0070A374:
	esp_1782 = esp_11188 - 4<i32>
	Mem2853[esp_1782:word32] = 0x8D7C6C<32>
l0070A379:
	word32 esp_2857 = esp_1782 - 4<i32>
	Mem2858[esp_2857:word32] = Mem2854[0x00A17768<p32>:word32]
	fn007083E0(ebx_1685)
	esp_1012 = esp_2857 + 8<32>
l0070A2CF:
	word32 eax_2883 = Mem760[esp_11188 + 0x70<32>:word32]
	word32 edx_2884 = Mem760[esp_11188 + 0x30<32>:word32]
	edi_1088 = Mem760[eax_2883 + 0x1C<32>:word32]
	word32 ebx_2886 = Mem760[edx_2884 + 0xC<32> + ebx_2263 * 4<32>:word32]
	esi_1003 = Mem760[ebp_1059 - 4<32>:word32]
	Mem2891[esp_11188 + 0x10<32>:word32] = ebx_2886
	Mem2892[esp_11188 + 0x14<32>:word32] = edi_1088
	ebp_1059 = ebp_1059 - 4<32>
	branch edi_1088 == 0<32> l0070A321
l0070A321:
	word32 esp_2894 = esp_11188 - 4<i32>
	Mem2895[esp_2894:word32] = ebx_2886
	word32 edx_11079
	Mem2910[esp_2894:word32] = fn006DDDB0(eax_2883, edx_2884, ebx_2886, esi_1003, edi_1088, es, ds, Mem2895[esp_2894:word32], out edx_11079, out edi_1088) + 0x14<32>
	word32 eax_2911 = Mem2910[0x00A18720<p32>:word32]
	Mem2913[esp_2894 - 4<i32>:word32] = 0x8D7C8C<32>
	Mem2915[esp_2894 - 8<i32>:word32] = eax_2911
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_11081
	word32 edx_11082
	fn006E15D0(stackArg4, dwArg04, out ecx_11081, out edx_11082)
	esp_1012 = esp_2894 + 8<32>
l0070A2F0:
	word32 esp_2925 = esp_11188 - 4<i32>
	Mem2926[esp_2925:word32] = esi_1003
	Mem2928[esp_2925 - 4<i32>:word32] = ebx_2886
	Mem2930[esp_2925 - 8<i32>:word32] = edi_1088
	branch Mem2892[edi_1088 + 4<32>:word32] != 0xA1D1B8<32> l0070A303
l0070A303:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_11084
	eax_2933 = fn00704300(stackArg4, dwArg04, dwArg08, out ecx_11084)
l0070A2FC:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_11086
	word32 edi_11089
	word32 ebx_11088
	word32 edx_11087
	eax_2933 = fn006FBD90(stackArg4, dwArg04, dwArg08, out ecx_11086, out edx_11087, out ebx_11088, out edi_11089)
l0070A308:
	word32 esp_2944 = esp_11188 - 12<i32>
	word32 v83_2948 = Mem2930[esi_1003:word32] + 0xFFFFFFFF<32>
	Mem2949[esi_1003:word32] = v83_2948
	Mem2952[esp_2944 + 0x24<32>:word32] = eax_2933
	esp_1012 = esp_2944 + 0xC<32>
	branch v83_2948 != 0<32> l00709C2E
l0070A318:
	ecx_2954 = Mem2952[esi_1003 + 4<32>:word32]
	Mem2956[esp_2944 + 8<32>:word32] = esi_1003
l0070A280:
	esi_1003 = Mem760[ebp_1059 - 0xC<32>:word32]
	word32 eax_2958 = Mem760[ebp_1059 - 4<32>:word32]
	word32 ebx_2959 = Mem760[ebp_1059 - 8<32>:word32]
	word32 esp_2960 = esp_11188 - 4<i32>
	Mem2961[esp_2960:word32] = esi_1003
	Mem2963[esp_2960 - 4<i32>:word32] = eax_2958
	Mem2964[esp_2960 + 0x28<32>:word32] = eax_2958
	Mem2965[esp_2960 + 0x14<32>:word32] = esi_1003
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 eax_2969 = fn00708C10(ebx_2959, stackArg4)
	ebp_1059 = ebp_1059 + 0xFFFFFFF8<32>
	word32 eax_2975 = Mem2965[esp_2960 + 0x28<32>:word32]
	Mem2977[ebp_1059 - 4<32>:word32] = eax_2969
	word32 v80_2978 = Mem2977[eax_2975:word32] + 0xFFFFFFFF<32>
	Mem2979[eax_2975:word32] = v80_2978
	Mem2981[esp_2960 + 0x18<32>:word32] = eax_2969
	edi_1088 = eax_2969
	esp_1012 = esp_2960 + 4<32>
	branch v80_2978 != 0<32> l0070A2BC
l0070A2B0:
	word32 edx_2983 = Mem2981[eax_2975 + 4<32>:word32]
	Mem2985[esp_2960:word32] = eax_2975
	word32 eax_2986 = Mem2985[edx_2983 + 0x18<32>:word32]
	word32 esp_2987
	word32 ecx_2989
	call eax_2986 (retsize: 4;)
		uses: eax:eax_2986,ecx:ecx_2989,edx:edx_2983,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: eax:eax_2988,ecx:ecx_2989,esp:esp_2987
	esp_1012 = esp_2987 + 4<32>
l0070A2BC:
	word32 v89_2997 = Mem2996[ebx_2959:word32] + 0xFFFFFFFF<32>
	Mem2998[ebx_2959:word32] = v89_2997
	branch v89_2997 != 0<32> l0070A266
l0070A2C1:
	word32 ecx_3001 = Mem2998[ebx_2959 + 4<32>:word32]
	word32 edx_3002 = Mem2998[ecx_3001 + 0x18<32>:word32]
	Mem3005[esp_1012 - 4<i32>:word32] = ebx_2959
	word32 esp_3011
	word32 edx_3014
	call edx_3002 (retsize: 4;)
		uses: eax:eax_3008,ecx:ecx_3001,edx:edx_3014,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: edx:edx_3014,esp:esp_3011
	esp_1012 = esp_3011 + 4<32>
l0070A17C:
	esi_1003 = Mem760[ebp_1059 - 4<32>:word32]
	word32 eax_3020 = Mem760[esi_1003 + 4<32>:word32]
	ebp_1059 = ebp_1059 - 4<32>
	branch eax_3020 == 0xA1E7E8<32> l0070A24B
l0070A190:
	word32 esp_3024 = esp_11188 - 4<i32>
	Mem3025[esp_3024:word32] = 0xA1E7E8<32>
	Mem3027[esp_3024 - 4<i32>:word32] = eax_3020
	word32 edx_11091
	word32 ecx_11090
	branch fn006D5670(Mem3027[esp_3024 - 4<i32>:word32], Mem3027[esp_3024:word32], out ecx_11090, out edx_11091) != 0<32> l0070A24B
l0070A24B:
	word32 eax_3041 = Mem3040[esi_1003 + 8<32>:word32]
	Mem3044[esp_11188 + 0x1C<32>:word32] = eax_3041
	esp_1012 = esp_11188
	branch eax_3041 == 8<32> l0070A25C
l0070A257:
	branch eax_3041 != 0x20<32> l0070A266
l0070A25C:
	Mem3055[esp_11188 + 0x2C<32>:word32] = Mem3044[ebp_1059 - 4<32>:word32]
	ebp_1059 = ebp_1059 - 4<32>
l0070A1A6:
	word32 eax_3056 = Mem3027[esi_1003 + 4<32>:word32]
	branch eax_3056 == 0xA1E968<32> l0070A21F
l0070A1B0:
	branch eax_3056 == 0xA15380<32> l0070A1C9
l0070A1B7:
	Mem3062[esp_3024:word32] = 0xA15380<32>
	Mem3064[esp_3024 - 4<i32>:word32] = eax_3056
	word32 ecx_11096
	word32 edx_11097
	branch fn006D5670(Mem3064[esp_3024 - 4<i32>:word32], Mem3064[esp_3024:word32], out ecx_11096, out edx_11097) == 0<32> l0070A1DD
l0070A1C9:
	word32 esp_3079 = esp_11188 - 4<i32>
	Mem3080[esp_3079:word32] = Mem3076[0x00A169F0<p32>:word32]
	Mem3083[esp_3079 - 4<i32>:word32] = esi_1003
	word32 edx_11095
	word32 ecx_11094
	branch fn006D5670(Mem3083[esp_3079 - 4<i32>:word32], Mem3083[esp_3079:word32], out ecx_11094, out edx_11095) != 0<32> l0070A21F
l0070A1DD:
	word32 eax_3097 = Mem3096[esi_1003 + 4<32>:word32]
	branch eax_3097 == 0xA1B450<32> l0070A21F
l0070A1E7:
	word32 esp_3101 = esp_11188 - 4<i32>
	Mem3102[esp_3101:word32] = 0xA1B450<32>
	Mem3104[esp_3101 - 4<i32>:word32] = eax_3097
	esp_1012 = esp_3101 + 4<32>
	word32 ecx_11098
	word32 edx_11099
	branch fn006D5670(Mem3104[esp_3101 - 4<i32>:word32], Mem3104[esp_3101:word32], out ecx_11098, out edx_11099) != 0<32> l0070A21F
l0070A21F:
	word32 eax_3120 = Mem3119[ebp_1059 - 4<32>:word32]
	word32 esp_3126 = esp_11188 - 4<i32>
	Mem3127[esp_3126:word32] = Mem3119[ebp_1059 - 8<32>:word32]
	Mem3129[esp_3126 - 4<i32>:word32] = eax_3120
	Mem3132[esp_3126 - 8<i32>:word32] = esi_1003
	Mem3133[esp_3126 + 0x14<32>:word32] = eax_3120
	word32 ecx_11092
	word32 edx_11093
	fn006E0E00(Mem3133[esp_3126:word32], out ecx_11092, out edx_11093)
	Mem3141[esp_3126 + 0x20<32>:word32] = 4<32>
	ebp_1059 = ebp_1059 - 8<32>
	ebx_1517 = Mem3141[esp_3126 + 0x20<32>:word32]
	esp_1012 = esp_3126 + 4<32>
l0070A1F9:
	branch esi_1003 == 0xA163B8<32> l0070A266
l0070A201:
	word32 edx_3147 = Mem3104[0x00A18720<p32>:word32]
	Mem3149[esp_3101:word32] = 0x8D7CAC<32>
	Mem3151[esp_3101 - 4<i32>:word32] = edx_3147
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_11101
	word32 edx_11102
	fn006E0F80(stackArg4, dwArg04, out ecx_11101, out edx_11102)
	Mem3166[esp_3101 + 0x20<32>:word32] = 2<32>
	esp_1012 = esp_3101 + 4<32>
l0070A266:
	word32 v85_3170 = Mem3169[esi_1003:word32] + 0xFFFFFFFF<32>
	Mem3171[esi_1003:word32] = v85_3170
	branch v85_3170 != 0<32> l00708EE4
l0070A26F:
	word32 eax_3174 = Mem3171[esi_1003 + 4<32>:word32]
	word32 ecx_3175 = Mem3171[eax_3174 + 0x18<32>:word32]
	Mem3178[esp_1012 - 4<i32>:word32] = esi_1003
	word32 esp_3189
	word32 ecx_3191
	word32 edx_3192
	call ecx_3175 (retsize: 4;)
		uses: eax:eax_3174,ecx:ecx_3191,edx:edx_3192,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: ecx:ecx_3191,edx:edx_3192,esp:esp_3189
	esp_1012 = esp_3189 + 4<32>
l0070A133:
	word32 edi_3197 = Mem760[esp_11188 + 0x70<32>:word32]
	word32 esp_3198 = esp_11188 - 4<i32>
	Mem3199[esp_3198:word32] = edi_3197
	word32 eax_3200 = fn0073B280(Mem3199[esp_3198:word32])
	esi_1003 = eax_3200
	esp_1012 = esp_3198 + 4<32>
	branch ebp_1059 - Mem3199[edi_3197 + 0x20<32>:word32] >> 2<32> <= Mem3199[eax_3200 + 8<32>:word32] l00708F23
l0070A153:
	word32 eax_3214 = Mem3213[ebp_1059 - 4<32>:word32]
	word32 v81_3216 = Mem3213[eax_3214:word32] + 0xFFFFFFFF<32>
	Mem3217[eax_3214:word32] = v81_3216
	ebp_1059 = ebp_1059 - 4<32>
	branch v81_3216 != 0<32> l0070A16A
l0070A15E:
	word32 ecx_3220 = Mem3217[eax_3214 + 4<32>:word32]
	word32 edx_3221 = Mem3217[ecx_3220 + 0x18<32>:word32]
	Mem3224[esp_1012 - 4<i32>:word32] = eax_3214
	word32 esp_3229
	word32 edx_3232
	call edx_3221 (retsize: 4;)
		uses: eax:eax_3214,ecx:ecx_3220,edx:edx_3232,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: edx:edx_3232,esp:esp_3229
	esp_1012 = esp_3229 + 4<32>
l0070A16A:
	branch ebp_1059 - Mem3240[edi_3197 + 0x20<32>:word32] >> 2<32> > Mem3240[eax_3200 + 8<32>:word32] l0070A153
l0070A177:
l0070B21A:
	word32 eax_3246 = Mem760[ebp_1059 - 4<32>:word32]
	word32 ecx_3247 = Mem760[esp_11188 + 0x70<32>:word32]
	Mem3250[esp_11188 + 0x1C<32>:word32] = 0x40<32>
	ebx_1517 = Mem3250[esp_11188 + 0x1C<32>:word32]
	Mem3252[esp_11188 + 0x2C<32>:word32] = eax_3246
	Mem3253[ecx_3247 + 0x24<32>:word32] = ebp_1059 - 4<32>
l0070B27A:
	word32 edi_3257 = Mem3255[esp_1012 + 0x28<32>:word32]
	word32 esp_3260 = esp_1012 + 4<i32>
	branch Mem3255[edi_3257 + 0x14<32>:word32] == 0<32> l0070B372
l0070B289:
	word32 esi_3275
	word32 esp_3291
	word32 eax_3262 = Mem3255[edi_3257 + 0x1C<32>:word32]
	branch eax_3262 == 0<32> l0070B2BA
l0070B290:
	branch ebx_1517 == 8<32> l0070B2F0
l0070B295:
	branch ebx_1517 == 0x40<32> l0070B2F0
l0070B2F0:
	esi_3275 = Mem3255[esp_3260 + 0x28<32>:word32]
	Mem3277[esp_3260 - 4<i32>:word32] = Mem3255[edi_3257 + 0x24<32>:word32]
	Mem3280[esp_3260 - 8<i32>:word32] = eax_3262
	esp_3291 = esp_3260
	branch fn007073E0(Mem3280[esp_3260 + 0x6C<32>:word32], esi_3275, 3<32>, Mem3280[esp_3260 - 8<i32>:word32], Mem3280[esp_3260 - 4<i32>:word32]) == 0<32> l0070B2BE
l0070B310:
	branch esi_3275 == 0<32> l0070B325
l0070B314:
	word32 v87_3298 = Mem3280[esi_3275:word32] + 0xFFFFFFFF<32>
	Mem3299[esi_3275:word32] = v87_3298
	branch v87_3298 != 0<32> l0070B325
l0070B319:
	word32 edx_3302 = Mem3299[esi_3275 + 4<32>:word32]
	word32 eax_3303 = Mem3299[edx_3302 + 0x18<32>:word32]
	Mem3305[esp_3260 - 4<i32>:word32] = esi_3275
	word32 esp_3312
	word32 ecx_3314
	call eax_3303 (retsize: 4;)
		uses: eax:eax_3303,ecx:ecx_3314,edx:edx_3302,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: ecx:ecx_3314,esp:esp_3312
	esp_3291 = esp_3312 + 4<32>
l0070B325:
	Mem3324[esp_3291 + 0x18<32>:word32] = 2<32>
	ebx_1517 = Mem3324[esp_3291 + 0x18<32>:word32]
	Mem3326[esp_3291 + 0x28<32>:word32] = 0<32>
	esi_3275 = 0<32>
l0070B29A:
	branch ebx_1517 != 2<32> l0070B2BA
l0070B29F:
	Mem3330[esp_3260 - 4<i32>:word32] = 0<32>
	word32 edx_3332 = Mem3330[edi_3257 + 0x24<32>:word32]
	word32 edi_3333 = Mem3330[esp_3260 + 0x6C<32>:word32]
	Mem3335[esp_3260 - 8<i32>:word32] = 3<32>
	Mem3337[esp_3260 - 12<i32>:word32] = edx_3332
	Mem3339[esp_3260 - 16<i32>:word32] = eax_3262
	fn007086B0(edi_3333, Mem3339[esp_3260 - 16<i32>:word32], Mem3339[esp_3260 - 12<i32>:word32], Mem3339[esp_3260 - 8<i32>:word32], Mem3339[esp_3260 - 4<i32>:word32])
	edi_3257 = Mem3339[esp_3260 + 0x24<32>:word32]
l0070B2BA:
	esp_3291 = esp_3260
	esi_3275 = Mem3351[esp_3260 + 0x28<32>:word32]
l0070B2BE:
	word32 eax_3357 = Mem3356[edi_3257 + 0x18<32>:word32]
	branch eax_3357 == 0<32> l0070B372
l0070B2C9:
	branch ebx_1517 != 2<32> l0070B339
l0070B339:
	word32 esp_3367 = esp_3291 - 4<i32>
	Mem3368[esp_3367:word32] = Mem3356[edi_3257 + 0x20<32>:word32]
	Mem3370[esp_3367 - 4<i32>:word32] = eax_3357
	word32 esp_3382 = esp_3367 + 4<32>
	branch fn007073E0(Mem3370[esp_3367 + 0x70<32>:word32], esi_3275, 3<32>, Mem3370[esp_3367 - 4<i32>:word32], Mem3370[esp_3367:word32]) == 0<32> l0070B372
l0070B355:
	branch esi_3275 == 0<32> l0070B36A
l0070B359:
	word32 v88_3389 = Mem3370[esi_3275:word32] + 0xFFFFFFFF<32>
	Mem3390[esi_3275:word32] = v88_3389
	branch v88_3389 != 0<32> l0070B36A
l0070B35E:
	word32 edx_3393 = Mem3390[esi_3275 + 4<32>:word32]
	word32 eax_3394 = Mem3390[edx_3393 + 0x18<32>:word32]
	Mem3396[esp_3367:word32] = esi_3275
	word32 esp_3403
	word32 ecx_3405
	call eax_3394 (retsize: 4;)
		uses: eax:eax_3394,ecx:ecx_3405,edx:edx_3393,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: ecx:ecx_3405,esp:esp_3403
	esp_3382 = esp_3403 + 4<32>
l0070B36A:
	Mem3412[esp_3382 + 0x28<32>:word32] = 0<32>
l0070B2CE:
	word32 edx_3414 = Mem3356[Mem3356[esp_3291 + 0x24<32>:word32] + 0x20<32>:word32]
	word32 edi_3415 = Mem3356[esp_3291 + 0x6C<32>:word32]
	word32 esp_3416 = esp_3291 - 4<i32>
	Mem3417[esp_3416:word32] = 0<32>
	Mem3419[esp_3416 - 4<i32>:word32] = 3<32>
	Mem3421[esp_3416 - 8<i32>:word32] = edx_3414
	Mem3423[esp_3416 - 12<i32>:word32] = eax_3357
	fn007086B0(edi_3415, Mem3423[esp_3416 - 12<i32>:word32], Mem3423[esp_3416 - 8<i32>:word32], Mem3423[esp_3416 - 4<i32>:word32], Mem3423[esp_3416:word32])
	edi_3257 = Mem3423[esp_3416 + 0x28<32>:word32]
l0070B372:
	branch Mem3436[Mem3436[edi_3257 + 8<32>:word32] + 0x2C<32>:word32] == 0<32> l0070B382
l0070B37B:
	fn00706F10(edi_3257)
l0070B382:
	word32 eax_3462 = Mem3461[0x00A6D67C<p32>:word32]
	Mem3464[eax_3462 + 0xC<32>:word32] = Mem3461[eax_3462 + 0xC<32>:word32] + 0xFFFFFFFF<32>
	Mem3473[esi_11 + 8<32>:word32] = Mem3464[dwArg04 + 0xC<32>:word32]
	edxOut = dwArg04
	return <invalid>
l0070A0CB:
	word32 ebx_3479 = Mem760[ebp_1059 - 4<32>:word32]
	word32 eax_3480 = Mem760[ebp_1059 - 8<32>:word32]
	esi_1003 = Mem760[ebp_1059 - 0xC<32>:word32]
	word32 ecx_3482 = Mem760[esp_11188 + 0x70<32>:word32]
	word32 esp_3483 = esp_11188 - 4<i32>
	Mem3484[esp_3483:word32] = ebx_3479
	Mem3486[esp_3483 - 4<i32>:word32] = eax_3480
	Mem3488[esp_3483 - 8<i32>:word32] = esi_1003
	Mem3490[esp_3483 - 12<i32>:word32] = ecx_3482
	Mem3491[esp_3483 + 0x14<32>:word32] = ebx_3479
	Mem3492[esp_3483 + 0x28<32>:word32] = eax_3480
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg16 = <invalid>
	word32 eax_3496 = fn0070BCC0(dwArg04, dwArg08, stackArg16)
	word32 v82_3502 = Mem3492[esi_1003:word32] + 0xFFFFFFFF<32>
	Mem3503[esi_1003:word32] = v82_3502
	Mem3505[esp_3483 + 0x1C<32>:word32] = eax_3496
	ebp_1059 = ebp_1059 + 0xFFFFFFF4<32>
	esp_1012 = esp_3483 + 4<32>
	branch v82_3502 != 0<32> l0070A104
l0070A0F8:
	word32 edx_3507 = Mem3505[esi_1003 + 4<32>:word32]
	word32 eax_3508 = Mem3505[edx_3507 + 0x18<32>:word32]
	Mem3510[esp_3483:word32] = esi_1003
	word32 esp_3511
	word32 ecx_3513
	call eax_3508 (retsize: 4;)
		uses: eax:eax_3508,ecx:ecx_3513,edx:edx_3507,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: ecx:ecx_3513,esp:esp_3511
	esp_1012 = esp_3511 + 4<32>
l0070A104:
	word32 eax_3521 = Mem3520[esp_1012 + 0x24<32>:word32]
	word32 v84_3522 = Mem3520[eax_3521:word32] + 0xFFFFFFFF<32>
	Mem3523[eax_3521:word32] = v84_3522
	branch v84_3522 != 0<32> l0070A119
l0070A10D:
	word32 ecx_3526 = Mem3523[eax_3521 + 4<32>:word32]
	word32 edx_3527 = Mem3523[ecx_3526 + 0x18<32>:word32]
	Mem3529[esp_1012 - 4<i32>:word32] = eax_3521
	word32 esp_3535
	word32 edx_3538
	call edx_3527 (retsize: 4;)
		uses: eax:eax_3521,ecx:ecx_3526,edx:edx_3538,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: edx:edx_3538,esp:esp_3535
	esp_1012 = esp_3535 + 4<32>
l0070A119:
	word32 v86_3545 = Mem3544[ebx_3479:word32] + 0xFFFFFFFF<32>
	Mem3546[ebx_3479:word32] = v86_3545
	branch v86_3545 != 0<32> l00708EE4
l0070A122:
	word32 eax_3549 = Mem3546[ebx_3479 + 4<32>:word32]
	word32 ecx_3550 = Mem3546[eax_3549 + 0x18<32>:word32]
	Mem3553[esp_1012 - 4<i32>:word32] = ebx_3479
	word32 esp_3558
	word32 ecx_3560
	word32 edx_3561
	call ecx_3550 (retsize: 4;)
		uses: eax:eax_3549,ecx:ecx_3560,edx:edx_3561,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: ecx:ecx_3560,edx:edx_3561,esp:esp_3558
	esp_1012 = esp_3558 + 4<32>
l0070A941:
	word32 ebx_3566 = Mem760[esp_11188 + 0x70<32>:word32]
	esi_1003 = Mem760[ebp_1059 - 4<32>:word32]
	word32 esp_3570 = esp_11188 - 4<i32>
	Mem3571[esp_3570:word32] = ebx_3566
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	fn0073B3D0(stackArg4)
	edi_1088 = Mem3571[ebx_3566 + 0x1C<32>:word32]
	Mem3582[esp_3570 + 0x18<32>:word32] = edi_1088
	ebp_1059 = ebp_1059 - 4<32>
	branch edi_1088 != 0<32> l0070A977
l0070A977:
	Mem3585[esp_3570:word32] = esi_1003
	Mem3587[esp_3570 - 4<i32>:word32] = edi_1088
	word32 eax_3589 = fn00708210(ebp_1059, dwArg04)
	Mem3595[esp_3570 - 8<i32>:word32] = 0<32>
	Mem3597[esp_3570 - 12<i32>:word32] = ebx_3566
	Mem3598[esp_3570 + 0x1C<32>:word32] = eax_3589
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	eax_2933 = fn0073B4E0(stackArg4)
	word32 v92_3606 = Mem3598[esi_1003:word32] + 0xFFFFFFFF<32>
	Mem3607[esi_1003:word32] = v92_3606
	esp_1012 = esp_3570 + 4<32>
	branch v92_3606 != 0<32> l00709C2E
l0070A996:
	ecx_2954 = Mem3607[esi_1003 + 4<32>:word32]
	Mem3612[esp_3570:word32] = esi_1003
l0070A95F:
	word32 eax_3613 = Mem3582[0x00A18720<p32>:word32]
	Mem3615[esp_3570:word32] = 0x8D7B8C<32>
	Mem3617[esp_3570 - 4<i32>:word32] = eax_3613
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_11105
	word32 edx_11106
	fn006E0F80(stackArg4, dwArg04, out ecx_11105, out edx_11106)
	esp_1012 = esp_3570 + 4<32>
l0070A0B4:
	Mem3629[esp_11188 + 0x2C<32>:word32] = Mem760[ebp_1059 - 4<32>:word32]
	Mem3630[esp_11188 + 0x1C<32>:word32] = 8<32>
	ebp_1059 = ebp_1059 - 4<32>
l0070A07E:
	edi_1088 = Mem760[Mem760[esp_11188 + 0x70<32>:word32] + 0x1C<32>:word32]
	Mem3635[esp_11188 + 0x14<32>:word32] = edi_1088
	branch edi_1088 == 0<32> l0070A09B
l0070A09B:
	word32 edx_3637 = Mem3635[0x00A18720<p32>:word32]
	word32 esp_3638 = esp_11188 - 4<i32>
	Mem3639[esp_3638:word32] = 0x8D7CCC<32>
	Mem3641[esp_3638 - 4<i32>:word32] = edx_3637
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 edx_11109
	word32 ecx_11108
	fn006E0F80(stackArg4, dwArg04, out ecx_11108, out edx_11109)
	esp_1012 = esp_3638 + 4<32>
l0070A08D:
	Mem3651[edi_1088:word32] = Mem3635[edi_1088:word32] + 1<32>
	Mem3652[ebp_1059:word32] = edi_1088
	ebp_1059 = ebp_1059 + 4<32>
l0070AB89:
	word32 ebx_3677
	esi_1003 = Mem760[ebp_1059 - 8<32>:word32]
	word32 eax_3656 = Mem760[esi_1003 + 4<32>:word32]
	word32 edi_3658 = Mem760[ebp_1059 - 4<32>:word32]
	branch eax_3656 == 0xA1E7E8<32> l0070ABBF
l0070AB99:
	word32 esp_3660 = esp_11188 - 4<i32>
	Mem3661[esp_3660:word32] = 0xA1E7E8<32>
	Mem3663[esp_3660 - 4<i32>:word32] = eax_3656
	word32 edx_11111
	word32 ecx_11110
	branch fn006D5670(Mem3663[esp_3660 - 4<i32>:word32], Mem3663[esp_3660:word32], out ecx_11110, out edx_11111) != 0<32> l0070ABBF
l0070ABAB:
	branch esi_1003 == 0xA163B8<32> l0070ABBF
l0070ABBF:
	Mem3679[esp_11188 + 0x24<32>:word32] = 0xA163B8<32>
	ebx_3677 = 0xA163B8<32>
	esi_1003 = 0xA163B8<32>
l0070ABB3:
	ebx_3677 = Mem3663[ebp_1059 - 0x10<32>:word32]
	Mem3683[esp_3660 + 0x28<32>:word32] = Mem3663[ebp_1059 - 0xC<32>:word32]
l0070ABCA:
	word32 ecx_3686 = Mem3685[esp_11188 + 0x24<32>:word32]
	word32 esp_3687 = esp_11188 - 4<i32>
	Mem3688[esp_3687:word32] = 0<32>
	Mem3691[esp_3687 - 4<i32>:word32] = ebx_3677
	Mem3693[esp_3687 - 8<i32>:word32] = ecx_3686
	Mem3696[esp_3687 - 12<i32>:word32] = esi_1003
	Mem3700[esp_3687 - 16<i32>:word32] = edi_3658
	Mem3701[esp_3687 + 0x14<32>:word32] = ebx_3677
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_11113
	word32 edx_11114
	word32 eax_3709 = fn00703AF0(stackArg4, out ecx_11113, out edx_11114)
	Mem3718[esp_3687 + 0x18<32>:word32] = eax_3709
	edi_1088 = eax_3709
	esp_1012 = esp_3687 + 4<32>
	branch eax_3709 == 0<32> l00708EE4
l0070ABEE:
	branch esi_1003 == 0xA163B8<32> l0070AC81
l0070ABFA:
	Mem3723[esp_3687:word32] = eax_3709
	word32 edx_11116
	word32 ecx_11115
	word32 eax_3724 = fn006DEA90(Mem3723[esp_3687:word32], out ecx_11115, out edx_11116)
	esp_1012 = esp_3687 + 4<32>
	branch eax_3724 == 0<32> l0070AC81
l0070AC81:
	word32 v96_3737 = Mem3736[eax_3709:word32] + 0xFFFFFFFF<32>
	Mem3738[eax_3709:word32] = v96_3737
	esp_1012 = esp_3687 + 4<32>
	branch v96_3737 != 0<32> l0070AC92
l0070AC86:
	word32 eax_3741 = Mem3738[eax_3709 + 4<32>:word32]
	word32 ecx_3742 = Mem3738[eax_3741 + 0x18<32>:word32]
	Mem3745[esp_3687:word32] = eax_3709
	word32 esp_3750
	word32 ecx_3752
	word32 edx_3753
	call ecx_3742 (retsize: 4;)
		uses: eax:eax_3741,ecx:ecx_3752,edx:edx_3753,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: ecx:ecx_3752,edx:edx_3753,esp:esp_3750
	esp_1012 = esp_3750 + 4<32>
l0070AC92:
	edi_1088 = Mem3759[ebp_1059 - 4<32>:word32]
	word32 v99_3762 = Mem3759[edi_1088:word32] + 0xFFFFFFFF<32>
	Mem3763[edi_1088:word32] = v99_3762
	Mem3766[esp_1012 + 0x14<32>:word32] = edi_1088
	ebp_1059 = ebp_1059 + 0xFFFFFFFC<32>
	branch v99_3762 != 0<32> l00708EE4
l0070ACA5:
	word32 edx_3768 = Mem3766[edi_1088 + 4<32>:word32]
	word32 eax_3769 = Mem3766[edx_3768 + 0x18<32>:word32]
	Mem3771[esp_1012 - 4<i32>:word32] = edi_1088
	word32 esp_3775
	word32 ecx_3777
	call eax_3769 (retsize: 4;)
		uses: eax:eax_3769,ecx:ecx_3777,edx:edx_3768,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: ecx:ecx_3777,esp:esp_3775
	esp_1012 = esp_3775 + 4<32>
l0070AC07:
	word32 v93_3783 = Mem3723[eax_3709:word32] + 0xFFFFFFFF<32>
	Mem3784[eax_3709:word32] = v93_3783
	branch v93_3783 != 0<32> l0070AC18
l0070AC0C:
	word32 edx_3787 = Mem3784[eax_3709 + 4<32>:word32]
	word32 eax_3788 = Mem3784[edx_3787 + 0x18<32>:word32]
	Mem3790[esp_3687:word32] = eax_3709
	word32 esp_3791
	word32 ecx_3793
	call eax_3788 (retsize: 4;)
		uses: eax:eax_3788,ecx:ecx_3793,edx:edx_3787,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: eax:eax_3792,ecx:ecx_3793,esp:esp_3791
	esp_1012 = esp_3791 + 4<32>
l0070AC18:
	edi_1088 = Mem3800[ebp_1059 - 4<32>:word32]
	Mem3803[0x00A163B8<p32>:word32] = Mem3800[0x00A163B8<p32>:word32] + 1<32>
	ebp_1059 = ebp_1059 - 0xC<32>
	Mem3805[ebp_1059 - 4<32>:word32] = 0xA163B8<32>
	word32 v95_3806 = Mem3805[edi_1088:word32] + 0xFFFFFFFF<32>
	Mem3807[edi_1088:word32] = v95_3806
	Mem3810[esp_1012 + 0x14<32>:word32] = edi_1088
	branch v95_3806 != 0<32> l0070AC41
l0070AC35:
	word32 ecx_3812 = Mem3810[edi_1088 + 4<32>:word32]
	word32 edx_3813 = Mem3810[ecx_3812 + 0x18<32>:word32]
	Mem3815[esp_1012 - 4<i32>:word32] = edi_1088
	word32 esp_3820
	word32 edx_3823
	call edx_3813 (retsize: 4;)
		uses: eax:eax_3818,ecx:ecx_3812,edx:edx_3823,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: edx:edx_3823,esp:esp_3820
	esp_1012 = esp_3820 + 4<32>
l0070AC41:
	word32 v97_3830 = Mem3829[esi_1003:word32] + 0xFFFFFFFF<32>
	Mem3831[esi_1003:word32] = v97_3830
	branch v97_3830 != 0<32> l0070AC52
l0070AC46:
	word32 eax_3834 = Mem3831[esi_1003 + 4<32>:word32]
	word32 ecx_3835 = Mem3831[eax_3834 + 0x18<32>:word32]
	Mem3838[esp_1012 - 4<i32>:word32] = esi_1003
	word32 esp_3843
	word32 ecx_3845
	word32 edx_3846
	call ecx_3835 (retsize: 4;)
		uses: eax:eax_3834,ecx:ecx_3845,edx:edx_3846,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: ecx:ecx_3845,edx:edx_3846,esp:esp_3843
	esp_1012 = esp_3843 + 4<32>
l0070AC52:
	word32 eax_3853 = Mem3852[esp_1012 + 0x24<32>:word32]
	word32 v100_3854 = Mem3852[eax_3853:word32] + 0xFFFFFFFF<32>
	Mem3855[eax_3853:word32] = v100_3854
	branch v100_3854 != 0<32> l0070AC67
l0070AC5B:
	word32 edx_3858 = Mem3855[eax_3853 + 4<32>:word32]
	Mem3860[esp_1012 - 4<i32>:word32] = eax_3853
	word32 eax_3861 = Mem3860[edx_3858 + 0x18<32>:word32]
	word32 esp_3867
	word32 ecx_3869
	call eax_3861 (retsize: 4;)
		uses: eax:eax_3861,ecx:ecx_3869,edx:edx_3858,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: eax:eax_3868,ecx:ecx_3869,esp:esp_3867
	esp_1012 = esp_3867 + 4<32>
l0070AC67:
	word32 v102_3877 = Mem3876[ebx_3677:word32] + 0xFFFFFFFF<32>
	Mem3878[ebx_3677:word32] = v102_3877
	branch v102_3877 != 0<32> l00708EE4
l0070AC70:
	word32 ecx_3881 = Mem3878[ebx_3677 + 4<32>:word32]
	word32 edx_3882 = Mem3878[ecx_3881 + 0x18<32>:word32]
	Mem3885[esp_1012 - 4<i32>:word32] = ebx_3677
	word32 esp_3891
	word32 edx_3894
	call edx_3882 (retsize: 4;)
		uses: eax:eax_3888,ecx:ecx_3881,edx:edx_3894,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: edx:edx_3894,esp:esp_3891
	esp_1012 = esp_3891 + 4<32>
l0070AB2E:
	Mem3899[esp_11188 + 0x1C<32>:word32] = 0x10<32>
l0070B089:
	ebx_1517 = Mem3901[esp_1012 + 0x1C<32>:word32]
l00709ADF:
	ebx_3903 = Mem760[ebp_1059 - 4<32>:word32]
	esi_1003 = Mem760[ebp_1059 - 8<32>:word32]
	word32 esp_3907 = esp_11188 - 4<i32>
	Mem3908[esp_3907:word32] = ebx_3903
	Mem3910[esp_3907 - 4<i32>:word32] = esi_1003
	Mem3911[esp_3907 + 0x14<32>:word32] = ebx_3903
	ebp_1059 = ebp_1059 - 4<32>
	eax_3913 = fn00702670()
l00709AC6:
	ebx_3920 = Mem760[ebp_1059 - 4<32>:word32]
	esi_1003 = Mem760[ebp_1059 - 8<32>:word32]
	word32 esp_3924 = esp_11188 - 4<i32>
	Mem3925[esp_3924:word32] = ebx_3920
	Mem3927[esp_3924 - 4<i32>:word32] = esi_1003
	Mem3928[esp_3924 + 0x14<32>:word32] = ebx_3920
	ebp_1059 = ebp_1059 - 4<32>
	eax_3930 = fn007026A0()
l00709AAD:
	ebx_3935 = Mem760[ebp_1059 - 4<32>:word32]
	esi_1003 = Mem760[ebp_1059 - 8<32>:word32]
	word32 esp_3939 = esp_11188 - 4<i32>
	Mem3940[esp_3939:word32] = ebx_3935
	Mem3942[esp_3939 - 4<i32>:word32] = esi_1003
	Mem3943[esp_3939 + 0x14<32>:word32] = ebx_3935
	ebp_1059 = ebp_1059 - 4<32>
	eax_3945 = fn007026D0()
l00709A91:
	ebx_3903 = Mem760[ebp_1059 - 4<32>:word32]
	esi_1003 = Mem760[ebp_1059 - 8<32>:word32]
	word32 esp_3954 = esp_11188 - 4<i32>
	Mem3955[esp_3954:word32] = ebx_3903
	Mem3957[esp_3954 - 4<i32>:word32] = esi_1003
	Mem3958[esp_3954 + 0x14<32>:word32] = ebx_3903
	ebp_1059 = ebp_1059 - 4<32>
	eax_3913 = fn00702710()
l00709A78:
	ebx_3920 = Mem760[ebp_1059 - 4<32>:word32]
	esi_1003 = Mem760[ebp_1059 - 8<32>:word32]
	word32 esp_3971 = esp_11188 - 4<i32>
	Mem3972[esp_3971:word32] = ebx_3920
	Mem3974[esp_3971 - 4<i32>:word32] = esi_1003
	Mem3975[esp_3971 + 0x14<32>:word32] = ebx_3920
	ebp_1059 = ebp_1059 - 4<32>
	eax_3930 = fn007026F0()
l00709F88:
	esi_1003 = Mem760[ebp_1059 - 4<32>:word32]
	Mem3986[esp_11188 + 0x10<32>:word32] = esi_1003
	ebp_1059 = ebp_1059 - 4<32>
	ebx_3985 = esi_1003
l00709DEF:
	ebx_3987 = Mem760[ebp_1059 - 4<32>:word32]
	Mem3990[esp_11188 + 0x34<32>:word32] = ebx_3987
	Mem3991[esp_11188 + 0x10<32>:word32] = ebx_3987
	ebp_1059 = ebp_1059 - 4<32>
l00709F96:
	esi_1003 = Mem760[esp_11188 + 0x34<32>:word32]
	ebx_3985 = Mem760[esp_11188 + 0x10<32>:word32]
l00709F9E:
	branch esi_1003 == 0<32> l00709FAA
l00709FA2:
	branch esi_1003 != 0xA163B8<32> l00709FD4
l00709FAA:
	word32 esp_4002 = esp_11188 - 4<i32>
	Mem4003[esp_4002:word32] = 0x8AC530<32>
	word32 ecx_11117
	word32 edx_11118
	word32 eax_4016 = fn00715DD0(out ecx_11117, out edx_11118)
	Mem4025[esp_4002 + 0x14<32>:word32] = eax_4016
	ebx_3985 = eax_4016
	branch eax_4016 != 0<32> l00709FD8
l00709FC1:
	word32 eax_4027 = Mem4025[0x00A175E0<p32>:word32]
	Mem4029[esp_4002:word32] = 0x8D7CF0<32>
	Mem4031[esp_4002 - 4<i32>:word32] = eax_4027
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_11124
	word32 edx_11125
	eax_4033 = fn006E0F80(stackArg4, dwArg04, out ecx_11124, out edx_11125)
l00709FD4:
	branch ebx_3985 == 0<32> l00709FF8
l00709FD8:
	word32 esp_4046 = esp_11188 - 4<i32>
	Mem4048[esp_4046:word32] = ebx_3985
	Mem4050[esp_4046 - 4<i32>:word32] = 0x8A6DE8<32>
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 edi_11122
	word32 edx_11120
	word32 esi_11121
	eax_4033 = fn00731D30(stackArg4, dwArg04, out edx_11120, out esi_11121, out edi_11122)
	Mem4070[esp_4046 + 0x1C<32>:word32] = eax_4033
	branch eax_4033 != 0<32> l00709FF8
l00709FEE:
	Mem4073[esp_4046:word32] = eax_4033
	Mem4075[esp_4046 - 4<i32>:word32] = ebx_3985
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ebx_11136
	word32 esi_11137
	word32 edi_11138
	eax_4033 = fn00731A20(stackArg4, dwArg04, out ebx_11136, out esi_11137, out edi_11138)
l00709FF8:
	esp_1012 = esp_11188
	branch esi_1003 == 0<32> l0070A00D
l00709FFC:
	word32 v104_4091 = Mem4088[esi_1003:word32] + 0xFFFFFFFF<32>
	Mem4092[esi_1003:word32] = v104_4091
	branch v104_4091 != 0<32> l0070A00D
l0070A001:
	word32 ecx_4095 = Mem4092[esi_1003 + 4<32>:word32]
	word32 edx_4096 = Mem4092[ecx_4095 + 0x18<32>:word32]
	Mem4099[esp_11188 - 4<i32>:word32] = esi_1003
	word32 esp_4105
	word32 edx_4108
	call edx_4096 (retsize: 4;)
		uses: eax:eax_4102,ecx:ecx_4095,edx:edx_4108,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: edx:edx_4108,esp:esp_4105
	esp_1012 = esp_4105 + 4<32>
l0070A00D:
	Mem4114[esp_1012 + 0x34<32>:word32] = 0<32>
l00709DFF:
	ebx_3987 = Mem760[esp_11188 + 0x10<32>:word32]
l00709E03:
	word32 eax_4118 = Mem4117[esp_11188 + 0x34<32>:word32]
	esi_1003 = Mem4117[ebp_1059 - 4<32>:word32]
	ebp_1059 = ebp_1059 - 4<32>
	branch eax_4118 == 0<32> l00709E18
l00709E11:
	branch eax_4118 != 0xA163B8<32> l00709E4B
l00709E18:
	word32 esp_4128 = esp_11188 - 4<i32>
	Mem4129[esp_4128:word32] = 0x8AC530<32>
	word32 ecx_11126
	word32 edx_11127
	word32 eax_4140 = fn00715DD0(out ecx_11126, out edx_11127)
	Mem4149[esp_4128 + 0x14<32>:word32] = eax_4140
	ebx_3987 = eax_4140
	branch eax_4140 != 0<32> l00709E4F
l00709E2F:
	word32 edx_4151 = Mem4149[0x00A175E0<p32>:word32]
	Mem4153[esp_4128:word32] = 0x8D7CF0<32>
	Mem4155[esp_4128 - 4<i32>:word32] = edx_4151
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_11133
	word32 edx_11134
	fn006E0F80(stackArg4, dwArg04, out ecx_11133, out edx_11134)
	Mem4164[esp_4128 + 0x1C<32>:word32] = 0xFFFFFFFF<32>
l00709E4B:
	branch ebx_3987 == 0<32> l00709E73
l00709E4F:
	Mem4173[ebx_3987:word32] = Mem4170[ebx_3987:word32] + 1<32>
	word32 esp_4177 = esp_11188 - 4<i32>
	Mem4178[esp_4177:word32] = 0<32>
	Mem4180[esp_4177 - 4<i32>:word32] = ebx_3987
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 esi_11130
	word32 edi_11131
	word32 ebx_11129
	branch fn00731A20(stackArg4, dwArg04, out ebx_11129, out esi_11130, out edi_11131) == 0<32> l00709E73
l00709E61:
	Mem4202[esp_4177:word32] = ebx_3987
	Mem4204[esp_4177 - 4<i32>:word32] = 0x8A695C<32>
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 edi_11142
	word32 edx_11140
	word32 esi_11141
	Mem4213[esp_4177 + 0x1C<32>:word32] = fn00731D30(stackArg4, dwArg04, out edx_11140, out esi_11141, out edi_11142)
l00709E73:
	branch Mem4215[esp_11188 + 0x18<32>:word32] != 0<32> l00709F3C
l00709E7E:
	word32 esp_4218 = esp_11188 - 4<i32>
	Mem4219[esp_4218:word32] = 1<32>
	Mem4222[esp_4218 - 4<i32>:word32] = ebx_3987
	Mem4225[esp_4218 - 8<i32>:word32] = esi_1003
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 esi_11146
	word32 edx_11144
	word32 ebx_11145
	word32 eax_4231 = fn00731B10(edi_1088, es, ds, stackArg4, dwArg04, dwArg08, out edx_11144, out ebx_11145, out esi_11146)
	Mem4239[esp_4218 + 0x1C<32>:word32] = eax_4231
	branch eax_4231 != 0<32> l00709F3C
l00709E96:
	bool v160_8118
	word32 eax_4241 = Mem4239[esi_1003 + 4<32>:word32]
	branch eax_4241 == 0xA1B450<32> l00709F08
l00709EA0:
	Mem4245[esp_4218:word32] = 0xA1B450<32>
	Mem4247[esp_4218 - 4<32>:word32] = eax_4241
	word32 edx_11148
	word32 ecx_11147
	branch fn006D5670(Mem4247[esp_4218 - 4<32>:word32], Mem4247[esp_4218:word32], out ecx_11147, out edx_11148) != 0<32> l00709F08
l00709F08:
	word32 eax_4261 = Mem4260[esi_1003 + 8<32>:word32]
	Mem4265[esp_4218 + 0x54<32>:word32] = eax_4261
	branch eax_4261 == 0<32> l00709F31
l00709F13:
	Mem4269[esp_4218:word32] = CONVERT(Mem4265[eax_4261 + 0x13<32> + esi_1003:byte], byte, word32)
	branch isspace(Mem4269[esp_4218:int32]) == 0<32> l00709F31
l00709F26:
	v160_8118 = Mem4269[Mem4269[esp_4218 + 0x54<32>:word32] + 0x13<32> + esi_1003:byte] != 0x20<8>
l00709EB2:
	word32 eax_4277 = Mem4247[esi_1003 + 4<32>:word32]
	branch eax_4277 == 0xA23B20<32> l00709ECE
l00709EBC:
	Mem4281[esp_4218:word32] = 0xA23B20<32>
	Mem4283[esp_4218 - 4<32>:word32] = eax_4277
	word32 edx_11150
	word32 ecx_11149
	branch fn006D5670(Mem4283[esp_4218 - 4<32>:word32], Mem4283[esp_4218:word32], out ecx_11149, out edx_11150) == 0<32> l00709F31
l00709ECE:
	Mem4299[esp_4218 + 0x28<32>:word32] = Mem4296[esi_1003 + 0xC<32>:word32]
	word32 eax_4300 = Mem4299[esi_1003 + 8<32>:word32]
	Mem4303[esp_4218 + 0x54<32>:word32] = eax_4300
	branch eax_4300 == 0<32> l00709F31
l00709EE0:
	Mem4309[esp_4218:word32] = CONVERT(Mem4303[Mem4303[esp_4218 + 0x28<32>:word32] - 2<32> + eax_4300 * 2<32>:word16], word16, word32)
	branch fn00750FF0(Mem4309[esp_4218:word16]) == 0<32> l00709F31
l00709EF8:
	v160_8118 = Mem4309[Mem4309[esp_4218 + 0x28<32>:word32] - 2<32> + Mem4309[esp_4218 + 0x54<32>:word32] * 2<32>:word16] != 0x20<16>
l00709F2F:
	branch v160_8118 l00709F3C
l00709F31:
	Mem4328[esp_4218:word32] = 1<32>
	Mem4334[esp_4218 - 4<32>:word32] = ebx_3987
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ebx_11152
	word32 edi_11154
	word32 esi_11153
	fn00731A20(stackArg4, dwArg04, out ebx_11152, out esi_11153, out edi_11154)
l00709F3C:
	esp_1012 = esp_11188
	branch ebx_3987 == 0<32> l00709F51
l00709F40:
	word32 v105_4365 = Mem4363[ebx_3987:word32] + 0xFFFFFFFF<32>
	Mem4366[ebx_3987:word32] = v105_4365
	branch v105_4365 != 0<32> l00709F51
l00709F45:
	word32 eax_4369 = Mem4366[ebx_3987 + 4<32>:word32]
	word32 ecx_4370 = Mem4366[eax_4369 + 0x18<32>:word32]
	Mem4373[esp_11188 - 4<i32>:word32] = ebx_3987
	word32 esp_4378
	word32 ecx_4380
	word32 edx_4381
	call ecx_4370 (retsize: 4;)
		uses: eax:eax_4369,ecx:ecx_4380,edx:edx_4381,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: ecx:ecx_4380,edx:edx_4381,esp:esp_4378
	esp_1012 = esp_4378 + 4<32>
l00709F51:
	word32 v110_4388 = Mem4387[esi_1003:word32] + 0xFFFFFFFF<32>
	Mem4389[esi_1003:word32] = v110_4388
	branch v110_4388 != 0<32> l00709F62
l00709F56:
	word32 edx_4392 = Mem4389[esi_1003 + 4<32>:word32]
	word32 eax_4393 = Mem4389[edx_4392 + 0x18<32>:word32]
	Mem4396[esp_1012 - 4<i32>:word32] = esi_1003
	word32 esp_4401
	word32 ecx_4403
	call eax_4393 (retsize: 4;)
		uses: eax:eax_4393,ecx:ecx_4403,edx:edx_4392,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: ecx:ecx_4403,esp:esp_4401
	esp_1012 = esp_4401 + 4<32>
l00709F62:
	word32 eax_4411 = Mem4410[esp_1012 + 0x34<32>:word32]
	branch eax_4411 == 0<32> l00709F7B
l00709F6A:
	word32 v111_4415 = Mem4410[eax_4411:word32] + 0xFFFFFFFF<32>
	Mem4416[eax_4411:word32] = v111_4415
	branch v111_4415 != 0<32> l00709F7B
l00709F6F:
	word32 ecx_4419 = Mem4416[eax_4411 + 4<32>:word32]
	word32 edx_4420 = Mem4416[ecx_4419 + 0x18<32>:word32]
	Mem4422[esp_1012 - 4<i32>:word32] = eax_4411
	word32 esp_4428
	word32 edx_4431
	call edx_4420 (retsize: 4;)
		uses: eax:eax_4411,ecx:ecx_4419,edx:edx_4431,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: edx:edx_4431,esp:esp_4428
	esp_1012 = esp_4428 + 4<32>
l00709F7B:
	Mem4437[esp_1012 + 0x34<32>:word32] = 0<32>
l00709D3A:
	word32 ebx_4438 = Mem760[ebp_1059 - 4<32>:word32]
	word32 esp_4441 = esp_11188 - 4<i32>
	Mem4442[esp_4441:word32] = 0x8D7D18<32>
	word32 ecx_10947
	word32 edx_10948
	word32 eax_4444 = fn00715DD0(out ecx_10947, out edx_10948)
	Mem4453[esp_4441 + 0x14<32>:word32] = eax_4444
	ebp_1059 = ebp_1059 - 4<32>
	esi_1003 = eax_4444
	esp_1012 = esp_4441 + 4<32>
	branch eax_4444 != 0<32> l00709DAC
l00709DAC:
	branch Mem4453[esp_4441 + 0x1C<32>:word32] != 0<32> l00709D79
l00709DB3:
	Mem4458[esp_4441:word32] = ebx_4438
	Mem4460[esp_4441 - 4<i32>:word32] = 1<32>
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 esi_11161
	word32 edx_11160
	word32 ecx_11159
	eax_4444 = fn006DFF80(stackArg4, out ecx_11159, out edx_11160, out esi_11161)
	Mem4471[esp_4441 + 0x18<32>:word32] = eax_4444
	edi_1088 = eax_4444
	branch eax_4444 == 0<32> l00709D71
l00709DC8:
	Mem4474[esp_4441:word32] = 0<32>
	Mem4476[esp_4441 - 4<i32>:word32] = eax_4444
	Mem4478[esp_4441 - 8<i32>:word32] = eax_4444
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 edi_11166
	word32 esi_11165
	word32 ecx_11163
	word32 edx_11164
	eax_4444 = fn00707680(stackArg4, dwArg04, dwArg08, out ecx_11163, out edx_11164, out esi_11165, out edi_11166)
	Mem4488[esp_4441 + 0x14<32>:word32] = eax_4444
	esp_1012 = esp_4441 + 4<32>
	branch eax_4444 == 0<32> l00709D71
l00709DDC:
	word32 v109_4490 = Mem4488[eax_4444:word32] + 0xFFFFFFFF<32>
	Mem4491[eax_4444:word32] = v109_4490
	branch v109_4490 != 0<32> l00709D79
l00709DE1:
	word32 edx_4494 = Mem4491[eax_4444 + 4<32>:word32]
	Mem4496[esp_4441:word32] = eax_4444
	word32 eax_4497 = Mem4496[edx_4494 + 0x18<32>:word32]
	word32 esp_4498
	word32 ecx_4500
	call eax_4497 (retsize: 4;)
		uses: eax:eax_4497,ecx:ecx_4500,edx:edx_4494,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: eax:eax_4499,ecx:ecx_4500,esp:esp_4498
	esp_1012 = esp_4498 + 4<32>
l00709D57:
	word32 ecx_4506 = Mem4453[0x00A175E0<p32>:word32]
	Mem4508[esp_4441:word32] = 0x8D7D00<32>
	Mem4510[esp_4441 - 4<i32>:word32] = ecx_4506
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_11156
	word32 edx_11157
	eax_4444 = fn006E0F80(stackArg4, dwArg04, out ecx_11156, out edx_11157)
	Mem4521[esp_4441 + 0x18<32>:word32] = 0<32>
	edi_1088 = 0<32>
l00709D71:
	Mem4523[esp_11188 + 0x18<32>:word32] = 0xFFFFFFFF<32>
	esp_1012 = esp_11188
l00709D79:
	word32 v106_4527 = Mem4526[ebx_4438:word32] + 0xFFFFFFFF<32>
	Mem4528[ebx_4438:word32] = v106_4527
	branch v106_4527 != 0<32> l00709D8A
l00709D7E:
	word32 ecx_4531 = Mem4528[ebx_4438 + 4<32>:word32]
	word32 edx_4532 = Mem4528[ecx_4531 + 0x18<32>:word32]
	Mem4535[esp_1012 - 4<i32>:word32] = ebx_4438
	word32 esp_4546
	word32 edx_4549
	call edx_4532 (retsize: 4;)
		uses: eax:eax_4540,ecx:ecx_4531,edx:edx_4549,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: edx:edx_4549,esp:esp_4546
	esp_1012 = esp_4546 + 4<32>
l00709D8A:
	branch edi_1088 == 0<32> l00708EE4
l00709D92:
	word32 v108_4559 = Mem4558[edi_1088:word32] + 0xFFFFFFFF<32>
	Mem4560[edi_1088:word32] = v108_4559
	branch v108_4559 != 0<32> l00708EE4
l00709D9B:
	word32 eax_4563 = Mem4560[edi_1088 + 4<32>:word32]
	word32 ecx_4564 = Mem4560[eax_4563 + 0x18<32>:word32]
	Mem4567[esp_1012 - 4<i32>:word32] = edi_1088
	word32 esp_4572
	word32 ecx_4574
	word32 edx_4575
	call ecx_4564 (retsize: 4;)
		uses: eax:eax_4563,ecx:ecx_4574,edx:edx_4575,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: ecx:ecx_4574,edx:edx_4575,esp:esp_4572
	esp_1012 = esp_4572 + 4<32>
l007093CD:
	esi_1003 = Mem760[ebp_1059 - 4<32>:word32]
	word32 esp_4581 = esp_11188 - 4<i32>
	Mem4582[esp_4581:word32] = esi_1003
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 edx_10946
	word32 ecx_10945
	word32 eax_4584 = fn00704B00(stackArg4, out ecx_10945, out edx_10946)
	word32 v107_4590 = Mem4582[esi_1003:word32] + 0xFFFFFFFF<32>
	Mem4591[esi_1003:word32] = v107_4590
	Mem4594[esp_4581 + 0x18<32>:word32] = eax_4584
	esp_1012 = esp_4581 + 4<32>
	edi_1088 = eax_4584
	branch v107_4590 != 0<32> l007093F0
l007093E4:
	word32 eax_4596 = Mem4594[esi_1003 + 4<32>:word32]
	word32 ecx_4597 = Mem4594[eax_4596 + 0x18<32>:word32]
	Mem4599[esp_4581:word32] = esi_1003
	word32 esp_4600
	word32 ecx_4602
	word32 edx_4603
	call ecx_4597 (retsize: 4;)
		uses: eax:eax_4596,ecx:ecx_4602,edx:edx_4603,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: ecx:ecx_4602,edx:edx_4603,esp:esp_4600
	esp_1012 = esp_4600 + 4<32>
l007093F0:
	branch eax_4584 == 0<32> l0070AA1A
l0070AA1A:
	ebp_1059 = ebp_1059 - 4<32>
l007093F8:
	esi_1003 = Mem4616[esp_1012 + 0x20<32>:word32]
	Mem4618[ebp_1059 - 4<32>:word32] = eax_4584
	branch Mem4618[esi_1003:byte] != 0x5D<8> l00708F23
l00709408:
	ebx_2263 = (CONVERT(Mem4618[esi_1003 + 2<32>:byte], byte, word32) << 8<32>) + CONVERT(Mem4618[esi_1003 + 1<32>:byte], byte, word32)
	Mem4627[esp_1012 + 0x20<32>:word32] = esi_1003 + 3<32>
	esi_1003 = esi_1003 + 3<32>
l00709422:
	word32 eax_4630 = Mem4629[ebp_1059 - 4<32>:word32]
	word32 ecx_4631 = Mem4629[eax_4630 + 4<32>:word32]
	word32 edx_4632 = Mem4629[ecx_4631 + 0x70<32>:word32]
	Mem4635[esp_1012 - 4<i32>:word32] = eax_4630
	word32 esp_4641
	word32 eax_4642
	word32 edx_4644
	call edx_4632 (retsize: 4;)
		uses: eax:eax_4630,ecx:ecx_4631,edx:edx_4644,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: eax:eax_4642,edx:edx_4644,esp:esp_4641
	Mem4651[esp_4641 + 0x18<32>:word32] = eax_4642
	edi_1088 = eax_4642
	esp_1012 = esp_4641 + 4<32>
	branch eax_4642 == 0<32> l0070AAE5
l0070AAE5:
	branch fn006E0FC0() == 0<32> l0070AB0A
l0070AAEE:
	Mem4659[esp_4641:word32] = Mem4651[0x00A16D00<p32>:word32]
	esp_1012 = esp_4641 + 4<32>
	word32 ecx_11075
	word32 edx_11076
	branch fn006E1110(out ecx_11075, out edx_11076) == 0<32> l00708EE4
l0070AB05:
	word32 ecx_11077
	word32 edx_11078
	fn006E1160(out ecx_11077, out edx_11078)
l0070AB0A:
	word32 eax_4679 = Mem4678[ebp_1059 - 4<32>:word32]
	word32 v90_4681 = Mem4678[eax_4679:word32] + 0xFFFFFFFF<32>
	Mem4682[eax_4679:word32] = v90_4681
	Mem4685[esp_4641 + 0x18<32>:word32] = eax_4679
	esp_1012 = esp_4641 + 4<32>
	ebp_1059 = ebp_1059 - 4<32>
	branch v90_4681 != 0<32> l00708F1D
l0070AB1D:
	word32 edx_4687 = Mem4685[eax_4679 + 4<32>:word32]
	Mem4689[esp_4641:word32] = eax_4679
	word32 eax_4690 = Mem4689[edx_4687 + 0x18<32>:word32]
	word32 esp_4695
	word32 ecx_4697
	call eax_4690 (retsize: 4;)
		uses: eax:eax_4690,ecx:ecx_4697,edx:edx_4687,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: ecx:ecx_4697,esp:esp_4695
	esp_1012 = esp_4695 + 4<32>
l00708F1D:
	esi_1003 = esi_1003 + ebx_2263
l0070943F:
	Mem4707[ebp_1059:word32] = eax_4642
	ebp_1059 = ebp_1059 + 4<32>
	branch Mem4707[esi_1003:byte] != 0x7D<8> l0070AA22
l0070AA22:
	branch Mem4707[esi_1003:byte] != 0x5C<8> l00708F23
l0070AA2B:
	ebx_2263 = (CONVERT(Mem4707[esi_1003 + 2<32>:byte], byte, word32) << 8<32>) + CONVERT(Mem4707[esi_1003 + 1<32>:byte], byte, word32)
	Mem4719[esp_4641 + 0x24<32>:word32] = esi_1003 + 3<32>
l0070AA3F:
	esi_1003 = Mem4721[ebp_1059 - 4<32>:word32]
	word32 eax_4723 = Mem4721[esi_1003 + 4<32>:word32]
	ebp_1059 = ebp_1059 - 4<32>
	branch eax_4723 != 0xA16588<32> l0070AA7D
l0070AA4F:
	branch Mem4721[esi_1003 + 8<32>:word32] != ebx_2263 l0070AA7D
l0070AA7D:
	branch eax_4723 != 0xA1BAF0<32> l0070AAAA
l0070AA84:
	branch Mem4721[esi_1003 + 8<32>:word32] != ebx_2263 l0070AAAA
l0070AAAA:
	word32 ecx_4741 = ebp_1059 + ebx_2263 * 4<32>
	Mem4747[esp_1012 + 0x50<32>:word32] = ecx_4741
	branch fn007072E0(ecx_4741, ebx_2263) == 0<32> l0070AAC3
l0070AAC3:
	Mem4763[esp_1012 + 0x1C<32>:word32] = 2<32>
l0070AABD:
	ebp_1059 = Mem4747[esp_1012 + 0x50<32>:word32]
l0070AA89:
	word32 ecx_4767 = Mem4721[esi_1003 + 0xC<32>:word32]
	branch ebx_2263 == 0<32> l0070AACB
l0070AA90:
	word32 eax_4772 = Mem4771[ecx_4767 - 4<32> + ebx_2263 * 4<32>:word32]
	Mem4774[eax_4772:word32] = Mem4771[eax_4772:word32] + 1<32>
	Mem4777[ebp_1059:word32] = eax_4772
	Mem4782[esp_1012 + 0x10<32>:word32] = eax_4772
	ebx_2263 = ebx_2263 - 1<32>
	ebp_1059 = ebp_1059 + 4<32>
	branch ebx_2263 != 0<32> l0070AA90
l0070AAA8:
l0070AACB:
	word32 v76_4787 = Mem4786[esi_1003:word32] + 0xFFFFFFFF<32>
	Mem4788[esi_1003:word32] = v76_4787
	branch v76_4787 != 0<32> l00708EE4
l0070AAD4:
	word32 edx_4791 = Mem4788[esi_1003 + 4<32>:word32]
	word32 eax_4792 = Mem4788[edx_4791 + 0x18<32>:word32]
	Mem4795[esp_1012 - 4<i32>:word32] = esi_1003
	word32 esp_4802
	word32 ecx_4804
	call eax_4792 (retsize: 4;)
		uses: eax:eax_4792,ecx:ecx_4804,edx:edx_4791,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: ecx:ecx_4804,esp:esp_4802
	esp_1012 = esp_4802 + 4<32>
l0070AA54:
	branch ebx_2263 == 0<32> l0070A715
l0070AA5C:
l0070AA60:
	word32 eax_4817 = Mem4816[esi_1003 + 8<32> + ebx_2263 * 4<32>:word32]
	Mem4819[eax_4817:word32] = Mem4816[eax_4817:word32] + 1<32>
	Mem4822[ebp_1059:word32] = eax_4817
	Mem4827[esp_1012 + 0x10<32>:word32] = eax_4817
	ebx_2263 = ebx_2263 - 1<32>
	ebp_1059 = ebp_1059 + 4<32>
	branch ebx_2263 != 0<32> l0070AA60
l0070AA78:
l0070A715:
	word32 v39_4831 = Mem4830[esi_1003:word32] + 0xFFFFFFFF<32>
	Mem4832[esi_1003:word32] = v39_4831
	branch v39_4831 != 0<32> l00708F23
l0070A71E:
	word32 eax_4835 = Mem4832[esi_1003 + 4<32>:word32]
	word32 ecx_4836 = Mem4832[eax_4835 + 0x18<32>:word32]
	Mem4839[esp_1012 - 4<i32>:word32] = esi_1003
	word32 esp_4846
	word32 ecx_4848
	word32 edx_4849
	call ecx_4836 (retsize: 4;)
		uses: eax:eax_4835,ecx:ecx_4848,edx:edx_4849,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: ecx:ecx_4848,edx:edx_4849,esp:esp_4846
	esp_1012 = esp_4846 + 4<32>
l0070944E:
	ebx_2263 = (CONVERT(Mem4707[esi_1003 + 2<32>:byte], byte, word32) << 8<32>) + CONVERT(Mem4707[esi_1003 + 1<32>:byte], byte, word32)
	esi_1003 = esi_1003 + 3<32>
	Mem4860[esp_4641 + 0x24<32>:word32] = esi_1003
l00709462:
	word32 ecx_4863 = Mem4862[esp_1012 + 0x70<32>:word32]
	eax_4865 = Mem4862[ecx_4863 + 0x138<32> + ebx_2263 * 4<32>:word32]
	Mem4871[ecx_4863 + 0x138<32> + ebx_2263 * 4<32>:word32] = Mem4862[ebp_1059 - 4<32>:word32]
	ebp_1059 = ebp_1059 - 4<32>
	branch eax_4865 == 0<32> l00709030
l00709482:
l0070990D:
	ebx_3903 = Mem760[ebp_1059 - 4<32>:word32]
	esi_1003 = Mem760[ebp_1059 - 8<32>:word32]
	word32 esp_4877 = esp_11188 - 4<i32>
	Mem4878[esp_4877:word32] = 0xA163B8<32>
	Mem4880[esp_4877 - 4<i32>:word32] = ebx_3903
	Mem4882[esp_4877 - 8<i32>:word32] = esi_1003
	Mem4883[esp_4877 + 0x14<32>:word32] = ebx_3903
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	ebp_1059 = ebp_1059 - 4<32>
	eax_3913 = fn007028C0(stackArg4)
l0070987D:
	ebx_3903 = Mem760[ebp_1059 - 4<32>:word32]
	esi_1003 = Mem760[ebp_1059 - 8<32>:word32]
	word32 esp_4894 = esp_11188 - 4<i32>
	Mem4895[esp_4894:word32] = ebx_3903
	Mem4897[esp_4894 - 4<i32>:word32] = esi_1003
	Mem4898[esp_4894 + 0x14<32>:word32] = ebx_3903
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	ebp_1059 = ebp_1059 - 4<32>
	eax_3913 = fn007020D0(stackArg4, dwArg04)
l00709864:
	ebx_3920 = Mem760[ebp_1059 - 4<32>:word32]
	esi_1003 = Mem760[ebp_1059 - 8<32>:word32]
	word32 esp_4911 = esp_11188 - 4<i32>
	Mem4912[esp_4911:word32] = ebx_3920
	Mem4914[esp_4911 - 4<i32>:word32] = esi_1003
	Mem4915[esp_4911 + 0x14<32>:word32] = ebx_3920
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	ebp_1059 = ebp_1059 - 4<32>
	eax_3930 = fn00702130(stackArg4, dwArg04)
l0070984B:
	ebx_3935 = Mem760[ebp_1059 - 4<32>:word32]
	esi_1003 = Mem760[ebp_1059 - 8<32>:word32]
	word32 esp_4926 = esp_11188 - 4<i32>
	Mem4927[esp_4926:word32] = ebx_3935
	Mem4929[esp_4926 - 4<i32>:word32] = esi_1003
	Mem4930[esp_4926 + 0x14<32>:word32] = ebx_3935
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	ebp_1059 = ebp_1059 - 4<32>
	eax_3945 = fn00702190(stackArg4, dwArg04)
l0070982F:
	ebx_3903 = Mem760[ebp_1059 - 4<32>:word32]
	esi_1003 = Mem760[ebp_1059 - 8<32>:word32]
	word32 esp_4941 = esp_11188 - 4<i32>
	Mem4942[esp_4941:word32] = ebx_3903
	Mem4944[esp_4941 - 4<i32>:word32] = esi_1003
	Mem4945[esp_4941 + 0x14<32>:word32] = ebx_3903
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	ebp_1059 = ebp_1059 - 4<32>
	eax_3913 = fn00702250(stackArg4, dwArg04)
l00709816:
	ebx_3920 = Mem760[ebp_1059 - 4<32>:word32]
	esi_1003 = Mem760[ebp_1059 - 8<32>:word32]
	word32 esp_4958 = esp_11188 - 4<i32>
	Mem4959[esp_4958:word32] = ebx_3920
	Mem4961[esp_4958 - 4<i32>:word32] = esi_1003
	Mem4962[esp_4958 + 0x14<32>:word32] = ebx_3920
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	ebp_1059 = ebp_1059 - 4<32>
	eax_3930 = fn007021F0(stackArg4, dwArg04)
l00709CF7:
	ebx_2779 = Mem760[ebp_1059 - 4<32>:word32]
	esi_1003 = Mem760[ebp_1059 - 8<32>:word32]
	word32 esp_4971 = esp_11188 - 4<i32>
	Mem4972[esp_4971:word32] = ebx_2779
	Mem4974[esp_4971 - 4<i32>:word32] = esi_1003
	Mem4975[esp_4971 + 0x14<32>:word32] = ebx_2779
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	ebp_1059 = ebp_1059 + 0xFFFFFFF8<32>
	word32 ecx_10937
	eax_2791 = fn00704400(stackArg4, dwArg04, out ecx_10937)
l00709D0E:
	word32 v77_4988 = Mem4987[esi_1003:word32] + 0xFFFFFFFF<32>
	Mem4989[esi_1003:word32] = v77_4988
	Mem4993[esp_11188 + 0x18<32>:word32] = eax_2791
	esp_1012 = esp_11188
	branch v77_4988 != 0<32> l00709D23
l00709D17:
	word32 eax_4995 = Mem4993[esi_1003 + 4<32>:word32]
	word32 ecx_4996 = Mem4993[eax_4995 + 0x18<32>:word32]
	Mem4998[esp_11188 - 4<i32>:word32] = esi_1003
	word32 esp_5003
	word32 ecx_5005
	word32 edx_5006
	call ecx_4996 (retsize: 4;)
		uses: eax:eax_4995,ecx:ecx_5005,edx:edx_5006,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: ecx:ecx_5005,edx:edx_5006,esp:esp_5003
	esp_1012 = esp_5003 + 4<32>
l00709D23:
	word32 v78_5013 = Mem5012[ebx_2779:word32] + 0xFFFFFFFF<32>
	Mem5014[ebx_2779:word32] = v78_5013
	branch v78_5013 != 0<32> l00709C2E
l00709D2C:
	word32 edx_5017 = Mem5014[ebx_2779 + 4<32>:word32]
	word32 eax_5018 = Mem5014[edx_5017 + 0x18<32>:word32]
	Mem5021[esp_1012 - 4<i32>:word32] = ebx_2779
	word32 ecx_5028
	call eax_5018 (retsize: 4;)
		uses: eax:eax_5018,ecx:ecx_5028,edx:edx_5017,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: ecx:ecx_5028,esp:esp_5026
l00709CAD:
	esi_1003 = Mem760[ebp_1059 - 0xC<32>:word32]
	word32 eax_5033 = Mem760[ebp_1059 - 4<32>:word32]
	word32 ebx_5034 = Mem760[ebp_1059 - 8<32>:word32]
	word32 esp_5035 = esp_11188 - 4<i32>
	Mem5036[esp_5035:word32] = esi_1003
	Mem5038[esp_5035 - 4<i32>:word32] = eax_5033
	Mem5040[esp_5035 - 8<i32>:word32] = ebx_5034
	Mem5041[esp_5035 + 0x14<32>:word32] = eax_5033
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_10935
	word32 eax_5045 = fn00704300(stackArg4, dwArg04, dwArg08, out ecx_10935)
	word32 v112_5051 = Mem5041[esi_1003:word32] + 0xFFFFFFFF<32>
	Mem5052[esi_1003:word32] = v112_5051
	Mem5054[esp_5035 + 0x1C<32>:word32] = eax_5045
	ebp_1059 = ebp_1059 + 0xFFFFFFF4<32>
	esp_1012 = esp_5035 + 4<32>
	branch v112_5051 != 0<32> l00709CDD
l00709CD1:
	word32 eax_5056 = Mem5054[esi_1003 + 4<32>:word32]
	word32 ecx_5057 = Mem5054[eax_5056 + 0x18<32>:word32]
	Mem5059[esp_5035:word32] = esi_1003
	word32 esp_5060
	word32 ecx_5062
	word32 edx_5063
	call ecx_5057 (retsize: 4;)
		uses: eax:eax_5056,ecx:ecx_5062,edx:edx_5063,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: ecx:ecx_5062,edx:edx_5063,esp:esp_5060
	esp_1012 = esp_5060 + 4<32>
l00709CDD:
	word32 v113_5070 = Mem5069[ebx_5034:word32] + 0xFFFFFFFF<32>
	Mem5071[ebx_5034:word32] = v113_5070
	branch v113_5070 != 0<32> l00709CEE
l00709CE2:
	word32 edx_5074 = Mem5071[ebx_5034 + 4<32>:word32]
	word32 eax_5075 = Mem5071[edx_5074 + 0x18<32>:word32]
	Mem5078[esp_1012 - 4<i32>:word32] = ebx_5034
	word32 esp_5083
	word32 ecx_5085
	call eax_5075 (retsize: 4;)
		uses: eax:eax_5075,ecx:ecx_5085,edx:edx_5074,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: ecx:ecx_5085,esp:esp_5083
	esp_1012 = esp_5083 + 4<32>
l00709CEE:
	eax_2933 = Mem5092[esp_1012 + 0x10<32>:word32]
l0070999B:
	ebx_3920 = Mem760[ebp_1059 - 4<32>:word32]
	esi_1003 = Mem760[ebp_1059 - 8<32>:word32]
	word32 esp_5098 = esp_11188 - 4<i32>
	Mem5099[esp_5098:word32] = ebx_3920
	Mem5101[esp_5098 - 4<i32>:word32] = esi_1003
	Mem5102[esp_5098 + 0x14<32>:word32] = ebx_3920
	ebp_1059 = ebp_1059 - 4<32>
	eax_3930 = fn007028A0()
l00709944:
	branch Mem760[0x00A6C61C<p32>:word32] != 0<32> l00709966
l0070994D:
	ebx_3920 = Mem760[ebp_1059 - 4<32>:word32]
	esi_1003 = Mem760[ebp_1059 - 8<32>:word32]
	word32 esp_5115 = esp_11188 - 4<i32>
	Mem5116[esp_5115:word32] = ebx_3920
	Mem5118[esp_5115 - 4<i32>:word32] = esi_1003
	Mem5119[esp_5115 + 0x14<32>:word32] = ebx_3920
	ebp_1059 = ebp_1059 - 4<32>
	eax_3930 = fn00702750()
l0070992B:
	ebx_3935 = Mem760[ebp_1059 - 4<32>:word32]
	esi_1003 = Mem760[ebp_1059 - 8<32>:word32]
	word32 esp_5130 = esp_11188 - 4<i32>
	Mem5131[esp_5130:word32] = ebx_3935
	Mem5133[esp_5130 - 4<i32>:word32] = esi_1003
	Mem5134[esp_5130 + 0x14<32>:word32] = ebx_3935
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	ebp_1059 = ebp_1059 - 4<32>
	eax_3945 = fn00704610(stackArg4, dwArg04)
l00709A20:
	esi_1003 = Mem760[ebp_1059 - 8<32>:word32]
	ebx_3935 = Mem760[ebp_1059 - 4<32>:word32]
	Mem5146[esp_11188 + 0x10<32>:word32] = ebx_3935
	ebp_1059 = ebp_1059 - 4<32>
	branch Mem760[esi_1003 + 4<32>:word32] != 0xA1E7E8<32> l00709A66
l00709A37:
	branch Mem5146[ebx_3935 + 4<32>:word32] != 0xA1E7E8<32> l00709A66
l00709A3C:
	word32 edx_5150 = Mem5146[esi_1003 + 8<32>:word32]
	word32 ecx_5151 = Mem5146[ebx_3935 + 8<32>:word32]
	word32 eax_5153 = edx_5150 - ecx_5151
	branch (eax_5153 ^ edx_5150) >= 0<32> l00709A52
l00709A4C:
	branch (~ecx_5151 ^ eax_5153) < 0<32> l00709A66
l00709A66:
	word32 esp_5165 = esp_11188 - 4<i32>
	Mem5167[esp_5165:word32] = ebx_3935
	Mem5170[esp_5165 - 4<i32>:word32] = esi_1003
	eax_3945 = fn00702730()
	Mem5182[esp_5165 + 0x18<32>:word32] = eax_3945
	esp_5175 = esp_5165 - 4<i32>
	edi_1088 = eax_3945
l00709A52:
	word32 esp_5184 = esp_11188 - 4<i32>
	Mem5186[esp_5184:word32] = eax_5153
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_11168
	word32 edx_11169
	eax_3945 = fn007050A0(stackArg4, out ecx_11168, out edx_11169)
	Mem5201[esp_5184 + 0x18<32>:word32] = eax_3945
	edi_1088 = eax_3945
	esp_1012 = esp_5184 + 4<32>
l007099B4:
	esi_1003 = Mem760[ebp_1059 - 8<32>:word32]
	word32 eax_5203 = Mem760[esi_1003 + 4<32>:word32]
	ebx_3903 = Mem760[ebp_1059 - 4<32>:word32]
	Mem5207[esp_11188 + 0x10<32>:word32] = ebx_3903
	ebp_1059 = ebp_1059 - 4<32>
	branch eax_5203 != 0xA1E7E8<32> l007099F7
l007099CB:
	branch Mem5207[ebx_3903 + 4<32>:word32] != 0xA1E7E8<32> l007099F7
l007099F7:
	branch eax_5203 != 0xA1B450<32> l00709A0B
l007099FE:
	branch Mem5207[ebx_3903 + 4<32>:word32] == 0xA1B450<32> l00709732
l007099D4:
	word32 eax_5218 = Mem5207[esi_1003 + 8<32>:word32]
	word32 edx_5219 = Mem5207[ebx_3903 + 8<32>:word32]
	word32 ecx_5220 = edx_5219 + eax_5218
	branch (ecx_5220 ^ eax_5218) >= 0<32> l007099E9
l007099E3:
	branch (ecx_5220 ^ edx_5219) < 0<32> l00709A0B
l00709A0B:
	word32 esp_5233 = esp_11188 - 4<i32>
	Mem5235[esp_5233:word32] = ebx_3903
	Mem5239[esp_5233 - 4<i32>:word32] = esi_1003
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	eax_3913 = fn007027D0(stackArg4, dwArg04)
	Mem5256[esp_5233 + 0x18<32>:word32] = eax_3913
	edi_1088 = eax_3913
l007099E9:
	Mem5260[esp_11188 - 4<i32>:word32] = ecx_5220
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 edx_11172
	word32 ecx_11171
	eax_3913 = fn007050A0(stackArg4, out ecx_11171, out edx_11172)
l00709C3E:
	branch (SLICE(ecx_742 - 2<32>, byte, 0) & 2<8>) == 0<8> l00709C51
l00709C51:
	Mem5282[esp_11188 + 0x10<32>:word32] = 0<32>
l00709C45:
	Mem5288[esp_11188 + 0x10<32>:word32] = Mem760[ebp_1059 - 4<32>:word32]
	ebp_1059 = ebp_1059 - 4<32>
l00709C59:
	branch (cl_5290 & 1<8>) == 0<8> l00709C66
l00709C66:
	esi_1003 = 0<32>
l00709C5E:
	esi_1003 = Mem5298[ebp_1059 - 4<32>:word32]
	ebp_1059 = ebp_1059 - 4<32>
l00709C68:
	word32 ebx_5304 = Mem5298[ebp_1059 - 4<32>:word32]
	word32 eax_5307 = Mem5298[esp_11188 + 0x10<32>:word32]
	word32 esp_5310 = esp_11188 - 4<i32>
	Mem5311[esp_5310:word32] = 0<32>
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 eax_5321 = fn00707F70(eax_5307, esi_1003, ebx_5304, stackArg4)
	word32 v114_5327 = Mem5311[ebx_5304:word32] + 0xFFFFFFFF<32>
	Mem5328[ebx_5304:word32] = v114_5327
	Mem5330[esp_5310 + 0x1C<32>:word32] = eax_5321
	ebp_1059 = ebp_1059 - 4<32>
	esp_1012 = esp_5310 + 4<32>
	branch v114_5327 != 0<32> l00709C93
l00709C87:
	word32 eax_5332 = Mem5330[ebx_5304 + 4<32>:word32]
	word32 ecx_5333 = Mem5330[eax_5332 + 0x18<32>:word32]
	Mem5335[esp_5310:word32] = ebx_5304
	word32 esp_5336
	word32 ecx_5338
	word32 edx_5339
	call ecx_5333 (retsize: 4;)
		uses: eax:eax_5332,ecx:ecx_5338,edx:edx_5339,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: ecx:ecx_5338,edx:edx_5339,esp:esp_5336
	esp_1012 = esp_5336 + 4<32>
l00709C93:
	branch esi_1003 == 0<32> l00709C15
l00709C9B:
	word32 v117_5349 = Mem5348[esi_1003:word32] + 0xFFFFFFFF<32>
	Mem5350[esi_1003:word32] = v117_5349
	branch v117_5349 != 0<32> l00709C15
l00709CA4:
	edx_5353 = Mem5350[esi_1003 + 4<32>:word32]
	Mem5356[esp_1012 - 4<i32>:word32] = esi_1003
l00709B87:
	branch (cl_5290 & 2<8>) == 0<8> l00709B98
l00709B98:
	Mem5362[esp_11188 + 0x10<32>:word32] = 0<32>
l00709B8C:
	Mem5368[esp_11188 + 0x10<32>:word32] = Mem760[ebp_1059 - 4<32>:word32]
	ebp_1059 = ebp_1059 - 4<32>
l00709BA0:
	branch (cl_5290 & 1<8>) == 0<8> l00709BB1
l00709BB1:
	Mem5374[esp_11188 + 0x24<32>:word32] = 0<32>
l00709BA5:
	Mem5380[esp_11188 + 0x24<32>:word32] = Mem5376[ebp_1059 - 4<32>:word32]
	ebp_1059 = ebp_1059 - 4<32>
l00709BB9:
	word32 ebp_5387 = ebp_1059 - 4<32>
	word32 ebx_5383 = Mem5382[ebp_1059 - 4<32>:word32]
	word32 eax_5385 = Mem5382[esp_11188 + 0x10<32>:word32]
	word32 ecx_5386 = Mem5382[esp_11188 + 0x24<32>:word32]
	esi_1003 = Mem5382[ebp_5387 - 4<32>:word32]
	word32 esp_5391 = esp_11188 - 4<i32>
	Mem5392[esp_5391:word32] = esi_1003
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 eax_5400 = fn00707F70(eax_5385, ecx_5386, ebx_5383, stackArg4)
	word32 v116_5406 = Mem5392[esi_1003:word32] + 0xFFFFFFFF<32>
	Mem5407[esi_1003:word32] = v116_5406
	Mem5409[esp_5391 + 0x1C<32>:word32] = eax_5400
	ebp_1059 = ebp_5387 - 4<32>
	esp_1012 = esp_5391 + 4<32>
	branch v116_5406 != 0<32> l00709BEB
l00709BDF:
	word32 ecx_5411 = Mem5409[esi_1003 + 4<32>:word32]
	word32 edx_5412 = Mem5409[ecx_5411 + 0x18<32>:word32]
	Mem5414[esp_5391:word32] = esi_1003
	word32 esp_5415
	word32 edx_5418
	call edx_5412 (retsize: 4;)
		uses: eax:eax_5400,ecx:ecx_5411,edx:edx_5418,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: edx:edx_5418,esp:esp_5415
	esp_1012 = esp_5415 + 4<32>
l00709BEB:
	word32 v118_5425 = Mem5424[ebx_5383:word32] + 0xFFFFFFFF<32>
	Mem5426[ebx_5383:word32] = v118_5425
	branch v118_5425 != 0<32> l00709BFC
l00709BF0:
	word32 eax_5429 = Mem5426[ebx_5383 + 4<32>:word32]
	word32 ecx_5430 = Mem5426[eax_5429 + 0x18<32>:word32]
	Mem5433[esp_1012 - 4<i32>:word32] = ebx_5383
	word32 esp_5438
	word32 ecx_5440
	word32 edx_5441
	call ecx_5430 (retsize: 4;)
		uses: eax:eax_5429,ecx:ecx_5440,edx:edx_5441,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: ecx:ecx_5440,edx:edx_5441,esp:esp_5438
	esp_1012 = esp_5438 + 4<32>
l00709BFC:
	word32 eax_5448 = Mem5447[esp_1012 + 0x24<32>:word32]
	branch eax_5448 == 0<32> l00709C15
l00709C04:
	word32 v119_5452 = Mem5447[eax_5448:word32] + 0xFFFFFFFF<32>
	Mem5453[eax_5448:word32] = v119_5452
	branch v119_5452 != 0<32> l00709C15
l00709C09:
	edx_5353 = Mem5453[eax_5448 + 4<32>:word32]
	Mem5458[esp_1012 - 4<i32>:word32] = eax_5448
l00709C0D:
	word32 eax_5461 = Mem5460[edx_5353 + 0x18<32>:word32]
	word32 esp_5477
	word32 ecx_5479
	word32 edx_5480
	call eax_5461 (retsize: 4;)
		uses: eax:eax_5461,ecx:ecx_5479,edx:edx_5480,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: ecx:ecx_5479,edx:edx_5480,esp:esp_5477
	esp_1012 = esp_5477 + 4<32>
l00709C15:
	eax_2933 = Mem5486[esp_1012 + 0x10<32>:word32]
	branch eax_2933 == 0<32> l00709C2E
l00709C1D:
	word32 v115_5493 = Mem5492[eax_2933:word32] + 0xFFFFFFFF<32>
	Mem5494[eax_2933:word32] = v115_5493
	branch v115_5493 != 0<32> l00709C2E
l00709C22:
	ecx_2954 = Mem5494[eax_2933 + 4<32>:word32]
	Mem5500[esp_1012 - 4<i32>:word32] = eax_2933
l00709C26:
	word32 ecx_5532
	word32 edx_5533
	call Mem5502[ecx_2954 + 0x18<32>:word32] (retsize: 4;)
		uses: eax:eax_5518,ecx:ecx_5532,edx:edx_5533,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: ecx:ecx_5532,edx:edx_5533,esp:esp_5530
l00709C2B:
	esp_1012 = esp_5026 + 4<32>
l00709C2E:
	branch Mem5540[esp_1012 + 0x18<32>:word32] == 0<32> l00708F23
l00709C39:
l00709AFB:
	branch (SLICE(ecx_742 - 2<32>, byte, 0) & 2<8>) == 0<8> l00709B0F
l00709B0F:
	Mem5551[esp_11188 + 0x10<32>:word32] = 0<32>
l00709B03:
	Mem5557[esp_11188 + 0x10<32>:word32] = Mem760[ebp_1059 - 4<32>:word32]
	ebp_1059 = ebp_1059 - 4<32>
l00709B17:
	word32 ebx_5562
	branch (cl_5290 & 1<8>) == 0<8> l00709B24
l00709B24:
	ebx_5562 = 0<32>
l00709B1C:
	ebx_5562 = Mem5566[ebp_1059 - 4<32>:word32]
	ebp_1059 = ebp_1059 - 4<32>
l00709B26:
	esi_1003 = Mem5566[ebp_1059 - 4<32>:word32]
	word32 eax_5575 = Mem5566[esp_11188 + 0x10<32>:word32]
	word32 esp_5576 = esp_11188 - 4<i32>
	Mem5577[esp_5576:word32] = esi_1003
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 eax_5587 = fn00707E00(eax_5575, ebx_5562, stackArg4)
	word32 v122_5593 = Mem5577[esi_1003:word32] + 0xFFFFFFFF<32>
	Mem5594[esi_1003:word32] = v122_5593
	Mem5597[esp_5576 + 0x18<32>:word32] = eax_5587
	esp_1012 = esp_5576 + 4<32>
	edi_1088 = eax_5587
	branch v122_5593 != 0<32> l00709B4F
l00709B43:
	word32 ecx_5599 = Mem5597[esi_1003 + 4<32>:word32]
	word32 edx_5600 = Mem5597[ecx_5599 + 0x18<32>:word32]
	Mem5602[esp_5576:word32] = esi_1003
	word32 esp_5603
	word32 edx_5606
	call edx_5600 (retsize: 4;)
		uses: eax:eax_5587,ecx:ecx_5599,edx:edx_5606,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: edx:edx_5606,esp:esp_5603
	esp_1012 = esp_5603 + 4<32>
l00709B4F:
	branch ebx_5562 == 0<32> l00709B64
l00709B53:
	word32 v123_5616 = Mem5615[ebx_5562:word32] + 0xFFFFFFFF<32>
	Mem5617[ebx_5562:word32] = v123_5616
	branch v123_5616 != 0<32> l00709B64
l00709B58:
	word32 eax_5620 = Mem5617[ebx_5562 + 4<32>:word32]
	word32 ecx_5621 = Mem5617[eax_5620 + 0x18<32>:word32]
	Mem5624[esp_1012 - 4<i32>:word32] = ebx_5562
	word32 esp_5629
	word32 ecx_5631
	word32 edx_5632
	call ecx_5621 (retsize: 4;)
		uses: eax:eax_5620,ecx:ecx_5631,edx:edx_5632,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: ecx:ecx_5631,edx:edx_5632,esp:esp_5629
	esp_1012 = esp_5629 + 4<32>
l00709B64:
	word32 eax_5639 = Mem5638[esp_1012 + 0x10<32>:word32]
	branch eax_5639 == 0<32> l007094E3
l00709B70:
	word32 v124_5643 = Mem5638[eax_5639:word32] + 0xFFFFFFFF<32>
	Mem5644[eax_5639:word32] = v124_5643
	branch v124_5643 != 0<32> l007094E3
l00709B79:
	word32 edx_5647 = Mem5644[eax_5639 + 4<32>:word32]
	Mem5649[esp_1012 - 4<i32>:word32] = eax_5639
	word32 eax_5650 = Mem5649[edx_5647 + 0x18<32>:word32]
	word32 ecx_5658
	call eax_5650 (retsize: 4;)
		uses: eax:eax_5650,ecx:ecx_5658,edx:edx_5647,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: ecx:ecx_5658,esp:esp_5656
l00709966:
	ebx_3903 = Mem760[ebp_1059 - 4<32>:word32]
	esi_1003 = Mem760[ebp_1059 - 8<32>:word32]
	word32 esp_5669 = esp_11188 - 4<i32>
	Mem5670[esp_5669:word32] = ebx_3903
	Mem5672[esp_5669 - 4<i32>:word32] = esi_1003
	Mem5673[esp_5669 + 0x14<32>:word32] = ebx_3903
	ebp_1059 = ebp_1059 - 4<32>
	eax_3913 = fn007027A0()
l00709982:
	ebx_3935 = Mem760[ebp_1059 - 4<32>:word32]
	esi_1003 = Mem760[ebp_1059 - 8<32>:word32]
	word32 esp_5689 = esp_11188 - 4<i32>
	Mem5690[esp_5689:word32] = ebx_3935
	Mem5692[esp_5689 - 4<i32>:word32] = esi_1003
	Mem5693[esp_5689 + 0x14<32>:word32] = ebx_3935
	ebp_1059 = ebp_1059 - 4<32>
	eax_3945 = fn00702770()
l007096B0:
	ebx_3935 = Mem760[ebp_1059 - 4<32>:word32]
	esi_1003 = Mem760[ebp_1059 - 8<32>:word32]
	word32 esp_5704 = esp_11188 - 4<i32>
	Mem5705[esp_5704:word32] = ebx_3935
	Mem5707[esp_5704 - 4<i32>:word32] = esi_1003
	Mem5708[esp_5704 + 0x14<32>:word32] = ebx_3935
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	ebp_1059 = ebp_1059 - 4<32>
	eax_3945 = fn00702450(stackArg4, dwArg04)
l007097BC:
	esi_1003 = Mem760[ebp_1059 - 8<32>:word32]
	ebx_3935 = Mem760[ebp_1059 - 4<32>:word32]
	Mem5719[esp_11188 + 0x10<32>:word32] = ebx_3935
	ebp_1059 = ebp_1059 - 4<32>
	branch Mem760[esi_1003 + 4<32>:word32] != 0xA1BAF0<32> l00709804
l007097D2:
	branch Mem5719[ebx_3935 + 4<32>:word32] != 0xA1E7E8<32> l00709804
l007097DB:
	word32 esp_5723 = esp_11188 - 4<i32>
	Mem5724[esp_5723:word32] = ebx_3935
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_11180
	word32 edx_11181
	eax_3945 = fn007052C0(stackArg4, out ecx_11180, out edx_11181)
	esp_1012 = esp_5723 + 4<32>
	branch eax_3945 >= 0<32> l007097ED
l007097E8:
	eax_3945 = eax_3945 + Mem5724[esi_1003 + 8<32>:word32]
	branch eax_3945 < 0<32> l00709804
l007097ED:
	branch eax_3945 >= Mem5724[esi_1003 + 8<32>:word32] l00709804
l00709804:
	word32 esp_5745 = esp_11188 - 4<i32>
	Mem5748[esp_5745:word32] = ebx_3935
	Mem5751[esp_5745 - 4<i32>:word32] = esi_1003
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 edx_11178
	word32 ecx_11177
	eax_3945 = fn00704220(stackArg4, dwArg04, out ecx_11177, out edx_11178)
	Mem5766[esp_5745 + 0x18<32>:word32] = eax_3945
	esp_5175 = esp_5745 - 4<i32>
	edi_1088 = eax_3945
l007097F2:
	edi_1088 = Mem5724[Mem5724[esi_1003 + 0xC<32>:word32] + eax_3945 * 4<32>:word32]
	Mem5770[edi_1088:word32] = Mem5724[edi_1088:word32] + 1<32>
	Mem5772[esp_5723 + 0x18<32>:word32] = edi_1088
l00709764:
	esi_1003 = Mem760[ebp_1059 - 8<32>:word32]
	ebx_3935 = Mem760[ebp_1059 - 4<32>:word32]
	Mem5778[esp_11188 + 0x10<32>:word32] = ebx_3935
	ebp_1059 = ebp_1059 - 4<32>
	branch Mem760[esi_1003 + 4<32>:word32] != 0xA1E7E8<32> l007097AA
l0070977B:
	branch Mem5778[ebx_3935 + 4<32>:word32] != 0xA1E7E8<32> l007097AA
l00709780:
	word32 edx_5782 = Mem5778[esi_1003 + 8<32>:word32]
	word32 ecx_5783 = Mem5778[ebx_3935 + 8<32>:word32]
	word32 eax_5785 = edx_5782 - ecx_5783
	branch (eax_5785 ^ edx_5782) >= 0<32> l00709796
l00709790:
	branch (~ecx_5783 ^ eax_5785) < 0<32> l007097AA
l007097AA:
	word32 esp_5797 = esp_11188 - 4<i32>
	Mem5799[esp_5797:word32] = ebx_3935
	Mem5802[esp_5797 - 4<i32>:word32] = esi_1003
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	eax_3945 = fn007022B0(stackArg4, dwArg04)
	Mem5814[esp_5797 + 0x18<32>:word32] = eax_3945
	esp_5175 = esp_5797 - 4<i32>
	edi_1088 = eax_3945
l00709796:
	word32 esp_5816 = esp_11188 - 4<i32>
	Mem5818[esp_5816:word32] = eax_5785
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_11185
	word32 edx_11186
	eax_3945 = fn007050A0(stackArg4, out ecx_11185, out edx_11186)
	Mem5833[esp_5816 + 0x18<32>:word32] = eax_3945
	edi_1088 = eax_3945
	esp_1012 = esp_5816 + 4<32>
l007096DF:
	esi_1003 = Mem760[ebp_1059 - 8<32>:word32]
	word32 eax_5835 = Mem760[esi_1003 + 4<32>:word32]
	ebx_3903 = Mem760[ebp_1059 - 4<32>:word32]
	Mem5839[esp_11188 + 0x10<32>:word32] = ebx_3903
	ebp_1059 = ebp_1059 - 4<32>
	branch eax_5835 != 0xA1E7E8<32> l00709722
l007096F6:
	branch Mem5839[ebx_3903 + 4<32>:word32] != 0xA1E7E8<32> l00709722
l00709722:
	branch eax_5835 != 0xA1B450<32> l0070974F
l00709729:
	branch Mem5839[ebx_3903 + 4<32>:word32] != 0xA1B450<32> l0070974F
l00709732:
	word32 ecx_5853 = Mem5852[esp_11188 + 0x20<32>:word32]
	word32 edx_5854 = Mem5852[esp_11188 + 0x70<32>:word32]
	word32 esp_5855 = esp_11188 - 4<i32>
	Mem5857[esp_5855:word32] = ebx_3903
	Mem5861[esp_5855 - 4<i32>:word32] = esi_1003
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 eax_5870 = fn00708410(ecx_5853, edx_5854, stackArg4, dwArg04)
	Mem5878[esp_5855 + 0x18<32>:word32] = eax_5870
	edi_1088 = eax_5870
	esp_1012 = esp_5855 + 4<32>
l007096FF:
	word32 eax_5879 = Mem5839[esi_1003 + 8<32>:word32]
	word32 edx_5880 = Mem5839[ebx_3903 + 8<32>:word32]
	word32 ecx_5881 = edx_5880 + eax_5879
	branch (ecx_5881 ^ eax_5879) >= 0<32> l00709714
l0070970E:
	branch (ecx_5881 ^ edx_5880) < 0<32> l0070974F
l0070974F:
	word32 esp_5893 = esp_11188 - 4<i32>
	Mem5895[esp_5893:word32] = ebx_3903
	Mem5898[esp_5893 - 4<i32>:word32] = esi_1003
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	eax_3913 = fn007023D0(stackArg4, dwArg04)
	Mem5912[esp_5893 + 0x18<32>:word32] = eax_3913
	edi_1088 = eax_3913
l00709714:
	Mem5916[esp_11188 - 4<i32>:word32] = ecx_5881
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 edx_10991
	word32 ecx_10990
	eax_3913 = fn007050A0(stackArg4, out ecx_10990, out edx_10991)
l007096C9:
	ebx_3920 = Mem760[ebp_1059 - 4<32>:word32]
	esi_1003 = Mem760[ebp_1059 - 8<32>:word32]
	word32 esp_5935 = esp_11188 - 4<i32>
	Mem5936[esp_5935:word32] = ebx_3920
	Mem5938[esp_5935 - 4<i32>:word32] = esi_1003
	Mem5939[esp_5935 + 0x14<32>:word32] = ebx_3920
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	ebp_1059 = ebp_1059 - 4<32>
	eax_3930 = fn00702510(stackArg4, dwArg04)
l00709646:
	branch Mem760[0x00A6C61C<p32>:word32] != 0<32> l00709694
l00709694:
	ebx_3903 = Mem760[ebp_1059 - 4<32>:word32]
	esi_1003 = Mem760[ebp_1059 - 8<32>:word32]
	word32 esp_5955 = esp_11188 - 4<i32>
	Mem5956[esp_5955:word32] = ebx_3903
	Mem5958[esp_5955 - 4<i32>:word32] = esi_1003
	Mem5959[esp_5955 + 0x14<32>:word32] = ebx_3903
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	ebp_1059 = ebp_1059 - 4<32>
	eax_3913 = fn007024B0(stackArg4, dwArg04)
l0070964F:
	ebx_3920 = Mem760[ebp_1059 - 4<32>:word32]
	esi_1003 = Mem760[ebp_1059 - 8<32>:word32]
	word32 esp_5975 = esp_11188 - 4<i32>
	Mem5976[esp_5975:word32] = ebx_3920
	Mem5978[esp_5975 - 4<i32>:word32] = esi_1003
	Mem5979[esp_5975 + 0x14<32>:word32] = ebx_3920
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	ebp_1059 = ebp_1059 - 4<32>
	eax_3930 = fn00702310(stackArg4, dwArg04)
l00709663:
	word32 esp_5986 = esp_11188 - 8<i32>
	word32 v28_5990 = Mem5989[esi_1003:word32] + 0xFFFFFFFF<32>
	Mem5991[esi_1003:word32] = v28_5990
	Mem5995[esp_5986 + 0x1C<32>:word32] = eax_3930
	esp_1012 = esp_5986 + 8<32>
	edi_1088 = eax_3930
	branch v28_5990 != 0<32> l0070967D
l00709671:
	word32 eax_5997 = Mem5995[esi_1003 + 4<32>:word32]
	word32 ecx_5998 = Mem5995[eax_5997 + 0x18<32>:word32]
	Mem6000[esp_5986 + 4<32>:word32] = esi_1003
	word32 esp_6004
	word32 ecx_6006
	word32 edx_6007
	call ecx_5998 (retsize: 4;)
		uses: eax:eax_5997,ecx:ecx_6006,edx:edx_6007,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: ecx:ecx_6006,edx:edx_6007,esp:esp_6004
	esp_1012 = esp_6004 + 4<32>
l0070967D:
	word32 v29_6014 = Mem6013[ebx_3920:word32] + 0xFFFFFFFF<32>
	Mem6015[ebx_3920:word32] = v29_6014
	branch v29_6014 != 0<32> l007094E3
l00709686:
	word32 edx_6018 = Mem6015[ebx_3920 + 4<32>:word32]
	word32 eax_6019 = Mem6015[edx_6018 + 0x18<32>:word32]
	Mem6022[esp_1012 - 4<i32>:word32] = ebx_3920
	word32 ecx_6029
	call eax_6019 (retsize: 4;)
		uses: eax:eax_6019,ecx:ecx_6029,edx:edx_6018,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: ecx:ecx_6029,esp:esp_6027
l00709601:
	ebx_3935 = Mem760[ebp_1059 - 4<32>:word32]
	esi_1003 = Mem760[ebp_1059 - 8<32>:word32]
	word32 esp_6037 = esp_11188 - 4<i32>
	Mem6038[esp_6037:word32] = ebx_3935
	Mem6040[esp_6037 - 4<i32>:word32] = esi_1003
	Mem6041[esp_6037 + 0x14<32>:word32] = ebx_3935
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	ebp_1059 = ebp_1059 - 4<32>
	eax_3945 = fn00704560(stackArg4, dwArg04)
l00709615:
	esp_5175 = esp_11188 - 8<i32>
	Mem6051[esp_5175 + 0x1C<32>:word32] = eax_3945
	edi_1088 = eax_3945
l0070961B:
	esp_1012 = esp_5175 + 8<32>
l0070961E:
	word32 v98_6060 = Mem6058[esi_1003:word32] + 0xFFFFFFFF<32>
	Mem6061[esi_1003:word32] = v98_6060
	branch v98_6060 != 0<32> l0070962F
l00709623:
	word32 edx_6064 = Mem6061[esi_1003 + 4<32>:word32]
	word32 eax_6065 = Mem6061[edx_6064 + 0x18<32>:word32]
	Mem6068[esp_1012 - 4<i32>:word32] = esi_1003
	word32 esp_6080
	word32 ecx_6082
	call eax_6065 (retsize: 4;)
		uses: eax:eax_6065,ecx:ecx_6082,edx:edx_6064,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: eax:eax_6081,ecx:ecx_6082,esp:esp_6080
	esp_1012 = esp_6080 + 4<32>
l0070962F:
	word32 v101_6090 = Mem6089[ebx_3935:word32] + 0xFFFFFFFF<32>
	Mem6091[ebx_3935:word32] = v101_6090
	branch v101_6090 != 0<32> l007094E3
l00709638:
	word32 ecx_6094 = Mem6091[ebx_3935 + 4<32>:word32]
	word32 edx_6095 = Mem6091[ecx_6094 + 0x18<32>:word32]
	Mem6098[esp_1012 - 4<i32>:word32] = ebx_3935
	word32 edx_6109
	call edx_6095 (retsize: 4;)
		uses: eax:eax_6101,ecx:ecx_6094,edx:edx_6109,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: edx:edx_6109,esp:esp_6106
l007095BC:
	ebx_3903 = Mem760[ebp_1059 - 4<32>:word32]
	esi_1003 = Mem760[ebp_1059 - 8<32>:word32]
	word32 esp_6116 = esp_11188 - 4<i32>
	Mem6117[esp_6116:word32] = 0xA163B8<32>
	Mem6119[esp_6116 - 4<i32>:word32] = ebx_3903
	Mem6121[esp_6116 - 8<i32>:word32] = esi_1003
	Mem6122[esp_6116 + 0x14<32>:word32] = ebx_3903
	ebp_1059 = ebp_1059 - 4<32>
	eax_3913 = fn00702570()
l007095D5:
l007095D8:
	Mem6136[esp_11188 + 0x14<32>:word32] = eax_3913
	edi_1088 = eax_3913
l007095DE:
	word32 v27_6141 = Mem6140[esi_1003:word32] + 0xFFFFFFFF<32>
	Mem6142[esi_1003:word32] = v27_6141
	esp_1012 = esp_11188
	branch v27_6141 != 0<32> l007095EF
l007095E3:
	word32 ecx_6145 = Mem6142[esi_1003 + 4<32>:word32]
	word32 edx_6146 = Mem6142[ecx_6145 + 0x18<32>:word32]
	Mem6149[esp_11188 - 4<i32>:word32] = esi_1003
	word32 esp_6161
	word32 edx_6164
	call edx_6146 (retsize: 4;)
		uses: eax:eax_6154,ecx:ecx_6145,edx:edx_6164,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: edx:edx_6164,esp:esp_6161
	esp_1012 = esp_6161 + 4<32>
l007095EF:
	word32 v33_6171 = Mem6170[ebx_3903:word32] + 0xFFFFFFFF<32>
	Mem6172[ebx_3903:word32] = v33_6171
	branch v33_6171 != 0<32> l007094E3
l007095F8:
	eax_6175 = Mem6172[ebx_3903 + 4<32>:word32]
	Mem6178[esp_1012 - 4<i32>:word32] = ebx_3903
l00709899:
	word32 ebp_6180 = ebp_1059 - 4<32>
	word32 ebx_6179 = Mem760[ebp_1059 - 4<32>:word32]
	esi_1003 = Mem760[ebp_6180 - 4<32>:word32]
	word32 esp_6184 = esp_11188 - 4<i32>
	Mem6185[esp_6184:word32] = ebx_6179
	Mem6187[esp_6184 - 4<i32>:word32] = esi_1003
	Mem6188[esp_6184 + 0x14<32>:word32] = ebx_6179
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_10927
	word32 edx_10928
	word32 eax_6190 = fn006F2A10(stackArg4, dwArg04, out ecx_10927, out edx_10928)
	word32 v125_6196 = Mem6188[esi_1003:word32] + 0xFFFFFFFF<32>
	Mem6197[esi_1003:word32] = v125_6196
	Mem6199[esp_6184 + 0x1C<32>:word32] = eax_6190
	ebp_1059 = ebp_6180 - 4<32>
	esp_1012 = esp_6184 + 4<32>
	branch v125_6196 != 0<32> l007098C8
l007098BC:
	word32 edx_6201 = Mem6199[esi_1003 + 4<32>:word32]
	word32 eax_6202 = Mem6199[edx_6201 + 0x18<32>:word32]
	Mem6204[esp_6184:word32] = esi_1003
	word32 esp_6205
	word32 ecx_6207
	call eax_6202 (retsize: 4;)
		uses: eax:eax_6202,ecx:ecx_6207,edx:edx_6201,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: eax:eax_6206,ecx:ecx_6207,esp:esp_6205
	esp_1012 = esp_6205 + 4<32>
l007098C8:
	word32 v127_6215 = Mem6214[ebx_6179:word32] + 0xFFFFFFFF<32>
	Mem6216[ebx_6179:word32] = v127_6215
	branch v127_6215 != 0<32> l007098D9
l007098CD:
	word32 ecx_6219 = Mem6216[ebx_6179 + 4<32>:word32]
	word32 edx_6220 = Mem6216[ecx_6219 + 0x18<32>:word32]
	Mem6223[esp_1012 - 4<i32>:word32] = ebx_6179
	word32 esp_6229
	word32 edx_6232
	call edx_6220 (retsize: 4;)
		uses: eax:eax_6226,ecx:ecx_6219,edx:edx_6232,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: edx:edx_6232,esp:esp_6229
	esp_1012 = esp_6229 + 4<32>
l007098D9:
	branch Mem6238[esp_1012 + 0x18<32>:word32] != 0<32> l00708EE4
l007098E4:
	word32 eax_6241 = Mem6238[esp_1012 + 0x20<32>:word32]
	branch Mem6238[eax_6241:byte] != 0x71<8> l00708F23
l007098F1:
	ebx_2263 = (CONVERT(Mem6238[eax_6241 + 2<32>:byte], byte, word32) << 8<32>) + CONVERT(Mem6238[eax_6241 + 1<32>:byte], byte, word32)
l007098FE:
	Mem6255[esp_1012 + 0x20<32>:word32] = ebx_2263 + Mem6250[esp_1012 + 0x38<32>:word32]
l00709593:
	esi_1003 = Mem760[ebp_1059 - 4<32>:word32]
	word32 esp_6257 = esp_11188 - 4<i32>
	Mem6258[esp_6257:word32] = esi_1003
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 eax_6260 = fn007029D0(stackArg4)
	word32 v126_6266 = Mem6258[esi_1003:word32] + 0xFFFFFFFF<32>
	Mem6267[esi_1003:word32] = v126_6266
	Mem6270[esp_6257 + 0x18<32>:word32] = eax_6260
	esp_1012 = esp_6257 + 4<32>
	edi_1088 = eax_6260
	branch v126_6266 != 0<32> l007094E3
l007095AE:
	word32 edx_6272 = Mem6270[esi_1003 + 4<32>:word32]
	word32 eax_6273 = Mem6270[edx_6272 + 0x18<32>:word32]
	Mem6275[esp_6257:word32] = esi_1003
	word32 ecx_6278
	call eax_6273 (retsize: 4;)
		uses: eax:eax_6273,ecx:ecx_6278,edx:edx_6272,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: ecx:ecx_6278,esp:esp_6276
l00709585:
	esi_1003 = Mem760[ebp_1059 - 4<32>:word32]
	word32 esp_6283 = esp_11188 - 4<i32>
	Mem6284[esp_6283:word32] = esi_1003
	word32 edi_10924
	word32 edx_10923
	eax_6285 = fn006DDDB0(eax_4033, edx_2591, ebx_2263, esi_1003, edi_1088, es, ds, Mem6284[esp_6283:word32], out edx_10923, out edi_10924)
	esp_6295 = esp_6283 + 4<32>
l00709526:
	esi_1003 = Mem760[ebp_1059 - 4<32>:word32]
	word32 esp_6297 = esp_11188 - 4<i32>
	Mem6298[esp_6297:word32] = esi_1003
	word32 edx_10922
	word32 ecx_10921
	word32 eax_6299 = fn006DEA90(Mem6298[esp_6297:word32], out ecx_10921, out edx_10922)
	word32 v128_6307 = Mem6298[esi_1003:word32] + 0xFFFFFFFF<32>
	Mem6308[esi_1003:word32] = v128_6307
	Mem6311[esp_6297 + 0x1C<32>:word32] = eax_6299
	esp_1012 = esp_6297 + 4<32>
	branch v128_6307 != 0<32> l00709549
l0070953D:
	word32 ecx_6313 = Mem6311[esi_1003 + 4<32>:word32]
	word32 edx_6314 = Mem6311[ecx_6313 + 0x18<32>:word32]
	Mem6316[esp_6297:word32] = esi_1003
	word32 esp_6317
	word32 edx_6320
	call edx_6314 (retsize: 4;)
		uses: eax:eax_6299,ecx:ecx_6313,edx:edx_6320,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: edx:edx_6320,esp:esp_6317
	esp_1012 = esp_6317 + 4<32>
l00709549:
	branch eax_6299 != 0<32> l00709560
l00709560:
	branch eax_6299 <= 0<32> l0070957D
l0070957D:
	ebp_1059 = ebp_1059 + 0xFFFFFFFC<32>
l00709562:
	Mem6334[0x00A191D8<p32>:word32] = Mem6332[0x00A191D8<p32>:word32] + 1<32>
	Mem6336[ebp_1059 - 4<32>:word32] = 0xA191D8<32>
	Mem6338[esp_1012 + 0x18<32>:word32] = 0<32>
l0070954D:
	Mem6340[0x00A191E4<p32>:word32] = Mem6332[0x00A191E4<p32>:word32] + 1<32>
	Mem6342[ebp_1059 - 4<32>:word32] = 0xA191E4<32>
l007094F3:
	esi_1003 = Mem760[ebp_1059 - 4<32>:word32]
	word32 esp_6344 = esp_11188 - 4<i32>
	Mem6345[esp_6344:word32] = esi_1003
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 eax_6347 = fn00702910(stackArg4)
	word32 v129_6353 = Mem6345[esi_1003:word32] + 0xFFFFFFFF<32>
	Mem6354[esi_1003:word32] = v129_6353
	Mem6357[esp_6344 + 0x18<32>:word32] = eax_6347
	esp_1012 = esp_6344 + 4<32>
	edi_1088 = eax_6347
	branch v129_6353 != 0<32> l00709516
l0070950A:
	word32 edx_6359 = Mem6357[esi_1003 + 4<32>:word32]
	word32 eax_6360 = Mem6357[edx_6359 + 0x18<32>:word32]
	Mem6362[esp_6344:word32] = esi_1003
	word32 esp_6363
	word32 ecx_6365
	call eax_6360 (retsize: 4;)
		uses: eax:eax_6360,ecx:ecx_6365,edx:edx_6359,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: ecx:ecx_6365,esp:esp_6363
	esp_1012 = esp_6363 + 4<32>
l00709516:
	Mem6375[ebp_1059 - 4<32>:word32] = eax_6347
	branch eax_6347 != 0<32> l00708F23
l00709521:
l007094C0:
	esi_1003 = Mem760[ebp_1059 - 4<32>:word32]
	word32 esp_6378 = esp_11188 - 4<i32>
	Mem6379[esp_6378:word32] = esi_1003
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	eax_6285 = fn00702970(stackArg4)
	esp_6295 = esp_6378
l007094C9:
	word32 v130_6390 = Mem6389[esi_1003:word32] + 0xFFFFFFFF<32>
	Mem6391[esi_1003:word32] = v130_6390
	esp_1012 = esp_6295 + 4<32>
	Mem6395[esp_1012 + 0x14<32>:word32] = eax_6285
	edi_1088 = eax_6285
	branch v130_6390 != 0<32> l007094E3
l007094D7:
	eax_6175 = Mem6395[esi_1003 + 4<32>:word32]
	Mem6399[esp_1012 - 4<i32>:word32] = esi_1003
l007094DB:
	word32 ecx_6418
	word32 edx_6419
	call Mem6401[eax_6175 + 0x18<32>:word32] (retsize: 4;)
		uses: eax:eax_6400,ecx:ecx_6418,edx:edx_6419,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: ecx:ecx_6418,edx:edx_6419,esp:esp_6416
l007094E0:
	esp_1012 = esp_1335 + 4<32>
l007094E3:
	Mem6429[ebp_1059 - 4<32>:word32] = edi_1088
l007094E6:
	branch edi_1088 != 0<32> l00708F23
l007094EE:
l0070AFC3:
	word32 eax_6436 = Mem760[esp_11188 + 0x70<32>:word32]
	word32 edx_6437 = Mem760[eax_6436 + 0x10<32>:word32]
	word32 esp_6438 = esp_11188 - 4<i32>
	Mem6440[esp_6438:word32] = ecx_742
	Mem6443[esp_6438 - 4<i32>:word32] = Mem6440[eax_6436 + 0x3C<32>:word32]
	Mem6445[esp_6438 - 8<i32>:word32] = edx_6437
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 eax_6452 = fn00735550(stackArg4, dwArg04)
	Mem6460[esp_6438 - 4<32>:word32] = eax_6452
	Mem6462[esp_6438 - 8<i32>:word32] = 0x8D7B70<32>
	word32 esp_6463
	word32 eax_6464
	call _iob_func (retsize: 4;)
		uses: eax:eax_6452,ecx:ecx_6481,edx:edx_6482,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: eax:eax_6464,esp:esp_6463
	Mem6472[esp_6463 - 4<i32>:word32] = eax_6464 + 0x40<32>
	fprintf(Mem6472[esp_6463 - 4<i32>:(ptr32 FILE)], Mem6472[esp_6463:(ptr32 charconst )], 0<32>)
	word32 eax_6474 = Mem6472[0x00A18720<p32>:word32]
	Mem6476[esp_6463 - 8<i32>:word32] = 0x8D7B60<32>
	Mem6478[esp_6463 - 12<i32>:word32] = eax_6474
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_6481
	word32 edx_6482
	fn006E0F80(stackArg4, dwArg04, out ecx_6481, out edx_6482)
	Mem6485[esp_6463 + 0x28<32>:word32] = 2<32>
	ebx_1517 = Mem6485[esp_6463 + 0x28<32>:word32]
	esp_1012 = esp_6463 + 0xC<32>
l00709181:
	word32 eax_6489 = Mem760[ebp_1059 - 0xC<32>:word32]
	edi_1088 = Mem760[ebp_1059 - 0x10<32>:word32]
	word32 ecx_6491 = Mem760[ebp_1059 - 4<32>:word32]
	word32 edx_6492 = Mem760[ebp_1059 - 8<32>:word32]
	Mem6493[esp_11188 + 0x10<32>:word32] = eax_6489
	Mem6494[esp_11188 + 0x14<32>:word32] = edi_1088
	Mem6495[ebp_1059 - 4<32>:word32] = edx_6492
	Mem6496[ebp_1059 - 8<32>:word32] = eax_6489
	Mem6497[ebp_1059 - 0xC<32>:word32] = edi_1088
	Mem6498[ebp_1059 - 0x10<32>:word32] = ecx_6491
l007091A6:
	word32 eax_6499 = Mem760[ebp_1059 - 4<32>:word32]
	Mem6501[eax_6499:word32] = Mem760[eax_6499:word32] + 1<32>
	Mem6502[ebp_1059:word32] = eax_6499
	ebp_1059 = ebp_1059 + 4<32>
l00709162:
	word32 eax_6505 = Mem760[ebp_1059 - 8<32>:word32]
	edi_1088 = Mem760[ebp_1059 - 0xC<32>:word32]
	word32 ecx_6507 = Mem760[ebp_1059 - 4<32>:word32]
	Mem6508[esp_11188 + 0x10<32>:word32] = eax_6505
	Mem6509[esp_11188 + 0x14<32>:word32] = edi_1088
	Mem6510[ebp_1059 - 4<32>:word32] = eax_6505
	Mem6511[ebp_1059 - 8<32>:word32] = edi_1088
	Mem6512[ebp_1059 - 0xC<32>:word32] = ecx_6507
l0070914D:
	word32 eax_6513 = Mem760[ebp_1059 - 8<32>:word32]
	word32 ecx_6514 = Mem760[ebp_1059 - 4<32>:word32]
	Mem6515[esp_11188 + 0x10<32>:word32] = eax_6513
	Mem6516[ebp_1059 - 4<32>:word32] = eax_6513
	Mem6517[ebp_1059 - 8<32>:word32] = ecx_6514
l00709397:
	eax_4865 = Mem6520[ebp_1059 - 4<32>:word32]
	ebp_1059 = ebp_1059 - 4<32>
l0070939D:
	word32 v23_6526 = Mem6525[eax_4865:word32] + 0xFFFFFFFF<32>
	Mem6527[eax_4865:word32] = v23_6526
	branch v23_6526 != 0<32> l00709030
l007093A6:
	word32 ecx_6530 = Mem6527[eax_4865 + 4<32>:word32]
	word32 edx_6531 = Mem6527[ecx_6530 + 0x18<32>:word32]
	Mem6535[esp_1012 - 4<i32>:word32] = eax_4865
	word32 esp_6556
	word32 edx_6559
	call edx_6531 (retsize: 4;)
		uses: eax:eax_6524,ecx:ecx_6530,edx:edx_6559,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: edx:edx_6559,esp:esp_6556
	esp_1012 = esp_6556 + 4<32>
l00708FEF:
	word32 esp_6564 = esp_1012 - 4<i32>
	Mem6565[esp_6564:word32] = esi_1003
	Mem6566[esp_6564 + 0x18<32>:word32] = esi_1003
	Mem6567[edi_592 + 0x4C<32>:word32] = 0<32>
	word32 edx_10988
	fn006E0F10(Mem6567[esp_6564:word32], out edx_10988)
	word32 v22_6576 = Mem6567[esi_1003:word32] + 0xFFFFFFFF<32>
	Mem6577[esi_1003:word32] = v22_6576
	esp_1012 = esp_6564 + 4<32>
	branch v22_6576 != 0<32> l00709014
l00709008:
	word32 edx_6580 = Mem6577[esi_1003 + 4<32>:word32]
	word32 eax_6581 = Mem6577[edx_6580 + 0x18<32>:word32]
	Mem6583[esp_6564:word32] = esi_1003
	word32 esp_6658
	word32 ecx_6660
	call eax_6581 (retsize: 4;)
		uses: eax:eax_6581,ecx:ecx_6660,edx:edx_6580,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: ecx:ecx_6660,esp:esp_6658
	esp_1012 = esp_6658 + 4<32>
l00709014:
	Mem6667[esp_1012 + 0x1C<32>:word32] = 2<32>
	ebx_1517 = Mem6667[esp_1012 + 0x1C<32>:word32]
l00708F68:
	Mem6669[esp_1012 + 0x1C<32>:word32] = 2<32>
	ebx_1517 = Mem6669[esp_1012 + 0x1C<32>:word32]
l00708DF1:
	edxOut = edx
	return <invalid>
fn00708DC0_exit:


word32 fn0070B600(word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg14, word32 dwArg1C, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00707850
//      fn0070BC90
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31] Stack +0014:[0..31] Stack +001C:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn0070B600_entry:
l0070B600:
	word32 ecx_9 = Mem0[0x00A6D67C<p32>:word32]
	branch dwArg08 != 0<32> l0070B636
l0070B636:
	word32 edx_29
	word32 eax_27 = fn0073AFB0(ecx_9, dwArg04, dwArg08, out edx_29)
	branch eax_27 != 0<32> l0070B658
l0070B658:
	word32 edx_1069
	word32 esp_1072 = fp - 0x28<32>
	word32 esi_139 = eax_27 + 0x138<32>
	branch Mem35[dwArg04 + 8<32>:word32] > 0<32> l0070B6B8
l0070B675:
	branch (Mem50[dwArg04 + 0x14<32>:byte] & 0xC<8>) != 0<8> l0070B6B8
l0070B6B8:
	word32 ebx_511 = dwArg14
	word32 ebp_123 = dwArg14
	branch (Mem50[dwArg04 + 0x14<32>:byte] & 8<8>) == 0<8> l0070B70A
l0070B6D0:
	word32 ecx_1824
	word32 edx_1825
	word32 eax_68 = fn006FDCC0(out ecx_1824, out edx_1825)
	esp_1072 = fp - 0x28<32>
	edx_1069 = eax_68
	branch eax_68 == 0<32> l0070BC5E
l0070B6E3:
	word32 ecx_80 = Mem76[dwArg04 + 8<32>:word32]
	branch (Mem76[dwArg04 + 0x14<32>:byte] & 4<8>) == 0<8> l0070B6EF
l0070B6EC:
	ecx_80 = ecx_80 + 1<32>
l0070B6EF:
	word32 eax_87 = Mem76[eax_27 + 0x138<32> + ecx_80 * 4<32>:word32]
	Mem91[eax_27 + 0x138<32> + ecx_80 * 4<32>:word32] = eax_68
	branch eax_87 == 0<32> l0070B70A
l0070B6F9:
	word32 v18_93 = Mem91[eax_87:word32] + 0xFFFFFFFF<32>
	Mem94[eax_87:word32] = v18_93
	branch v18_93 != 0<32> l0070B70A
l0070B6FE:
	word32 edx_97 = Mem94[eax_87 + 4<32>:word32]
	word32 esp_106
	call Mem100[edx_97 + 0x18<32>:word32] (retsize: 4;)
		uses: edx:edx_97,Stack +0004:eax_87,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C,Stack +0034:dwArg04,Stack +0038:dwArg08,Stack +003C:dwArg0C,Stack +0044:dwArg14
		defs: esp:esp_106
	esp_1072 = esp_106 + 4<32>
l0070B70A:
	word32 eax_116 = Mem115[dwArg04 + 8<32>:word32]
	branch dwArg14 <= eax_116 l0070B779
l0070B711:
	branch (Mem115[dwArg04 + 0x14<32>:byte] & 4<8>) != 0<8> l0070B773
l0070B773:
	Mem125[esp_1072 + 0x10<32>:word32] = eax_116
	ebp_123 = eax_116
l0070B779:
	branch ebp_123 <= 0<32> l0070B7AE
l0070B77D:
	word32 ebp_133 = Mem131[esp_1072 + 0x10<32>:word32]
	word32 edi_136 = Mem131[esp_1072 + 0x38<32>:word32] - (eax_27 + 0x138<32>)
l0070B787:
	word32 eax_141 = Mem140[edi_136 + esi_139:word32]
	Mem143[eax_141:word32] = Mem140[eax_141:word32] + 1<32>
	word32 ecx_144 = Mem143[esi_139:word32]
	Mem147[esi_139:word32] = eax_141
	branch ecx_144 == 0<32> l0070B7A6
l0070B795:
	word32 v28_149 = Mem147[ecx_144:word32] + 0xFFFFFFFF<32>
	Mem150[ecx_144:word32] = v28_149
	branch v28_149 != 0<32> l0070B7A6
l0070B79A:
	word32 eax_153 = Mem150[ecx_144 + 4<32>:word32]
	Mem156[esp_1072 - 4<i32>:word32] = ecx_144
	word32 esp_161
	call Mem156[eax_153 + 0x18<32>:word32] (retsize: 4;)
		uses: eax:eax_153,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C,Stack +0018:dwArg14
		defs: esp:esp_161
	esp_1072 = esp_161 + 4<32>
l0070B7A6:
	esi_139 = esi_139 + 4<32>
	ebp_133 = ebp_133 - 1<32>
	branch ebp_133 != 0<32> l0070B787
l0070B7AE:
	word32 ebp_184
	edx_1069 = Mem177[esp_1072 + 0x2C<32>:word32]
	word32 edi_182 = Mem177[esp_1072 + 0x10<32>:word32]
	branch (Mem177[edx_1069 + 0x14<32>:byte] & 4<8>) == 0<8> l0070B824
l0070B824:
	ebp_184 = Mem177[esp_1072 + 0x30<32>:word32]
l0070B7BC:
	word32 esp_191 = esp_1072 - 4<i32>
	Mem192[esp_191:word32] = dwArg14 - edi_182
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_1839
	word32 eax_200 = fn006DFD20(stackArg4, out ecx_1839, out edx_1069)
	esp_1072 = esp_191 + 4<32>
	branch eax_200 == 0<32> l0070BC5E
l0070B7D3:
	edx_1069 = Mem192[Mem192[esp_191 + 0x30<32>:word32] + 8<32>:word32]
	ebp_184 = Mem192[esp_191 + 0x34<32>:word32]
	word32 ecx_214 = Mem192[ebp_184 + 0x138<32> + edx_1069 * 4<32>:word32]
	Mem218[ebp_184 + 0x138<32> + edx_1069 * 4<32>:word32] = eax_200
	branch ecx_214 == 0<32> l0070B801
l0070B7F0:
	word32 v29_220 = Mem218[ecx_214:word32] + 0xFFFFFFFF<32>
	Mem221[ecx_214:word32] = v29_220
	branch v29_220 != 0<32> l0070B801
l0070B7F5:
	word32 eax_224 = Mem221[ecx_214 + 4<32>:word32]
	Mem226[esp_191:word32] = ecx_214
	word32 esp_228
	call Mem226[eax_224 + 0x18<32>:word32] (retsize: 4;)
		uses: eax:eax_224,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C,Stack +0018:dwArg14
		defs: edx:edx_231,esp:esp_228
	esp_1072 = esp_228 + 4<32>
l0070B801:
	word32 ecx_239 = edi_182
	branch edi_182 >= dwArg14 l0070B828
l0070B807:
	edx_1069 = eax_200 + 0xC<32>
	word32 esi_245 = Mem244[esp_1072 + 0x38<32>:word32]
l0070B810:
	word32 eax_250 = Mem249[esi_245 + ecx_239 * 4<32>:word32]
	Mem252[eax_250:word32] = Mem249[eax_250:word32] + 1<32>
	Mem254[edx_1069:word32] = eax_250
	ecx_239 = ecx_239 + 1<32>
	edx_1069 = edx_1069 + 4<32>
	branch ecx_239 < dwArg14 l0070B810
l0070B822:
l0070B828:
	Mem264[esp_1072 + 0x14<32>:word32] = 0<32>
	word32 edi_513 = edi_182
	branch Mem262[esp_1072 + 0x44<32>:word32] <= 0<32> l0070B933
l0070B83B:
	word32 edi_266 = Mem264[esp_1072 + 0x2C<32>:word32]
	word32 eax_267 = Mem264[esp_1072 + 0x14<32>:word32]
l0070B843:
	word32 ecx_270 = Mem269[esp_1072 + 0x40<32>:word32]
	word32 ebp_272 = Mem269[ecx_270 + eax_267 * 8<32>:word32]
	word32 ebx_275 = Mem269[ecx_270 + 4<32> + eax_267 * 8<32>:word32]
	branch ebp_272 == 0<32> l0070B9DA
l0070B856:
	word32 eax_277 = Mem269[ebp_272 + 4<32>:word32]
	branch eax_277 == 0xA1B450<32> l0070B876
l0070B860:
	word32 esp_280 = esp_1072 - 4<i32>
	Mem281[esp_280:word32] = 0xA1B450<32>
	Mem283[esp_280 - 4<i32>:word32] = eax_277
	word32 ecx_1846
	branch fn006D5670(Mem283[esp_280 - 4<i32>:word32], Mem283[esp_280:word32], out ecx_1846, out edx_1069) == 0<32> l0070B9DA
l0070B9DA:
	word32 esp_300 = esp_1072 - 4<i32>
	Mem301[esp_300:word32] = Mem297[edi_266 + 0x34<32>:word32]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_1841
	word32 edx_1842
	word32 esi_1843
	Mem315[esp_300 - 4<i32>:word32] = fn006ECC50(stackArg4, out ecx_1841, out edx_1842, out esi_1843)
	word32 eax_316 = Mem315[0x00A16B7C<p32>:word32]
	Mem318[esp_300 - 8<i32>:word32] = 0x8D7DC0<32>
	Mem320[esp_300 - 12<i32>:word32] = eax_316
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_1845
	fn006E15D0(stackArg4, dwArg04, out ecx_1845, out edx_1069)
	esp_1072 = esp_300 + 4<32>
l0070B876:
	word32 esi_329 = 0<32>
	branch Mem331[edi_266 + 8<32>:word32] <= 0<32> l0070B8B1
l0070B87D:
	word32 edi_334 = 0xC<32>
l0070B882:
	word32 eax_340 = Mem336[edi_334 + Mem336[Mem336[esp_1072 + 0x2C<32>:word32] + 0x24<32>:word32]:word32]
	word32 esp_341 = esp_1072 - 4<i32>
	Mem342[esp_341:word32] = 2<32>
	Mem344[esp_341 - 4<i32>:word32] = eax_340
	Mem347[esp_341 - 8<i32>:word32] = ebp_272
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 eax_352 = fn006DF5A0(stackArg4, dwArg04, dwArg08, out edx_1069)
	esp_1072 = esp_341 + 4<32>
	branch eax_352 > 0<32> l0070B8B1
l0070B89C:
	branch eax_352 < 0<32> l0070BC5E
l0070B8A2:
	esi_329 = esi_329 + 1<32>
	edi_334 = edi_334 + 4<32>
	branch esi_329 < Mem347[Mem347[esp_341 + 0x30<32>:word32] + 8<32>:word32] l0070B882
l0070B8B1:
	branch fn006E0FC0() != 0<32> l0070BC5E
l0070B8BE:
	edi_266 = Mem372[esp_1072 + 0x2C<32>:word32]
	branch esi_329 < Mem372[edi_266 + 8<32>:word32] l0070B8E0
l0070B8E0:
	word32 ecx_377 = Mem372[esp_1072 + 0x30<32>:word32]
	branch Mem372[ecx_377 + 0x138<32> + esi_329 * 4<32>:word32] != 0<32> l0070B9AA
l0070B9AA:
	word32 esp_381 = esp_1072 - 4<i32>
	Mem384[esp_381:word32] = ebp_272
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_1863
	word32 edx_1864
	word32 esi_1865
	Mem398[esp_381:word32] = fn006ECC50(stackArg4, out ecx_1863, out edx_1864, out esi_1865)
	Mem401[esp_381 - 4<i32>:word32] = Mem398[edi_266 + 0x34<32>:word32]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 esi_1869
	word32 edx_1868
	word32 ecx_1867
	word32 eax_403 = fn006ECC50(stackArg4, out ecx_1867, out edx_1868, out esi_1869)
	word32 ecx_408 = Mem401[0x00A16B7C<p32>:word32]
	Mem412[esp_381 - 4<i32>:word32] = eax_403
	Mem414[esp_381 - 8<i32>:word32] = 0x8D7DE4<32>
	Mem416[esp_381 - 12<i32>:word32] = ecx_408
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_1871
	fn006E15D0(stackArg4, dwArg04, out ecx_1871, out edx_1069)
	esp_1072 = esp_381 + 4<32>
l0070B8F4:
	Mem426[ebx_275:word32] = Mem372[ebx_275:word32] + 1<32>
	word32 eax_427 = Mem426[ecx_377 + 0x138<32> + esi_329 * 4<32>:word32]
	Mem430[ecx_377 + 0x138<32> + esi_329 * 4<32>:word32] = ebx_275
	branch eax_427 == 0<32> l0070B912
l0070B901:
	word32 v32_432 = Mem430[eax_427:word32] + 0xFFFFFFFF<32>
	Mem433[eax_427:word32] = v32_432
	branch v32_432 != 0<32> l0070B912
l0070B906:
	word32 edx_436 = Mem433[eax_427 + 4<32>:word32]
	Mem438[esp_1072 - 4<i32>:word32] = eax_427
	word32 esp_440
	call Mem438[edx_436 + 0x18<32>:word32] (retsize: 4;)
		uses: edx:edx_436,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C,Stack +0018:dwArg14
		defs: edx:edx_443,esp:esp_440
	esp_1072 = esp_440 + 4<32>
l0070B8C7:
	word32 eax_448 = Mem372[esp_1072 + 0x18<32>:word32]
	branch eax_448 == 0<32> l0070B97A
l0070B97A:
	word32 esp_452 = esp_1072 - 4<i32>
	Mem453[esp_452:word32] = ebp_272
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 esi_1851
	word32 edx_1850
	word32 ecx_1849
	word32 eax_455 = fn006ECC50(stackArg4, out ecx_1849, out edx_1850, out esi_1851)
	word32 ecx_460 = Mem453[edi_266 + 0x34<32>:word32]
	Mem464[esp_452:word32] = eax_455
	Mem466[esp_452 - 4<i32>:word32] = ecx_460
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_1853
	word32 esi_1855
	word32 edx_1854
	word32 eax_468 = fn006ECC50(stackArg4, out ecx_1853, out edx_1854, out esi_1855)
	word32 edx_473 = Mem466[0x00A16B7C<p32>:word32]
	Mem477[esp_452 - 4<i32>:word32] = eax_468
	Mem479[esp_452 - 8<i32>:word32] = 0x8D7E20<32>
	Mem481[esp_452 - 12<i32>:word32] = edx_473
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_1857
	fn006E15D0(stackArg4, dwArg04, out ecx_1857, out edx_1069)
	esp_1072 = esp_452 + 4<32>
l0070B8D3:
	word32 esp_490 = esp_1072 - 4<i32>
	Mem491[esp_490:word32] = ebx_275
	Mem493[esp_490 - 4<i32>:word32] = ebp_272
	Mem495[esp_490 - 8<i32>:word32] = eax_448
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 edi_1861
	word32 ecx_1859
	word32 ebx_1860
	fn006FBD90(stackArg4, dwArg04, dwArg08, out ecx_1859, out edx_1069, out ebx_1860, out edi_1861)
	esp_1072 = esp_490 + 4<32>
l0070B912:
	word32 eax_506 = Mem505[esp_1072 + 0x14<32>:word32]
	Mem509[esp_1072 + 0x14<32>:word32] = eax_506 + 1<32>
	eax_267 = eax_506 + 1<32>
	branch eax_506 + 1<32> < Mem505[esp_1072 + 0x44<32>:word32] l0070B843
l0070B927:
	ebx_511 = Mem509[esp_1072 + 0x3C<32>:word32]
	ebp_184 = Mem509[esp_1072 + 0x30<32>:word32]
	edi_513 = Mem509[esp_1072 + 0x10<32>:word32]
l0070B933:
	word32 eax_517 = Mem515[Mem515[esp_1072 + 0x2C<32>:word32] + 8<32>:word32]
	branch ebx_511 >= eax_517 l0070BAA6
l0070B942:
	word32 esi_522 = Mem515[esp_1072 + 0x4C<32>:word32]
	word32 eax_523 = eax_517 - esi_522
	word32 ecx_525 = ebx_511
	branch ebx_511 >= eax_523 l0070B96B
l0070B94E:
l0070B950:
	branch Mem515[ebp_184 + 0x138<32> + ecx_525 * 4<32>:word32] == 0<32> l0070B9FC
l0070B9FC:
	word32 edi_539 = 0x8A698F<32>
	branch eax_523 == 1<32> l0070BA0B
l0070BA06:
	edi_539 = 0x8B22AC<32>
l0070BA0B:
	word32 esi_546 = 0x8D7E88<32>
	branch Mem515[esp_1072 + 0x44<32>:word32] != 0<32> l0070BA1C
l0070BA17:
	esi_546 = 0x8A698F<32>
l0070BA1C:
	word32 edx_556
	word32 ebx_551 = Mem515[esp_1072 + 0x2C<32>:word32]
	branch (Mem515[ebx_551 + 0x14<32>:byte] & 4<8>) != 0<8> l0070BA32
l0070BA26:
	edx_556 = 0x8D3C3C<32>
	branch Mem515[esp_1072 + 0x4C<32>:word32] == 0<32> l0070BA37
l0070BA32:
	edx_556 = 0x8D3C30<32>
l0070BA37:
	word32 esp_561 = esp_1072 - 4<i32>
	Mem566[esp_561:word32] = ecx_525
	Mem572[esp_561 - 4<i32>:word32] = edi_539
	Mem577[esp_561 - 8<i32>:word32] = esi_546
	Mem583[esp_561 - 12<i32>:word32] = eax_523
	Mem586[esp_561 - 16<i32>:word32] = edx_556
	Mem591[esp_561 - 20<i32>:word32] = Mem586[ebx_551 + 0x34<32>:word32]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_1873
	word32 edx_1874
	word32 esi_1875
	Mem610[esp_561 - 20<i32>:word32] = fn006ECC50(stackArg4, out ecx_1873, out edx_1874, out esi_1875)
	word32 eax_611 = Mem610[0x00A16B7C<p32>:word32]
	Mem613[esp_561 - 24<i32>:word32] = 0x8D7E58<32>
	Mem615[esp_561 - 28<i32>:word32] = eax_611
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_1877
	fn006E15D0(stackArg4, dwArg04, out ecx_1877, out edx_1069)
	esp_1072 = esp_561 + 4<32>
l0070B964:
	ecx_525 = ecx_525 + 1<32>
	branch ecx_525 < eax_523 l0070B950
l0070B96B:
	word32 edi_632
	branch edi_513 <= eax_523 l0070BA61
l0070BA61:
	edi_632 = 0<32>
l0070B973:
	edi_632 = edi_513 - eax_523
l0070BA63:
	branch edi_632 >= esi_522 l0070BAA6
l0070BA67:
	word32 ebx_647 = Mem515[esp_1072 + 0x48<32>:word32]
	word32 esi_658 = ebp_184 + 0x138<32> + (eax_523 + edi_632) * 4<32>
l0070BA76:
	branch Mem660[esi_658:word32] != 0<32> l0070BA9A
l0070BA7B:
	word32 eax_665 = Mem660[ebx_647 + edi_632 * 4<32>:word32]
	Mem667[eax_665:word32] = Mem660[eax_665:word32] + 1<32>
	word32 ecx_668 = Mem667[esi_658:word32]
	Mem671[esi_658:word32] = eax_665
	branch ecx_668 == 0<32> l0070BA9A
l0070BA89:
	word32 v34_673 = Mem671[ecx_668:word32] + 0xFFFFFFFF<32>
	Mem674[ecx_668:word32] = v34_673
	branch v34_673 != 0<32> l0070BA9A
l0070BA8E:
	word32 edx_677 = Mem674[ecx_668 + 4<32>:word32]
	word32 eax_678 = Mem674[edx_677 + 0x18<32>:word32]
	Mem681[esp_1072 - 4<i32>:word32] = ecx_668
	word32 esp_684
	call eax_678 (retsize: 4;)
		uses: edx:edx_677,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C,Stack +0018:dwArg14
		defs: esp:esp_684
	esp_1072 = esp_684 + 4<32>
l0070BA9A:
	edi_632 = edi_632 + 1<32>
	esi_658 = esi_658 + 4<32>
	branch edi_632 < Mem697[esp_1072 + 0x4C<32>:word32] l0070BA76
l0070B717:
	word32 esi_701 = 0x8A698F<32>
	branch eax_116 == 1<32> l0070B726
l0070B721:
	esi_701 = 0x8B22AC<32>
l0070B726:
	word32 edx_707 = 0x8D7E88<32>
	branch Mem115[esp_1072 + 0x44<32>:word32] != 0<32> l0070B737
l0070B732:
	edx_707 = 0x8A698F<32>
l0070B737:
	word32 ecx_713 = 0x8D3C28<32>
	branch Mem115[esp_1072 + 0x4C<32>:word32] != 0<32> l0070B748
l0070B743:
	ecx_713 = 0x8D3C3C<32>
l0070B748:
	word32 esp_717 = esp_1072 - 4<i32>
	Mem721[esp_717:word32] = dwArg14
	Mem726[esp_717 - 4<i32>:word32] = esi_701
	Mem730[esp_717 - 8<i32>:word32] = edx_707
	Mem735[esp_717 - 12<i32>:word32] = eax_116
	Mem738[esp_717 - 16<i32>:word32] = ecx_713
	Mem744[esp_717 - 20<i32>:word32] = Mem738[dwArg04 + 0x34<32>:word32]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_1833
	word32 esi_1835
	word32 edx_1834
	word32 eax_752 = fn006ECC50(stackArg4, out ecx_1833, out edx_1834, out esi_1835)
	word32 edx_757 = Mem744[0x00A16B7C<p32>:word32]
	Mem761[esp_717 - 20<i32>:word32] = eax_752
	Mem763[esp_717 - 24<i32>:word32] = 0x8D7E58<32>
	Mem765[esp_717 - 28<i32>:word32] = edx_757
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_1837
	fn006E15D0(stackArg4, dwArg04, out ecx_1837, out edx_1069)
	esp_1072 = esp_717 + 4<32>
l0070B67B:
	branch dwArg14 > 0<32> l0070B68F
l0070B687:
	branch dwArg1C <= 0<32> l0070BAA6
l0070BAA6:
	word32 ebp_782 = Mem781[esp_1072 + 0x2C<32>:word32]
	word32 eax_783 = Mem781[ebp_782 + 0x2C<32>:word32]
	word32 edx_784 = Mem781[eax_783 + 8<32>:word32]
	branch edx_784 == 0<32> l0070BBA4
l0070BAB8:
	Mem789[esp_1072 + 0x10<32>:word32] = Mem781[ebp_782 + 8<32>:word32]
	byte cl_791 = Mem789[ebp_782 + 0x14<32>:byte]
	branch (cl_791 & 4<8>) == 0<8> l0070BACC
l0070BAC7:
	Mem796[esp_1072 + 0x10<32>:word32] = Mem789[esp_1072 + 0x10<32>:word32] + 1<32>
l0070BACC:
	branch (cl_791 & 8<8>) == 0<8> l0070BAD6
l0070BAD1:
	Mem805[esp_1072 + 0x10<32>:word32] = Mem803[esp_1072 + 0x10<32>:word32] + 1<32>
l0070BAD6:
	Mem812[esp_1072 + 0x14<32>:word32] = 0<32>
	branch edx_784 <= 0<32> l0070BBA4
l0070BAE6:
	Mem813[esp_1072 + 0x18<32>:word32] = 0xC<32>
l0070BAF0:
	word32 ebx_822 = Mem819[eax_783 + Mem819[esp_1072 + 0x18<32>:word32]:word32]
	word32 edi_823 = 0<32>
	branch Mem819[esp_1072 + 0x10<32>:word32] <= 0<32> l0070BB49
l0070BB02:
	word32 esi_829 = Mem819[ebp_782 + 0x24<32>:word32] + 0xC<32>
l0070BB08:
	word32 eax_834 = Mem819[esi_829:word32] + 0x14<32>
	word32 ecx_837 = ebx_822 + 0x14<32>
l0070BB10:
	word32 eax_856
	byte dl_840 = Mem819[ecx_837:byte]
	branch dl_840 != Mem819[eax_834:byte] l0070BB30
l0070BB16:
	branch dl_840 == 0<8> l0070BB2C
l0070BB1A:
	byte dl_847 = Mem819[ecx_837 + 1<32>:byte]
	branch dl_847 != Mem819[eax_834 + 1<32>:byte] l0070BB30
l0070BB30:
	word32 eax_853 = 0<32> - (dl_840 <u Mem819[eax_834:byte])
	eax_856 = eax_853 - 0xFFFFFFFF<32> - (eax_853 <u 0<32>)
l0070BB22:
	ecx_837 = ecx_837 + 2<32>
	eax_834 = eax_834 + 2<32>
	branch dl_847 != 0<8> l0070BB10
l0070BB2C:
	eax_856 = 0<32>
l0070BB35:
	branch eax_856 == 0<32> l0070BC1E
l0070BC1E:
	word32 esi_878 = Mem819[esp_1072 + 0x30<32>:word32]
	word32 esp_887 = esp_1072 - 4<i32>
	Mem888[esp_887:word32] = Mem819[esi_878 + 0x138<32> + edi_823 * 4<32>:word32]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 eax_904 = fn00750380(stackArg4, out edx_1069)
	esp_1072 = esp_887 + 4<32>
	branch eax_904 == 0<32> l0070BC5E
l0070BC3C:
	Mem916[esi_878 + 0x138<32> + (Mem888[ebp_782 + 0xC<32>:word32] + Mem888[esp_887 + 0x18<32>:word32]) * 4<32>:word32] = eax_904
l0070BB3D:
	edi_823 = edi_823 + 1<32>
	esi_829 = esi_829 + 4<32>
	branch edi_823 < Mem819[esp_1072 + 0x10<32>:word32] l0070BB08
l0070BB49:
	word32 esp_926 = esp_1072 - 4<i32>
	Mem927[esp_926:word32] = 0<32>
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 eax_936 = fn00750380(stackArg4, out edx_1069)
	esp_1072 = esp_926 + 4<32>
	branch eax_936 == 0<32> l0070BC5E
l0070BB5B:
	word32 ecx_949 = Mem927[esp_926 + 0x34<32>:word32] + 0x138<32> + (Mem927[ebp_782 + 0xC<32>:word32] + Mem927[esp_926 + 0x18<32>:word32]) * 4<32>
	word32 edx_950 = Mem927[ecx_949:word32]
	Mem953[ecx_949:word32] = eax_936
	branch edx_950 == 0<32> l0070BB88
l0070BB77:
	word32 v25_955 = Mem953[edx_950:word32] + 0xFFFFFFFF<32>
	Mem956[edx_950:word32] = v25_955
	branch v25_955 != 0<32> l0070BB88
l0070BB7C:
	word32 eax_959 = Mem956[edx_950 + 4<32>:word32]
	word32 ecx_960 = Mem956[eax_959 + 0x18<32>:word32]
	Mem962[esp_926:word32] = edx_950
	word32 esp_963
	call ecx_960 (retsize: 4;)
		uses: eax:eax_959,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C,Stack +0018:dwArg14,Stack +0020:dwArg1C
		defs: esp:esp_963
	esp_1072 = esp_963 + 4<32>
l0070BB88:
	word32 ecx_973 = Mem972[esp_1072 + 0x14<32>:word32]
	eax_783 = Mem972[ebp_782 + 0x2C<32>:word32]
	Mem977[esp_1072 + 0x18<32>:word32] = Mem972[esp_1072 + 0x18<32>:word32] + 4<32>
	Mem980[esp_1072 + 0x14<32>:word32] = ecx_973 + 1<32>
	branch ecx_973 + 1<32> < Mem977[eax_783 + 8<32>:word32] l0070BAF0
l0070BBA4:
	word32 eax_987 = Mem985[Mem985[ebp_782 + 0x28<32>:word32] + 8<32>:word32]
	branch eax_987 == 0<32> l0070BBDE
l0070BBAE:
	word32 ecx_1007 = 0<32>
	branch eax_987 <= 0<32> l0070BBDE
l0070BBB4:
	word32 esi_996 = Mem985[esp_1072 + 0x20<32>:word32]
	word32 edx_1013 = Mem985[esp_1072 + 0x50<32>:word32] + 0xC<32>
l0070BBC0:
	word32 eax_1001 = Mem1000[edx_1013:word32]
	Mem1003[eax_1001:word32] = Mem1000[eax_1001:word32] + 1<32>
	Mem1010[esi_996 + (Mem1003[Mem1003[ebp_782 + 0x2C<32>:word32] + 8<32>:word32] + ecx_1007) * 4<32>:word32] = eax_1001
	ecx_1007 = ecx_1007 + 1<32>
	edx_1013 = edx_1013 + 4<32>
	branch ecx_1007 < Mem1010[Mem1010[ebp_782 + 0x28<32>:word32] + 8<32>:word32] l0070BBC0
l0070BBDE:
	branch (Mem1017[ebp_782 + 0x14<32>:byte] & 0x20<8>) == 0<8> l0070BC4B
l0070BC4B:
	word32 eax_1023 = Mem1017[esp_1072 + 0x30<32>:word32]
	word32 esp_1024 = esp_1072 - 4<i32>
	Mem1025[esp_1024:word32] = 0<32>
	Mem1027[esp_1024 - 4<i32>:word32] = eax_1023
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	Mem1074[esp_1024 + 0x20<32>:word32] = fn00708DC0(es, ds, stackArg4, dwArg04, out edx_1069)
	esp_1072 = esp_1024 + 4<32>
l0070BBE4:
	word32 esi_1075 = Mem1017[esp_1072 + 0x30<32>:word32]
	word32 eax_1076 = Mem1017[esi_1075 + 0xC<32>:word32]
	branch eax_1076 == 0<32> l0070BC06
l0070BBEF:
	Mem1081[eax_1076:word32] = Mem1017[eax_1076:word32] + 0xFFFFFFFF<32>
	word32 eax_1082 = Mem1081[esi_1075 + 0xC<32>:word32]
	branch Mem1081[eax_1082:word32] != 0<32> l0070BC06
l0070BBFA:
	word32 ecx_1085 = Mem1081[eax_1082 + 4<32>:word32]
	word32 edx_1086 = Mem1081[ecx_1085 + 0x18<32>:word32]
	Mem1088[esp_1072 - 4<i32>:word32] = eax_1082
	word32 esp_1089
	call edx_1086 (retsize: 4;)
		uses: ecx:ecx_1085,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C,Stack +0018:dwArg14,Stack +0020:dwArg1C
		defs: esp:esp_1089
	esp_1072 = esp_1089 + 4<32>
l0070BC06:
	Mem1100[esp_1072 - 4<i32>:word32] = esi_1075
	Mem1101[esi_1075 + 0xC<32>:word32] = 0<32>
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 edx_1109
	word32 eax_1107 = fn007500E0(stackArg4, out edx_1109)
	edxOut = edx_1109
	return eax_1107
l0070B68F:
	word32 edx_1821
	word32 esi_1822
	word32 ecx_1820
	fn006ECC50(Mem1129[dwArg04 + 0x34<32>:word32], out ecx_1820, out edx_1821, out esi_1822)
	word32 ecx_1823
	fn006E15D0(Mem1133[0x00A16B7C<p32>:word32], dwArg04, out ecx_1823, out edx_1069)
	esp_1072 = fp - 0x28<32>
l0070BC5E:
	word32 esi_1163 = Mem1162[esp_1072 + 0x24<32>:word32]
	word32 eax_1164 = Mem1162[esp_1072 + 0x30<32>:word32]
	Mem1166[esi_1163 + 0xC<32>:word32] = Mem1162[esi_1163 + 0xC<32>:word32] + 1<32>
	word32 v15_1167 = Mem1166[eax_1164:word32] + 0xFFFFFFFF<32>
	Mem1168[eax_1164:word32] = v15_1167
	branch v15_1167 != 0<32> l0070BC7B
l0070BC6F:
	word32 ecx_1171 = Mem1168[eax_1164 + 4<32>:word32]
	word32 edx_1172 = Mem1168[ecx_1171 + 0x18<32>:word32]
	Mem1174[esp_1072 - 4<i32>:word32] = eax_1164
	call edx_1172 (retsize: 4;)
		uses: ecx:ecx_1171,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C,Stack +0018:dwArg14,Stack +0020:dwArg1C
		defs: edx:edx_1183
l0070BC7B:
	Mem1191[esi_1163 + 0xC<32>:word32] = Mem1189[esi_1163 + 0xC<32>:word32] + 0xFFFFFFFF<32>
	edxOut = edx_1069
	return 0<32>
l0070B653:
	edxOut = edx_29
	return eax_27
l0070B61D:
	word32 ecx_1819
	word32 edx_1216
	fn006E0F80(Mem11[0x00A18720<p32>:word32], 0x8D7E98<32>, out ecx_1819, out edx_1216)
	edxOut = edx_1216
	return 0<32>
fn0070B600_exit:


word32 fn0070BC90(ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E83E0
//      fn006F6490
//      fn0070BCC0
// MayUse: 
// LiveOut: eax edx
// Trashed: SCZO eax ecx edx Top
// Preserved: esp
fn0070BC90_entry:
l0070BC90:
	word32 edx_31
	word32 eax_29 = fn0070B600(dwArg04, dwArg08, dwArg0C, 0<32>, 0<32>, out edx_31)
	edxOut = edx_31
	return eax_29
fn0070BC90_exit:


word32 fn0070BCC0(word32 dwArg08, word32 dwArg0C, word32 dwArg10)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00708DC0
// MayUse:  Stack +0008:[0..31] Stack +000C:[0..31] Stack +0010:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn0070BCC0_entry:
l0070BCC0:
	word32 ebp_104
	word32 ebx_116
	word32 esp_139
	word32 esi_115 = dwArg08
	word32 eax_15 = Mem13[dwArg08 + 4<32>:word32]
	branch eax_15 == 0xA16588<32> l0070BCEF
l0070BCDD:
	word32 ecx_1060
	word32 edx_1061
	branch fn006D5670(eax_15, 0xA16588<32>, out ecx_1060, out edx_1061) == 0<32> l0070BD4E
l0070BD4E:
	ebp_104 = dwArg10
	ebx_116 = dwArg0C
l0070BCEF:
	ebx_116 = dwArg0C
	ebp_104 = dwArg10
	branch dwArg0C != 0xA163B8<32> l0070BDD3
l0070BD03:
	branch dwArg10 != 0xA163B8<32> l0070BD56
l0070BD0B:
	word32 ecx_1062
	word32 edx_1063
	word32 eax_53 = fn006DFE20(dwArg08, out ecx_1062, out edx_1063)
	branch eax_53 == 2<32> l0070BD20
l0070BD1B:
	branch eax_53 != 3<32> l0070BD56
l0070BD20:
	ebx_116 = fn006DFE60(dwArg08, 1<32>)
	branch eax_53 != 3<32> l0070BD3F
l0070BD32:
	ebp_104 = fn006DFE60(dwArg08, 2<32>)
l0070BD3F:
	esi_115 = fn006DFE60(dwArg08, 0<32>)
l0070BD56:
	branch ebx_116 != 0xA163B8<32> l0070BDD3
l0070BDD3:
	esp_139 = fp - 0x18<32>
	branch ebp_104 != 0xA163B8<32> l0070BDDD
l0070BDDB:
	ebp_104 = ebx_116
l0070BD5E:
	word32 eax_126 = Mem125[0x00A6D67C<p32>:word32]
	word32 esp_133
	word32 eax_134
	call Mem129[0x00A6D680<p32>:word32] (retsize: 4;)
		uses: eax:eax_126,Stack +0004:eax_126,Stack +000C:dwArg08,Stack +0010:dwArg0C,Stack +0014:dwArg10,Stack +0028:dwArg08,Stack +002C:dwArg0C,Stack +0030:dwArg10
		defs: eax:eax_134,esp:esp_133
	esp_139 = esp_133 + 4<32>
	branch eax_134 != 0<32> l0070BD75
l0070BD75:
	ebx_116 = Mem129[eax_134 + 0x18<32>:word32]
l0070BD71:
	ebx_116 = 0<32>
l0070BD78:
	branch ebp_104 != 0xA163B8<32> l0070BDAD
l0070BD80:
	word32 eax_151 = Mem129[0x00A6D67C<p32>:word32]
	Mem154[esp_133:word32] = eax_151
	word32 esp_159
	word32 eax_160
	call Mem154[0x00A6D680<p32>:word32] (retsize: 4;)
		uses: eax:eax_151,Stack +000C:dwArg08,Stack +0010:dwArg0C,Stack +0014:dwArg10
		defs: eax:eax_160,esp:esp_159
	branch eax_160 != 0<32> l0070BD99
l0070BD99:
	Mem171[esp_159:word32] = eax_160
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	fn0073B3D0(stackArg4)
	ebp_104 = Mem171[eax_160 + 0x1C<32>:word32]
l0070BD95:
	ebp_104 = 0<32>
l0070BDA5:
	Mem185[esp_159 + 0x18<32>:word32] = 1<32>
	esp_139 = esp_159 + 4<32>
l0070BDAD:
	branch ebx_116 == 0<32> l0070BDB5
l0070BDB1:
	branch ebp_104 != 0<32> l0070BDDD
l0070BDDD:
	word32 esp_679
	word32 eax_203 = Mem200[esi_115 + 4<32>:word32]
	branch eax_203 == 0xA1B450<32> l0070BE57
l0070BDE7:
	word32 esp_209 = esp_139 - 4<i32>
	Mem210[esp_209:word32] = 0xA1B450<32>
	Mem212[esp_209 - 4<i32>:word32] = eax_203
	word32 ecx_1064
	word32 edx_1065
	branch fn006D5670(Mem212[esp_209 - 4<i32>:word32], Mem212[esp_209:word32], out ecx_1064, out edx_1065) != 0<32> l0070BE57
l0070BDF9:
	word32 eax_224 = Mem212[esi_115 + 4<32>:word32]
	branch eax_224 == 0xA23B20<32> l0070BE57
l0070BE03:
	Mem228[esp_209:word32] = 0xA23B20<32>
	Mem230[esp_209 - 4<i32>:word32] = eax_224
	word32 ecx_1066
	word32 edx_1067
	branch fn006D5670(Mem230[esp_209 - 4<i32>:word32], Mem230[esp_209:word32], out ecx_1066, out edx_1067) != 0<32> l0070BE57
l0070BE15:
	word32 eax_242 = Mem230[esi_115 + 4<32>:word32]
	branch eax_242 == 0xA27458<32> l0070BE57
l0070BE1F:
	branch eax_242 == 0xA26EF0<32> l0070BE57
l0070BE26:
	Mem248[esp_209:word32] = 0xA26EF0<32>
	Mem250[esp_209 - 4<i32>:word32] = eax_242
	word32 edx_1069
	word32 ecx_1068
	branch fn006D5670(Mem250[esp_209 - 4<i32>:word32], Mem250[esp_209:word32], out ecx_1068, out edx_1069) != 0<32> l0070BE57
l0070BE57:
	word32 eax_265 = Mem264[ebx_116 + 4<32>:word32]
	branch eax_265 == 0xA1D1B8<32> l0070BE92
l0070BE61:
	word32 esp_269 = esp_139 - 4<i32>
	Mem270[esp_269:word32] = 0xA1D1B8<32>
	Mem272[esp_269 - 4<i32>:word32] = eax_265
	word32 ecx_1076
	word32 edx_1077
	branch fn006D5670(Mem272[esp_269 - 4<i32>:word32], Mem272[esp_269:word32], out ecx_1076, out edx_1077) != 0<32> l0070BE92
l0070BE92:
	word32 esp_285 = esp_139 - 4<i32>
	Mem289[esp_285:word32] = ebp_104
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	branch fn00703640(stackArg4) != 0<32> l0070BEBD
l0070BEBD:
	Mem316[esp_285:word32] = 0x8D41A4<32>
	Mem318[esp_285 - 4<i32>:word32] = ebx_116
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 stackArg8 = <invalid>
	word32 ecx_1084
	word32 edx_1085
	word32 edi_1087
	word32 esi_1086
	branch fn006FD8B0(stackArg4, stackArg8, out ecx_1084, out edx_1085, out esi_1086, out edi_1087) != 0<32> l0070BEE5
l0070BECF:
	Mem332[esp_285:word32] = Mem318[Mem318[esp_285 + 0x20<32>:word32] + 0x14<32>:word32]
	Mem334[esp_285 - 4<i32>:word32] = 0x8D41A4<32>
	Mem336[esp_285 - 8<i32>:word32] = ebx_116
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 stackArg8 = <invalid>
	word32 ecx_1094
	word32 edx_1095
	word32 esi_1096
	fn006FD8F0(stackArg4, stackArg8, dwArg08, out ecx_1094, out edx_1095, out esi_1096)
l0070BEE5:
	word32 esi_573
	word32 esp_570
	word32 eax_447
	word32 eax_347 = Mem346[esi_115 + 4<32>:word32]
	branch eax_347 != 0xA27458<32> l0070BF12
l0070BF12:
	branch eax_347 == 0xA26EF0<32> l0070BFDD
l0070BF1D:
	word32 esp_353 = esp_139 - 4<i32>
	Mem354[esp_353:word32] = 0xA26EF0<32>
	Mem356[esp_353 - 4<i32>:word32] = eax_347
	word32 edx_1109
	word32 ecx_1108
	branch fn006D5670(Mem356[esp_353 - 4<i32>:word32], Mem356[esp_353:word32], out ecx_1108, out edx_1109) != 0<32> l0070BFDD
l0070BFDD:
	word32 esp_369 = esp_139 - 4<i32>
	Mem371[esp_369:word32] = esi_115
	word32 ecx_1102
	word32 edx_1103
	word32 eax_372 = fn0072FC60(Mem371[esp_369:word32], out ecx_1102, out edx_1103)
	Mem380[esp_369 - 4<i32>:word32] = esi_115
	Mem390[esp_369 - 8<i32>:word32] = fn0072FC90(Mem380[esp_369 - 4<i32>:word32])
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_1105
	word32 edx_1106
	word32 esi_1107
	word32 eax_398 = fn006ECC50(stackArg4, out ecx_1105, out edx_1106, out esi_1107)
	branch eax_398 == 0<32> l0070BDC8
l0070BFFE:
	Mem410[esp_369:word32] = esp_369 + 0x14<32>
	Mem411[esp_369 + 0x14<32>:word32] = 0<32>
	branch fn00707600(Mem411[esp_369:word32]) == 0<32> l0070C01E
l0070C01E:
	Mem424[esp_369:word32] = 0<32>
l0070C017:
	Mem427[esp_369:word32] = esp_369 + 0x14<32>
l0070C020:
	Mem430[esp_369 - 4<32>:word32] = 0<32>
	Mem433[esp_369 - 8<i32>:word32] = ebp_104
	Mem436[esp_369 - 12<i32>:word32] = ebx_116
	Mem438[esp_369 - 16<i32>:word32] = 0x101<32>
	Mem441[esp_369 - 20<i32>:word32] = eax_398
	Mem444[esp_369 - 24<i32>:word32] = eax_372
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 stackArg24 = <invalid>
	eax_447 = fn006E90B0(stackArg4, stackArg24)
l0070BF33:
	word32 eax_454 = Mem356[esi_115 + 4<32>:word32]
	Mem457[esp_353 + 0x28<32>:word32] = 0<32>
	word32 edi_455 = 0<32>
	branch eax_454 == 0xA23B20<32> l0070BF55
l0070BF43:
	Mem460[esp_353:word32] = 0xA23B20<32>
	Mem462[esp_353 - 4<i32>:word32] = eax_454
	word32 edx_1114
	word32 ecx_1113
	branch fn006D5670(Mem462[esp_353 - 4<i32>:word32], Mem462[esp_353:word32], out ecx_1113, out edx_1114) == 0<32> l0070BF72
l0070BF55:
	word32 esp_475 = esp_139 - 4<i32>
	Mem477[esp_475:word32] = esi_115
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_1111
	word32 edx_1112
	word32 eax_483 = fn00718B50(stackArg4, out ecx_1111, out edx_1112)
	edi_455 = eax_483
	branch eax_483 == 0<32> l0070BDC8
l0070BF68:
	Mem494[esp_475 + 0x28<32>:word32] = Mem477[esp_475 + 0x28<32>:word32] | 0x100<32>
	esi_115 = eax_483
l0070BF72:
	word32 esp_499 = esp_139 - 4<i32>
	Mem500[esp_499:word32] = 0<32>
	Mem503[esp_499 - 4<i32>:word32] = esp_499 + 0x24<32>
	Mem506[esp_499 - 8<i32>:word32] = esi_115
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 stackArg8 = <invalid>
	word32 edx_1117
	branch fn006EA420(stackArg4, stackArg8, dwArg08, out edx_1117) != 0<32> l0070BDC8
l0070BF8A:
	Mem523[esp_499:word32] = esp_499 + 0x28<32>
	branch fn00707600(Mem523[esp_499:word32]) == 0<32> l0070BFAE
l0070BFAE:
	word32 eax_535 = Mem523[esp_499 + 0x24<32>:word32]
	Mem537[esp_499:word32] = 0<32>
	Mem539[esp_499 - 4<32>:word32] = ebp_104
	Mem541[esp_499 - 8<i32>:word32] = ebx_116
	Mem543[esp_499 - 12<i32>:word32] = 0x101<32>
	Mem545[esp_499 - 16<i32>:word32] = eax_535
l0070BF9B:
	word32 edx_546 = Mem523[esp_499 + 0x24<32>:word32]
	Mem549[esp_499:word32] = esp_499 + 0x28<32>
	Mem551[esp_499 - 4<32>:word32] = ebp_104
	Mem553[esp_499 - 8<i32>:word32] = ebx_116
	Mem555[esp_499 - 12<i32>:word32] = 0x101<32>
	Mem557[esp_499 - 16<i32>:word32] = edx_546
l0070BFBC:
	esp_570 = esp_499 + 4<32>
	esi_573 = fn006E9040()
	branch edi_455 == 0<32> l0070C035
l0070BFCA:
	word32 v16_576 = Mem575[edi_455:word32] + 0xFFFFFFFF<32>
	Mem577[edi_455:word32] = v16_576
	branch v16_576 != 0<32> l0070C035
l0070BFCF:
	word32 ecx_580 = Mem577[edi_455 + 4<32>:word32]
	word32 edx_581 = Mem577[ecx_580 + 0x18<32>:word32]
	Mem583[esp_499:word32] = edi_455
	word32 esp_584
	call edx_581 (retsize: 4;)
		uses: ecx:ecx_580,Stack +000C:dwArg08,Stack +0010:dwArg0C,Stack +0014:dwArg10
		defs: esp:esp_584
	esp_570 = esp_584 + 4<32>
l0070BEEF:
	branch Mem346[Mem346[esi_115 + 0x28<32>:word32] + 8<32>:word32] <= 0<32> l0070BF02
l0070BF02:
	word32 esp_595 = esp_139 - 4<i32>
	Mem596[esp_595:word32] = ebp_104
	Mem598[esp_595 - 4<i32>:word32] = ebx_116
	Mem600[esp_595 - 8<i32>:word32] = esi_115
	word32 edx_1097
	eax_447 = fn0070BC90(out edx_1097)
l0070C033:
	esp_570 = esp_139
	esi_573 = eax_447
l0070C035:
	branch Mem614[esp_570 + 0x14<32>:word32] == 0<32> l0070C04B
l0070C03C:
	word32 edx_618 = Mem614[esp_570 + 0x1C<32>:word32]
	word32 esp_619 = esp_570 - 4<i32>
	Mem620[esp_619:word32] = 0<32>
	Mem622[esp_619 - 4<i32>:word32] = edx_618
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	fn0073B4E0(stackArg4)
l0070C04B:
	branch esi_573 == 0<32> l0070BDC8
l0070C053:
	word32 v15_645 = Mem644[esi_573:word32] + 0xFFFFFFFF<32>
	Mem646[esi_573:word32] = v15_645
	branch v15_645 != 0<32> l0070C064
l0070C058:
	word32 eax_649 = Mem646[esi_573 + 4<32>:word32]
	word32 ecx_650 = Mem646[eax_649 + 0x18<32>:word32]
	Mem653[esp_570 - 4<i32>:word32] = esi_573
	call ecx_650 (retsize: 4;)
		uses: eax:eax_649,Stack +000C:dwArg08,Stack +0010:dwArg0C,Stack +0014:dwArg10
l0070C064:
	return 0<32>
l0070BEF8:
	esp_679 = esp_139 - 4<i32>
	Mem680[esp_679:word32] = 0x8D7EB8<32>
l0070BE9F:
	word32 eax_681 = Mem289[0x00A16B7C<p32>:word32]
	Mem683[esp_285:word32] = 0x8D7EF4<32>
	Mem685[esp_285 - 4<i32>:word32] = eax_681
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 stackArg8 = <invalid>
	word32 ecx_1090
	word32 edx_1091
	fn006E0F80(stackArg4, stackArg8, out ecx_1090, out edx_1091)
	return 0xFFFFFFFF<32>
l0070BE73:
	word32 edx_704 = Mem272[0x00A16B7C<p32>:word32]
	Mem706[esp_269:word32] = 0x8D7F1C<32>
	Mem708[esp_269 - 4<i32>:word32] = edx_704
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 stackArg8 = <invalid>
	word32 edx_1081
	word32 ecx_1080
	fn006E0F80(stackArg4, stackArg8, out ecx_1080, out edx_1081)
	return 0xFFFFFFFF<32>
l0070BE38:
	Mem728[esp_209:word32] = 0x8D7F48<32>
	esp_679 = esp_209
l0070BE3D:
	Mem733[esp_679 - 4<i32>:word32] = Mem729[0x00A16B7C<p32>:word32]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 stackArg8 = <invalid>
	word32 ecx_1100
	word32 edx_1101
	fn006E0F80(stackArg4, stackArg8, out ecx_1100, out edx_1101)
	return 0xFFFFFFFF<32>
l0070BDB5:
	word32 eax_758 = Mem202[0x00A18720<p32>:word32]
	word32 esp_760 = esp_139 - 4<i32>
	Mem761[esp_760:word32] = 0x8D7F7C<32>
	Mem763[esp_760 - 4<i32>:word32] = eax_758
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 stackArg8 = <invalid>
	word32 ecx_1073
	word32 edx_1074
	fn006E0F80(stackArg4, stackArg8, out ecx_1073, out edx_1074)
l0070BDC8:
	return 0xFFFFFFFF<32>
fn0070BCC0_exit:


word32 fn0070C1A0(word32 dwArg04, word32 dwArg0C)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0070C1A0
//      fn0070C9E0
// MayUse:  Stack +0004:[0..31] Stack +000C:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ebp ebx ecx edi edx Top
// Preserved: esi esp
fn0070C1A0_entry:
l0070C1A0:
	word32 ecx_178
	word32 edx_179
	word32 eax_18 = fn006FBCC0(Mem10[dwArg04 + 0xC<32>:word32], dwArg08, out ecx_178, out edx_179)
	branch eax_18 == 0<32> l0070C1C4
l0070C1C4:
	word32 eax_119
	word32 esi_43 = 0<32>
	word32 edx_181
	word32 ecx_180
	branch fn006DFE20(Mem16[dwArg04 + 8<32>:word32], out ecx_180, out edx_181) <= 0<32> l0070C205
l0070C1DC:
l0070C1E0:
	eax_119 = fn0070C1A0(fn006DFE60(Mem49[dwArg04 + 8<32>:word32], dwArg04), dwArg08)
	branch eax_119 != 0<32> l0070C207
l0070C1FC:
	esi_43 = esi_43 + 1<32>
	branch esi_43 < dwArg04 l0070C1E0
l0070C205:
	eax_119 = 0<32>
l0070C207:
	return eax_119
l0070C1BB:
	Mem103[dwArg0C:word32] = dwArg04
	return eax_18
fn0070C1A0_exit:


word32 fn0070C700(word32 dwArg04, word32 dwArg08, ptr32 & ecxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00703D00
//      fn00703F10
//      fn0070C700
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax ecx
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn0070C700_entry:
l0070C700:
	branch dwArg04 != dwArg08 l0070C716
l0070C716:
	word32 eax_14 = Mem10[dwArg08 + 4<32>:word32]
	branch eax_14 == 0xA16588<32> l0070C789
l0070C721:
	word32 edx_260
	branch fn006D5670(eax_14, 0xA16588<32>, out ecx, out edx_260) != 0<32> l0070C789
l0070C789:
	word32 ebx_41 = Mem39[dwArg08 + 8<32>:word32]
	word32 esi_42 = 0<32>
	branch ebx_41 <= 0<32> l0070C7B4
l0070C793:
l0070C796:
	branch fn0070C700(dwArg04, dwArg04, out ecx) != 0<32> l0070C7BB
l0070C7BB:
	ecxOut = ecx
	return 1<32>
l0070C7AA:
	esi_42 = esi_42 + 1<32>
	branch esi_42 < ebx_41 l0070C796
l0070C7B4:
	ecxOut = ecx
	return 0<32>
l0070C733:
	branch dwArg04 == 0<32> l0070C77A
l0070C737:
	branch Mem23[dwArg04 + 4<32>:word32] != 0xA1E968<32> l0070C77A
l0070C740:
	word32 edx_261
	word32 eax_104 = fn006DFE20(Mem23[dwArg04 + 8<32>:word32], out ecx, out edx_261)
	word32 esi_111 = 0<32>
	branch eax_104 <= 0<32> l0070C77A
l0070C754:
	branch fn0070C700(fn006DFE60(Mem115[dwArg04 + 8<32>:word32], dwArg04), dwArg04, out ecx) != 0<32> l0070C780
l0070C780:
	ecxOut = ecx
	return 1<32>
l0070C773:
	esi_111 = esi_111 + 1<32>
	branch esi_111 < eax_104 l0070C754
l0070C77A:
	ecxOut = ecx
	return 0<32>
l0070C70E:
	ecxOut = ecx
	return 1<32>
fn0070C700_exit:


word32 fn0070C9E0(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006FE070
//      fn006FE2A0
// MayUse:  Stack +0004:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx edi edx esi Top
// Preserved: esp
fn0070C9E0_entry:
l0070C9E0:
	word32 edx_79
	word32 ecx_78
	word32 eax_18 = fn006FBCC0(Mem10[dwArg04 + 0xC<32>:word32], dwArg08, out ecx_78, out edx_79)
	branch eax_18 != 0<32> l0070CA0D
l0070C9FB:
	eax_18 = fn0070C1A0(Mem16[dwArg04 + 8<32>:word32], dwArg08)
l0070CA0D:
	return eax_18
fn0070C9E0_exit:


void fn0070E820()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E8910
// MayUse: 
// LiveOut:
// Trashed: SCZO eax ecx edx esp Top
// Preserved:
fn0070E820_entry:
l0070E820:
	word32 eax_10 = Mem0[0x00A6D37C<p32>:word32]
	branch eax_10 == 0<32> l0070E84B
l0070E829:
	word32 esp_13 = fp
l0070E830:
	word32 ecx_12 = Mem11[eax_10 + 0xC<32>:word32]
	word32 esp_14 = esp_13 - 4<i32>
	Mem15[esp_14:word32] = eax_10
	Mem16[0x00A6D37C<p32>:word32] = ecx_12
	fn006FEFD0(Mem16[esp_14:word32])
	eax_10 = Mem16[0x00A6D37C<p32>:word32]
	esp_13 = esp_14
	branch eax_10 != 0<32> l0070E830
l0070E84B:
	return
fn0070E820_exit:


word32 fn007105C0(word32 dwArg04, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn007120F0
//      fn007367D0
// MayUse:  Stack +0004:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ecx edx Top
// Preserved: esp
fn007105C0_entry:
l007105C0:
	branch dwArg04 <= 0x7FFFFFFF<32> l007105D3
l007105D3:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg8 = <invalid>
	word32 stackArg12 = <invalid>
	word32 edx_35
	word32 ecx_76
	word32 edx_77
	word32 ecx_80
	word32 eax_33 = fn006DDD50(fn00723860(Mem0[0x00A1F414<p32>:word32] *s dwArg04 + 3<32> + Mem0[0x00A1F410<p32>:word32] & 0xFFFFFFFC<32>, out ecx_76, out edx_77), stackArg8, stackArg12, out ecx_80, out edx_35)
	edxOut = edx_35
	return eax_33
l007105CB:
	word32 edx_44
	word32 ecx_81
	fn006E1210(out ecx_81, out edx_44)
	edxOut = edx_44
	return 0<32>
fn007105C0_exit:


word32 fn00710690(word32 dwArg04, ptr32 & ecxOut, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00710CB0
// MayUse:  Stack +0004:[0..31]
// LiveOut: eax ecx edx
// Trashed: SCZO eax ebx ecx edi edx esi Top
// Preserved: esp
fn00710690_entry:
l00710690:
	word32 edi_13 = dwArg04
	word32 esi_14 = 0<32>
	word32 ebx_15 = 0<32>
	branch dwArg04 >= 0<32> l007106A6
l0071069F:
	edi_13 = -dwArg04
	ebx_15 = 1<32>
l007106A6:
	word32 eax_26 = edi_13
	branch edi_13 == 0<32> l007106CB
l007106AC:
l007106B0:
	esi_14 = esi_14 + 1<32>
	eax_26 = eax_26 >>u 0xF<32>
	branch eax_26 != 0<32> l007106B0
l007106B8:
	branch esi_14 <= 0x7FFFFFFF<32> l007106CB
l007106CB:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg8 = <invalid>
	word32 stackArg12 = <invalid>
	word32 edx_209
	word32 ecx_208
	word32 ecx_101
	word32 edx_108
	word32 eax_78 = fn006DDD50(fn00723860(Mem12[0x00A1F414<p32>:word32] *s esi_14 + 3<32> + Mem12[0x00A1F410<p32>:word32] & 0xFFFFFFFC<32>, out ecx_208, out edx_209), stackArg8, stackArg12, out ecx_101, out edx_108)
	branch eax_78 == 0<32> l00710723
l007106FC:
	edx_108 = eax_78 + 0xC<32>
	branch ebx_15 == 0<32> l00710705
l00710703:
	esi_14 = -esi_14
l00710705:
	Mem100[eax_78 + 8<32>:word32] = esi_14
	ecx_101 = edi_13
	branch edi_13 == 0<32> l00710723
l0071070E:
l00710710:
	Mem109[edx_108:word16] = SLICE(ecx_101 & 0x7FFF<32>, word16, 0)
	edx_108 = edx_108 + 2<32>
	ecx_101 = ecx_101 >>u 0xF<32>
	branch ecx_101 != 0<32> l00710710
l00710723:
	ecxOut = ecx_101
	edxOut = edx_108
	return eax_78
l007106C0:
	word32 ecx_126
	word32 edx_127
	fn006E1210(out ecx_126, out edx_127)
	ecxOut = ecx_126
	edxOut = edx_127
	return 0<32>
fn00710690_exit:


word32 fn00710730(word32 dwArg04, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E9BD0
//      fn00711280
// MayUse:  Stack +0004:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ecx edi edx esi esp Top
// Preserved:
fn00710730_entry:
l00710730:
	word32 esi_11 = 0<32>
	word32 eax_14 = dwArg04
	branch dwArg04 == 0<32> l0071075A
l0071073E:
l00710740:
	esi_11 = esi_11 + 1<32>
	eax_14 = eax_14 >>u 0xF<32>
	branch eax_14 != 0<32> l00710740
l00710748:
	branch esi_11 <= 0x7FFFFFFF<32> l0071075A
l0071075A:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 ecx_147
	word32 edx_121
	word32 eax_43 = fn00723860(Mem9[0x00A1F414<p32>:word32] *s esi_11 + 3<32> + Mem9[0x00A1F410<p32>:word32] & 0xFFFFFFFC<32>, out ecx_147, out edx_121)
	word32 stackArg4 = <invalid>
	word32 stackArg8 = <invalid>
	word32 stackArg12 = <invalid>
	word32 edx_152
	word32 ecx_151
	fn006DDD50(stackArg4, stackArg8, stackArg12, out ecx_151, out edx_152)
	word32 edi_59 = dwArg04
	branch eax_43 == 0<32> l007107A8
l0071078B:
	Mem64[eax_43 + 8<32>:word32] = esi_11
	word32 ecx_63 = eax_43 + 0xC<32>
	branch dwArg04 == 0<32> l007107A8
l00710795:
	edx_121 = edi_59 & 0x7FFF<32>
	Mem71[ecx_63:word16] = SLICE(edx_121, word16, 0)
	ecx_63 = ecx_63 + 2<32>
	edi_59 = edi_59 >>u 0xF<32>
	branch edi_59 != 0<32> l00710795
l007107A8:
	edxOut = edx_121
	return eax_43
l00710750:
	word32 ecx_145
	word32 edx_146
	fn006E1210(out ecx_145, out edx_146)
	edxOut = edx
	return 0<32>
fn00710730_exit:


word32 fn007108F0(word32 dwArg04, ptr32 & ecxOut, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn007051A0
// MayUse:  Stack +0004:[0..31]
// LiveOut: eax ecx edx
// Trashed: SCZO eax ebx ecx edi edx esi Top
// Preserved: ebx edi esp
fn007108F0_entry:
l007108F0:
	branch dwArg04 == 0<32> l007109B2
l007108FD:
	word32 eax_11 = Mem6[dwArg04 + 4<32>:word32]
	branch eax_11 == 0xA1F400<32> l00710919
l00710907:
	word32 ecx_266
	branch fn006D5670(eax_11, 0xA1F400<32>, out ecx_266, out edx) == 0<32> l0071098B
l0071098B:
	word32 eax_29 = Mem17[dwArg04 + 4<32>:word32]
	branch eax_29 == 0xA1E7E8<32> l007109A7
l00710995:
	word32 ecx_269
	word32 edx_270
	branch fn006D5670(eax_29, 0xA1E7E8<32>, out ecx_269, out edx_270) == 0<32> l007109B2
l007109B2:
	word32 edx_57
	ecxOut = fn006E1DC0(out edx_57)
	edxOut = edx_57
	return 0xFFFFFFFF<32>
l007109A7:
	word32 ecx_73
	word32 edx_74
	word32 edi_268
	word32 esi_267
	word32 eax_72 = fn007051A0(edi, dwArg04, out ecx_73, out edx_74, out esi_267, out edi_268)
	ecxOut = ecx_73
	edxOut = edx_74
	return eax_72
l00710919:
	word32 ecx_83 = Mem82[dwArg04 + 8<32>:word32]
	word32 eax_113 = 0<32>
	word32 edi_130 = 1<32>
	branch ecx_83 >= 0<32> l0071092D
l00710928:
	edi_130 = 0xFFFFFFFF<32>
	ecx_83 = -ecx_83
l0071092D:
	word32 ecx_121 = ecx_83 - 1<32>
	branch ecx_121 < 0<32> l0071095B
l00710933:
	edx = dwArg04 + 0xC<32> + ecx_121 * 2<32>
l00710937:
	eax_113 = (eax_113 << 0xF<32>) + CONVERT(Mem106[edx:word16], word16, word32)
	branch eax_113 >>u 0xF<32> != eax_113 l00710971
l0071094A:
	ecx_121 = ecx_121 - 1<32>
	edx = edx - 2<32>
	branch ecx_121 >= 0<32> l00710937
l00710954:
	branch eax_113 >u 0x7FFFFFFF<32> l00710962
l00710962:
	branch edi_130 >= 0<32> l00710971
l00710966:
	branch eax_113 != 0x80000000<32> l00710971
l00710971:
	word32 ecx_153
	word32 edx_154
	fn006E0F80(Mem106[0x00A18598<p32>:word32], 0x8D8738<32>, out ecx_153, out edx_154)
	ecxOut = ecx_153
	edxOut = edx_154
	return 0xFFFFFFFF<32>
l0071096D:
	ecxOut = ecx_121
	edxOut = edx
	return eax_113
l0071095B:
	ecxOut = ecx_121
	edxOut = edx
	return eax_113 *s edi_130
fn007108F0_exit:


word32 fn007109D0(word32 dwArg04, ptr32 & ecxOut, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn007052C0
// MayUse:  Stack +0004:[0..31]
// LiveOut: eax ecx edx
// Trashed: SCZO eax ecx edx Top
// Preserved: ebx edi esi esp
fn007109D0_entry:
l007109D0:
	branch dwArg04 == 0<32> l00710A6B
l007109DD:
	word32 eax_11 = Mem6[dwArg04 + 4<32>:word32]
	branch eax_11 == 0xA1F400<32> l007109F9
l007109E7:
	word32 ecx_220
	branch fn006D5670(eax_11, 0xA1F400<32>, out ecx_220, out edx) == 0<32> l00710A6B
l00710A6B:
	word32 edx_39
	ecxOut = fn006E1DC0(out edx_39)
	edxOut = edx_39
	return 0xFFFFFFFF<32>
l007109F9:
	word32 ecx_50 = Mem49[dwArg04 + 8<32>:word32]
	word32 eax_144 = 0<32>
	word32 edi_59 = 1<32>
	branch ecx_50 >= 0<32> l00710A0D
l00710A08:
	edi_59 = 0xFFFFFFFF<32>
	ecx_50 = -ecx_50
l00710A0D:
	word32 ecx_185 = ecx_50 - 1<32>
	branch ecx_185 < 0<32> l00710A3B
l00710A13:
	edx = dwArg04 + 0xC<32> + ecx_185 * 2<32>
l00710A17:
	eax_144 = (eax_144 << 0xF<32>) + CONVERT(Mem73[edx:word16], word16, word32)
	branch eax_144 >>u 0xF<32> != eax_144 l00710A51
l00710A2A:
	ecx_185 = ecx_185 - 1<32>
	edx = edx - 2<32>
	branch ecx_185 >= 0<32> l00710A17
l00710A34:
	branch eax_144 >u 0x7FFFFFFF<32> l00710A42
l00710A42:
	branch edi_59 >= 0<32> l00710A51
l00710A46:
	branch eax_144 != 0x80000000<32> l00710A51
l00710A51:
	word32 ecx_120
	word32 edx_121
	fn006E0F80(Mem73[0x00A18598<p32>:word32], 0x8D8738<32>, out ecx_120, out edx_121)
	ecxOut = ecx_120
	edxOut = edx_121
	return 0xFFFFFFFF<32>
l00710A4D:
	ecxOut = ecx_185
	edxOut = edx
	return eax_144
l00710A3B:
	ecxOut = ecx_185
	edxOut = edx
	return eax_144 *s edi_59
fn007109D0_exit:


word32 fn00710B80(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E5C60
//      fn00705340
// MayUse:  Stack +0004:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx edx esi Top
// Preserved: edi esp
fn00710B80_entry:
l00710B80:
	branch dwArg04 == 0<32> l00710C01
l00710B89:
	word32 eax_11 = Mem6[dwArg04 + 4<32>:word32]
	branch eax_11 == 0xA1F400<32> l00710BA5
l00710B93:
	word32 ecx_191
	word32 edx_192
	branch fn006D5670(eax_11, 0xA1F400<32>, out ecx_191, out edx_192) == 0<32> l00710BDA
l00710BDA:
	word32 eax_29 = Mem17[dwArg04 + 4<32>:word32]
	branch eax_29 == 0xA1E7E8<32> l00710BF6
l00710BE4:
	word32 ecx_193
	word32 edx_194
	branch fn006D5670(eax_29, 0xA1E7E8<32>, out ecx_193, out edx_194) == 0<32> l00710C01
l00710C01:
	word32 edx_190
	fn006E1DC0(out edx_190)
	return 0xFFFFFFFF<32>
l00710BF6:
	return fn00705340(edi, dwArg04)
l00710BA5:
	word32 ecx_83 = Mem82[dwArg04 + 8<32>:word32]
	word32 eax_107 = 0<32>
	word32 edi_119 = 1<32>
	branch ecx_83 >= 0<32> l00710BB9
l00710BB4:
	edi_119 = 0xFFFFFFFF<32>
	ecx_83 = -ecx_83
l00710BB9:
	word32 ecx_109 = ecx_83 - 1<32>
	branch ecx_109 < 0<32> l00710BD4
l00710BBE:
	word32 edx_103 = dwArg04 + 0xC<32> + ecx_109 * 2<32>
l00710BC2:
	ecx_109 = ecx_109 - 1<32>
	eax_107 = (eax_107 << 0xF<32>) + CONVERT(Mem91[edx_103:word16], word16, word32)
	edx_103 = edx_103 - 2<32>
	branch ecx_109 >= 0<32> l00710BC2
l00710BD4:
	return eax_107 *s edi_119
fn00710B80_exit:


word32 fn00710C20(word32 dwArg04, ptr32 & ecxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00702C30
// MayUse:  Stack +0004:[0..31]
// LiveOut: eax ecx
// Trashed: SCZO eax ecx Top
// Preserved: esp
fn00710C20_entry:
l00710C20:
	word32 eax_6 = Mem0[dwArg04 + 8<32>:word32]
	branch eax_6 != 0<32> l00710C2C
l00710C2C:
	word32 ecx_16 = CONVERT(CONVERT(eax_6 >= 0<32>, bool, int8), int8, uint32)
	word32 ecx_17 = ecx_16 - 1<32> + ecx_16
	ecxOut = ecx_17
	return ecx_17
l00710C2B:
	ecxOut = ecx
	return eax_6
fn00710C20_exit:


word32 fn00710CB0(word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10, ptr32 & ecxOut, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00705120
//      fn00736780
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31] Stack +0010:[0..31]
// LiveOut: eax ecx edx
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn00710CB0_entry:
l00710CB0:
	word32 dwLoc08_374 = 0<32>
	branch dwArg08 != 0<32> l00710CCF
l00710CCF:
	word32 dwLoc04_379
	word32 ebx_133
	word32 edi_19
	branch dwArg0C == 0<32> l00710CEC
l00710CEC:
	edi_19 = dwArg04
	ebx_133 = dwArg04 - 1<32> + dwArg08
	dwLoc04_379 = 0xFFFFFFFF<32>
l00710CD8:
	ebx_133 = dwArg04
	edi_19 = dwArg04 - 1<32> + dwArg08
	dwLoc04_379 = 1<32>
l00710CFC:
	word32 ebp_31 = dwArg10
	branch dwArg10 == 0<32> l00710D13
l00710D05:
	word32 eax_38 = 0<32> - (Mem30[edi_19:byte] <u 0x80<8>)
	dwArg10 = eax_38 + 1<32>
	ebp_31 = eax_38 + 1<32>
l00710D13:
	word32 eax_49 = -ebp_31
	word32 ecx_46 = -dwLoc04_379
	word32 esi_57 = 0<32>
	byte al_361 = SLICE(SEQ(SLICE(eax_49, word24, 8), 0<8> - (eax_49 == 0<32>)) & 0xFF<32>, byte, 0)
	branch dwArg08 <=u 0<32> l00710D3D
l00710D2B:
l00710D30:
	branch Mem56[edi_19:byte] != al_361 l00710D3D
l00710D34:
	esi_57 = esi_57 + 1<32>
	edi_19 = edi_19 + ecx_46
	branch esi_57 <u dwArg08 l00710D30
l00710D3D:
	word32 edi_213 = dwArg08 - esi_57
	branch ebp_31 == 0<32> l00710D4C
l00710D45:
	branch edi_213 >=u dwArg08 l00710D4C
l00710D49:
	edi_213 = edi_213 + 1<32>
l00710D4C:
	word32 edx_96 = SLICE((edi_213 * 8<32> + 0xE<32>) *u64 0x88888889<32>, word32, 32)
	branch edx_96 >>u 3<32> <=u 0x7FFFFFFF<32> l00710D71
l00710D71:
	branch edx_96 >>u 3<32> <= 0x7FFFFFFF<32> l00710D82
l00710D82:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg8 = <invalid>
	word32 stackArg12 = <invalid>
	word32 ecx_145
	word32 edx_567
	word32 edx_564
	word32 ecx_563
	word32 eax_144 = fn006DDD50(fn00723860(Mem56[0x00A1F414<p32>:word32] *s (edx_96 >>u 3<32>) + 3<32> + Mem56[0x00A1F410<p32>:word32] & 0xFFFFFFFC<32>, out ecx_563, out edx_564), stackArg8, stackArg12, out ecx_145, out edx_567)
	branch eax_144 != 0<32> l00710DC1
l00710DC1:
	word32 eax_163
	word32 esi_155 = 0<32>
	word32 ebp_159 = 1<32>
	word32 eax_160 = ebx_133
	branch edi_213 <=u 0<32> l00710E36
l00710E36:
	eax_163 = 0<32>
l00710DD0:
	word32 ebx_164 = eax_144 + 0xC<32>
	word32 ecx_186 = 0<32>
l00710DD3:
	byte cl_181 = SLICE(ecx_186, byte, 0)
	word32 edx_169 = CONVERT(Mem166[eax_160:byte], byte, word32)
	branch dwArg10 == 0<32> l00710DF0
l00710DDD:
	word32 edx_173 = (edx_169 ^ 0xFF<32>) + ebp_159
	ebp_159 = edx_173 >>u 8<32>
	edx_169 = edx_173 & 0xFF<32>
l00710DF0:
	ecx_186 = ecx_186 + 8<32>
	word32 esi_189 = esi_155 | edx_169 << cl_181
	branch ecx_186 <u 7<32> l00710E15
l00710DFC:
	Mem201[ebx_164:word16] = SLICE(esi_189 & 0x7FFF<32>, word16, 0)
	dwLoc08_374 = dwLoc08_374 + 1<32>
	ebx_164 = ebx_164 + 2<32>
	ecx_186 = ecx_186 - 7<32>
	esi_189 = esi_189 >>u 0xF<32> (alias)
l00710E15:
	word16 si_224 = SLICE(esi_189, word16, 0)
	eax_160 = eax_160 + dwLoc04_379
	edi_213 = edi_213 - 1<32>
	esi_155 = esi_189 (alias)
	branch edi_213 != 0<32> l00710DD3
l00710E1E:
	eax_163 = dwLoc08_374
	branch ecx_186 == 0<32> l00710E38
l00710E2A:
	Mem227[eax_144 + 0xC<32> + dwLoc08_374 * 2<32>:word16] = si_224
	eax_163 = dwLoc08_374 + 1<32>
l00710E38:
	branch dwArg10 == 0<32> l00710E41
l00710E3F:
	eax_163 = -eax_163
l00710E41:
	Mem243[eax_144 + 8<32>:word32] = eax_163
	word32 esi_244 = eax_163
	branch eax_163 >= 0<32> l00710E4C
l00710E4A:
	esi_244 = -eax_163
l00710E4C:
	word32 ecx_252 = esi_244
	branch esi_244 <= 0<32> l00710E7B
l00710E52:
	word32 edx_254 = eax_144 + 0xA<32> + esi_244 * 2<32>
l00710E56:
	branch Mem243[edx_254:word16] != 0<16> l00710E66
l00710E5C:
	ecx_252 = ecx_252 - 1<32>
	edx_254 = edx_254 - 2<32>
	branch ecx_252 > 0<32> l00710E56
l00710E66:
	branch ecx_252 == esi_244 l00710E77
l00710E6A:
	branch eax_163 >= 0<32> l00710E70
l00710E6E:
	ecx_252 = -ecx_252
l00710E70:
	Mem287[eax_144 + 8<32>:word32] = ecx_252
l00710E77:
l00710E7B:
	ecxOut = ecx_252
	edxOut = eax_144
	return eax_144
l00710DB9:
	ecxOut = ecx_145
	edxOut = eax_144
	return eax_144
l00710D73:
	word32 edx_317
	word32 ecx_319
	fn006E1210(out ecx_319, out edx_317)
	ecxOut = ecx_319
	edxOut = edx_317
	return 0<32>
l00710D65:
l00710D6C_thunk_fn006E1210:
	word32 edx_344
	word32 ecx_346
	word32 eax_345 = fn006E1210(out ecx_346, out edx_344)
	ecxOut = ecx_346
	edxOut = edx_344
	return eax_345
l00710CC2:
	word32 edx_352
	word32 ecx_354
	word32 eax_353 = fn00710690(dwArg08, out ecx_354, out edx_352)
	ecxOut = ecx_354
	edxOut = edx_352
	return eax_353
fn00710CB0_exit:


word32 fn00710E90(word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10, word32 dwArg14)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn007114E0
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31] Stack +0010:[0..31] Stack +0014:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx edx Top
// Preserved: ebp ebx edi esi esp
fn00710E90_entry:
l00710E90:
	word32 dwLoc18_368
	word32 dwLoc14_367
	word32 eax_6 = Mem0[dwArg04 + 8<32>:word32]
	word32 ebp_13 = 1<32>
	branch eax_6 >= 0<32> l00710ED4
l00710ED4:
	dwLoc14_367 = eax_6
	dwLoc18_368 = 0<32>
l00710EA6:
	dwLoc14_367 = -eax_6
	branch dwArg14 != 0<32> l00710ECE
l00710ECE:
	dwLoc18_368 = 1<32>
l00710EDC:
	word32 esi_150
	branch dwArg10 == 0<32> l00710EE9
l00710EE9:
	esi_150 = dwArg08 - 1<32> + dwArg0C
	ebp_13 = 0xFFFFFFFF<32>
l00710EE3:
	esi_150 = dwArg08
l00710EF8:
	word32 edi_135 = 0<32>
	word32 ebx_159 = 0<32>
	word32 dwLoc04_386 = 0<32>
	word32 dwLoc10_387 = 0<32>
	word32 dwLoc0C_388 = CONVERT(CONVERT(dwLoc18_368 != 0<32>, bool, int8), int8, uint32)
	branch dwLoc14_367 <= 0<32> l00710FFE
l00710F21:
	word32 dwArg04_391 = dwArg04 + 0xC<32>
	word32 ecx_139 = 0<32>
l00710F30:
	byte cl_88 = SLICE(ecx_139, byte, 0)
	word32 eax_75 = CONVERT(Mem72[dwArg04_391:word16], word16, word32)
	branch dwLoc18_368 == 0<32> l00710F55
l00710F3E:
	word32 eax_78 = (eax_75 ^ 0x7FFF<32>) + dwLoc0C_388
	dwLoc0C_388 = eax_78 >>u 0xF<32>
	eax_75 = eax_78 & 0x7FFF<32>
l00710F55:
	ecx_139 = ecx_139 + 0xF<32>
	ebx_159 = ebx_159 | eax_75 << cl_88
	branch dwLoc10_387 != dwLoc14_367 + 0xFFFFFFFF<32> l00710FA2
l00710F6B:
	word32 eax_104 = eax_75 << 0x11<32>
	word32 edi_106 = eax_104
	word32 edx_107 = 0<32>
	branch CONVERT(CONVERT(eax_104 < 0<32>, bool, int8), int8, uint32) != dwLoc18_368 l00710F98
l00710F82:
	branch edx_107 >=u 0xF<32> l00710F98
l00710F87:
	edi_106 = edi_106 * 2<32>
	edx_107 = edx_107 + 1<32>
	branch CONVERT(CONVERT(edi_106 < 0<32>, bool, int8), int8, uint32) == dwLoc18_368 l00710F82
l00710F98:
	edi_135 = dwLoc04_386
	ecx_139 = ecx_139 + 0xF<32> - edx_107
l00710FA2:
	branch ecx_139 <u 8<32> l00710FC3
l00710FA7:
	byte bl_149 = SLICE(ebx_159, byte, 0)
	branch edi_135 >=u dwArg0C l00711022
l00710FAD:
	Mem151[esi_150:byte] = bl_149
	edi_135 = edi_135 + 1<32>
	ecx_139 = ecx_139 - 8<32>
	esi_150 = esi_150 + ebp_13
	ebx_159 = ebx_159 >>u 8<32>
	dwLoc04_386 = edi_135
	ebx_159 = ebx_159 >>u 8<32> (alias)
	branch ecx_139 >=u 8<32> l00710FA7
l00710FC3:
	word32 v21_167 = dwLoc10_387 + 1<32>
	byte cl_273 = SLICE(ecx_139, byte, 0)
	dwLoc10_387 = v21_167
	dwArg04_391 = dwArg04_391 + 2<32>
	branch v21_167 < dwLoc14_367 l00710F30
l00710FDB:
	branch ecx_139 <=u 0<32> l00710FFE
l00710FFE:
	branch edi_135 != dwArg0C l00711041
l00711004:
	branch dwArg0C <=u 0<32> l00711041
l0071100B:
	branch dwArg14 == 0<32> l00711041
l00711041:
l00711012:
	branch 0<32> - (Mem185[esi_150 - ebp_13:byte] <u 0x80<8>) + 1<32> == dwLoc18_368 l00711069
l00710FDF:
	branch edi_135 >=u dwArg0C l00711022
l00711022:
	word32 ecx_604
	word32 edx_605
	fn006E0F80(Mem218[0x00A18598<p32>:word32], 0x8D87E8<32>, out ecx_604, out edx_605)
	return 0xFFFFFFFF<32>
l00710FE7:
	edi_135 = edi_135 + 1<32>
	branch dwLoc18_368 == 0<32> l00710FF8
l00710FF1:
	ebx_159 = ebx_159 | 0xFFFFFFFF<32> << cl_273
l00710FF8:
	Mem282[esi_150:byte] = SLICE(ebx_159, byte, 0)
	esi_150 = esi_150 + ebp_13
l00711045:
	word32 eax_290 = -dwLoc18_368
	byte al_360 = SLICE(SEQ(SLICE(eax_290, word24, 8), 0<8> - (eax_290 == 0<32>)) & 0xFF<32>, byte, 0)
	branch edi_135 >=u dwArg0C l00711069
l00711056:
	word32 ecx_305 = dwArg0C - edi_135
l00711060:
	Mem315[esi_150:byte] = al_360
	esi_150 = esi_150 + ebp_13
	ecx_305 = ecx_305 - 1<32>
	branch ecx_305 != 0<32> l00711060
l00711069:
	return 0<32>
l00710EB2:
	word32 ecx_602
	word32 edx_603
	fn006E0F80(Mem19[0x00A16B7C<p32>:word32], 0x8D8800<32>, out ecx_602, out edx_603)
	return 0xFFFFFFFF<32>
fn00710E90_exit:


