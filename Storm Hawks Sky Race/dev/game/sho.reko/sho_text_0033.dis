word32 fn00731A20(word32 dwArg04, word32 dwArg08, ptr32 & ebxOut, ptr32 & esiOut, ptr32 & ediOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00707640
//      fn00708DC0
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax ebx edi esi
// Trashed: SCZO eax ebx ecx edi edx esi Top
// Preserved: esp
fn00731A20_entry:
l00731A20:
	word32 ebx_106 = 0<32>
	branch dwArg04 == 0<32> l00731AC1
l00731A30:
	word32 eax_15 = Mem9[dwArg04 + 4<32>:word32]
	branch eax_15 == 0xA26EF0<32> l00731AF5
l00731A3E:
	word32 edx_323
	word32 ecx_322
	branch fn006D5670(eax_15, 0xA26EF0<32>, out ecx_322, out edx_323) != 0<32> l00731AF5
l00731AF5:
	word32 eax_35 = Mem34[dwArg04 + 0x18<32>:word32]
	Mem38[dwArg04 + 0x18<32>:word32] = dwArg08
	ebxOut = <invalid>
	esiOut = esi
	ediOut = <invalid>
	return eax_35
l00731A54:
	word32 edx_324
	word32 edi_325
	word32 eax_51 = fn006DF760(dwArg04, 0x8CCA78<32>, out edx_324, out edi_325)
	word32 esp_103 = fp - 0xC<32>
	branch eax_51 != 0<32> l00731A70
l00731A70:
	word32 eax_61 = Mem49[eax_51 + 4<32>:word32]
	branch eax_61 == 0xA1E7E8<32> l00731A8C
l00731A7A:
	word32 ecx_340
	word32 edx_341
	branch fn006D5670(eax_61, 0xA1E7E8<32>, out ecx_340, out edx_341) == 0<32> l00731A97
l00731A8C:
	word32 ecx_336
	word32 edx_337
	word32 esi_338
	word32 edi_339
	ebx_106 = fn007051A0(dwArg04, eax_51, out ecx_336, out edx_337, out esi_338, out edi_339)
l00731A97:
	word32 v12_97 = Mem96[eax_51:word32] + 0xFFFFFFFF<32>
	Mem98[eax_51:word32] = v12_97
	esp_103 = fp - 0xC<32>
	branch v12_97 != 0<32> l00731AA8
l00731A9C:
	word32 eax_101 = Mem98[eax_51 + 4<32>:word32]
	word32 esp_109
	word32 edx_111
	word32 ecx_112
	call Mem98[eax_101 + 0x18<32>:word32] (retsize: 4;)
		uses: eax:eax_101,ecx:ecx_112,edx:edx_111,Stack +0004:eax_51,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0018:dwArg04,Stack +001C:dwArg08
		defs: ecx:ecx_112,edx:edx_111,esp:esp_109
	esp_103 = esp_109 + 4<32>
l00731A69:
	word32 edx_327
	word32 ecx_326
	fn006E1160(out ecx_326, out edx_327)
l00731AA8:
	word32 esp_127 = esp_103 - 4<i32>
	Mem128[esp_127:word32] = Mem125[esp_103 + 0x14<32>:word32]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_329
	word32 edx_330
	word32 eax_134 = fn007050A0(stackArg4, out ecx_329, out edx_330)
	branch eax_134 != 0<32> l00731AC6
l00731AC6:
	Mem145[esp_127:word32] = eax_134
	Mem147[esp_127 - 4<i32>:word32] = 0x8CCA78<32>
	Mem149[esp_127 - 8<i32>:word32] = dwArg04
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_332
	word32 edx_333
	branch fn006DF800(stackArg4, dwArg04, dwArg08, out ecx_332, out edx_333) == 0<32> l00731ADE
l00731AD9:
	word32 ecx_342
	word32 edx_343
	fn006E1160(out ecx_342, out edx_343)
l00731ADE:
	word32 v14_169 = Mem149[eax_134:word32] + 0xFFFFFFFF<32>
	Mem170[eax_134:word32] = v14_169
	branch v14_169 != 0<32> l00731AC0
l00731AE3:
	word32 eax_173 = Mem170[eax_134 + 4<32>:word32]
	word32 ecx_174 = Mem170[eax_173 + 0x18<32>:word32]
	Mem177[esp_127:word32] = eax_134
	word32 edx_183
	word32 ecx_184
	call ecx_174 (retsize: 4;)
		uses: eax:eax_173,ecx:ecx_184,edx:edx_183,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: ecx:ecx_184,edx:edx_183
	ebxOut = <invalid>
	esiOut = esi
	ediOut = <invalid>
	return ebx_106
l00731ABB:
	word32 ecx_334
	word32 edx_335
	fn006E1160(out ecx_334, out edx_335)
l00731AC0:
	esi = Mem204[esp_103:word32]
l00731AC1:
	ebxOut = <invalid>
	esiOut = esi
	ediOut = <invalid>
	return ebx_106
fn00731A20_exit:


word32 fn00731B10(word32 edi, selector es, selector ds, word32 dwArg04, word32 dwArg08, word32 dwArg0C, ptr32 & edxOut, ptr32 & ebxOut, ptr32 & esiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E1780
//      fn006E8060
//      fn00708DC0
//      fn00731D30
// MayUse:  cs:[0..15] ds:[0..15] edi:[0..31] es:[0..15] fs:[0..15] gs:[0..15] ss:[0..15] Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut: eax ebx edx esi
// Trashed: SCZDOP eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn00731B10_entry:
	byte bArg0C_865 = SLICE(dwArg0C, byte, 0)
l00731B10:
	branch dwArg08 != 0<32> l00731B31
l00731B31:
	word32 edx_125
	word32 eax_11 = Mem6[dwArg08 + 4<32>:word32]
	branch eax_11 == 0xA26EF0<32> l00731C6D
l00731B42:
	word32 ecx_930
	word32 edx_931
	branch fn006D5670(eax_11, 0xA26EF0<32>, out ecx_930, out edx_931) != 0<32> l00731C6D
l00731C6D:
	word32 ebp_59
	word32 eax_40 = Mem39[dwArg08 + 4<32>:word32]
	branch eax_40 == 0xA26EF0<32> l00731C89
l00731C77:
	word32 edx_937
	word32 ecx_936
	branch fn006D5670(eax_40, 0xA26EF0<32>, out ecx_936, out edx_937) == 0<32> l00731C8E
l00731C8E:
	ebp_59 = 0<32>
l00731C89:
	ebp_59 = Mem63[dwArg08 + 8<32>:word32]
l00731C90:
	word32 edi_70 = Mem69[dwArg08 + 0x3C<32>:word32]
	branch ebp_59 != 0<32> l00731CB3
l00731CB3:
	word32 esi_129 = dwArg04
	branch (SLICE(dwArg0C, byte, 0) & 1<8>) == 0<8> l00731D04
l00731CC0:
	word32 eax_80 = Mem69[dwArg04 + 4<32>:word32]
	branch eax_80 == 0xA23B20<32> l00731CDC
l00731CCA:
	word32 ecx_942
	word32 edx_943
	branch fn006D5670(eax_80, 0xA23B20<32>, out ecx_942, out edx_943) == 0<32> l00731D04
l00731CDC:
	branch edi_70 == 0xA163B8<32> l00731D04
l00731D04:
	Mem106[dwArg04:word32] = Mem103[dwArg04:word32] + 1<32>
l00731CE4:
	word32 ecx_944
	word32 eax_124 = fn0071FB20(dwArg04, edi_70 + 0x14<32>, 0x8D1DC8<32>, out ecx_944, out edx_125)
	esi_129 = eax_124
	branch eax_124 != 0<32> l00731D07
l00731D07:
	word32 edx_153
	word32 eax_152 = fn006DEFC0(out edx_153)
	word32 v17_158 = Mem146[esi_129:word32] + 0xFFFFFFFF<32>
	Mem159[esi_129:word32] = v17_158
	branch v17_158 != 0<32> l00731D25
l00731D19:
	word32 edx_163 = Mem159[esi_129 + 4<32>:word32]
	call Mem159[edx_163 + 0x18<32>:word32] (retsize: 4;)
		uses: edx:edx_163,Stack +0004:esi_145,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C,Stack +001C:dwArg04,Stack +0020:dwArg08,Stack +0024:dwArg0C
		defs: edx:edx_169
l00731D25:
	edxOut = edx_153
	ebxOut = <invalid>
	esiOut = <invalid>
	return eax_152
l00731C97:
	word32 edx_197
	word32 ecx_941
	fn006E0F80(Mem69[0x00A17E2C<p32>:word32], 0x8DB028<32>, out ecx_941, out edx_197)
	edxOut = edx_197
	ebxOut = <invalid>
	esiOut = <invalid>
	return 0xFFFFFFFF<32>
l00731B58:
	word32 edi_932
	word32 eax_218 = fn006DF760(dwArg08, 0x8CC530<32>, out edx_125, out edi_932)
	branch eax_218 == 0<32> l00731CFC
l00731B70:
	word32 esp_286
	word32 edi_251
	word32 esp_250
	word32 eax_240
	branch (bArg0C_865 & 1<8>) == 0<8> l00731BA4
l00731BA4:
	word32 edi_933
	eax_240 = fn006DDDB0(eax_218, edx_125, eax_218, dwArg08, edi, es, ds, dwArg04, out edx_125, out edi_933)
	esp_250 = fp - 0x10<32>
l00731B77:
	edi_251 = dwArg04
	word32 eax_252 = Mem216[dwArg04 + 4<32>:word32]
	branch eax_252 == 0xA23B20<32> l00731B9F
l00731B85:
	word32 ecx_934
	branch fn006D5670(eax_252, 0xA23B20<32>, out ecx_934, out edx_125) != 0<32> l00731B9F
l00731B9F:
	Mem273[dwArg04:word32] = Mem271[dwArg04:word32] + 1<32>
	esp_286 = fp - 0x10<32>
l00731B97:
	word32 edi_935
	eax_240 = fn006DDF70(dwArg04, out edx_125, out edi_935)
	esp_250 = fp - 0x14<32>
l00731BAE:
	edi_251 = eax_240
	esp_286 = esp_250 + 4<32>
l00731BB3:
	branch edi_251 != 0<32> l00731BD0
l00731BD0:
	word32 esp_294 = esp_286 - 4<i32>
	Mem295[esp_294:word32] = edi_251
	Mem297[esp_294 - 4<i32>:word32] = 1<32>
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_939
	word32 esi_940
	word32 eax_329 = fn006DFF80(stackArg4, out ecx_939, out edx_125, out esi_940)
	word32 esp_335 = esp_294 + 4<32>
	branch eax_329 != 0<32> l00731C0B
l00731C0B:
	Mem340[esp_294:word32] = 0<32>
	Mem342[esp_294 - 4<i32>:word32] = eax_329
	Mem344[esp_294 - 8<i32>:word32] = eax_218
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_946
	word32 esi_947
	word32 edi_948
	word32 eax_346 = fn00707680(stackArg4, dwArg04, dwArg08, out ecx_946, out edx_125, out esi_947, out edi_948)
	word32 v19_352 = Mem344[eax_329:word32] + 0xFFFFFFFF<32>
	Mem353[eax_329:word32] = v19_352
	word32 esp_351 = esp_294 + 4<32>
	branch v19_352 != 0<32> l00731C2A
l00731C1E:
	word32 edx_357 = Mem353[eax_329 + 4<32>:word32]
	word32 eax_358 = Mem353[edx_357 + 0x18<32>:word32]
	Mem360[esp_294:word32] = eax_329
	word32 esp_361
	call eax_358 (retsize: 4;)
		uses: edx:edx_357,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C
		defs: edx:edx_363,esp:esp_361
	esp_351 = esp_361 + 4<32>
l00731C2A:
	word32 v21_371 = Mem370[edi_251:word32] + 0xFFFFFFFF<32>
	Mem372[edi_251:word32] = v21_371
	branch v21_371 != 0<32> l00731C3B
l00731C2F:
	word32 ecx_375 = Mem372[edi_251 + 4<32>:word32]
	word32 edx_376 = Mem372[ecx_375 + 0x18<32>:word32]
	Mem379[esp_351 - 4<i32>:word32] = edi_251
	word32 esp_390
	call edx_376 (retsize: 4;)
		uses: ecx:ecx_375,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C
		defs: edx:edx_392,esp:esp_390
	esp_351 = esp_390 + 4<32>
l00731C3B:
	word32 v23_400 = Mem399[eax_218:word32] + 0xFFFFFFFF<32>
	Mem401[eax_218:word32] = v23_400
	branch v23_400 != 0<32> l00731C4C
l00731C40:
	word32 eax_404 = Mem401[eax_218 + 4<32>:word32]
	word32 ecx_405 = Mem401[eax_404 + 0x18<32>:word32]
	Mem408[esp_351 - 4<i32>:word32] = eax_218
	word32 esp_419
	call ecx_405 (retsize: 4;)
		uses: eax:eax_404,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C
		defs: edx:edx_421,esp:esp_419
	esp_351 = esp_419 + 4<32>
l00731C4C:
	branch eax_346 == 0<32> l00731CFC
l00731CFC:
	edxOut = edx_125
	ebxOut = <invalid>
	esiOut = <invalid>
	return 0xFFFFFFFF<32>
l00731C54:
	word32 v24_450 = Mem434[eax_346:word32] + 0xFFFFFFFF<32>
	Mem451[eax_346:word32] = v24_450
	branch v24_450 != 0<32> l00731C66
l00731C5A:
	word32 edx_454 = Mem451[eax_346 + 4<32>:word32]
	word32 eax_455 = Mem451[edx_454 + 0x18<32>:word32]
	Mem457[esp_351 - 4<i32>:word32] = eax_346
	call eax_455 (retsize: 4;)
		uses: edx:edx_454,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C
		defs: edx:edx_470
l00731C66:
	edxOut = edx_125
	ebxOut = <invalid>
	esiOut = <invalid>
	return 0<32>
l00731BE1:
	word32 v16_489 = Mem297[edi_251:word32] + 0xFFFFFFFF<32>
	Mem490[edi_251:word32] = v16_489
	branch v16_489 != 0<32> l00731BF2
l00731BE6:
	word32 ecx_493 = Mem490[edi_251 + 4<32>:word32]
	word32 edx_494 = Mem490[ecx_493 + 0x18<32>:word32]
	Mem496[esp_294:word32] = edi_251
	word32 esp_497
	call edx_494 (retsize: 4;)
		uses: ecx:ecx_493,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C
		defs: edx:edx_499,esp:esp_497
	esp_335 = esp_497 + 4<32>
l00731BF2:
	word32 v18_507 = Mem506[eax_218:word32] + 0xFFFFFFFF<32>
	Mem508[eax_218:word32] = v18_507
	branch v18_507 != 0<32> l00731C03
l00731BF7:
	word32 eax_511 = Mem508[eax_218 + 4<32>:word32]
	word32 ecx_512 = Mem508[eax_511 + 0x18<32>:word32]
	Mem515[esp_335 - 4<i32>:word32] = eax_218
	call ecx_512 (retsize: 4;)
		uses: eax:eax_511,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C
		defs: edx:edx_528
l00731BB7:
	word32 v12_536 = Mem534[eax_218:word32] + 0xFFFFFFFF<32>
	Mem537[eax_218:word32] = v12_536
	branch v12_536 != 0<32> l00731C03
l00731C03:
	edxOut = edx_125
	ebxOut = <invalid>
	esiOut = <invalid>
	return 0xFFFFFFFF<32>
l00731BBC:
	word32 edx_557 = Mem537[eax_218 + 4<32>:word32]
	word32 eax_558 = Mem537[edx_557 + 0x18<32>:word32]
	Mem560[esp_286 - 4<i32>:word32] = eax_218
	word32 edx_563
	call eax_558 (retsize: 4;)
		uses: edx:edx_557,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C
		defs: edx:edx_563
	edxOut = edx_563
	ebxOut = <invalid>
	esiOut = <invalid>
	return 0xFFFFFFFF<32>
l00731B19:
	word32 edx_586
	word32 ecx_929
	fn006E0F80(Mem6[0x00A16B7C<p32>:word32], 0x8DB234<32>, out ecx_929, out edx_586)
	edxOut = edx_586
	ebxOut = <invalid>
	esiOut = <invalid>
	return 0xFFFFFFFF<32>
fn00731B10_exit:


word32 fn00731D30(word32 dwArg04, word32 dwArg08, ptr32 & edxOut, ptr32 & esiOut, ptr32 & ediOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E1780
//      fn006E7F60
//      fn006E8060
//      fn00707640
//      fn00708DC0
//      fn00716A00
//      fn0072F830
//      fn0072FBB0
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax edi edx esi
// Trashed: SCZO eax ecx edi edx esi Top
// Preserved: esp
fn00731D30_entry:
l00731D30:
	branch dwArg08 != 0<32> l00731D5A
l00731D5A:
	word32 eax_11 = Mem6[dwArg08 + 4<32>:word32]
	branch eax_11 == 0xA26EF0<32> l00731DBD
l00731D64:
	word32 ecx_275
	branch fn006D5670(eax_11, 0xA26EF0<32>, out ecx_275, out edx) != 0<32> l00731DBD
l00731DBD:
	word32 eax_31 = Mem30[dwArg08 + 4<32>:word32]
	branch eax_31 == 0xA26EF0<32> l00731DD9
l00731DC7:
	word32 ecx_281
	word32 edx_282
	branch fn006D5670(eax_31, 0xA26EF0<32>, out ecx_281, out edx_282) == 0<32> l00731DE0
l00731DD9:
	word32 edi_52 = Mem51[dwArg08 + 8<32>:word32]
	branch edi_52 != 0<32> l00731DF9
l00731DF9:
	fputs(dwArg04, edi_52)
	edxOut = dwArg04
	esiOut = <invalid>
	ediOut = <invalid>
	return 0<32>
l00731DE0:
	word32 edx_83
	word32 ecx_283
	fn006E0F80(Mem69[0x00A17E2C<p32>:word32], 0x8DB028<32>, out ecx_283, out edx_83)
	edxOut = edx_83
	esiOut = <invalid>
	ediOut = <invalid>
	return 0xFFFFFFFF<32>
l00731D76:
	branch fn006E0FC0() != 0<32> l00731D55
l00731D7F:
	word32 edx_105
	word32 ecx_276
	word32 eax_103 = fn006ECAC0(dwArg04, out ecx_276, out edx_105)
	branch eax_103 != 0<32> l00731D99
l00731D99:
	word32 ebx_279
	word32 esi_280
	word32 edx_122
	word32 eax_120 = fn00731B10(dwArg08, es, ds, eax_103, dwArg04, dwArg08, out edx_122, out ebx_279, out esi_280)
	word32 v11_126 = Mem118[eax_103:word32] + 0xFFFFFFFF<32>
	Mem127[eax_103:word32] = v11_126
	branch v11_126 != 0<32> l00731DB8
l00731DAC:
	word32 edx_131 = Mem127[eax_103 + 4<32>:word32]
	word32 ecx_137
	call Mem127[edx_131 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_137,edx:edx_131,Stack +0004:eax_103,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0014:dwArg04,Stack +0018:dwArg08
		defs: ecx:ecx_137,edx:edx_138
l00731DB8:
	edxOut = edx_122
	esiOut = <invalid>
	ediOut = <invalid>
	return eax_120
l00731D93:
	edxOut = edx_105
	esiOut = <invalid>
	ediOut = <invalid>
	return 0xFFFFFFFF<32>
l00731D39:
	branch fn006E0FC0() != 0<32> l00731D55
l00731D42:
	word32 ecx_274
	fn006E0F80(Mem6[0x00A18720<p32>:word32], 0x8DB250<32>, out ecx_274, out edx)
l00731D55:
	edxOut = edx
	esiOut = <invalid>
	ediOut = <invalid>
	return 0xFFFFFFFF<32>
fn00731D30_exit:


word32 fn00731F90(word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E1AB0
//      fn0072F830
//      fn00753600
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31] Stack +0010:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ecx edx Top
// Preserved: ebp ebx edi esi esp
fn00731F90_entry:
l00731F90:
	word32 edi_113 = 0<32>
	word32 esi_117 = 0<32>
	branch dwArg10 == 0<32> l00732000
l00731FA7:
	word32 eax_21 = Mem19[dwArg10 + 4<32>:word32]
	branch eax_21 == 0xA26EF0<32> l00731FD9
l00731FB1:
	word32 edx_30
	word32 ecx_431
	branch fn006D5670(eax_21, 0xA26EF0<32>, out ecx_431, out edx_30) != 0<32> l00731FD5
l00731FD5:
l00731FD9:
	branch Mem41[dwArg10 + 0x30<32>:word32] != 0<32> l00731FFA
l00731FFA:
	edi_113 = Mem41[dwArg10 + 0x34<32>:word32]
	esi_117 = Mem41[dwArg10 + 0x38<32>:word32]
l00732000:
	word32 ecx_137 = dwArg10
	word32 esp_105 = fp - 20<i32>
	branch dwArg08 <= 1<32> l00732093
l0073201B:
l00732020:
	Mem70[esp_105 - 4<i32>:word32] = dwArg0C
	word32 esp_76
	word32 ecx_77
	word32 eax_101
	call MSVCR80.dll!getc (retsize: 4;)
		uses: ecx:ecx_71,Stack +0008:dwArg04,Stack +000C:dwArg08 - 1<32>,Stack +0010:dwArg0C,Stack +0014:dwArg10
		defs: eax:eax_78,ecx:ecx_77,esp:esp_76
	esp_105 = esp_76 + 4<32>
	branch eax_101 == 0xFFFFFFFF<32> l00732088
l0073202B:
	branch esi_117 == 0<32> l00732049
l0073202F:
	esi_117 = 0<32>
	branch eax_101 != 0xA<32> l00732046
l00732046:
	edi_113 = edi_113 | 1<32>
l00732036:
	Mem95[esp_76:word32] = dwArg0C
	word32 esp_99
	call MSVCR80.dll!getc (retsize: 4;)
		uses: ecx:ecx_77,Stack +0008:dwArg04,Stack +000C:dwArg08 - 1<32>,Stack +0010:dwArg0C,Stack +0014:dwArg10
		defs: eax:eax_101,esp:esp_99
	edi_113 = edi_113 | 4<32>
	esp_105 = esp_99 + 4<32>
	branch eax_101 == 0xFFFFFFFF<32> l0073208F
l00732044:
l00732049:
	branch eax_101 != 0xD<32> l0073205A
l0073205A:
	branch eax_101 != 0xA<32> l00732062
l0073205F:
	edi_113 = edi_113 | 2<32>
l0073204E:
	esi_117 = 1<32>
	eax_101 = 0xA<32> (alias)
l00732062:
	word32 ecx_123 = Mem122[esp_105 + 0x10<32>:word32]
	Mem127[ecx_123:byte] = SLICE(eax_101, byte, 0)
	Mem134[esp_105 + 0x10<32>:word32] = ecx_123 + 1<32>
	branch eax_101 == 0xA<32> l00732083
l00732074:
	word32 ecx_136 = Mem134[esp_105 + 0x1C<32>:word32]
	Mem140[esp_105 + 0x1C<32>:word32] = ecx_136 - 1<32>
	ecx_137 = ecx_136 - 1<32>
	branch ecx_136 > 1<32> l00732020
l00732083:
	branch eax_101 != 0xFFFFFFFF<32> l0073208F
l00732088:
	branch esi_117 == 0<32> l0073208F
l0073208C:
	edi_113 = edi_113 | 1<32>
l0073208F:
	ecx_137 = Mem160[esp_105 + 0x24<32>:word32]
l00732093:
	Mem171[dwArg04:byte] = 0<8>
	word32 edx_170 = dwArg04
	branch ecx_137 == 0<32> l007320B8
l007320B8:
	branch esi_117 == 0<32> l007320D2
l007320BC:
	word32 esp_204
	word32 ecx_205
	word32 eax_206
	call MSVCR80.dll!getc (retsize: 4;)
		uses: ecx:ecx_164,Stack +0004:dwArg0C,Stack +0008:dwArg04,Stack +000C:dwArg08 - 1<32>,Stack +0010:dwArg0C,Stack +0014:dwArg10,Stack +0020:dwArg04,Stack +0024:dwArg08 - 1<32>,Stack +0028:dwArg0C,Stack +002C:dwArg10
		defs: eax:eax_206,ecx:ecx_205,edx:edx_207,esp:esp_204
	branch eax_206 == 0xA<32> l007320D2
l007320C7:
	Mem214[esp_204:word32] = dwArg0C
	Mem216[esp_204 - 4<i32>:word32] = eax_206
	call MSVCR80.dll!ungetc (retsize: 4;)
		uses: ecx:ecx_205,Stack +0008:dwArg04,Stack +000C:dwArg08 - 1<32>,Stack +0010:dwArg0C,Stack +0014:dwArg10
		defs: edx:edx_220
l007320D2:
	edxOut = edx_170
	return dwArg04
l0073209E:
	Mem246[ecx_137 + 0x34<32>:word32] = edi_113
	Mem247[ecx_137 + 0x38<32>:word32] = esi_117
	edxOut = dwArg04
	return dwArg04
l00731FDE:
	word32 eax_276 = fgets(dwArg04, dwArg08, dwArg0C)
	edxOut = dwArg08
	return eax_276
l00731FC3:
	Mem288[_errno():word32] = 6<32>
	edxOut = edx_30
	return 0<32>
fn00731F90_exit:


word32 fn007331D0(word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E9BD0
//      fn007367D0
//      fn0073D140
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31] Stack +0010:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ecx edx Top
// Preserved: esp
fn007331D0_entry:
l007331D0:
	word32 ecx_56
	word32 edx_57
	word32 eax_6 = fn00723860(0x18<32>, out ecx_56, out edx_57)
	branch eax_6 != 0<32> l007331E3
l007331E3:
	Mem19[eax_6 + 8<32>:word32] = dwArg04
	Mem21[eax_6 + 0xC<32>:word32] = dwArg08
	Mem23[eax_6 + 0x10<32>:word32] = dwArg0C
	Mem24[eax_6 + 4<32>:word32] = 0xA27190<32>
	Mem25[eax_6:word32] = 1<32>
	Mem26[eax_6 + 0x14<32>:word32] = dwArg10
	edxOut = dwArg10
	return eax_6
l007331DE:
l007331DE_thunk_fn006E1210:
	word32 edx_30
	word32 ecx_58
	word32 eax_28 = fn006E1210(out ecx_58, out edx_30)
	edxOut = edx_30
	return eax_28
fn007331D0_exit:


word32 fn00733250(word32 dwArg04, ptr32 & rLoc1Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00735890
// MayUse:  Stack +0004:[0..31]
// LiveOut: ecx FPU -1
// Trashed: SCZO eax ecx edx esi FPU -1 Top
// Preserved: esp
fn00733250_entry:
l00733250:
	word32 eax_8 = Mem6[dwArg04 + 4<32>:word32]
	branch eax_8 == 0xA27190<32> l0073327C
l0073325F:
	word32 edx_85
	branch fn006D5670(eax_8, 0xA27190<32>, out ecx, out edx_85) != 0<32> l0073327C
l0073327C:
	rLoc1Out = Mem29[dwArg04 + 8<32>:real64]
	return ecx
l00733271:
	real64 rLoc1_86
	word32 ecx_39 = fn006FF3E0(dwArg04, out rLoc1_86)
	rLoc1Out = rLoc1
	return ecx_39
fn00733250_exit:


word32 fn00733290(word32 dwArg04, ptr32 & rLoc1Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00735890
// MayUse:  Stack +0004:[0..31]
// LiveOut: ecx FPU -1
// Trashed: SCZO eax ecx edx FPU -1 Top
// Preserved: esi esp
fn00733290_entry:
l00733290:
	word32 eax_8 = Mem6[dwArg04 + 4<32>:word32]
	branch eax_8 == 0xA27190<32> l007332B5
l0073329F:
	word32 edx_70
	branch fn006D5670(eax_8, 0xA27190<32>, out ecx, out edx_70) != 0<32> l007332B5
l007332B5:
	rLoc1Out = Mem29[dwArg04 + 0x10<32>:real64]
	return ecx
l007332B1:
	rLoc1Out = 0.0
	return ecx
fn00733290_exit:


word32 fn007332C0(word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E5C60
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx edx esi Top
// Preserved: esp
fn007332C0_entry:
l007332C0:
	word32 eax_8 = Mem6[dwArg08 + 4<32>:word32]
	branch eax_8 == 0xA27190<32> l007332F9
l007332CF:
	word32 ecx_102
	word32 edx_103
	branch fn006D5670(eax_8, 0xA27190<32>, out ecx_102, out edx_103) != 0<32> l007332F9
l007332F9:
	word32 edx_31 = Mem27[dwArg08 + 0xC<32>:word32]
	Mem32[dwArg04:word32] = Mem27[dwArg08 + 8<32>:word32]
	word32 ecx_33 = Mem32[dwArg08 + 0x10<32>:word32]
	Mem34[dwArg04 + 4<32>:word32] = edx_31
	word32 edx_35 = Mem34[dwArg08 + 0x14<32>:word32]
	Mem36[dwArg04 + 8<32>:word32] = ecx_33
	Mem37[dwArg04 + 0xC<32>:word32] = edx_35
	return
l007332E1:
	real64 rRet0
	fn006FF3E0(dwArg08, out rRet0)
	Mem54[dwArg04:real64] = rRet0
	Mem60[dwArg04 + 8<32>:real64] = 0.0
	return
fn007332C0_exit:


word32 fn00734B00(word32 eax)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00734BB0
// MayUse:  eax:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx edx Top
// Preserved: edi esi esp
fn00734B00_entry:
l00734B00:
	word32 edx_24 = Mem0[0x00A27250<p32>:word32]
	byte cl_22 = Mem0[edx_24:byte]
	word32 esi_16 = eax
	word32 eax_17 = 1<32>
	branch Mem12[CONVERT(cl_22, byte, word32) + 0xA6DCE0<32>:byte] != 0<8> l00734B32
l00734B1D:
	branch cl_22 == 0<8> l00734B32
l00734B21:
	Mem28[CONVERT(cl_22, byte, word32) + 0xA6DCE0<32>:byte] = 1<8>
	edx_24 = edx_24 + 1<32>
	cl_22 = Mem28[edx_24:byte]
	branch cl_22 != 0<8> l00734B21
l00734B32:
	byte cl_36 = Mem35[eax:byte]
	branch cl_36 == 0<8> l00734B59
l00734B38:
l00734B40:
	esi_16 = esi_16 + 1<32>
	branch Mem35[CONVERT(cl_36, byte, word32) + 0xA6DCE0<32>:byte] == 0<8> l00734B57
l00734B57:
	eax_17 = 0<32>
l00734B59:
	return eax_17
l00734B4E:
	cl_36 = Mem35[esi_16:byte]
	branch cl_36 != 0<8> l00734B40
l00734B54:
	return 1<32>
fn00734B00_exit:


void fn00734B60(word32 eax)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00734BB0
// MayUse:  eax:[0..31]
// LiveOut:
// Trashed: SCZO eax edi esi Top
// Preserved: esp
fn00734B60_entry:
l00734B60:
	word32 esi_8 = Mem6[eax + 8<32>:word32]
	word32 esi_42 = esi_8 - 1<32>
	branch esi_8 < 1<32> l00734BA0
l00734B69:
	word32 edi_16 = eax + 0xC<32> + (esi_8 - 1<32>) * 4<32>
l00734B70:
	word32 eax_19 = Mem18[edi_16:word32]
	branch eax_19 == 0<32> l00734B7F
l00734B76:
	branch Mem18[eax_19 + 4<32>:word32] == 0xA1B450<32> l00734B8C
l00734B7F:
	fn006E86F0(0x8DB820<32>)
l00734B8C:
	word32 edx_90
	fn006EC890(edi_16, out edx_90)
	esi_42 = esi_42 - 1<32>
	edi_16 = edi_16 - 4<32>
	branch esi_42 >= 0<32> l00734B70
l00734B9F:
l00734BA0:
	return
fn00734B60_exit:


word32 fn00734BB0(word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10, word32 dwArg14, word32 dwArg18, word32 dwArg1C, word32 dwArg20, word32 dwArg24, word32 dwArg28, word32 dwArg2C, word32 dwArg30, word32 dwArg34, word32 dwArg38, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00728BE0
//      fn007367D0
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31] Stack +0010:[0..31] Stack +0014:[0..31] Stack +0018:[0..31] Stack +001C:[0..31] Stack +0020:[0..31] Stack +0024:[0..31] Stack +0028:[0..31] Stack +002C:[0..31] Stack +0030:[0..31] Stack +0034:[0..31] Stack +0038:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn00734BB0_entry:
l00734BB0:
	word32 edx_279
	word32 eax_283
	branch dwArg04 < 0<32> l00734E7E
l00734BC2:
	branch dwArg08 < 0<32> l00734E7E
l00734BCD:
	branch dwArg14 == 0<32> l00734E7E
l00734BD8:
	branch dwArg18 == 0<32> l00734E7E
l00734BE4:
	word32 eax_28 = Mem18[dwArg18 + 4<32>:word32]
	branch eax_28 == 0xA16588<32> l00734C04
l00734BEE:
	word32 ecx_841
	word32 edx_842
	branch fn006D5670(eax_28, 0xA16588<32>, out ecx_841, out edx_842) == 0<32> l00734E7E
l00734C04:
	branch dwArg1C == 0<32> l00734E7E
l00734C10:
	word32 eax_52 = Mem47[dwArg1C + 4<32>:word32]
	branch eax_52 == 0xA16588<32> l00734C30
l00734C1A:
	word32 edx_844
	word32 ecx_843
	branch fn006D5670(eax_52, 0xA16588<32>, out ecx_843, out edx_844) == 0<32> l00734E7E
l00734C30:
	branch dwArg20 == 0<32> l00734E7E
l00734C3C:
	word32 eax_76 = Mem71[dwArg20 + 4<32>:word32]
	branch eax_76 == 0xA16588<32> l00734C5C
l00734C46:
	word32 ecx_845
	word32 edx_846
	branch fn006D5670(eax_76, 0xA16588<32>, out ecx_845, out edx_846) == 0<32> l00734E7E
l00734C5C:
	branch dwArg24 == 0<32> l00734E7E
l00734C68:
	word32 eax_100 = Mem95[dwArg24 + 4<32>:word32]
	branch eax_100 == 0xA16588<32> l00734C88
l00734C72:
	word32 ecx_847
	word32 edx_848
	branch fn006D5670(eax_100, 0xA16588<32>, out ecx_847, out edx_848) == 0<32> l00734E7E
l00734C88:
	branch dwArg28 == 0<32> l00734E7E
l00734C94:
	word32 eax_124 = Mem119[dwArg28 + 4<32>:word32]
	branch eax_124 == 0xA16588<32> l00734CB4
l00734C9E:
	word32 ecx_849
	word32 edx_850
	branch fn006D5670(eax_124, 0xA16588<32>, out ecx_849, out edx_850) == 0<32> l00734E7E
l00734CB4:
	branch dwArg30 == 0<32> l00734E7E
l00734CC0:
	word32 eax_148 = Mem143[dwArg30 + 4<32>:word32]
	branch eax_148 == 0xA1B450<32> l00734CE0
l00734CCA:
	word32 edx_852
	word32 ecx_851
	branch fn006D5670(eax_148, 0xA1B450<32>, out ecx_851, out edx_852) == 0<32> l00734E7E
l00734CE0:
	branch dwArg2C == 0<32> l00734E7E
l00734CEC:
	word32 eax_172 = Mem167[dwArg2C + 4<32>:word32]
	branch eax_172 == 0xA1B450<32> l00734D0C
l00734CF6:
	word32 edx_854
	word32 ecx_853
	branch fn006D5670(eax_172, 0xA1B450<32>, out ecx_853, out edx_854) == 0<32> l00734E7E
l00734D0C:
	branch dwArg38 == 0<32> l00734E7E
l00734D18:
	word32 eax_196 = Mem191[dwArg38 + 4<32>:word32]
	branch eax_196 == 0xA1B450<32> l00734D38
l00734D22:
	word32 edx_856
	word32 ecx_855
	branch fn006D5670(eax_196, 0xA1B450<32>, out ecx_855, out edx_856) == 0<32> l00734E7E
l00734D38:
	branch fn00701950(dwArg14) == 0<32> l00734E7E
l00734E7E:
	fn006E1DC0(out edx_279)
	eax_283 = 0<32>
l00734D4D:
	fn00734B60(dwArg1C)
	fn00734B60(dwArg20)
	fn00734B60(dwArg24)
	fn00734B60(dwArg28)
	word32 edx_858
	word32 ecx_857
	word32 eax_317 = fn006DFE20(dwArg18, out ecx_857, out edx_858)
	word32 esi_324 = eax_317 - 1<32>
	branch eax_317 < 1<32> l00734DD9
l00734D7D:
	word32 dwLoc08_725 = dwArg18 + 0xC<32> + (eax_317 - 1<32>) * 4<32>
l00734D85:
	word32 eax_340 = fn006DFE60(dwArg18, dwArg04)
	word32 ecx_345 = Mem335[eax_340 + 4<32>:word32]
	branch ecx_345 == 0xA1B450<32> l00734DB4
l00734D9E:
	word32 edx_862
	word32 ecx_861
	branch fn006D5670(ecx_345, 0xA1B450<32>, out ecx_861, out edx_862) == 0<32> l00734DCD
l00734DB0:
l00734DB4:
	branch fn00734B00(eax_340 + 0x14<32>) == 0<32> l00734DCD
l00734DC0:
	word32 edx_863
	fn006EC890(dwLoc08_725, out edx_863)
l00734DCD:
	dwLoc08_725 = dwLoc08_725 - 4<32>
	esi_324 = esi_324 - 1<32>
	branch esi_324 >= 0<32> l00734D85
l00734DD9:
	word32 edx_860
	word32 ecx_859
	eax_283 = fn006DDD30(fn00723860(Mem406[0x00A27468<p32>:word32], out ecx_859, out edx_860), dwArg04, out edx_279)
	branch eax_283 == 0<32> l00734E8F
l00734E8F:
	edxOut = edx_279
	return eax_283
l00734DFD:
	Mem458[eax_283 + 8<32>:word32] = dwArg04
	Mem460[eax_283 + 0x10<32>:word32] = dwArg0C
	Mem462[eax_283 + 0xC<32>:word32] = dwArg08
	Mem464[eax_283 + 0x14<32>:word32] = dwArg10
	Mem466[dwArg14:word32] = Mem464[dwArg14:word32] + 1<32>
	Mem467[eax_283 + 0x18<32>:word32] = dwArg14
	Mem469[dwArg18:word32] = Mem467[dwArg18:word32] + 1<32>
	Mem471[eax_283 + 0x1C<32>:word32] = dwArg18
	Mem473[dwArg1C:word32] = Mem471[dwArg1C:word32] + 1<32>
	Mem474[eax_283 + 0x20<32>:word32] = dwArg1C
	Mem477[dwArg20:word32] = Mem474[dwArg20:word32] + 1<32>
	Mem478[eax_283 + 0x24<32>:word32] = dwArg20
	Mem481[dwArg24:word32] = Mem478[dwArg24:word32] + 1<32>
	Mem482[eax_283 + 0x28<32>:word32] = dwArg24
	Mem484[dwArg28:word32] = Mem482[dwArg28:word32] + 1<32>
	Mem486[eax_283 + 0x2C<32>:word32] = dwArg28
	Mem488[dwArg2C:word32] = Mem486[dwArg2C:word32] + 1<32>
	Mem489[eax_283 + 0x30<32>:word32] = dwArg2C
	Mem492[dwArg30:word32] = Mem489[dwArg30:word32] + 1<32>
	Mem495[eax_283 + 0x34<32>:word32] = dwArg30
	Mem499[eax_283 + 0x38<32>:word32] = dwArg34
	Mem501[dwArg38:word32] = Mem499[dwArg38:word32] + 1<32>
	Mem504[eax_283 + 0x3C<32>:word32] = dwArg38
	Mem505[eax_283 + 0x40<32>:word32] = 0<32>
	edxOut = dwArg10
	return eax_283
fn00734BB0_exit:


word32 fn00735550(word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00708DC0
//      fn0072F770
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ebx ecx edx Top
// Preserved: edi esi esp
fn00735550_entry:
l00735550:
	int64 edx_eax_21 = CONVERT(fn006ECC00(Mem9[dwArg04 + 0x3C<32>:word32]), word32, int64)
	word32 ecx_122
	word32 edx_123
	word32 esi_124
	word32 ecx_40 = fn006ECC50(Mem13[dwArg04 + 0x3C<32>:word32], out ecx_122, out edx_123, out esi_124)
	word32 edx_37 = 0<32>
	word32 esi_38 = (SLICE(edx_eax_21, word32, 0) - SLICE(edx_eax_21, word32, 32) >> 1<32>) - 1<32>
	word32 eax_41 = Mem27[dwArg04 + 0x38<32>:word32]
	branch esi_38 < 0<32> l0073559D
l0073557E:
l00735583:
	edx_37 = edx_37 + CONVERT(Mem46[ecx_40:byte], byte, word32)
	word32 ecx_52 = ecx_40 + 1<32>
	branch edx_37 > dwArg08 l0073559C
l0073558F:
	eax_41 = eax_41 + CONVERT(Mem46[ecx_52:byte], byte, word32)
	ecx_40 = ecx_52 + 1<32>
	esi_38 = esi_38 - 1<32>
	branch esi_38 >= 0<32> l00735583
l0073559C:
l0073559D:
	return eax_41
fn00735550_exit:


word32 fn007355A0(word32 dwArg04, word32 dwArg08, word32 dwArg0C)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00707430
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx edx Top
// Preserved: ebp ebx edi esi esp
fn007355A0_entry:
l007355A0:
	word32 eax_18 = Mem16[dwArg04 + 0x3C<32>:word32]
	int64 edx_eax_22 = CONVERT(Mem16[eax_18 + 8<32>:word32], word32, int64)
	Mem32[dwArg0C:word32] = 0<32>
	word32 eax_25 = SLICE(edx_eax_22, word32, 0) - SLICE(edx_eax_22, word32, 32)
	word32 ecx_103 = eax_18 + 0x14<32>
	word32 edx_28 = eax_25 >> 1<32>
	word32 esi_100 = 0<32>
	branch eax_25 >> 1<32> <= 0<32> l007355F4
l007355CB:
l007355D0:
	word32 edi_37 = CONVERT(Mem34[ecx_103:byte], byte, word32) + esi_100
	branch edi_37 > dwArg08 l007355F4
l007355D9:
	word32 ecx_41 = ecx_103 + 1<32>
	esi_100 = edi_37
	branch Mem34[ecx_41:byte] == 0<8> l007355E5
l007355E3:
	Mem46[dwArg0C:word32] = edi_37
l007355E5:
	edx_28 = edx_28 - 1<32>
	ecx_103 = ecx_41 + 1<32>
	branch edx_28 > 0<32> l007355D0
l007355F4:
	branch esi_100 == dwArg08 l007355FB
l007355F8:
l007355FB:
	branch edx_28 <= 0<32> l00735624
l00735624:
	Mem90[dwArg0C + 4<32>:word32] = 0x7FFFFFFF<32>
	return
l007355FF:
	word32 edx_107 = edx_28 - 1<32>
	branch edx_107 < 0<32> l0073561A
l00735604:
	word32 ecx_99 = ecx_103 + 1<32>
	esi_100 = esi_100 + CONVERT(Mem78[ecx_103:byte], byte, word32)
	ecx_103 = ecx_99 + 1<32>
	branch Mem78[ecx_99:byte] != 0<8> l0073561A
l00735615:
	edx_107 = edx_107 - 1<32>
	branch edx_107 >= 0<32> l00735604
l0073561A:
	Mem120[dwArg0C + 4<32>:word32] = esi_100
	return
fn007355A0_exit:


word32 fn00735640(word32 esi, byte bArg04, ptr32 & ecxOut, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn007356A0
//      fn00735710
//      fn00735790
//      fn00735890
// MayUse:  esi:[0..31] Stack +0004:[0..7]
// LiveOut: eax ecx edx
// Trashed: SCZO dl eax ebp ecx edi Top
// Preserved: ebx esp
fn00735640_entry:
l00735640:
	word32 eax_47 = Mem0[esi + 0xC<32>:word32]
	branch eax_47 == 0<32> l00735691
l0073564B:
	word32 eax_23 = fn006ECC00(eax_47)
	word32 ecx_37
	word32 edx_120
	branch fn006EC4F0(esi + 0xC<32>, eax_23 + 0x400<32>, out ecx_37, out edx_120) == 0<32> l00735675
l00735675:
	word32 eax_44 = Mem33[esi + 0xC<32>:word32]
	ecx = eax_44 + 0x14<32> + eax_23
	Mem48[esi + 0x10<32>:word32] = ecx
	eax_47 = eax_44 + 0x14<32> + (eax_23 + 0x400<32>)
	Mem49[esi + 0x14<32>:word32] = eax_47
	Mem52[ecx:byte] = bArg04
	Mem54[esi + 0x10<32>:word32] = Mem52[esi + 0x10<32>:word32] + 1<32>
l00735691:
	ecxOut = ecx
	edxOut = <invalid>
	return eax_47
l00735669:
	Mem69[esi + 0x14<32>:word32] = 0<32>
	Mem70[esi + 0x10<32>:word32] = 0<32>
	ecxOut = ecx_37
	edxOut = <invalid>
	return 0<32>
fn00735640_exit:


word32 fn007356A0(word32 eax, word32 ecx, word32 edx, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00735890
// MayUse:  eax:[0..31] ecx:[0..31] edx:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ebx ecx edi edx esi Top
// Preserved: edx esp
fn007356A0_entry:
l007356A0:
	word32 eax_12 = Mem9[eax:word32]
	word32 esp_15 = fp - 12<i32>
	word32 edi_21 = edx
	branch eax_12 == 0<32> l007356C1
l007356C1:
	word32 ebx_23 = ecx - 1<32>
	branch ecx < 1<32> l00735702
l007356C6:
	word24 ecx_24_8_105 = SLICE(ecx, word24, 8)
	word32 eax_28 = Mem27[eax:word32]
	branch eax_28 == 0<32> l007356DC
l007356DC:
	eax_12 = Mem27[eax + 0x10<32>:word32]
	branch eax_12 == Mem27[eax + 0x14<32>:word32] l007356EE
l007356EE:
	word32 esp_38 = esp_15 - 4<i32>
	Mem39[esp_38:word32] = CONVERT(Mem27[edi_21:byte], byte, int32)
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	byte stackArg4 = <invalid>
	eax_12 = fn00735640(eax, stackArg4, out ecx, out edx)
	esp_15 = esp_38 + 4<32>
l007356E4:
	byte cl_51 = Mem27[edi_21:byte]
	Mem52[eax_12:byte] = cl_51
	Mem54[eax + 0x10<32>:word32] = Mem52[eax + 0x10<32>:word32] + 1<32>
	ecx = SEQ(ecx_24_8_105, cl_51) (alias)
l007356CC:
	word32 esp_56 = esp_15 - 4<i32>
	Mem57[esp_56:word32] = eax_28
	word32 eax_58 = CONVERT(Mem57[edi_21:byte], byte, int32)
	Mem60[esp_56 - 4<i32>:word32] = eax_58
	word32 esp_62
	call MSVCR80.dll!putc (retsize: 4;)
		uses: eax:eax_58,ecx:ecx_41,edx:edx_61
		defs: eax:eax_63,ecx:ecx_64,edx:edx_65,esp:esp_62
	esp_15 = esp_62 + 8<32>
l007356FA:
	edi_21 = edi_21 + 1<32>
	ebx_23 = ebx_23 - 1<32>
	branch ebx_23 >= 0<32> l007356C6
l00735702:
	edxOut = <invalid>
	return eax_12
l007356AF:
	word32 eax_94 = fwrite(edx, 1<32>, ecx, eax_12)
	edxOut = <invalid>
	return eax_94
fn007356A0_exit:


word32 fn00735710(word32 eax, word32 ecx, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00735890
// MayUse:  eax:[0..31] ecx:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ebx ecx edi edx esi Top
// Preserved: esp
fn00735710_entry:
l00735710:
	word32 ecx_31
	word32 eax_12 = Mem9[eax:word32]
	byte bl_25 = SLICE(ecx, byte, 0)
	branch eax_12 == 0<32> l0073572F
l0073572F:
	word32 eax_22 = Mem17[eax + 0x10<32>:word32]
	branch eax_22 == Mem17[eax + 0x14<32>:word32] l0073573F
l0073573F:
	fn00735640(eax, CONVERT(bl_25, byte, int32), out ecx_31, out edx)
l00735737:
	Mem37[eax_22:byte] = bl_25
	Mem39[eax + 0x10<32>:word32] = Mem37[eax + 0x10<32>:word32] + 1<32>
	ecx_31 = ecx
l00735723:
	word32 eax_43 = CONVERT(bl_25, byte, int32)
	call MSVCR80.dll!putc (retsize: 4;)
		uses: eax:eax_43,ecx:ecx,edx:edx_49,Stack +0004:eax_43,Stack +0008:eax_12
		defs: ecx:ecx_48,edx:edx_49
l0073574B:
	word32 eax_56 = Mem55[eax:word32]
	byte bl_65 = SLICE(ecx >> 8<32>, byte, 0)
	branch eax_56 == 0<32> l00735762
l00735762:
	word32 eax_62 = Mem55[eax + 0x10<32>:word32]
	branch eax_62 == Mem55[eax + 0x14<32>:word32] l00735774
l00735774:
	word32 edx_76
	word32 ecx_162
	word32 eax_74 = fn00735640(eax, CONVERT(bl_65, byte, int32), out ecx_162, out edx_76)
	edxOut = edx_76
	return eax_74
l0073576A:
	Mem87[eax_62:byte] = bl_65
	Mem89[eax + 0x10<32>:word32] = Mem87[eax + 0x10<32>:word32] + 1<32>
	edxOut = edx
	return eax_62
l00735754:
	word32 edx_97 = CONVERT(bl_65, byte, int32)
	word32 eax_103
	word32 edx_105
	call MSVCR80.dll!putc (retsize: 4;)
		uses: eax:eax_56,ecx:ecx_71,edx:edx_97,Stack +0004:edx_97,Stack +0008:eax_56
		defs: eax:eax_103,edx:edx_105
	edxOut = edx_105
	return eax_103
fn00735710_exit:


word32 fn00735790(word32 eax, word32 ecx, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00735890
//      fn00736560
// MayUse:  eax:[0..31] ecx:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn00735790_entry:
l00735790:
	word32 ecx_35
	word32 eax_15 = Mem12[eax:word32]
	word32 esp_110 = fp - 16<i32>
	byte bl_29 = SLICE(ecx, byte, 0)
	branch eax_15 == 0<32> l007357B5
l007357B5:
	word32 eax_26 = Mem20[eax + 0x10<32>:word32]
	branch eax_26 == Mem20[eax + 0x14<32>:word32] l007357C4
l007357C4:
	fn00735640(eax, CONVERT(bl_29, byte, int32), out ecx_35, out edx)
	esp_110 = fp - 0x10<32>
l007357BD:
	Mem41[eax_26:byte] = bl_29
	Mem43[eax + 0x10<32>:word32] = Mem41[eax + 0x10<32>:word32] + 1<32>
	ecx_35 = ecx
l007357A9:
	word32 eax_47 = CONVERT(bl_29, byte, int32)
	word32 esp_50
	call MSVCR80.dll!putc (retsize: 4;)
		uses: eax:eax_47,ecx:ecx,edx:edx_53,Stack +0004:eax_47,Stack +0008:eax_15
		defs: ecx:ecx_52,edx:edx_53,esp:esp_50
	esp_110 = esp_50 + 8<32>
l007357D0:
	word32 eax_60 = Mem59[eax:word32]
	branch eax_60 == 0<32> l007357E7
l007357E7:
	word32 eax_64 = Mem59[eax + 0x10<32>:word32]
	branch eax_64 == Mem59[eax + 0x14<32>:word32] l007357FB
l007357FB:
	word32 esp_74 = esp_110 - 4<i32>
	Mem75[esp_74:word32] = CONVERT(SLICE(ecx >> 8<32>, byte, 0), byte, int32)
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	byte stackArg4 = <invalid>
	word32 ecx_301
	fn00735640(eax, stackArg4, out ecx_301, out edx)
	esp_110 = esp_74 + 4<32>
l007357EF:
	Mem91[eax_64:byte] = SLICE(ecx >> 8<32>, byte, 0)
	Mem93[eax + 0x10<32>:word32] = Mem91[eax + 0x10<32>:word32] + 1<32>
l007357D6:
	word32 esp_96 = esp_110 - 4<i32>
	Mem97[esp_96:word32] = eax_60
	word32 eax_101 = CONVERT(SLICE(ecx >> 8<32>, byte, 0), byte, int32)
	Mem103[esp_96 - 4<i32>:word32] = eax_101
	word32 esp_104
	call MSVCR80.dll!putc (retsize: 4;)
		uses: eax:eax_101,ecx:ecx_78,edx:ecx >> 8<32>
		defs: edx:edx_107,esp:esp_104
	esp_110 = esp_104 + 8<32>
l0073580C:
	word32 eax_114 = Mem113[eax:word32]
	branch eax_114 == 0<32> l00735823
l00735823:
	word32 eax_118 = Mem113[eax + 0x10<32>:word32]
	branch eax_118 == Mem113[eax + 0x14<32>:word32] l00735837
l00735837:
	Mem129[esp_110 - 4<i32>:word32] = CONVERT(SLICE(ecx >> 0x10<32>, byte, 0), byte, int32)
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	byte stackArg4 = <invalid>
	word32 ecx_303
	fn00735640(eax, stackArg4, out ecx_303, out edx)
l0073582B:
	Mem145[eax_118:byte] = SLICE(ecx >> 0x10<32>, byte, 0)
	Mem147[eax + 0x10<32>:word32] = Mem145[eax + 0x10<32>:word32] + 1<32>
l00735812:
	word32 esp_154 = esp_110 - 4<i32>
	Mem155[esp_154:word32] = eax_114
	word32 edx_153 = CONVERT(SLICE(ecx >> 0x10<32>, byte, 0), byte, int32)
	Mem157[esp_154 - 4<i32>:word32] = edx_153
	call MSVCR80.dll!putc (retsize: 4;)
		uses: eax:eax_114,ecx:ecx >> 0x10<32>,edx:edx_153
		defs: edx:edx_161
l00735848:
	word32 eax_168 = Mem167[eax:word32]
	byte bl_177 = SLICE(ecx >> 0x18<32>, byte, 0)
	branch eax_168 == 0<32> l00735860
l00735860:
	word32 eax_174 = Mem167[eax + 0x10<32>:word32]
	branch eax_174 == Mem167[eax + 0x14<32>:word32] l00735872
l00735872:
	word32 edx_189
	word32 ecx_304
	word32 eax_187 = fn00735640(eax, CONVERT(bl_177, byte, int32), out ecx_304, out edx_189)
	edxOut = edx_189
	return eax_187
l00735868:
	Mem204[eax_174:byte] = bl_177
	Mem206[eax + 0x10<32>:word32] = Mem204[eax + 0x10<32>:word32] + 1<32>
	edxOut = edx
	return eax_174
l00735851:
	word32 ecx_214 = CONVERT(bl_177, byte, int32)
	word32 eax_220
	word32 edx_222
	call MSVCR80.dll!putc (retsize: 4;)
		uses: eax:eax_168,ecx:ecx_214,edx:edx_222,Stack +0004:ecx_214,Stack +0008:eax_168
		defs: eax:eax_220,edx:edx_222
	edxOut = edx_222
	return eax_220
fn00735790_exit:


word32 fn00735890(word32 edx, word32 ebx, word32 ebp, word32 esi, word32 edi, selector es, selector ds, word32 dwArg04, word32 dwArg08, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00735890
//      fn00736590
// MayUse:  cs:[0..15] ds:[0..15] ebp:[0..31] ebx:[0..31] edi:[0..31] edx:[0..31] es:[0..15] esi:[0..31] fs:[0..15] gs:[0..15] ss:[0..15] Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax edx
// Trashed: SCZDOP eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn00735890_entry:
l00735890:
	word32 eax_7 = Mem0[0x00A14188<p32>:word32] ^ fp - 0x114<32>
	Mem21[dwArg08 + 8<32>:word32] = Mem17[dwArg08 + 8<32>:word32] + 1<32>
	word32 ebp_1118 = 1<32>
	word32 eax_1017 = Mem21[dwArg08 + 8<32>:word32]
	branch eax_1017 <= 0x7D0<32> l007358D4
l007358D4:
	branch dwArg04 != 0<32> l00735911
l00735911:
	branch dwArg04 != 0xA163B8<32> l00735952
l00735952:
	branch dwArg04 != Mem26[0x00A16D00<p32>:word32] l00735993
l00735993:
	branch dwArg04 != 0xA25B38<32> l007359D4
l007359D4:
	branch dwArg04 != 0xA191D8<32> l00735A15
l00735A15:
	branch dwArg04 != 0xA191E4<32> l00735A56
l00735A56:
	word32 edi_1270
	word32 eax_42 = Mem26[dwArg04 + 4<32>:word32]
	branch eax_42 == 0xA1E7E8<32> l00736503
l00735A64:
	word32 edx_3584
	word32 ecx_3583
	branch fn006D5670(eax_42, 0xA1E7E8<32>, out ecx_3583, out edx_3584) != 0<32> l00736503
l00736503:
	word32 eax_62 = Mem61[dwArg08:word32]
	edi_1270 = Mem61[dwArg04 + 8<32>:word32]
	branch eax_62 == 0<32> l0073651A
l0073651A:
	word32 eax_68 = Mem61[dwArg08 + 0x10<32>:word32]
	branch eax_68 == Mem61[dwArg08 + 0x14<32>:word32] l0073652A
l0073652A:
l00736522:
	Mem74[eax_68:byte] = 0x69<8>
	Mem77[dwArg08 + 0x10<32>:word32] = Mem74[dwArg08 + 0x10<32>:word32] + 1<32>
l0073650C:
	word32 edx_88
	call MSVCR80.dll!putc (retsize: 4;)
		uses: edx:edx_88,Stack +0004:0x69<32>,Stack +0008:eax_62,Stack +0134:dwArg04,Stack +0138:dwArg08
		defs: edx:edx_88
l00735A7A:
	word32 eax_93 = Mem48[dwArg04 + 4<32>:word32]
	branch eax_93 == 0xA1F400<32> l007364A2
l00735A88:
	word32 ecx_3585
	word32 edx_3586
	branch fn006D5670(eax_93, 0xA1F400<32>, out ecx_3585, out edx_3586) != 0<32> l007364A2
l007364A2:
	word32 eax_113 = Mem112[dwArg08:word32]
	branch eax_113 == 0<32> l007364B6
l007364B6:
	word32 eax_117 = Mem112[dwArg08 + 0x10<32>:word32]
	branch eax_117 == Mem112[dwArg08 + 0x14<32>:word32] l007364C6
l007364C6:
	word32 ecx_3704
	word32 edx_3705
	fn00735640(dwArg08, 0x6C<32>, out ecx_3704, out edx_3705)
l007364BE:
	Mem135[eax_117:byte] = 0x6C<8>
	Mem137[dwArg08 + 0x10<32>:word32] = Mem135[dwArg08 + 0x10<32>:word32] + 1<32>
l007364A8:
	word32 edx_146
	call MSVCR80.dll!putc (retsize: 4;)
		uses: edx:edx_146,Stack +0004:0x6C<32>,Stack +0008:eax_113,Stack +0134:dwArg04,Stack +0138:dwArg08
		defs: edx:edx_146
l007364D0:
	word32 ebx_153 = Mem152[dwArg04 + 8<32>:word32]
	eax_1017 = fn00735790(dwArg08, ebx_153, out edx)
	bool v69_2856 = ebx_153 <= 0<32>
	branch ebx_153 >= 0<32> l007364E4
l007364E0:
	ebx_153 = -ebx_153
	v69_2856 = ebx_153 <= 0<32>
l007364E4:
	branch v69_2856 l0073653D
l007364E6:
	word32 edi_174 = dwArg04 + 0xC<32>
l007364F0:
	eax_1017 = fn00735710(dwArg08, CONVERT(Mem152[edi_174:word16], word16, word32), out edx)
	edi_174 = edi_174 + 2<32>
	ebx_153 = ebx_153 - 1<32>
	branch ebx_153 != 0<32> l007364F0
l00736501:
l00735A9E:
	word32 esp_411
	word32 ebx_328
	word32 esp_251
	word32 eax_197 = Mem99[dwArg04 + 4<32>:word32]
	branch eax_197 == 0xA1E4B8<32> l0073637C
l00735AAC:
	word32 ecx_3587
	word32 edx_3588
	branch fn006D5670(eax_197, 0xA1E4B8<32>, out ecx_3587, out edx_3588) != 0<32> l0073637C
l0073637C:
	branch Mem216[dwArg08 + 0x1C<32>:word32] <= 1<32> l0073640E
l0073640E:
	word32 ebp_241 = fn006FF5D0(ebx, dwArg08, dwArg04, es, ds, fp - 0x104<32>, dwArg04)
	word32 eax_250 = fp - 0x104<32>
	esp_251 = fp - 0x124<32>
l00736423:
	eax_250 = eax_3708 + 1<32>
	eax_3708 = eax_250
	branch Mem226[eax_3708:byte] != 0<8> l00736423
l0073642C:
	word32 eax_263 = eax_250 - (fp - 0x103<32>)
	byte bl_319 = SLICE(eax_263, byte, 0)
	word32 eax_266 = Mem226[dwArg08:word32]
	branch eax_266 == 0<32> l00736446
l00736446:
	word32 eax_270 = Mem226[dwArg08 + 0x10<32>:word32]
	branch eax_270 == Mem226[dwArg08 + 0x14<32>:word32] l00736456
l00736456:
	word32 edx_3707
	word32 ecx_3706
	fn00735640(dwArg08, 0x66<32>, out ecx_3706, out edx_3707)
	esp_251 = fp - 0x124<32>
l0073644E:
	Mem293[eax_270:byte] = 0x66<8>
	Mem295[dwArg08 + 0x10<32>:word32] = Mem293[dwArg08 + 0x10<32>:word32] + ebp_241
l0073643C:
	word32 esp_301
	word32 edx_304
	call MSVCR80.dll!putc (retsize: 4;)
		uses: edx:edx_304,Stack +0004:0x66<32>,Stack +0008:eax_266,Stack +0134:dwArg04,Stack +0138:dwArg08
		defs: edx:edx_304,esp:esp_301
	esp_251 = esp_301 + 8<32>
l00736460:
	word32 eax_311 = Mem310[dwArg08:word32]
	ebx_328 = eax_263 (alias)
	branch eax_311 == 0<32> l0073647F
l0073647F:
	word32 eax_315 = Mem310[dwArg08 + 0x10<32>:word32]
	branch eax_315 == Mem310[dwArg08 + 0x14<32>:word32] l00736361
l0073648B:
	Mem320[eax_315:byte] = bl_319
	Mem323[dwArg08 + 0x10<32>:word32] = Mem320[dwArg08 + 0x10<32>:word32] + ebp_241
	eax_1017 = fn007356A0(dwArg08, eax_263, esp_251 + 0x20<32>, out edx)
l00736466:
	word32 esp_346 = esp_251 - 4<i32>
	Mem347[esp_346:word32] = eax_311
	Mem349[esp_346 - 4<i32>:word32] = eax_263
	word32 esp_350
	call MSVCR80.dll!putc (retsize: 4;)
		uses: edx:edx_364,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: esp:esp_350
	eax_1017 = fn007356A0(dwArg08, eax_263, esp_350 + 0x28<32>, out edx)
l00736385:
	real64 rRet0
	fn006FF3E0(dwArg04, out rRet0)
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg16 = <invalid>
	eax_1017 = fn007012A0(rRet0, dwArg08, stackArg16, out edx)
	branch eax_1017 < 0<32> l0073620E
l007363A5:
	branch Mem384[dwArg08:word32] == 0<32> l007363CC
l007363CC:
	word32 eax_400 = Mem384[dwArg08 + 0x10<32>:word32]
	branch eax_400 == Mem384[dwArg08 + 0x14<32>:word32] l007363EF
l007363EF:
	word32 ecx_3702
	word32 edx_3703
	fn00735640(dwArg08, 0x67<32>, out ecx_3702, out edx_3703)
	esp_411 = fp - 0x124<32>
l007363D4:
	Mem413[eax_400:byte] = 0x67<8>
	Mem415[dwArg08 + 0x10<32>:word32] = Mem413[dwArg08 + 0x10<32>:word32] + 1<32>
	eax_1017 = fn007356A0(dwArg08, 8<32>, fp - 0x10C<32>, out edx)
l007363AB:
	word32 esp_430
	call MSVCR80.dll!putc (retsize: 4;)
		uses: edx:edx_444,Stack +0004:0x67<32>,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0134:dwArg04,Stack +0138:dwArg08
		defs: esp:esp_430
	eax_1017 = fn007356A0(dwArg08, 8<32>, esp_430 + 0x20<32>, out edx)
l00735AC2:
	word32 eax_447 = Mem203[dwArg04 + 4<32>:word32]
	branch eax_447 == 0xA27190<32> l0073618B
l00735AD0:
	word32 ecx_3589
	branch fn006D5670(eax_447, 0xA27190<32>, out ecx_3589, out edx) != 0<32> l0073618B
l0073618B:
	word32 esp_478 = fp - 0x124<32>
	branch Mem466[dwArg08 + 0x1C<32>:word32] <= 1<32> l00736216
l00736216:
	word32 eax_470 = Mem466[dwArg08:word32]
	branch eax_470 == 0<32> l0073622C
l0073622C:
	word32 eax_475 = Mem466[dwArg08 + 0x10<32>:word32]
	branch eax_475 == Mem466[dwArg08 + 0x14<32>:word32] l0073623D
l0073623D:
	word32 ecx_3688
	word32 edx_3689
	fn00735640(dwArg08, 0x78<32>, out ecx_3688, out edx_3689)
	esp_478 = fp - 0x124<32>
l00736234:
	Mem498[eax_475:byte] = 0x78<8>
	Mem500[dwArg08 + 0x10<32>:word32] = Mem498[dwArg08 + 0x10<32>:word32] + 1<32>
l00736222:
	word32 esp_506
	word32 edx_509
	call MSVCR80.dll!putc (retsize: 4;)
		uses: edx:edx_509,Stack +0004:0x78<32>,Stack +0008:eax_470,Stack +0134:dwArg04,Stack +0138:dwArg08
		defs: edx:edx_509,esp:esp_506
	esp_478 = esp_506 + 8<32>
l00736247:
	word32 esp_515 = esp_478 - 4<i32>
	Mem517[esp_515:word32] = dwArg04
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	real64 rRet0
	Mem535[esp_515 - 4<i32>:word32] = fn00733250(stackArg4, out rRet0)
	Mem538[esp_515 - 4<i32>:real64] = rRet0
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	real64 stackArg4 = <invalid>
	eax_1017 = fn006FF060(stackArg4, out edx)
	branch eax_1017 != 0<32> l0073626B
l0073626B:
	Mem553[esp_515:word32] = eax_1017
	Mem555[esp_515 - 4<i32>:word32] = esp_515 + 0x24<32>
	word32 ebp_557 = fn006FF5D0(eax_1017, dwArg08, dwArg04, es, ds, Mem555[esp_515 - 4<i32>:word32], Mem555[esp_515:word32])
	word32 v40_567 = Mem555[eax_1017:word32] + 0xFFFFFFFF<32>
	Mem568[eax_1017:word32] = v40_567
	word32 esp_566 = esp_515 + 4<32>
	branch v40_567 != 0<32> l0073628A
l0073627E:
	word32 ecx_571 = Mem568[eax_1017 + 4<32>:word32]
	word32 edx_572 = Mem568[ecx_571 + 0x18<32>:word32]
	Mem574[esp_515:word32] = eax_1017
	word32 esp_575
	word32 edx_578
	call edx_572 (retsize: 4;)
		uses: ecx:ecx_571,edx:edx_578,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: edx:edx_578,esp:esp_575
	esp_566 = esp_575 + 4<32>
l0073628A:
	word32 eax_584 = esp_566 + 0x20<32>
	eax_586 = eax_584
l00736291:
	word32 eax_586
	eax_586 = eax_3709 + 1<32>
	eax_3709 = eax_586
	branch Mem2854[eax_3709:byte] != 0<8> l00736291
l0073629A:
	word32 eax_594 = eax_586 - (eax_584 + 1<32>)
	byte bl_634 = SLICE(eax_594, byte, 0)
	word32 eax_598 = Mem2854[dwArg08:word32]
	branch eax_598 == 0<32> l007362AD
l007362AD:
	word32 eax_602 = Mem2854[dwArg08 + 0x10<32>:word32]
	branch eax_602 == Mem2854[dwArg08 + 0x14<32>:word32] l007362BD
l007362BD:
	Mem607[esp_566 - 4<i32>:word32] = eax_594
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	byte stackArg4 = <invalid>
	word32 edx_3697
	word32 ecx_3696
	fn00735640(dwArg08, stackArg4, out ecx_3696, out edx_3697)
l007362B5:
	Mem635[eax_602:byte] = bl_634
	Mem637[dwArg08 + 0x10<32>:word32] = Mem635[dwArg08 + 0x10<32>:word32] + 1<32>
l007362A4:
	word32 esp_639 = esp_566 - 4<i32>
	Mem640[esp_639:word32] = eax_598
	Mem642[esp_639 - 4<i32>:word32] = eax_594
	call ebp_557 (retsize: 4;)
		uses: Stack +0004:Mem642[esp_639 - 4<i32>:word32],Stack +0008:Mem642[esp_639:word32]
l007362C6:
	word32 edx_3692
	fn007356A0(dwArg08, eax_594, esp_566 + 0x20<32>, out edx_3692)
	Mem677[esp_566 - 4<i32>:word32] = dwArg04
	word64 rRet0_685
	Mem689[esp_566 - 8<i32>:word32] = fn00733290(Mem677[esp_566 - 4<i32>:word32], out rRet0_685)
	Mem690[esp_566 - 8<i32>:real64] = rRet0_685
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	real64 stackArg4 = <invalid>
	eax_1017 = fn006FF060(stackArg4, out edx)
	word32 esp_692 = esp_566 - 8<i32>
	branch eax_1017 == 0<32> l0073625F
l007362EF:
	Mem705[esp_692 + 4<32>:word32] = eax_1017
	Mem707[esp_692:word32] = esp_692 + 0x28<32>
	word32 ebp_709 = fn006FF5D0(eax_594, dwArg08, eax_1017, es, ds, Mem707[esp_692:word32], Mem707[esp_692 + 4<i32>:word32])
	word32 v44_719 = Mem707[eax_1017:word32] + 0xFFFFFFFF<32>
	Mem720[eax_1017:word32] = v44_719
	esp_251 = esp_692 + 8<32>
	branch v44_719 != 0<32> l0073630E
l00736302:
	word32 ecx_723 = Mem720[eax_1017 + 4<32>:word32]
	word32 edx_724 = Mem720[ecx_723 + 0x18<32>:word32]
	Mem726[esp_692 + 4<32>:word32] = eax_1017
	word32 esp_727
	word32 edx_730
	call edx_724 (retsize: 4;)
		uses: ecx:ecx_723,edx:edx_730,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: edx:edx_730,esp:esp_727
	esp_251 = esp_727 + 4<32>
l0073630E:
	word32 eax_736 = esp_251 + 0x20<32>
	eax_738 = eax_736
l00736315:
	word32 eax_738
	eax_738 = eax_3710 + 1<32>
	eax_3710 = eax_738
	branch Mem2855[eax_3710:byte] != 0<8> l00736315
l0073631E:
	word32 eax_746 = eax_738 - (eax_736 + 1<32>)
	ebx_328 = eax_746
	byte bl_807 = SLICE(eax_746, byte, 0)
	word32 eax_750 = Mem2855[dwArg08:word32]
	branch eax_750 == 0<32> l00736341
l00736341:
	word32 eax_754 = Mem2855[dwArg08 + 0x10<32>:word32]
	branch eax_754 == Mem2855[dwArg08 + 0x14<32>:word32] l00736361
l00736361:
	word32 esp_759 = esp_251 - 4<i32>
	Mem761[esp_759:word32] = ebx_328
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	byte stackArg4 = <invalid>
	word32 edx_3700
	word32 ecx_3699
	fn00735640(dwArg08, stackArg4, out ecx_3699, out edx_3700)
	eax_1017 = fn007356A0(dwArg08, ebx_328, esp_759 + 0x24<32>, out edx)
l00736349:
	Mem808[eax_754:byte] = bl_807
	Mem810[dwArg08 + 0x10<32>:word32] = Mem808[dwArg08 + 0x10<32>:word32] + 1<32>
	eax_1017 = fn007356A0(dwArg08, eax_746, esp_251 + 0x20<32>, out edx)
l00736328:
	word32 esp_821 = esp_251 - 4<i32>
	Mem822[esp_821:word32] = eax_750
	Mem824[esp_821 - 4<i32>:word32] = eax_746
	call ebp_709 (retsize: 4;)
		uses: Stack +0004:Mem824[esp_821 - 4<i32>:word32],Stack +0008:Mem824[esp_821:word32]
	eax_1017 = fn007356A0(dwArg08, eax_746, esp_821 + 0x24<32>, out edx)
l0073625F:
	Mem847[dwArg08 + 4<32>:word32] = 1<32>
l00736194:
	real64 rRet0
	fn00733250(dwArg04, out rRet0)
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg16 = <invalid>
	eax_1017 = fn007012A0(rRet0, dwArg08, stackArg16, out edx)
	word32 esp_871 = fp - 0x124<32>
	branch eax_1017 < 0<32> l0073620E
l007361B0:
	branch Mem863[dwArg08:word32] == 0<32> l007361C4
l007361C4:
	word32 eax_879 = Mem863[dwArg08 + 0x10<32>:word32]
	branch eax_879 == Mem863[dwArg08 + 0x14<32>:word32] l007361D4
l007361D4:
	word32 ecx_3683
	word32 edx_3684
	fn00735640(dwArg08, 0x79<32>, out ecx_3683, out edx_3684)
	esp_871 = fp - 0x124<32>
l007361CC:
	Mem892[eax_879:byte] = 0x79<8>
	Mem894[dwArg08 + 0x10<32>:word32] = Mem892[dwArg08 + 0x10<32>:word32] + 1<32>
l007361B6:
	word32 esp_900
	word32 edx_903
	call MSVCR80.dll!putc (retsize: 4;)
		uses: edx:edx_903,Stack +0004:0x79<32>,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0134:dwArg04,Stack +0138:dwArg08
		defs: edx:edx_903,esp:esp_900
	esp_871 = esp_900 + 8<32>
l007361DE:
	word32 edx_3673
	fn007356A0(dwArg08, 8<32>, esp_871 + 0x18<32>, out edx_3673)
	Mem930[esp_871 - 4<i32>:word32] = 1<32>
	Mem933[esp_871 - 8<i32>:word32] = esp_871 + 0x18<32>
	Mem935[esp_871 - 12<i32>:word32] = dwArg04
	word64 rRet0_943
	Mem947[esp_871 - 16<i32>:word32] = fn00733290(Mem935[esp_871 - 12<i32>:word32], out rRet0_943)
	Mem948[esp_871 - 16<i32>:real64] = rRet0_943
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	real64 stackArg4 = <invalid>
	word32 stackArg16 = <invalid>
	eax_1017 = fn007012A0(stackArg4, dwArg08, stackArg16, out edx)
	esp_411 = esp_871
	branch eax_1017 >= 0<32> l007363F9
l007363F9:
	eax_1017 = fn007356A0(dwArg08, 8<32>, esp_411 + 0x18<32>, out edx)
l0073620E:
	Mem983[dwArg08 + 4<32>:word32] = 1<32>
l00735AE6:
	word32 eax_984 = Mem453[dwArg04 + 4<32>:word32]
	branch eax_984 == 0xA1B450<32> l00736047
l00735AF4:
	word32 ecx_3590
	branch fn006D5670(eax_984, 0xA1B450<32>, out ecx_3590, out edx) != 0<32> l00736047
l00736047:
	word32 eax_1004 = Mem1003[dwArg08 + 0x18<32>:word32]
	branch eax_1004 == 0<32> l00736134
l00736052:
	branch Mem1003[dwArg04 + 0x10<32>:word32] == 0<32> l00736134
l00736134:
	word32 eax_1013 = Mem1003[dwArg08:word32]
	branch eax_1013 == 0<32> l00736148
l00736148:
	eax_1017 = Mem1003[dwArg08 + 0x10<32>:word32]
	branch eax_1017 == Mem1003[dwArg08 + 0x14<32>:word32] l00736158
l00736158:
	word32 ecx_3694
	eax_1017 = fn00735640(dwArg08, 0x73<32>, out ecx_3694, out edx)
l00736150:
	Mem1049[eax_1017:byte] = 0x73<8>
	Mem1051[dwArg08 + 0x10<32>:word32] = Mem1049[dwArg08 + 0x10<32>:word32] + 1<32>
l0073613A:
	call MSVCR80.dll!putc (retsize: 4;)
		uses: edx:edx_1060,Stack +0004:0x73<32>,Stack +0008:eax_1013,Stack +0134:dwArg04,Stack +0138:dwArg08
		defs: eax:eax_1058,edx:edx_1060
l0073605C:
	word32 ecx_3665
	word32 edx_3666
	word32 eax_1070 = fn006FBCC0(eax_1004, dwArg04, out ecx_3665, out edx_3666)
	branch eax_1070 == 0<32> l007360A6
l007360A6:
	word32 ecx_3667
	word32 eax_1091 = fn00705120(fn006FCF20(Mem1068[dwArg08 + 0x18<32>:word32]), out ecx_3667, out edx)
	eax_1017 = eax_1091
	branch eax_1091 == 0<32> l007360D0
l007360BE:
	word32 ecx_3676
	word32 ebx_3677
	word32 edi_3678
	eax_1017 = fn006FBD90(Mem1089[dwArg08 + 0x18<32>:word32], dwArg04, dwArg08, out ecx_3676, out edx, out ebx_3677, out edi_3678)
	branch eax_1017 >= 0<32> l007360D2
l007360D0:
	ebp_1118 = 0<32>
l007360D2:
	word32 esp_1134 = fp - 0x124<32>
	branch eax_1091 == 0<32> l007360E7
l007360D6:
	word32 v37_1128 = Mem1126[eax_1091:word32] + 0xFFFFFFFF<32>
	Mem1129[eax_1091:word32] = v37_1128
	branch v37_1128 != 0<32> l007360E7
l007360DB:
	word32 edx_1132 = Mem1129[eax_1091 + 4<32>:word32]
	word32 esp_1157
	call Mem1129[edx_1132 + 0x18<32>:word32] (retsize: 4;)
		uses: edx:edx_1132,Stack +0004:eax_1091,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0130:dwArg04,Stack +0134:dwArg08
		defs: eax:eax_1158,edx:edx_1160,esp:esp_1157
	esp_1134 = esp_1157 + 4<32>
l007360E7:
	branch ebp_1118 != 0<32> l007360F7
l007360F7:
	word32 eax_1171 = Mem1170[dwArg08:word32]
	branch eax_1171 == 0<32> l00736110
l00736110:
	eax_1017 = Mem1170[dwArg08 + 0x10<32>:word32]
	branch eax_1017 == Mem1170[dwArg08 + 0x14<32>:word32] l00736126
l00736126:
	Mem1180[esp_1134 - 4<i32>:word32] = 0x74<32>
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	byte stackArg4 = <invalid>
	word32 ecx_3691
	eax_1017 = fn00735640(dwArg08, stackArg4, out ecx_3691, out edx)
l0073615F:
l00736118:
	Mem1200[eax_1017:byte] = 0x74<8>
	Mem1202[dwArg08 + 0x10<32>:word32] = Mem1200[dwArg08 + 0x10<32>:word32] + 1<32>
l007360FD:
	word32 esp_1205 = esp_1134 - 4<i32>
	Mem1206[esp_1205:word32] = eax_1171
	Mem1208[esp_1205 - 4<i32>:word32] = 0x74<32>
	call MSVCR80.dll!putc (retsize: 4;)
		uses: edx:edx_1212,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: eax:eax_1210,edx:edx_1212
l00736162:
	word32 ebx_1222 = Mem1220[dwArg04 + 8<32>:word32]
	branch ebx_1222 > 0x7FFFFFFF<32> l00735D61
l00736171:
	word32 edx_3687
	fn00735790(dwArg08, ebx_1222, out edx_3687)
	eax_1017 = fn007356A0(dwArg08, ebx_1222, dwArg04 + 0x14<32>, out edx)
l007360EB:
	Mem1261[dwArg08 + 4<32>:word32] = 1<32>
l0073606A:
	word32 edx_3669
	word32 ecx_3668
	word32 edi_3671
	word32 esi_3670
	edi_1270 = fn007051A0(dwArg04, eax_1070, out ecx_3668, out edx_3669, out esi_3670, out edi_3671)
	branch Mem1263[dwArg08:word32] == 0<32> l0073608C
l0073608C:
	word32 eax_1276 = Mem1263[dwArg08 + 0x10<32>:word32]
	branch eax_1276 == Mem1263[dwArg08 + 0x14<32>:word32] l0073609F
l0073609F:
l0073652C:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	byte stackArg4 = <invalid>
	word32 ecx_3681
	word32 edx_3682
	fn00735640(dwArg08, stackArg4, out ecx_3681, out edx_3682)
l00736094:
	Mem1307[eax_1276:byte] = 0x52<8>
	Mem1309[dwArg08 + 0x10<32>:word32] = Mem1307[dwArg08 + 0x10<32>:word32] + 1<32>
l0073607B:
	word32 edx_1318
	call MSVCR80.dll!putc (retsize: 4;)
		uses: edx:edx_1318,Stack +0004:0x52<32>,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0134:dwArg04,Stack +0138:dwArg08
		defs: edx:edx_1318
l00736534:
	eax_1017 = fn00735790(dwArg08, edi_1270, out edx)
l00735B0A:
	word32 eax_1343 = Mem990[dwArg04 + 4<32>:word32]
	branch eax_1343 == 0xA23B20<32> l00735FC8
l00735B18:
	word32 edx_3593
	word32 ecx_3592
	branch fn006D5670(eax_1343, 0xA23B20<32>, out ecx_3592, out edx_3593) != 0<32> l00735FC8
l00735FC8:
	word32 ecx_3591
	eax_1017 = fn00718B50(dwArg04, out ecx_3591, out edx)
	word32 esp_1382 = fp - 0x124<32>
	branch eax_1017 == 0<32> l00735D61
l00735FDB:
	branch Mem1364[dwArg08:word32] == 0<32> l00735FEF
l00735FEF:
	eax_1017 = Mem1364[dwArg08 + 0x10<32>:word32]
	branch eax_1017 == Mem1364[dwArg08 + 0x14<32>:word32] l00735FFF
l00735FFF:
	word32 ecx_3664
	eax_1017 = fn00735640(dwArg08, 0x75<32>, out ecx_3664, out edx)
	esp_1382 = fp - 0x124<32>
l00735FF7:
	Mem1403[eax_1017:byte] = 0x75<8>
	Mem1405[dwArg08 + 0x10<32>:word32] = Mem1403[dwArg08 + 0x10<32>:word32] + 1<32>
l00735FE1:
	word32 esp_1411
	call MSVCR80.dll!putc (retsize: 4;)
		uses: edx:edx_1414,Stack +0004:0x75<32>,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0134:dwArg04,Stack +0138:dwArg08
		defs: eax:eax_1412,edx:edx_1414,esp:esp_1411
	esp_1382 = esp_1411 + 8<32>
l00736009:
	word32 ebx_1421 = Mem1420[eax_1017 + 8<32>:word32]
	branch ebx_1421 > 0x7FFFFFFF<32> l00735D61
l00736018:
	word32 edx_3663
	fn00735790(dwArg08, ebx_1421, out edx_3663)
	eax_1017 = fn007356A0(dwArg08, ebx_1421, eax_1017 + 0x14<32>, out edx)
	word32 v33_1451 = Mem1420[eax_1017:word32] + 0xFFFFFFFF<32>
	Mem1452[eax_1017:word32] = v33_1451
	branch v33_1451 != 0<32> l0073653D
l00736036:
	word32 ecx_1455 = Mem1452[eax_1017 + 4<32>:word32]
	word32 edx_1456 = Mem1452[ecx_1455 + 0x18<32>:word32]
	Mem1458[esp_1382 - 4<i32>:word32] = eax_1017
	call edx_1456 (retsize: 4;)
		uses: ecx:ecx_1455,edx:edx_1462,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: eax:eax_1460,edx:edx_1462
l00735B2E:
	word32 eax_1467 = Mem1349[dwArg04 + 4<32>:word32]
	branch eax_1467 == 0xA16588<32> l00735F62
l00735B3C:
	word32 edx_3595
	word32 ecx_3594
	branch fn006D5670(eax_1467, 0xA16588<32>, out ecx_3594, out edx_3595) != 0<32> l00735F62
l00735F62:
	word32 esp_1494 = fp - 0x124<32>
	word32 eax_1487 = Mem1486[dwArg08:word32]
	branch eax_1487 == 0<32> l00735F76
l00735F76:
	word32 eax_1491 = Mem1486[dwArg08 + 0x10<32>:word32]
	branch eax_1491 == Mem1486[dwArg08 + 0x14<32>:word32] l00735F86
l00735F86:
	word32 ecx_3660
	word32 edx_3661
	fn00735640(dwArg08, 0x28<32>, out ecx_3660, out edx_3661)
	esp_1494 = fp - 0x124<32>
l00735F7E:
	Mem1515[eax_1491:byte] = 0x28<8>
	Mem1517[dwArg08 + 0x10<32>:word32] = Mem1515[dwArg08 + 0x10<32>:word32] + 1<32>
l00735F68:
	word32 esp_1523
	word32 edx_1526
	call MSVCR80.dll!putc (retsize: 4;)
		uses: edx:edx_1526,Stack +0004:0x28<32>,Stack +0008:eax_1487,Stack +0134:dwArg04,Stack +0138:dwArg08
		defs: edx:edx_1526,esp:esp_1523
	esp_1494 = esp_1523 + 8<32>
l00735F90:
	Mem1534[esp_1494 - 4<i32>:word32] = dwArg04
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_3658
	word32 edx_3659
	word32 eax_1546 = fn006DFE20(stackArg4, out ecx_3658, out edx_3659)
	word32 ebx_1551 = eax_1546
	eax_1017 = fn00735790(dwArg08, eax_1546, out edx)
	branch eax_1546 <= 0<32> l0073653D
l00735FAC:
	word32 edi_1564 = dwArg04 + 0xC<32>
l00735FB0:
	word32 eax_1568 = Mem1567[edi_1564:word32]
	word32 esp_1570 = esp_1494 - 4<i32>
	Mem1572[esp_1570:word32] = dwArg08
	Mem1574[esp_1570 - 4<i32>:word32] = eax_1568
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	eax_1017 = fn00735890(edx, ebx_1551, 1<32>, dwArg08, edi_1564, es, ds, stackArg4, dwArg04, out edx)
	edi_1564 = edi_1564 + 4<32>
	ebx_1551 = ebx_1551 - 1<32>
	branch ebx_1551 != 0<32> l00735FB0
l00735FC3:
l00735B52:
	word32 eax_1595 = Mem1473[dwArg04 + 4<32>:word32]
	branch eax_1595 == 0xA1BAF0<32> l00735F02
l00735B60:
	word32 edx_3597
	word32 ecx_3596
	branch fn006D5670(eax_1595, 0xA1BAF0<32>, out ecx_3596, out edx_3597) != 0<32> l00735F02
l00735F02:
	word32 esp_1622 = fp - 0x124<32>
	word32 eax_1615 = Mem1614[dwArg08:word32]
	branch eax_1615 == 0<32> l00735F16
l00735F16:
	word32 eax_1619 = Mem1614[dwArg08 + 0x10<32>:word32]
	branch eax_1619 == Mem1614[dwArg08 + 0x14<32>:word32] l00735F26
l00735F26:
	word32 ecx_3655
	word32 edx_3656
	fn00735640(dwArg08, 0x5B<32>, out ecx_3655, out edx_3656)
	esp_1622 = fp - 0x124<32>
l00735F1E:
	Mem1643[eax_1619:byte] = 0x5B<8>
	Mem1645[dwArg08 + 0x10<32>:word32] = Mem1643[dwArg08 + 0x10<32>:word32] + 1<32>
l00735F08:
	word32 esp_1651
	word32 edx_1654
	call MSVCR80.dll!putc (retsize: 4;)
		uses: edx:edx_1654,Stack +0004:0x5B<32>,Stack +0008:eax_1615,Stack +0134:dwArg04,Stack +0138:dwArg08
		defs: edx:edx_1654,esp:esp_1651
	esp_1622 = esp_1651 + 8<32>
l00735F30:
	word32 ebp_1661 = Mem1660[dwArg04 + 8<32>:word32]
	eax_1017 = fn00735790(dwArg08, ebp_1661, out edx)
	word32 ebx_1680 = 0<32>
	branch ebp_1661 <= 0<32> l0073653D
l00735F46:
	word32 edx_1687 = Mem1684[Mem1684[dwArg04 + 0xC<32>:word32] + ebx_1680 * 4<32>:word32]
	word32 esp_1689 = esp_1622 - 4<i32>
	Mem1691[esp_1689:word32] = dwArg08
	Mem1693[esp_1689 - 4<i32>:word32] = edx_1687
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	eax_1017 = fn00735890(edx_1687, ebx_1680, ebp_1661, dwArg08, dwArg04, es, ds, stackArg4, dwArg04, out edx)
	ebx_1680 = ebx_1680 + 1<32>
	branch ebx_1680 < ebp_1661 l00735F46
l00735F5D:
l00735B76:
	word32 eax_1712 = Mem1601[dwArg04 + 4<32>:word32]
	branch eax_1712 == 0xA1D1B8<32> l00735E68
l00735B84:
	word32 ecx_3598
	word32 edx_3599
	branch fn006D5670(eax_1712, 0xA1D1B8<32>, out ecx_3598, out edx_3599) != 0<32> l00735E68
l00735E68:
	word32 esp_1739 = fp - 0x124<32>
	word32 eax_1732 = Mem1731[dwArg08:word32]
	branch eax_1732 == 0<32> l00735E7C
l00735E7C:
	word32 eax_1736 = Mem1731[dwArg08 + 0x10<32>:word32]
	branch eax_1736 == Mem1731[dwArg08 + 0x14<32>:word32] l00735E8C
l00735E8C:
	word32 ecx_3652
	word32 edx_3653
	fn00735640(dwArg08, 0x7B<32>, out ecx_3652, out edx_3653)
	esp_1739 = fp - 0x124<32>
l00735E84:
	Mem1760[eax_1736:byte] = 0x7B<8>
	Mem1762[dwArg08 + 0x10<32>:word32] = Mem1760[dwArg08 + 0x10<32>:word32] + 1<32>
l00735E6E:
	word32 esp_1768
	word32 edx_1771
	call MSVCR80.dll!putc (retsize: 4;)
		uses: edx:edx_1771,Stack +0004:0x7B<32>,Stack +0008:eax_1732,Stack +0134:dwArg04,Stack +0138:dwArg08
		defs: edx:edx_1771,esp:esp_1768
	esp_1739 = esp_1768 + 8<32>
l00735E96:
	word32 esp_1778 = esp_1739 - 4<i32>
	Mem1779[esp_1778:word32] = esp_1739 + 0x14<32>
	Mem1782[esp_1778 - 4<i32>:word32] = esp_1778 + 0x14<32>
	Mem1785[esp_1778 - 8<i32>:word32] = esp_1778 + 0x1C<32>
	Mem1788[esp_1778 - 12<i32>:word32] = dwArg04
	Mem1789[esp_1778 + 0x1C<32>:word32] = 0<32>
	word32 edx_3646
	branch fn006FC050(Mem1789[esp_1778 - 12<i32>:word32], Mem1789[esp_1778 - 8<i32>:word32], Mem1789[esp_1778 - 4<i32>:word32], Mem1789[esp_1778:word32], out edx_3646) == 0<32> l00735EF2
l00735EBA:
l00735EC0:
	word32 edx_1805 = Mem1804[esp_1739 + 0x10<32>:word32]
	word32 esp_1806 = esp_1739 - 4<i32>
	Mem1808[esp_1806:word32] = dwArg08
	Mem1810[esp_1806 - 4<i32>:word32] = edx_1805
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 edx_3649
	fn00735890(edx_1805, ebx, 1<32>, dwArg08, dwArg04, es, ds, stackArg4, dwArg04, out edx_3649)
	word32 eax_1827 = Mem1810[esp_1806 + 0x18<32>:word32]
	Mem1829[esp_1806 - 8<i32>:word32] = dwArg08
	Mem1831[esp_1806 - 12<i32>:word32] = eax_1827
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 edx_3651
	fn00735890(edx_1851, ebx, 1<32>, dwArg08, dwArg04, es, ds, stackArg4, dwArg04, out edx_3651)
	Mem1840[esp_1806 - 16<i32>:word32] = esp_1806 + 0x18<32>
	Mem1843[esp_1806 - 20<i32>:word32] = esp_1806 + 0x14<32>
	Mem1846[esp_1806 - 24<i32>:word32] = esp_1806 + 0x1C<32>
	Mem1848[esp_1806 - 28<i32>:word32] = dwArg04
	word32 edx_1851
	branch fn006FC050(Mem1848[esp_1806 - 28<i32>:word32], Mem1848[esp_1806 - 24<i32>:word32], Mem1848[esp_1806 - 20<i32>:word32], Mem1848[esp_1806 - 16<i32>:word32], out edx_1851) != 0<32> l00735EC0
l00735EF2:
	word32 esp_1861 = esp_1739 - 4<i32>
	Mem1864[esp_1861:word32] = dwArg08
	Mem1866[esp_1861 - 4<i32>:word32] = 0<32>
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	eax_1017 = fn00735890(edx, ebx, 1<32>, dwArg08, dwArg04, es, ds, stackArg4, dwArg04, out edx)
l00735B9A:
	word32 eax_1893 = Mem1718[dwArg04 + 4<32>:word32]
	branch eax_1893 == 0xA2B490<32> l00735D69
l00735BA8:
	branch eax_1893 == 0xA2B6F8<32> l00735D69
l00735BB3:
	word32 edx_3601
	word32 ecx_3600
	branch fn006D5670(eax_1893, 0xA2B490<32>, out ecx_3600, out edx_3601) != 0<32> l00735D69
l00735BC9:
	word32 esp_1925 = fp - 0x124<32>
	word32 ecx_3602
	branch fn006D5670(Mem1901[dwArg04 + 4<32>:word32], 0xA2B6F8<32>, out ecx_3602, out edx) != 0<32> l00735D69
l00735D69:
	word32 esp_1946
	word32 eax_1931 = Mem1930[dwArg04 + 4<32>:word32]
	branch eax_1931 == 0xA2B490<32> l00735DAD
l00735D73:
	esp_1946 = fp - 0x124<32>
	word32 ecx_3630
	word32 edx_3631
	branch fn006D5670(eax_1931, 0xA2B490<32>, out ecx_3630, out edx_3631) != 0<32> l00735DAD
l00735DAD:
	esp_1946 = fp - 0x124<32>
	word32 eax_1953 = Mem1952[dwArg08:word32]
	branch eax_1953 == 0<32> l00735DC1
l00735DC1:
	word32 eax_1957 = Mem1952[dwArg08 + 0x10<32>:word32]
	branch eax_1957 == Mem1952[dwArg08 + 0x14<32>:word32] l00735DD1
l00735DD1:
l00735DC9:
	Mem1963[eax_1957:byte] = 0x3C<8>
	Mem1967[dwArg08 + 0x10<32>:word32] = Mem1963[dwArg08 + 0x10<32>:word32] + 1<32>
l00735DB3:
	word32 esp_1990
	word32 edx_1993
	call MSVCR80.dll!putc (retsize: 4;)
		uses: edx:edx_1993,Stack +0004:0x3C<32>,Stack +0008:eax_1953,Stack +0134:dwArg04,Stack +0138:dwArg08
		defs: edx:edx_1993,esp:esp_1990
	esp_1946 = esp_1990 + 8<32>
l00735D85:
	word32 eax_1998 = Mem1938[dwArg08:word32]
	branch eax_1998 == 0<32> l00735D99
l00735D99:
	word32 eax_2002 = Mem1938[dwArg08 + 0x10<32>:word32]
	branch eax_2002 == Mem1938[dwArg08 + 0x14<32>:word32] l00735DA9
l00735DA9:
l00735DD3:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	byte stackArg4 = <invalid>
	word32 ecx_3644
	word32 edx_3645
	fn00735640(dwArg08, stackArg4, out ecx_3644, out edx_3645)
	esp_1946 = fp - 0x124<32>
l00735DA1:
	Mem2027[eax_2002:byte] = 0x3E<8>
	Mem2029[dwArg08 + 0x10<32>:word32] = Mem2027[dwArg08 + 0x10<32>:word32] + 1<32>
l00735D8B:
	word32 esp_2035
	word32 edx_2038
	call MSVCR80.dll!putc (retsize: 4;)
		uses: edx:edx_2038,Stack +0004:0x3E<32>,Stack +0008:eax_1998,Stack +0134:dwArg04,Stack +0138:dwArg08
		defs: edx:edx_2038,esp:esp_2035
	esp_1946 = esp_2035 + 8<32>
l00735DDB:
	word32 esp_2044 = esp_1946 - 4<i32>
	Mem2046[esp_2044:word32] = dwArg04
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	eax_1017 = fn00704080(stackArg4, out edx)
	branch eax_1017 == 0xFFFFFFFF<32> l00735D61
l00735DEF:
	word32 edx_3634
	fn00735790(dwArg08, ecx, out edx_3634)
	Mem2075[esp_2044:word32] = dwArg04
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_3636
	eax_1017 = fn00704B00(stackArg4, out ecx_3636, out edx)
	branch eax_1017 == 0<32> l00735D61
l00735E09:
	Mem2088[esp_2044:word32] = eax_1017
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_3638
	word32 eax_2090 = fn00704040(stackArg4, out ecx_3638, out edx)
	word32 edi_2095 = eax_2090
	word32 esp_2096 = esp_2044 + 4<32>
	branch eax_2090 == 0<32> l00735E42
l00735E18:
	word32 esp_2101 = esp_2096 - 4<i32>
	Mem2103[esp_2101:word32] = dwArg08
	Mem2106[esp_2101 - 4<i32>:word32] = edi_2095
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 edx_2119
	fn00735890(edx_2119, eax_1017, 1<32>, dwArg08, edi_2095, es, ds, stackArg4, dwArg04, out edx_2119)
	word32 v24_2123 = Mem2106[edi_2095:word32] + 0xFFFFFFFF<32>
	Mem2124[edi_2095:word32] = v24_2123
	word32 esp_2122 = esp_2101 + 4<32>
	branch v24_2123 != 0<32> l00735E33
l00735E27:
	word32 ecx_2127 = Mem2124[edi_2095 + 4<32>:word32]
	word32 edx_2128 = Mem2124[ecx_2127 + 0x18<32>:word32]
	Mem2130[esp_2101:word32] = edi_2095
	word32 esp_2131
	word32 edx_2134
	call edx_2128 (retsize: 4;)
		uses: ecx:ecx_2127,edx:edx_2134,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: edx:edx_2134,esp:esp_2131
	esp_2122 = esp_2131 + 4<32>
l00735E33:
	word32 esp_2140 = esp_2122 - 4<i32>
	Mem2142[esp_2140:word32] = eax_1017
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_3641
	word32 eax_2154 = fn00704040(stackArg4, out ecx_3641, out edx)
	edi_2095 = eax_2154
	esp_2096 = esp_2140 + 4<32>
	branch eax_2154 != 0<32> l00735E18
l00735E42:
	word32 v27_2166 = Mem2165[eax_1017:word32] + 0xFFFFFFFF<32>
	Mem2167[eax_1017:word32] = v27_2166
	branch v27_2166 != 0<32> l00735E53
l00735E47:
	word32 eax_2170 = Mem2167[eax_1017 + 4<32>:word32]
	word32 ecx_2171 = Mem2167[eax_2170 + 0x18<32>:word32]
	Mem2174[esp_2096 - 4<i32>:word32] = eax_1017
	call ecx_2171 (retsize: 4;)
		uses: eax:eax_2170,edx:edx_2188,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: edx:edx_2188
l00735E53:
	eax_1017 = fn006E0FC0()
	branch eax_1017 == 0<32> l0073653D
l00735E60:
	Mem2199[dwArg08 + 4<32>:word32] = 1<32>
l00735BE2:
	branch Mem1917[dwArg04 + 4<32>:word32] != 0xA27458<32> l00735CB4
l00735CB4:
	word32 eax_2204 = fn00701950(dwArg04)
	word32 esp_2210 = fp - 0x124<32>
	word32 eax_2213 = Mem2203[dwArg08:word32]
	branch eax_2204 == 0<32> l00735D29
l00735D29:
	branch eax_2213 == 0<32> l00735D41
l00735D41:
	eax_1017 = Mem2203[dwArg08 + 0x10<32>:word32]
	branch eax_1017 == Mem2203[dwArg08 + 0x14<32>:word32] l00735D57
l00735D57:
	word32 ecx_3642
	eax_1017 = fn00735640(dwArg08, 0x3F<32>, out ecx_3642, out edx)
l00735D49:
	Mem2231[eax_1017:byte] = 0x3F<8>
	Mem2233[dwArg08 + 0x10<32>:word32] = Mem2231[dwArg08 + 0x10<32>:word32] + 1<32>
	Mem2235[dwArg08 + 4<32>:word32] = 1<32>
l00735D2D:
	call MSVCR80.dll!putc (retsize: 4;)
		uses: edx:edx_2243,Stack +0004:0x3F<32>,Stack +0008:eax_2213,Stack +0134:dwArg04,Stack +0138:dwArg08
		defs: eax:eax_2241,edx:edx_2243
	Mem2248[dwArg08 + 4<32>:word32] = 1<32>
l00735CC3:
	word32 ebx_2252 = Mem2203[Mem2203[dwArg04 + 4<32>:word32] + 0x50<32>:word32]
	branch eax_2213 == 0<32> l00735CDB
l00735CDB:
	word32 eax_2254 = Mem2203[dwArg08 + 0x10<32>:word32]
	branch eax_2254 == Mem2203[dwArg08 + 0x14<32>:word32] l00735CEB
l00735CEB:
	word32 edx_3629
	word32 ecx_3628
	fn00735640(dwArg08, 0x73<32>, out ecx_3628, out edx_3629)
	esp_2210 = fp - 0x124<32>
l00735CE3:
	Mem2267[eax_2254:byte] = 0x73<8>
	Mem2269[dwArg08 + 0x10<32>:word32] = Mem2267[dwArg08 + 0x10<32>:word32] + 1<32>
l00735CCD:
	word32 esp_2275
	word32 edx_2278
	call MSVCR80.dll!putc (retsize: 4;)
		uses: edx:edx_2278,Stack +0004:0x73<32>,Stack +0008:eax_2213,Stack +0134:dwArg04,Stack +0138:dwArg08
		defs: edx:edx_2278,esp:esp_2275
	esp_2210 = esp_2275 + 8<32>
l00735CF5:
	word32 eax_2285 = Mem2284[ebx_2252:word32]
	word32 edx_2287 = esp_2210 + 0x18<32>
	word32 esp_2288 = esp_2210 - 4<i32>
	Mem2289[esp_2288:word32] = edx_2287
	Mem2291[esp_2288 - 4<i32>:word32] = 0<32>
	Mem2294[esp_2288 - 8<i32>:word32] = dwArg04
	word32 esp_2304
	call eax_2285 (retsize: 4;)
		uses: edx:edx_2287,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: eax:eax_2305,edx:edx_2307,esp:esp_2304
	branch eax_1017 > 0x7FFFFFFF<32> l00735D61
l00735D61:
	Mem2316[dwArg08 + 4<32>:word32] = 1<32>
l00735D0E:
	word32 edx_3627
	fn00735790(dwArg08, eax_1017, out edx_3627)
	eax_1017 = fn007356A0(dwArg08, eax_1017, Mem2294[esp_2304 + 0x24<32>:word32], out edx)
l00735BEF:
	word32 eax_2334 = Mem1917[dwArg08:word32]
	branch eax_2334 == 0<32> l00735C03
l00735C03:
	word32 eax_2338 = Mem1917[dwArg08 + 0x10<32>:word32]
	branch eax_2338 == Mem1917[dwArg08 + 0x14<32>:word32] l00735C13
l00735C13:
	word32 edx_3626
	word32 ecx_3625
	fn00735640(dwArg08, 0x63<32>, out ecx_3625, out edx_3626)
	esp_1925 = fp - 0x124<32>
l00735C0B:
	Mem2351[eax_2338:byte] = 0x63<8>
	Mem2353[dwArg08 + 0x10<32>:word32] = Mem2351[dwArg08 + 0x10<32>:word32] + 1<32>
l00735BF5:
	word32 esp_2359
	word32 edx_2362
	call MSVCR80.dll!putc (retsize: 4;)
		uses: edx:edx_2362,Stack +0004:0x63<32>,Stack +0008:eax_2334,Stack +0134:dwArg04,Stack +0138:dwArg08
		defs: edx:edx_2362,esp:esp_2359
	esp_1925 = esp_2359 + 8<32>
l00735C1D:
	word32 edx_3603
	fn00735790(dwArg08, Mem2368[dwArg04 + 8<32>:word32], out edx_3603)
	word32 edx_3604
	fn00735790(dwArg08, Mem2368[dwArg04 + 0xC<32>:word32], out edx_3604)
	word32 edx_3605
	fn00735790(dwArg08, Mem2368[dwArg04 + 0x10<32>:word32], out edx_3605)
	word32 edx_3606
	fn00735790(dwArg08, Mem2368[dwArg04 + 0x14<32>:word32], out edx_3606)
	word32 ecx_2412 = Mem2368[dwArg04 + 0x18<32>:word32]
	Mem2414[esp_1925 - 4<i32>:word32] = dwArg08
	Mem2416[esp_1925 - 8<i32>:word32] = ecx_2412
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 edx_3608
	fn00735890(edx, ebx, 1<32>, dwArg08, dwArg04, es, ds, stackArg4, dwArg04, out edx_3608)
	word32 esp_2417 = esp_1925 - 8<i32>
	word32 edx_2423 = Mem2416[dwArg04 + 0x1C<32>:word32]
	Mem2425[esp_2417 - 4<i32>:word32] = dwArg08
	Mem2427[esp_2417 - 8<i32>:word32] = edx_2423
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 edx_3610
	fn00735890(edx_2423, ebx, 1<32>, dwArg08, dwArg04, es, ds, stackArg4, dwArg04, out edx_3610)
	word32 eax_2434 = Mem2427[dwArg04 + 0x20<32>:word32]
	Mem2436[esp_2417 - 12<i32>:word32] = dwArg08
	Mem2438[esp_2417 - 16<i32>:word32] = eax_2434
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 edx_3612
	fn00735890(edx, ebx, 1<32>, dwArg08, dwArg04, es, ds, stackArg4, dwArg04, out edx_3612)
	word32 ecx_2445 = Mem2438[dwArg04 + 0x24<32>:word32]
	Mem2447[esp_2417 - 20<i32>:word32] = dwArg08
	Mem2449[esp_2417 - 24<i32>:word32] = ecx_2445
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 edx_3614
	fn00735890(edx, ebx, 1<32>, dwArg08, dwArg04, es, ds, stackArg4, dwArg04, out edx_3614)
	word32 edx_2456 = Mem2449[dwArg04 + 0x28<32>:word32]
	Mem2458[esp_2417 - 28<i32>:word32] = dwArg08
	Mem2460[esp_2417 - 32<i32>:word32] = edx_2456
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 edx_3616
	fn00735890(edx_2456, ebx, 1<32>, dwArg08, dwArg04, es, ds, stackArg4, dwArg04, out edx_3616)
	word32 eax_2467 = Mem2460[dwArg04 + 0x2C<32>:word32]
	Mem2469[esp_2417 - 36<i32>:word32] = dwArg08
	Mem2471[esp_2417 - 40<i32>:word32] = eax_2467
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 edx_3618
	fn00735890(edx, ebx, 1<32>, dwArg08, dwArg04, es, ds, stackArg4, dwArg04, out edx_3618)
	word32 ecx_2478 = Mem2471[dwArg04 + 0x30<32>:word32]
	Mem2480[esp_2417 - 44<i32>:word32] = dwArg08
	Mem2482[esp_2417 - 48<i32>:word32] = ecx_2478
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 edx_3620
	fn00735890(edx, ebx, 1<32>, dwArg08, dwArg04, es, ds, stackArg4, dwArg04, out edx_3620)
	word32 edx_2489 = Mem2482[dwArg04 + 0x34<32>:word32]
	Mem2491[esp_2417 - 52<i32>:word32] = dwArg08
	Mem2493[esp_2417 - 56<i32>:word32] = edx_2489
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 edx_3622
	fn00735890(edx_2489, ebx, 1<32>, dwArg08, dwArg04, es, ds, stackArg4, dwArg04, out edx_3622)
	word32 edx_3623
	fn00735790(dwArg08, Mem2493[dwArg04 + 0x38<32>:word32], out edx_3623)
	word32 eax_2510 = Mem2493[dwArg04 + 0x3C<32>:word32]
	Mem2512[esp_2417 + 4<32>:word32] = dwArg08
	Mem2514[esp_2417:word32] = eax_2510
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	eax_1017 = fn00735890(edx, ebx, 1<32>, dwArg08, dwArg04, es, ds, stackArg4, dwArg04, out edx)
l00735A1D:
	word32 eax_2523 = Mem26[dwArg08:word32]
	branch eax_2523 == 0<32> l00735A34
l00735A34:
	eax_1017 = Mem26[dwArg08 + 0x10<32>:word32]
	branch eax_1017 == Mem26[dwArg08 + 0x14<32>:word32] l00735A47
l00735A47:
	word32 ecx_3582
	eax_1017 = fn00735640(dwArg08, 0x54<32>, out ecx_3582, out edx)
l00735A3C:
	Mem2540[eax_1017:byte] = 0x54<8>
	Mem2542[dwArg08 + 0x10<32>:word32] = Mem2540[dwArg08 + 0x10<32>:word32] + 1<32>
l00735A23:
	call MSVCR80.dll!putc (retsize: 4;)
		uses: edx:edx_2551,Stack +0004:0x54<32>,Stack +0008:eax_2523,Stack +0134:dwArg04,Stack +0138:dwArg08
		defs: eax:eax_2549,edx:edx_2551
l007359DC:
	word32 eax_2556 = Mem26[dwArg08:word32]
	branch eax_2556 == 0<32> l007359F3
l007359F3:
	eax_1017 = Mem26[dwArg08 + 0x10<32>:word32]
	branch eax_1017 == Mem26[dwArg08 + 0x14<32>:word32] l00735A06
l00735A06:
	word32 ecx_3581
	eax_1017 = fn00735640(dwArg08, 0x46<32>, out ecx_3581, out edx)
l007359FB:
	Mem2573[eax_1017:byte] = 0x46<8>
	Mem2575[dwArg08 + 0x10<32>:word32] = Mem2573[dwArg08 + 0x10<32>:word32] + 1<32>
l007359E2:
	call MSVCR80.dll!putc (retsize: 4;)
		uses: edx:edx_2584,Stack +0004:0x46<32>,Stack +0008:eax_2556,Stack +0134:dwArg04,Stack +0138:dwArg08
		defs: eax:eax_2582,edx:edx_2584
l0073599B:
	word32 eax_2589 = Mem26[dwArg08:word32]
	branch eax_2589 == 0<32> l007359B2
l007359B2:
	eax_1017 = Mem26[dwArg08 + 0x10<32>:word32]
	branch eax_1017 == Mem26[dwArg08 + 0x14<32>:word32] l007359C5
l007359C5:
	word32 ecx_3580
	eax_1017 = fn00735640(dwArg08, 0x2E<32>, out ecx_3580, out edx)
l007359BA:
	Mem2606[eax_1017:byte] = 0x2E<8>
	Mem2608[dwArg08 + 0x10<32>:word32] = Mem2606[dwArg08 + 0x10<32>:word32] + 1<32>
l007359A1:
	call MSVCR80.dll!putc (retsize: 4;)
		uses: edx:edx_2617,Stack +0004:0x2E<32>,Stack +0008:eax_2589,Stack +0134:dwArg04,Stack +0138:dwArg08
		defs: eax:eax_2615,edx:edx_2617
l0073595A:
	word32 eax_2622 = Mem26[dwArg08:word32]
	branch eax_2622 == 0<32> l00735971
l00735971:
	eax_1017 = Mem26[dwArg08 + 0x10<32>:word32]
	branch eax_1017 == Mem26[dwArg08 + 0x14<32>:word32] l00735984
l00735984:
	word32 ecx_3579
	eax_1017 = fn00735640(dwArg08, 0x53<32>, out ecx_3579, out edx)
l00735979:
	Mem2639[eax_1017:byte] = 0x53<8>
	Mem2641[dwArg08 + 0x10<32>:word32] = Mem2639[dwArg08 + 0x10<32>:word32] + 1<32>
l00735960:
	call MSVCR80.dll!putc (retsize: 4;)
		uses: edx:edx_2650,Stack +0004:0x53<32>,Stack +0008:eax_2622,Stack +0134:dwArg04,Stack +0138:dwArg08
		defs: eax:eax_2648,edx:edx_2650
l00735919:
	word32 eax_2655 = Mem26[dwArg08:word32]
	branch eax_2655 == 0<32> l00735930
l00735930:
	eax_1017 = Mem26[dwArg08 + 0x10<32>:word32]
	branch eax_1017 == Mem26[dwArg08 + 0x14<32>:word32] l00735943
l00735943:
	word32 ecx_3578
	eax_1017 = fn00735640(dwArg08, 0x4E<32>, out ecx_3578, out edx)
l00735938:
	Mem2672[eax_1017:byte] = 0x4E<8>
	Mem2674[dwArg08 + 0x10<32>:word32] = Mem2672[dwArg08 + 0x10<32>:word32] + 1<32>
l0073591F:
	call MSVCR80.dll!putc (retsize: 4;)
		uses: edx:edx_2683,Stack +0004:0x4E<32>,Stack +0008:eax_2655,Stack +0134:dwArg04,Stack +0138:dwArg08
		defs: eax:eax_2681,edx:edx_2683
l007358D8:
	word32 eax_2688 = Mem26[dwArg08:word32]
	branch eax_2688 == 0<32> l007358EF
l007358EF:
	eax_1017 = Mem26[dwArg08 + 0x10<32>:word32]
	branch eax_1017 == Mem26[dwArg08 + 0x14<32>:word32] l00735902
l00735902:
	word32 ecx_3577
	eax_1017 = fn00735640(dwArg08, 0x30<32>, out ecx_3577, out edx)
l007358F7:
	Mem2705[eax_1017:byte] = 0x30<8>
	Mem2707[dwArg08 + 0x10<32>:word32] = Mem2705[dwArg08 + 0x10<32>:word32] + 1<32>
l007358DE:
	call MSVCR80.dll!putc (retsize: 4;)
		uses: edx:edx_2716,Stack +0004:0x30<32>,Stack +0008:eax_2688,Stack +0134:dwArg04,Stack +0138:dwArg08
		defs: eax:eax_2714,edx:edx_2716
l007358C8:
	Mem2721[dwArg08 + 4<32>:word32] = 2<32>
l0073653D:
	Mem2731[dwArg08 + 8<32>:word32] = Mem2724[dwArg08 + 8<32>:word32] + 0xFFFFFFFF<32>
l00736541:
	word32 ecx_3679
	word32 eax_2841 = fn00694B8E(eax_1017, eax_7 ^ fp - 276<i32>, edx, ebx, ebp, esi, edi, es, ds, ebx, out ecx_3679)
	edxOut = edx
	return eax_2841
fn00735890_exit:


void fn00736560()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006F6810
// MayUse: 
// LiveOut:
// Trashed: SCZO eax ecx Top
// Preserved: esp
fn00736560_entry:
l00736560:
	word32 edx_39
	fn00735790(fp - 0x20<32>, dwArg04, out edx_39)
	return
fn00736560_exit:


void fn00736590(word32 dwArg04, word32 dwArg08, word32 dwArg0C)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006F6810
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut:
// Trashed: SCZO eax ecx edx esi Top
// Preserved: esp
fn00736590_entry:
l00736590:
	word32 dwLoc08_74
	branch dwArg0C <= 0<32> l007365BF
l007365BF:
	dwLoc08_74 = 0<32>
l007365B4:
	word32 edx_101
	word32 ecx_100
	dwLoc08_74 = fn006FDCC0(out ecx_100, out edx_101)
l007365C7:
	word32 edx_107
	fn00735890(dwArg04, ebx, ebp, dwArg0C, edi, es, ds, dwArg04, fp - 0x20<32>, out edx_107)
	branch dwLoc08_74 == 0<32> l007365FE
l007365E6:
	Mem49[dwLoc08_74:word32] = Mem33[dwLoc08_74:word32] + 0xFFFFFFFF<32>
	branch Mem49[dwLoc08_74:word32] != 0<32> l007365FE
l007365F2:
	word32 ecx_53 = Mem49[dwLoc08_74 + 4<32>:word32]
	call Mem49[ecx_53 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_53,Stack +0004:dwLoc08_96,Stack +000C:dwArg08,Stack +0010:dwArg0C,Stack +002C:dwArg04,Stack +0030:dwArg08,Stack +0034:dwArg0C
l007365FE:
	return
fn00736590_exit:


word32 fn00736610(word32 eax, word32 edx, word32 edi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn007367D0
// MayUse:  eax:[0..31] edi:[0..31] edx:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx Top
// Preserved: esi esp
fn00736610_entry:
l00736610:
	word32 esi_19 = eax
	word32 eax_10 = Mem6[edi:word32]
	branch eax_10 == 0<32> l00736629
l00736629:
	word32 ecx_14 = Mem6[edi + 0x10<32>:word32]
	word32 eax_16 = Mem6[edi + 0x14<32>:word32] - ecx_14
	branch eax_16 >= eax l00736636
l00736633_1:
	esi_19 = eax_16
l00736636:
	memcpy(edx, ecx_14, esi_19)
	Mem34[edi + 0x10<32>:word32] = Mem30[edi + 0x10<32>:word32] + esi_19
	return esi_19
l00736619:
	return fread(edx, 1<32>, eax, eax_10)
fn00736610_exit:


word32 fn00736650(word32 esi, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn007367D0
// MayUse:  esi:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ecx edx Top
// Preserved: ebx edi esp
fn00736650_entry:
l00736650:
	word32 edi_20
	word32 eax_6 = Mem0[esi:word32]
	word32 esp_13 = fp - 8<i32>
	branch eax_6 == 0<32> l00736669
l00736669:
	word32 eax_17 = Mem15[esi + 0x10<32>:word32]
	branch eax_17 >=u Mem15[esi + 0x14<32>:word32] l00736680
l00736680:
	edi_20 = 0xFFFFFFFF<32>
l00736671:
	edi_20 = CONVERT(CONVERT(Mem15[eax_17:byte], byte, word16), word16, word32)
	Mem27[esi + 0x10<32>:word32] = eax_17 + 1<32>
l0073665E:
	word32 esp_30
	word32 eax_31
	call MSVCR80.dll!getc (retsize: 4;)
		uses: Stack +0004:eax_6
		defs: eax:eax_31,esp:esp_30
	esp_13 = esp_30 + 4<32>
	edi_20 = CONVERT(SLICE(eax_31, word16, 0), word16, word32)
l00736683:
	byte al_71
	word32 eax_42 = Mem41[esi:word32]
	branch eax_42 == 0<32> l00736691
l00736691:
	word32 ecx_46 = Mem41[esi + 0x10<32>:word32]
	branch ecx_46 >=u Mem41[esi + 0x14<32>:word32] l007366A4
l007366A4:
	al_71 = 0xFF<8> (alias)
l00736699:
	al_71 = Mem41[ecx_46:byte] (alias)
	Mem55[esi + 0x10<32>:word32] = ecx_46 + 1<32>
l00736689:
	Mem58[esp_13 - 4<i32>:word32] = eax_42
	word32 eax_63
	call MSVCR80.dll!getc (retsize: 4;)
		defs: eax:eax_63
	al_71 = SLICE(eax_63, byte, 0) (alias)
l007366A7:
	word32 edx_79 = SEQ(0<16>, al_71, 0<8>)
	edxOut = edx_79
	word32 edi_80 = edi_20 | edx_79
	return CONVERT(SLICE(-(edi_80 & 0xFFFF8000<32>), word16, 0), word16, int32) | CONVERT(SLICE(edi_80, word16, 0), word16, int32)
fn00736650_exit:


word32 fn007366D0(word32 eax, word32 ecx, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00736780
//      fn007367D0
//      fn00737370
// MayUse:  eax:[0..31] ecx:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax edx Top
// Preserved: ebx ecx edi esi esp
fn007366D0_entry:
l007366D0:
	word32 esi_8 = Mem6[ecx:word32]
	branch esi_8 == 0<32> l00736705
l00736705:
	word32 eax_20
	word32 edx_15 = Mem13[ecx + 0x10<32>:word32]
	word32 edi_16 = Mem13[ecx + 0x14<32>:word32]
	branch edx_15 >=u edi_16 l0073671A
l0073671A:
	eax_20 = 0xFFFFFFFF<32>
l0073670F:
	eax_20 = CONVERT(Mem13[edx_15:byte], byte, word32)
	Mem26[ecx + 0x10<32>:word32] = edx_15 + 1<32>
l0073671D:
	word32 edx_34
	word32 esi_29 = Mem28[ecx + 0x10<32>:word32]
	branch esi_29 >=u edi_16 l0073672F
l0073672F:
	edx_34 = 0xFFFFFFFF<32>
l00736724:
	edx_34 = CONVERT(Mem28[esi_29:byte], byte, word32)
	Mem40[ecx + 0x10<32>:word32] = esi_29 + 1<32>
l00736732:
	word32 edx_52
	word32 esi_43 = Mem42[ecx + 0x10<32>:word32]
	word32 eax_48 = eax_20 | edx_34 << 8<32>
	branch esi_43 >=u edi_16 l00736749
l00736749:
	edx_52 = 0xFFFFFFFF<32>
l0073673E:
	edx_52 = CONVERT(Mem42[esi_43:byte], byte, word32)
	Mem58[ecx + 0x10<32>:word32] = esi_43 + 1<32>
l0073674C:
	word32 eax_62 = eax_48 | edx_52 << 0x10<32>
	word32 edx_65 = Mem64[ecx + 0x10<32>:word32]
	branch edx_65 >=u edi_16 l00736769
l00736769:
	edxOut = edx_65
	return eax_62 | 0xFF000000<32>
l00736758:
	word32 eax_87 = eax_62 | CONVERT(Mem64[edx_65:byte], byte, word32) << 0x18<32>
	Mem90[ecx + 0x10<32>:word32] = edx_65 + 1<32>
	edxOut = edx_65 + 1<32>
	return eax_87
l007366D8:
	word32 esp_99
	word32 ecx_100
	word32 eax_101
	call MSVCR80.dll!getc (retsize: 4;)
		uses: eax:eax,ecx:ecx,Stack +0004:esi_8
		defs: eax:eax_101,ecx:ecx_100,esp:esp_99
	Mem106[esp_99 - 4<i32>:word32] = esi_8
	word32 esp_108
	word32 ecx_109
	word32 eax_110
	call MSVCR80.dll!getc (retsize: 4;)
		uses: eax:eax_101,ecx:ecx_100
		defs: eax:eax_110,ecx:ecx_109,esp:esp_108
	Mem116[esp_108 - 4<i32>:word32] = esi_8
	word32 esp_120
	word32 ecx_121
	word32 eax_122
	call MSVCR80.dll!getc (retsize: 4;)
		uses: eax:eax_110 << 8<32>,ecx:ecx_109
		defs: eax:eax_122,ecx:ecx_121,esp:esp_120
	Mem128[esp_120 - 4<i32>:word32] = esi_8
	word32 eax_134
	word32 edx_135
	call MSVCR80.dll!getc (retsize: 4;)
		uses: eax:eax_122 << 0x10<32>,ecx:ecx_121
		defs: eax:eax_134,edx:edx_135
	edxOut = edx_135
	return eax_101 | eax_110 << 8<32> | eax_122 << 0x10<32> | eax_134 << 0x18<32>
fn007366D0_exit:


word32 fn00736780(word32 ebx, word32 ebp, word32 esi, word32 edi, selector es, selector ds, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn007367D0
// MayUse:  cs:[0..15] ds:[0..15] ebp:[0..31] ebx:[0..31] edi:[0..31] es:[0..15] esi:[0..31] fs:[0..15] gs:[0..15] ss:[0..15]
// LiveOut: eax edx
// Trashed: SCZDOP eax ecx edx Top
// Preserved: edi esp
fn00736780_entry:
l00736780:
	word32 eax_7 = Mem0[0x00A14188<p32>:word32] ^ fp - 0xC<32>
	word32 edx_90
	word32 edx_91
	fn007366D0(fn007366D0(eax_7, esi, out edx_90), esi, out edx_91)
	word32 edx_45
	word32 ecx_92
	word32 ecx_93
	word32 eax_62 = fn00694B8E(fn00710CB0(fp - 0xC<32>, 8<32>, 1<32>, 1<32>, out ecx_92, out edx_45), eax_7 ^ fp - 0xC<32>, edx_45, ebx, ebp, esi, edi, es, ds, edi, out ecx_93)
	edxOut = edx_45
	return eax_62
fn00736780_exit:


word32 fn007367D0(word32 edx, word32 ebx, word32 ebp, word32 esi, word32 edi, selector es, selector ds, word32 dwArg04, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn007367D0
//      fn007373A0
//      fn00737410
// MayUse:  cs:[0..15] ds:[0..15] ebp:[0..31] ebx:[0..31] edi:[0..31] edx:[0..31] es:[0..15] esi:[0..31] fs:[0..15] gs:[0..15] ss:[0..15] Stack +0004:[0..31]
// LiveOut: eax edx
// Trashed: SCZDOP eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn007367D0_entry:
l007367D0:
	word32 eax_7 = Mem0[0x00A14188<p32>:word32] ^ fp - 0x14C<32>
	word32 esp_19 = fp - 0x15C<32>
	word32 eax_23 = Mem21[dwArg04:word32]
	branch eax_23 == 0<32> l00736807
l00736807:
	word32 eax_27 = Mem21[dwArg04 + 0x10<32>:word32]
	branch eax_27 >=u Mem21[dwArg04 + 0x14<32>:word32] l0073681E
l0073681E:
l0073680F:
	Mem35[dwArg04 + 0x10<32>:word32] = eax_27 + 1<32>
l007367FB:
	word32 esp_38
	word32 eax_39
	call MSVCR80.dll!getc (retsize: 4;)
		uses: edx:edx_41,Stack +0004:eax_23,Stack +0168:dwArg04
		defs: eax:eax_39,edx:edx_41,esp:esp_38
	Mem46[esp_38 + 0x18<32>:word32] = eax_39
	esp_19 = esp_38 + 4<32>
l00736826:
	word32 eax_1385
	Mem51[dwArg04 + 8<32>:word32] = Mem49[dwArg04 + 8<32>:word32] + 1<32>
	word32 eax_52 = Mem51[dwArg04 + 8<32>:word32]
	branch eax_52 <= 0x7D0<32> l00736859
l00736859:
	word32 eax_1760
	word32 esp_1762
	word32 ebp_100 = Mem51[esp_19 + 0x14<32>:word32]
	branch ebp_100 >u 0x7B<32> l007371C8
l00736869:
	word32 esp_1705
	word32 eax_60 = CONVERT(Mem51[ebp_100 + 0x737259<32>:byte], byte, word32)
	switch (eax_60) { l00736877 l007371C8 l007371C8 l007371C8 l007371C8 l007371C8 l007371C8 l007371C8 l007371C8 l007371C8 l007371C8 l007371C8 l007371C8 l007371C8 l007371C8 l007371C8 l007371C8 l007371C8 l007371C8 l007371C8 l007371C8 l007371C8 l007371C8 l007371C8 l007371C8 l007371C8 l007371C8 l007371C8 l007371C8 l007371C8 l007371C8 l007371C8 l007371C8 l007371C8 l007371C8 l007371C8 l007371C8 l007371C8 l007371C8 l007371C8 l007371C8 l00736D49 l007371C8 l007371C8 l007371C8 l007371C8 l007371C8 l007368A9 l007371C8 l007371DB l007371C8 l007371C8 l007371C8 l007371C8 l007371C8 l007371C8 l007371C8 l007371C8 l007371C8 l007371C8 l007371C8 l00736EDA l007371C8 l00736EDA l007371C8 l007371C8 l007371C8 l007371C8 l007371C8 l007371C8 l007371C8 l007368B9 l007371C8 l007371C8 l007368EE l007371C8 l007371C8 l007371C8 l007371C8 l00736888 l007371C8 l007371C8 l007371C8 l00736CA0 l00736898 l007368C9 l007371C8 l007371C8 l007371C8 l007371C8 l007371C8 l007371C8 l00736DEA l007371C8 l007371C8 l007371C8 l007371C8 l007371C8 l007371C8 l007371C8 l00736F94 l007371C8 l007371C8 l007369B6 l00736A1A l007371C8 l007368D9 l007371C8 l007371C8 l007368FA l007371C8 l007371C8 l007371C8 l007371C8 l007371C8 l007371C8 l00736BF7 l00736BF7 l00736CC8 l007371C8 l007371C8 l00736A7D l00736B44 l007371C8 l00736E4B }
l00736E4B:
	word32 ecx_2769
	word32 eax_64 = fn006FDCC0(out ecx_2769, out edx)
	Mem71[esp_19 + 0x10<32>:word32] = eax_64
	branch eax_64 == 0<32> l007371DB
l00736E5C:
	Mem74[esp_19 - 4<i32>:word32] = dwArg04
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 eax_76 = fn007367D0(edx, MSVCR80.dll!getc, ebp_100, 1<32>, dwArg04, es, ds, stackArg4, out edx)
	word32 esi_183 = eax_76
	esp_1705 = esp_19
	branch eax_76 == 0<32> l00736EC4
l00736E6B:
l00736E70:
	word32 esp_87 = esp_1705 - 4<i32>
	Mem89[esp_87:word32] = dwArg04
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 edx_97
	word32 eax_95 = fn007367D0(edx_97, MSVCR80.dll!getc, ebp_100, esi_183, dwArg04, es, ds, stackArg4, out edx_97)
	ebp_100 = eax_95
	branch eax_95 == 0<32> l00736E8E
l00736E7F:
	word32 ecx_105 = Mem89[esp_87 + 0x14<32>:word32]
	Mem107[esp_87:word32] = eax_95
	Mem109[esp_87 - 4<i32>:word32] = esi_183
	Mem111[esp_87 - 8<i32>:word32] = ecx_105
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 stackArg12 = <invalid>
	word32 edi_2786
	word32 ebx_2785
	word32 edx_2784
	word32 ecx_2783
	fn006FBD90(stackArg4, dwArg04, stackArg12, out ecx_2783, out edx_2784, out ebx_2785, out edi_2786)
l00736E8E:
	word32 v28_122 = Mem121[esi_183:word32] + 0xFFFFFFFF<32>
	Mem123[esi_183:word32] = v28_122
	word32 esp_128 = esp_1705
	branch v28_122 != 0<32> l00736E9F
l00736E93:
	word32 edx_126 = Mem123[esi_183 + 4<32>:word32]
	word32 eax_127 = Mem123[edx_126 + 0x18<32>:word32]
	Mem130[esp_1705 - 4<i32>:word32] = esi_183
	word32 esp_135
	call eax_127 (retsize: 4;)
		uses: edx:edx_126,Stack +0008:dwArg04
		defs: esp:esp_135
	esp_128 = esp_135 + 4<32>
l00736E9F:
	branch eax_95 == 0<32> l00736EB5
l00736EA3:
	word32 v29_148 = Mem147[eax_95:word32] + 0xFFFFFFFF<32>
	Mem149[eax_95:word32] = v29_148
	branch v29_148 != 0<32> l00736EB5
l00736EA9:
	word32 ecx_152 = Mem149[eax_95 + 4<32>:word32]
	word32 edx_153 = Mem149[ecx_152 + 0x18<32>:word32]
	Mem156[esp_128 - 4<i32>:word32] = eax_95
	word32 esp_161
	word32 edx_164
	call edx_153 (retsize: 4;)
		uses: ecx:ecx_152,edx:edx_164,Stack +0008:dwArg04
		defs: edx:edx_164,esp:esp_161
	esp_128 = esp_161 + 4<32>
l00736EB5:
	word32 esp_170 = esp_128 - 4<i32>
	Mem172[esp_170:word32] = dwArg04
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 eax_178 = fn007367D0(edx, MSVCR80.dll!getc, eax_95, esi_183, dwArg04, es, ds, stackArg4, out edx)
	esi_183 = eax_178
	esp_1705 = esp_170 + 4<32>
	branch eax_178 != 0<32> l00736E70
l00736EC4:
	word32 eax_188 = fn006E0FC0()
	eax_1385 = Mem192[esp_1705 + 0x10<32>:word32]
	branch eax_188 == 0<32> l007371DD
l00736ED5:
l00736B44:
	branch fn00736610(8<32>, esp_19 + 0x48<32>, dwArg04) != 8<32> l00736877
l00736B5B:
	word32 esp_206 = esp_19 - 4<i32>
	Mem207[esp_206:word32] = 1<32>
	word32 edx_205 = esp_19 + 0x48<32>
	Mem209[esp_206 - 4<i32>:word32] = edx_205
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	real64 rRet0
	edx = fn00701650(SLICE(edx_205, word24, 8), MSVCR80.dll!getc, ebp_100, 1<32>, dwArg04, es, ds, stackArg4, dwArg04, out rRet0)
	Mem218[esp_206 + 0x34<32>:real64] = rRet0
	esp_19 = esp_206 + 4<32>
	branch PARITY_EVEN(rRet0 - Mem218[0x008A86F8<p32>:real64]) l00736B8C
l00736B7F:
	branch fn006E0FC0() != 0<32> l007371DB
l00736B8C:
	branch fn00736610(8<32>, esp_206 + 0x4C<32>, dwArg04) != 8<32> l00736A0B
l00736BA3:
	Mem254[esp_206:word32] = 1<32>
	Mem256[esp_206 - 4<i32>:word32] = esp_206 + 0x4C<32>
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	real64 rRet0
	edx = fn00701650(SLICE(edx, word24, 8), MSVCR80.dll!getc, ebp_100, 1<32>, dwArg04, es, ds, stackArg4, dwArg04, out rRet0)
	Mem268[esp_206 + 0x3C<32>:real64] = rRet0
	real64 rLoc1_2390 = rRet0
	branch PARITY_EVEN(rRet0 - Mem268[0x008A86F8<p32>:real64]) l00736BDC
l00736BC9:
	branch fn006E0FC0() != 0<32> l007371DB
l00736BD8:
	rLoc1_2390 = Mem268[esp_206 + 0x3C<32>:real64]
l00736BDC:
	Mem302[esp_206 - 0xC<32>:real64] = Mem268[esp_206 + 0x34<32>:real64]
	Mem304[esp_206 - 4<i32>:real64] = rLoc1_2390
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 stackArg12 = <invalid>
	word32 stackArg16 = <invalid>
	eax_1385 = fn007331D0(stackArg4, dwArg04, stackArg12, stackArg16, out edx)
l00736A7D:
	word32 esi_327
	word32 eax_320 = Mem51[dwArg04:word32]
	branch eax_320 == 0<32> l00736A8D
l00736A8D:
	word32 eax_324 = Mem51[dwArg04 + 0x10<32>:word32]
	branch eax_324 >=u Mem51[dwArg04 + 0x14<32>:word32] l00736A0B
l00736A99:
	esi_327 = CONVERT(Mem51[eax_324:byte], byte, word32)
	Mem330[dwArg04 + 0x10<32>:word32] = eax_324 + 1<32>
l00736A83:
	Mem332[esp_19 - 4<i32>:word32] = eax_320
	word32 esp_333
	word32 eax_334
	word32 edx_336
	call MSVCR80.dll!getc (retsize: 4;)
		uses: edx:edx_336,Stack +0008:dwArg04
		defs: eax:eax_334,edx:edx_336,esp:esp_333
	esp_19 = esp_333 + 4<32>
	esi_327 = eax_334
l00736AA2:
	branch esi_327 == 0xFFFFFFFF<32> l00736A0B
l00736AAB:
	branch fn00736610(esi_327, esp_19 + 0x58<32>, dwArg04) != esi_327 l00736A0B
l00736ABE:
	word32 esi_382
	word32 esp_358 = esp_19 - 4<i32>
	Mem359[esp_358:word32] = esp_19 + 0x58<32>
	Mem360[esp_358 + 0x5C<32> + esi_327:byte] = 0<8>
	word64 rRet0_368
	fn0074F3B0(Mem360[esp_358:word32], out rRet0_368)
	Mem372[esp_358 + 0x4C<32>:real64] = rRet0_368
	word32 eax_374 = Mem372[dwArg04:word32]
	word32 esp_375 = esp_358 + 4<32>
	branch eax_374 == 0<32> l00736AE4
l00736AE4:
	word32 eax_379 = Mem372[dwArg04 + 0x10<32>:word32]
	branch eax_379 >=u Mem372[dwArg04 + 0x14<32>:word32] l00736B33
l00736AEC:
	esi_382 = CONVERT(Mem372[eax_379:byte], byte, word32)
	Mem385[dwArg04 + 0x10<32>:word32] = eax_379 + 1<32>
l00736ADA:
	Mem387[esp_358:word32] = eax_374
	word32 esp_391
	word32 eax_392
	word32 edx_394
	call MSVCR80.dll!getc (retsize: 4;)
		uses: edx:edx_394,Stack +0008:dwArg04
		defs: eax:eax_392,edx:edx_394,esp:esp_391
	esp_375 = esp_391 + 4<32>
	esi_382 = eax_392
l00736AF5:
	branch esi_382 == 0xFFFFFFFF<32> l00736B33
l00736AFA:
	branch fn00736610(esi_382, esp_375 + 0x58<32>, dwArg04) != esi_382 l00736B33
l00736B33:
	word32 edx_417 = Mem415[0x00A1745C<p32>:word32]
	word32 esp_419 = esp_375 - 4<i32>
	Mem420[esp_419:word32] = 0x8DB998<32>
	Mem422[esp_419 - 4<i32>:word32] = edx_417
l00736B09:
	word32 esp_424 = esp_375 - 4<i32>
	Mem425[esp_424:word32] = esp_375 + 0x58<32>
	Mem426[esp_424 + 0x5C<32> + esi_382:byte] = 0<8>
	word64 rRet0_434
	fn0074F3B0(Mem426[esp_424:word32], out rRet0_434)
	Mem443[esp_424 - 0xC<32>:real64] = Mem426[esp_424 + 0x4C<32>:real64]
	Mem445[esp_424 - 4<32>:real64] = rRet0_434
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 stackArg12 = <invalid>
	word32 stackArg16 = <invalid>
	eax_1385 = fn007331D0(stackArg4, dwArg04, stackArg12, stackArg16, out edx)
l00736CC8:
	word32 edx_2768
	word32 eax_460 = fn007366D0(eax_60, dwArg04, out edx_2768)
	branch eax_460 >u 0x7FFFFFFF<32> l007369A5
l00736CDD:
	word32 eax_472
	eax_472 = eax_460
	branch eax_460 != 0<32> l00736CE3
l00736CE1:
	eax_472 = 1<32>
l00736CE3:
	word32 esp_474 = esp_19 - 4<i32>
	Mem476[esp_474:word32] = eax_472
	word32 eax_477 = malloc(Mem476[esp_474:size_t])
	branch eax_477 != 0<32> l00736CFD
l00736CFD:
	branch fn00736610(eax_460, eax_477, dwArg04) == eax_460 l00736D29
l00736D29:
	Mem496[esp_474:word32] = 0<32>
	Mem498[esp_474 - 4<i32>:word32] = eax_460
	Mem500[esp_474 - 8<i32>:word32] = eax_477
	word32 eax_505 = fn0071FC80(out edx)
	Mem511[esp_474 - 12<i32>:word32] = eax_477
	Mem512[esp_474 + 0x14<32>:word32] = eax_505
	free(Mem512[esp_474 - 12<i32>:(ptr32 void)])
	eax_1385 = Mem512[esp_474 + 0x14<32>:word32]
l00736D0A:
	Mem517[esp_474:word32] = eax_477
	free(Mem517[esp_474:(ptr32 void)])
	word32 eax_518 = Mem517[0x00A1745C<p32>:word32]
	Mem520[esp_474 - 4<i32>:word32] = 0x8DB998<32>
	Mem522[esp_474 - 8<i32>:word32] = eax_518
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_2813
	fn006E0F80(stackArg4, dwArg04, out ecx_2813, out edx)
l00736CF3:
	word32 ecx_2804
	eax_1385 = fn006E1210(out ecx_2804, out edx)
l00736BF7:
	word32 edx_2767
	word32 eax_540 = fn007366D0(eax_60, dwArg04, out edx_2767)
	branch eax_540 >u 0x7FFFFFFF<32> l00736C8F
l00736C0C:
	word32 esp_550 = esp_19 - 4<i32>
	Mem551[esp_550:word32] = eax_540
	Mem553[esp_550 - 4<i32>:word32] = 0<32>
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_2794
	word32 eax_559 = fn006EC9B0(stackArg4, dwArg04, out ecx_2794, out edx)
	Mem567[esp_550 + 0x14<32>:word32] = eax_559
	word32 esp_564 = esp_550 + 4<32>
	branch eax_559 == 0<32> l007371DB
l00736C23:
	edx = eax_559 + 0x14<32>
	branch fn00736610(eax_540, eax_559 + 0x14<32>, dwArg04) == eax_540 l00736C5E
l00736C5E:
	branch ebp_100 != 0x74<32> l00736C86
l00736C63:
	Mem583[esp_550:word32] = esp_550 + 0x14<32>
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 edx_2801
	fn006EC890(stackArg4, out edx_2801)
	word32 ecx_591 = Mem583[dwArg04 + 0x18<32>:word32]
	Mem593[esp_550 - 4<i32>:word32] = Mem583[esp_550 + 0x14<32>:word32]
	Mem595[esp_550 - 8<i32>:word32] = ecx_591
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_2803
	branch fn006F2A10(stackArg4, dwArg04, out ecx_2803, out edx) < 0<32> l007371DB
l00736C86:
	eax_1385 = Mem607[esp_19 + 0x10<32>:word32]
l00736C31:
	word32 eax_609 = Mem567[esp_550 + 0x14<32>:word32]
	Mem611[eax_609:word32] = Mem567[eax_609:word32] + 0xFFFFFFFF<32>
	word32 eax_612 = Mem611[esp_550 + 0x14<32>:word32]
	branch Mem611[eax_612:word32] != 0<32> l00736C4D
l00736C41:
	word32 edx_615 = Mem611[eax_612 + 4<32>:word32]
	Mem617[esp_550:word32] = eax_612
	word32 esp_619
	call Mem617[edx_615 + 0x18<32>:word32] (retsize: 4;)
		uses: edx:edx_615,Stack +0008:dwArg04
		defs: esp:esp_619
	esp_564 = esp_619 + 4<32>
l00736C4D:
	word32 ecx_628 = Mem627[0x00A1745C<p32>:word32]
	word32 esp_630 = esp_564 - 4<i32>
	Mem631[esp_630:word32] = 0x8DB998<32>
	Mem633[esp_630 - 4<i32>:word32] = ecx_628
l007368FA:
	word32 edx_2766
	word32 eax_635 = fn007366D0(eax_60, dwArg04, out edx_2766)
	branch eax_635 >u 0x80000001<32> l007369A5
l007369A5:
	word32 ecx_646 = Mem51[0x00A17E2C<p32>:word32]
	word32 esp_648 = esp_19 - 4<i32>
	Mem649[esp_648:word32] = 0x8DB984<32>
	Mem651[esp_648 - 4<i32>:word32] = ecx_646
l00736912:
	word32 ebp_654 = eax_635
	branch eax_635 >= 0<32> l0073691A
l00736918:
	ebp_654 = -eax_635
l0073691A:
	word32 esp_660 = esp_19 - 4<i32>
	Mem662[esp_660:word32] = ebp_654
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	eax_1385 = fn007105C0(stackArg4, out edx)
	Mem677[esp_660 + 0x18<32>:word32] = eax_1385
	word32 esp_674 = esp_660 + 4<32>
	branch eax_1385 == 0<32> l007371DB
l0073692F:
	Mem682[eax_1385 + 8<32>:word32] = eax_635
	word32 ebx_679 = 0<32>
	branch ebp_654 <= 0<32> l007371DD
l0073693C:
	Mem685[esp_660 + 0x1C<32>:word32] = eax_1385 + 0xC<32>
l00736943:
	word32 eax_688 = fn00736650(dwArg04, out edx)
	word16 ax_745 = SLICE(eax_688, word16, 0)
	branch eax_688 < 0<32> l0073696C
l0073696C:
	word32 eax_700 = Mem699[esp_660 + 0x18<32>:word32]
	word32 v36_701 = Mem699[eax_700:word32] + 0xFFFFFFFF<32>
	Mem702[eax_700:word32] = v36_701
	branch v36_701 != 0<32> l00736981
l00736975:
	word32 ecx_705 = Mem702[eax_700 + 4<32>:word32]
	word32 edx_706 = Mem702[ecx_705 + 0x18<32>:word32]
	Mem708[esp_660:word32] = eax_700
	word32 esp_713
	word32 edx_716
	call edx_706 (retsize: 4;)
		uses: ecx:ecx_705,edx:edx_716,Stack +0008:dwArg04
		defs: edx:edx_716,esp:esp_713
	esp_674 = esp_713 + 4<32>
l00736981:
	word32 eax_722 = Mem721[0x00A17E2C<p32>:word32]
	word32 esp_724 = esp_674 - 4<i32>
	Mem725[esp_724:word32] = 0x8DB984<32>
	Mem727[esp_724 - 4<i32>:word32] = eax_722
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_2799
	fn006E0F80(stackArg4, dwArg04, out ecx_2799, out edx)
	Mem740[esp_724 + 0x18<32>:word32] = 0<32>
	eax_1385 = Mem740[esp_724 + 0x18<32>:word32]
l0073694E:
	word32 ecx_744 = Mem699[esp_660 + 0x1C<32>:word32]
	Mem746[ecx_744:word16] = ax_745
	Mem750[esp_660 + 0x1C<32>:word32] = ecx_744 + 2<32>
	ebx_679 = ebx_679 + 1<32>
	branch ebx_679 < ebp_654 l00736943
l00736963:
	eax_1385 = Mem750[esp_660 + 0x18<32>:word32]
l007368D9:
	word32 edx_2763
	Mem761[esp_19 - 4<i32>:word32] = fn007366D0(eax_60, dwArg04, out edx_2763)
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_2765
	eax_1385 = fn007050A0(stackArg4, out ecx_2765, out edx)
l00736A1A:
	branch fn00736610(8<32>, esp_19 + 0x48<32>, dwArg04) != 8<32> l00736877
l00736A31:
	word32 esp_781 = esp_19 - 4<i32>
	Mem782[esp_781:word32] = 1<32>
	word32 edx_780 = esp_19 + 0x48<32>
	Mem784[esp_781 - 4<i32>:word32] = edx_780
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	real64 rRet0
	edx = fn00701650(SLICE(edx_780, word24, 8), MSVCR80.dll!getc, ebp_100, 1<32>, dwArg04, es, ds, stackArg4, dwArg04, out rRet0)
	Mem791[esp_781 + 0x34<32>:real64] = rRet0
	real64 rLoc1_2431 = rRet0
	branch PARITY_EVEN(rRet0 - Mem791[0x008A86F8<p32>:real64]) l00736A6A
l00736A57:
	branch fn006E0FC0() != 0<32> l007371DB
l00736A66:
	rLoc1_2431 = Mem791[esp_781 + 0x34<32>:real64]
l00736A6A:
	Mem822[esp_781 - 4<i32>:real64] = rLoc1_2431
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	real64 stackArg4 = <invalid>
	eax_1385 = fn006FF060(stackArg4, out edx)
l007369B6:
	word32 esi_844
	word32 eax_837 = Mem51[dwArg04:word32]
	branch eax_837 == 0<32> l007369C6
l007369C6:
	word32 eax_841 = Mem51[dwArg04 + 0x10<32>:word32]
	branch eax_841 >=u Mem51[dwArg04 + 0x14<32>:word32] l00736A0B
l007369CE:
	esi_844 = CONVERT(Mem51[eax_841:byte], byte, word32)
	Mem847[dwArg04 + 0x10<32>:word32] = eax_841 + 1<32>
l007369BC:
	Mem849[esp_19 - 4<i32>:word32] = eax_837
	word32 esp_850
	word32 eax_851
	word32 edx_853
	call MSVCR80.dll!getc (retsize: 4;)
		uses: edx:edx_853,Stack +0008:dwArg04
		defs: eax:eax_851,edx:edx_853,esp:esp_850
	esp_19 = esp_850 + 4<32>
	esi_844 = eax_851
l007369D7:
	branch esi_844 == 0xFFFFFFFF<32> l00736A0B
l007369DC:
	branch fn00736610(esi_844, esp_19 + 0x58<32>, dwArg04) != esi_844 l00736A0B
l00736A0B:
	eax_1760 = Mem874[0x00A1745C<p32>:word32]
	esp_1762 = esp_19 - 4<i32>
	Mem881[esp_1762:word32] = 0x8DB998<32>
l007369EB:
	word32 esp_883 = esp_19 - 4<i32>
	Mem884[esp_883:word32] = esp_19 + 0x58<32>
	Mem885[esp_883 + 0x5C<32> + esi_844:byte] = 0<8>
	word64 rRet0_893
	Mem898[esp_883 - 4<i32>:word32] = fn0074F3B0(Mem885[esp_883:word32], out rRet0_893)
	Mem899[esp_883 - 4<i32>:real64] = rRet0_893
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	real64 stackArg4 = <invalid>
	eax_1385 = fn006FF060(stackArg4, out edx)
l00736F94:
	word32 eax_912 = fn007075D0()
	branch eax_912 == 0<32> l00736FAE
l00736FAE:
	Mem927[esp_19 + 0x14<32>:word32] = 0<32>
	Mem928[esp_19 + 0x28<32>:word32] = 0<32>
	Mem929[esp_19 + 0x24<32>:word32] = 0<32>
	Mem930[esp_19 + 0x1C<32>:word32] = 0<32>
	Mem931[esp_19 + 0x20<32>:word32] = 0<32>
	Mem932[esp_19 + 0x10<32>:word32] = 0<32>
	word32 edx_2805
	word32 eax_933 = fn007366D0(eax_912, dwArg04, out edx_2805)
	Mem940[esp_19 + 0x48<32>:word32] = eax_933
	word32 edx_2806
	word32 eax_941 = fn007366D0(eax_933, dwArg04, out edx_2806)
	Mem948[esp_19 + 0x30<32>:word32] = eax_941
	word32 edx_2807
	word32 eax_949 = fn007366D0(eax_941, dwArg04, out edx_2807)
	Mem956[esp_19 + 0x44<32>:word32] = eax_949
	word32 edx_2808
	word32 eax_957 = fn007366D0(eax_949, dwArg04, out edx_2808)
	word32 esp_963 = esp_19 - 4<i32>
	Mem964[esp_963:word32] = dwArg04
	Mem965[esp_963 + 0x44<32>:word32] = eax_957
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ebx_1011 = 0<32>
	word32 ebp_1149 = 0<32>
	word32 eax_967 = fn007367D0(edx, 0<32>, 0<32>, 1<32>, dwArg04, es, ds, stackArg4, out edx)
	word32 esp_1145 = esp_963 + 4<32>
	branch eax_967 == 0<32> l007371C2
l00737009:
	Mem978[esp_963:word32] = dwArg04
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 eax_980 = fn007367D0(edx, 0<32>, 0<32>, eax_967, dwArg04, es, ds, stackArg4, out edx)
	Mem988[esp_963 + 0x1C<32>:word32] = eax_980
	branch eax_980 == 0<32> l007370F0
l0073701E:
	Mem991[esp_963:word32] = dwArg04
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 eax_993 = fn007367D0(edx, 0<32>, 0<32>, eax_967, dwArg04, es, ds, stackArg4, out edx)
	ebp_1149 = eax_993
	branch eax_993 == 0<32> l007370F0
l00737031:
	Mem1004[esp_963:word32] = dwArg04
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 eax_1006 = fn007367D0(edx, 0<32>, eax_993, eax_967, dwArg04, es, ds, stackArg4, out edx)
	ebx_1011 = eax_1006
	branch eax_1006 == 0<32> l007370F0
l00737044:
	Mem1017[esp_963:word32] = dwArg04
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 eax_1019 = fn007367D0(edx, eax_1006, eax_993, eax_967, dwArg04, es, ds, stackArg4, out edx)
	Mem1027[esp_963 + 0x18<32>:word32] = eax_1019
	branch eax_1019 == 0<32> l007370F0
l00737059:
	Mem1030[esp_963:word32] = dwArg04
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 eax_1032 = fn007367D0(edx, eax_1006, eax_993, eax_967, dwArg04, es, ds, stackArg4, out edx)
	Mem1040[esp_963 + 0x2C<32>:word32] = eax_1032
	branch eax_1032 == 0<32> l007370F0
l0073706E:
	Mem1043[esp_963:word32] = dwArg04
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 eax_1045 = fn007367D0(edx, eax_1006, eax_993, eax_967, dwArg04, es, ds, stackArg4, out edx)
	Mem1053[esp_963 + 0x28<32>:word32] = eax_1045
	branch eax_1045 == 0<32> l007370F0
l0073707F:
	Mem1056[esp_963:word32] = dwArg04
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 eax_1058 = fn007367D0(edx, eax_1006, eax_993, eax_967, dwArg04, es, ds, stackArg4, out edx)
	Mem1066[esp_963 + 0x20<32>:word32] = eax_1058
	branch eax_1058 == 0<32> l007370F0
l00737090:
	word32 edx_2821
	word32 eax_1069 = fn007366D0(eax_1058, dwArg04, out edx_2821)
	Mem1076[esp_963:word32] = dwArg04
	Mem1077[esp_963 + 0x30<32>:word32] = eax_1069
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 eax_1079 = fn007367D0(edx, eax_1006, eax_993, eax_967, dwArg04, es, ds, stackArg4, out edx)
	Mem1087[esp_963 + 0x24<32>:word32] = eax_1079
	branch eax_1079 == 0<32> l007370F0
l007370AC:
	word32 ecx_1089 = Mem1087[esp_963 + 0x20<32>:word32]
	word32 eax_1091 = Mem1087[esp_963 + 0x30<32>:word32]
	Mem1093[esp_963:word32] = eax_1079
	word32 edx_1094 = Mem1093[esp_963 + 0x28<32>:word32]
	Mem1096[esp_963 - 4<i32>:word32] = eax_1091
	word32 eax_1097 = Mem1096[esp_963 + 0x2C<32>:word32]
	Mem1099[esp_963 - 8<i32>:word32] = ecx_1089
	word32 ecx_1100 = Mem1099[esp_963 + 0x18<32>:word32]
	Mem1102[esp_963 - 12<i32>:word32] = edx_1094
	word32 edx_1103 = Mem1102[esp_963 + 0x1C<32>:word32]
	Mem1105[esp_963 - 16<i32>:word32] = eax_1097
	word32 eax_1106 = Mem1105[esp_963 + 0x44<32>:word32]
	Mem1108[esp_963 - 20<i32>:word32] = ecx_1100
	word32 ecx_1109 = Mem1108[esp_963 + 0x48<32>:word32]
	Mem1111[esp_963 - 24<i32>:word32] = eax_1006
	Mem1113[esp_963 - 28<i32>:word32] = eax_993
	Mem1115[esp_963 - 32<i32>:word32] = edx_1103
	word32 edx_1116 = Mem1115[esp_963 + 0x34<32>:word32]
	Mem1118[esp_963 - 36<i32>:word32] = eax_967
	Mem1120[esp_963 - 40<i32>:word32] = eax_1106
	word32 eax_1121 = Mem1120[esp_963 + 0x4C<32>:word32]
	Mem1123[esp_963 - 44<i32>:word32] = ecx_1109
	Mem1125[esp_963 - 48<i32>:word32] = edx_1116
	Mem1127[esp_963 - 52<i32>:word32] = eax_1121
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 stackArg12 = <invalid>
	word32 stackArg16 = <invalid>
	word32 stackArg20 = <invalid>
	word32 stackArg24 = <invalid>
	word32 stackArg28 = <invalid>
	word32 stackArg32 = <invalid>
	word32 stackArg36 = <invalid>
	word32 stackArg40 = <invalid>
	word32 stackArg44 = <invalid>
	word32 stackArg48 = <invalid>
	word32 stackArg52 = <invalid>
	word32 stackArg56 = <invalid>
	Mem1136[esp_963 + 0x14<32>:word32] = fn00734BB0(stackArg4, dwArg04, stackArg12, stackArg16, stackArg20, stackArg24, stackArg28, stackArg32, stackArg36, stackArg40, stackArg44, stackArg48, stackArg52, stackArg56, out edx)
l007370F0:
	word32 v41_1139 = Mem1138[eax_967:word32] + 0xFFFFFFFF<32>
	Mem1140[eax_967:word32] = v41_1139
	esp_1145 = esp_19
	branch v41_1139 != 0<32> l00737101
l007370F5:
	word32 ecx_1143 = Mem1140[eax_967 + 4<32>:word32]
	word32 edx_1144 = Mem1140[ecx_1143 + 0x18<32>:word32]
	Mem1147[esp_19 - 4<i32>:word32] = eax_967
	word32 esp_1153
	call edx_1144 (retsize: 4;)
		uses: ecx:ecx_1143,edx:edx_1156,Stack +0008:dwArg04
		defs: edx:edx_1156,esp:esp_1153
	esp_1145 = esp_1153 + 4<32>
l00737101:
	word32 eax_1163 = Mem1162[esp_1145 + 0x18<32>:word32]
	branch eax_1163 == 0<32> l0073711A
l00737109:
	word32 v42_1167 = Mem1162[eax_1163:word32] + 0xFFFFFFFF<32>
	Mem1168[eax_1163:word32] = v42_1167
	branch v42_1167 != 0<32> l0073711A
l0073710E:
	word32 ecx_1171 = Mem1168[eax_1163 + 4<32>:word32]
	word32 edx_1172 = Mem1168[ecx_1171 + 0x18<32>:word32]
	Mem1174[esp_1145 - 4<i32>:word32] = eax_1163
	word32 esp_1181
	call edx_1172 (retsize: 4;)
		uses: ecx:ecx_1171,edx:edx_1184,Stack +0008:dwArg04
		defs: edx:edx_1184,esp:esp_1181
	esp_1145 = esp_1181 + 4<32>
l0073711A:
	branch ebp_1149 == 0<32> l00737130
l0073711E:
	word32 v44_1194 = Mem1193[ebp_1149:word32] + 0xFFFFFFFF<32>
	Mem1195[ebp_1149:word32] = v44_1194
	branch v44_1194 != 0<32> l00737130
l00737124:
	word32 eax_1198 = Mem1195[ebp_1149 + 4<32>:word32]
	word32 ecx_1199 = Mem1195[eax_1198 + 0x18<32>:word32]
	Mem1202[esp_1145 - 4<i32>:word32] = ebp_1149
	word32 esp_1208
	call ecx_1199 (retsize: 4;)
		uses: eax:eax_1198,edx:edx_1211,Stack +0008:dwArg04
		defs: edx:edx_1211,esp:esp_1208
	esp_1145 = esp_1208 + 4<32>
l00737130:
	branch ebx_1011 == 0<32> l00737145
l00737134:
	word32 v45_1221 = Mem1220[ebx_1011:word32] + 0xFFFFFFFF<32>
	Mem1222[ebx_1011:word32] = v45_1221
	branch v45_1221 != 0<32> l00737145
l00737139:
	word32 edx_1225 = Mem1222[ebx_1011 + 4<32>:word32]
	word32 eax_1226 = Mem1222[edx_1225 + 0x18<32>:word32]
	Mem1229[esp_1145 - 4<i32>:word32] = ebx_1011
	word32 esp_1235
	call eax_1226 (retsize: 4;)
		uses: edx:edx_1225,Stack +0008:dwArg04
		defs: edx:edx_1238,esp:esp_1235
	esp_1145 = esp_1235 + 4<32>
l00737145:
	word32 eax_1245 = Mem1244[esp_1145 + 0x14<32>:word32]
	branch eax_1245 == 0<32> l0073715E
l0073714D:
	word32 v46_1249 = Mem1244[eax_1245:word32] + 0xFFFFFFFF<32>
	Mem1250[eax_1245:word32] = v46_1249
	branch v46_1249 != 0<32> l0073715E
l00737152:
	word32 ecx_1253 = Mem1250[eax_1245 + 4<32>:word32]
	word32 edx_1254 = Mem1250[ecx_1253 + 0x18<32>:word32]
	Mem1256[esp_1145 - 4<i32>:word32] = eax_1245
	word32 esp_1263
	call edx_1254 (retsize: 4;)
		uses: ecx:ecx_1253,edx:edx_1266,Stack +0008:dwArg04
		defs: edx:edx_1266,esp:esp_1263
	esp_1145 = esp_1263 + 4<32>
l0073715E:
	word32 eax_1273 = Mem1272[esp_1145 + 0x28<32>:word32]
	branch eax_1273 == 0<32> l00737177
l00737166:
	word32 v47_1277 = Mem1272[eax_1273:word32] + 0xFFFFFFFF<32>
	Mem1278[eax_1273:word32] = v47_1277
	branch v47_1277 != 0<32> l00737177
l0073716B:
	word32 ecx_1281 = Mem1278[eax_1273 + 4<32>:word32]
	word32 edx_1282 = Mem1278[ecx_1281 + 0x18<32>:word32]
	Mem1284[esp_1145 - 4<i32>:word32] = eax_1273
	word32 esp_1291
	call edx_1282 (retsize: 4;)
		uses: ecx:ecx_1281,edx:edx_1294,Stack +0008:dwArg04
		defs: edx:edx_1294,esp:esp_1291
	esp_1145 = esp_1291 + 4<32>
l00737177:
	word32 eax_1301 = Mem1300[esp_1145 + 0x24<32>:word32]
	branch eax_1301 == 0<32> l00737190
l0073717F:
	word32 v49_1305 = Mem1300[eax_1301:word32] + 0xFFFFFFFF<32>
	Mem1306[eax_1301:word32] = v49_1305
	branch v49_1305 != 0<32> l00737190
l00737184:
	word32 ecx_1309 = Mem1306[eax_1301 + 4<32>:word32]
	word32 edx_1310 = Mem1306[ecx_1309 + 0x18<32>:word32]
	Mem1312[esp_1145 - 4<i32>:word32] = eax_1301
	word32 esp_1319
	call edx_1310 (retsize: 4;)
		uses: ecx:ecx_1309,edx:edx_1322,Stack +0008:dwArg04
		defs: edx:edx_1322,esp:esp_1319
	esp_1145 = esp_1319 + 4<32>
l00737190:
	word32 eax_1329 = Mem1328[esp_1145 + 0x1C<32>:word32]
	branch eax_1329 == 0<32> l007371A9
l00737198:
	word32 v50_1333 = Mem1328[eax_1329:word32] + 0xFFFFFFFF<32>
	Mem1334[eax_1329:word32] = v50_1333
	branch v50_1333 != 0<32> l007371A9
l0073719D:
	word32 ecx_1337 = Mem1334[eax_1329 + 4<32>:word32]
	word32 edx_1338 = Mem1334[ecx_1337 + 0x18<32>:word32]
	Mem1340[esp_1145 - 4<i32>:word32] = eax_1329
	word32 esp_1347
	call edx_1338 (retsize: 4;)
		uses: ecx:ecx_1337,edx:edx_1350,Stack +0008:dwArg04
		defs: edx:edx_1350,esp:esp_1347
	esp_1145 = esp_1347 + 4<32>
l007371A9:
	word32 eax_1357 = Mem1356[esp_1145 + 0x20<32>:word32]
	branch eax_1357 == 0<32> l007371C2
l007371B1:
	word32 v51_1361 = Mem1356[eax_1357:word32] + 0xFFFFFFFF<32>
	Mem1362[eax_1357:word32] = v51_1361
	branch v51_1361 != 0<32> l007371C2
l007371B6:
	word32 ecx_1365 = Mem1362[eax_1357 + 4<32>:word32]
	word32 edx_1366 = Mem1362[ecx_1365 + 0x18<32>:word32]
	Mem1368[esp_1145 - 4<i32>:word32] = eax_1357
	word32 esp_1375
	call edx_1366 (retsize: 4;)
		uses: ecx:ecx_1365,edx:edx_1378,Stack +0008:dwArg04
		defs: edx:edx_1378,esp:esp_1375
	esp_1145 = esp_1375 + 4<32>
l007371C2:
	eax_1385 = Mem1384[esp_1145 + 0x10<32>:word32]
l00736F9D:
	word32 ecx_1386 = Mem51[0x00A175E0<p32>:word32]
	word32 esp_1387 = esp_19 - 4<i32>
	Mem1388[esp_1387:word32] = 0x8DB92C<32>
	Mem1390[esp_1387 - 4<i32>:word32] = ecx_1386
l00736DEA:
	word32 edx_2762
	word32 eax_1392 = fn007366D0(eax_60, dwArg04, out edx_2762)
	branch eax_1392 >u 0x7FFFFFFF<32> l007371C8
l00736DFF:
	word32 esp_1401 = esp_19 - 4<i32>
	Mem1402[esp_1401:word32] = eax_1392
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	eax_1385 = fn006F2650(stackArg4, out edx)
	Mem1412[esp_1401 + 0x14<32>:word32] = eax_1385
	branch eax_1385 == 0<32> l007371DB
l00736E14:
	word32 esi_1414 = 0<32>
	branch eax_1392 <= 0<32> l007371DD
l00736E1E:
l00736E20:
	word32 esp_1419 = esp_19 - 4<i32>
	Mem1421[esp_1419:word32] = dwArg04
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 eax_1428 = fn007367D0(edx, eax_1392, ebp_100, esi_1414, dwArg04, es, ds, stackArg4, out edx)
	branch eax_1428 == 0<32> l00736DA9
l00736E31:
	edx = Mem1421[Mem1421[esp_1419 + 0x14<32>:word32] + 0xC<32>:word32]
	Mem1439[edx + esi_1414 * 4<32>:word32] = eax_1428
	esi_1414 = esi_1414 + 1<32>
	branch esi_1414 < eax_1392 l00736E20
l00736E42:
	eax_1385 = Mem1439[esp_1419 + 0x14<32>:word32]
l007368C9:
	Mem1445[0x00A191E4<p32>:word32] = Mem51[0x00A191E4<p32>:word32] + 1<32>
	eax_1385 = 0xA191E4<32>
l00736898:
	word32 eax_1448 = Mem51[0x00A16D00<p32>:word32]
	Mem1450[eax_1448:word32] = Mem51[eax_1448:word32] + 1<32>
	eax_1385 = Mem1450[0x00A16D00<p32>:word32]
l00736CA0:
	word32 eax_1454 = fn007366D0(eax_60, dwArg04, out edx)
	branch eax_1454 < 0<32> l00736C8F
l00736CAB:
	word32 ecx_1463 = Mem51[dwArg04 + 0x18<32>:word32]
	branch eax_1454 >= Mem51[ecx_1463 + 8<32>:word32] l00736C8F
l00736C8F:
	word32 edx_1468 = Mem51[0x00A17E2C<p32>:word32]
	word32 esp_1470 = esp_19 - 4<i32>
	Mem1471[esp_1470:word32] = 0x8DB984<32>
	Mem1473[esp_1470 - 4<i32>:word32] = edx_1468
l00736CB3:
	word32 eax_1475 = Mem51[Mem51[ecx_1463 + 0xC<32>:word32] + eax_1454 * 4<32>:word32]
	Mem1476[esp_19 + 0x10<32>:word32] = eax_1475
	Mem1478[eax_1475:word32] = Mem1476[eax_1475:word32] + 1<32>
	eax_1385 = Mem1478[esp_19 + 0x10<32>:word32]
l00736888:
	Mem1482[0x00A163B8<p32>:word32] = Mem51[0x00A163B8<p32>:word32] + 1<32>
	eax_1385 = 0xA163B8<32>
l007368EE:
	eax_1385 = fn00736780(MSVCR80.dll!getc, ebp_100, dwArg04, dwArg04, es, ds, out edx)
l007368B9:
	Mem1493[0x00A191D8<p32>:word32] = Mem51[0x00A191D8<p32>:word32] + 1<32>
	eax_1385 = 0xA191D8<32>
l00736EDA:
	word32 edx_2761
	word32 eax_1499 = fn007366D0(eax_60, dwArg04, out edx_2761)
	branch eax_1499 >u 0x7FFFFFFF<32> l007371C8
l00736EEF:
	word32 esp_1509 = esp_19 - 4<i32>
	Mem1510[esp_1509:word32] = eax_1499
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_2837
	word32 eax_1516 = fn006DFD20(stackArg4, out ecx_2837, out edx)
	Mem1524[esp_1509 + 0x14<32>:word32] = eax_1516
	branch eax_1516 == 0<32> l007371DB
l00736F04:
	word32 esi_1526 = 0<32>
	branch eax_1499 <= 0<32> l00736F32
l00736F0A:
	word32 ebx_1529 = 0xC<32>
l00736F10:
	word32 esp_1531 = esp_19 - 4<i32>
	Mem1533[esp_1531:word32] = dwArg04
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 eax_1540 = fn007367D0(edx, ebx_1529, eax_1499, esi_1526, dwArg04, es, ds, stackArg4, out edx)
	branch eax_1540 == 0<32> l00736F49
l00736F49:
	branch fn006E0FC0() != 0<32> l00736DC5
l00736F56:
	word32 edx_1553 = Mem1533[0x00A16B7C<p32>:word32]
	Mem1555[esp_1531:word32] = 0x8DB968<32>
	Mem1557[esp_1531 - 4<i32>:word32] = edx_1553
l00736F1D:
	Mem1559[ebx_1529 + Mem1533[esp_1531 + 0x14<32>:word32]:word32] = eax_1540
	esi_1526 = esi_1526 + 1<32>
	ebx_1529 = ebx_1529 + 4<32>
	branch esi_1526 < eax_1499 l00736F10
l00736F2E:
	eax_1516 = Mem1559[esp_1531 + 0x14<32>:word32]
l00736F32:
	branch eax_1516 == 0<32> l007371DB
l00736F3A:
	word32 eax_1582
	word32 esp_1572 = esp_19 - 4<i32>
	Mem1573[esp_1572:word32] = eax_1516
	branch Mem1570[esp_19 + 0x14<32>:word32] != 0x3C<32> l00736F67
l00736F67:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	eax_1582 = fn0073A5E0(stackArg4, out edx)
l00736F42:
	eax_1582 = fn0073A5D0(out edx)
l00736F6C:
	word32 eax_1597 = Mem1573[esp_1572 + 0x14<32>:word32]
	Mem1599[eax_1597:word32] = Mem1573[eax_1597:word32] + 0xFFFFFFFF<32>
	word32 eax_1600 = Mem1599[esp_1572 + 0x14<32>:word32]
	branch Mem1599[eax_1600:word32] != 0<32> l00736F8D
l00736F81:
	word32 ecx_1604 = Mem1599[eax_1600 + 4<32>:word32]
	word32 edx_1605 = Mem1599[ecx_1604 + 0x18<32>:word32]
	Mem1607[esp_1572:word32] = eax_1600
	call edx_1605 (retsize: 4;)
		uses: ecx:ecx_1604,edx:edx_1616,Stack +0008:dwArg04
		defs: edx:edx_1616
l00736F8D:
	eax_1385 = eax_1582
l007368A9:
	Mem1624[0x00A25B38<p32>:word32] = Mem51[0x00A25B38<p32>:word32] + 1<32>
	eax_1385 = 0xA25B38<32>
l00736D49:
	word32 edx_2760
	word32 eax_1628 = fn007366D0(eax_60, dwArg04, out edx_2760)
	branch eax_1628 >u 0x7FFFFFFF<32> l007371C8
l00736D5E:
	word32 esp_1637 = esp_19 - 4<i32>
	Mem1638[esp_1637:word32] = eax_1628
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_2771
	eax_1385 = fn006DFD20(stackArg4, out ecx_2771, out edx)
	Mem1648[esp_1637 + 0x14<32>:word32] = eax_1385
	branch eax_1385 == 0<32> l007371DB
l00736D73:
	word32 esi_1650 = 0<32>
	branch eax_1628 <= 0<32> l007371DD
l00736D7D:
	word32 ebx_1653 = 0xC<32>
l00736D82:
	word32 esp_1655 = esp_19 - 4<i32>
	Mem1657[esp_1655:word32] = dwArg04
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 eax_1664 = fn007367D0(edx, ebx_1653, eax_1628, esi_1650, dwArg04, es, ds, stackArg4, out edx)
	branch eax_1664 == 0<32> l00736DA9
l00736DA9:
	branch fn006E0FC0() != 0<32> l00736DC5
l00736DB2:
	word32 eax_1678 = Mem1677[0x00A16B7C<p32>:word32]
	word32 esp_1680 = esp_19 - 4<i32>
	Mem1681[esp_1680:word32] = 0x8DB968<32>
	Mem1683[esp_1680 - 4<i32>:word32] = eax_1678
l00736DBD:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_2841
	fn006E0F80(stackArg4, dwArg04, out ecx_2841, out edx)
l00736DC5:
	esp_1705 = esp_19
	eax_1385 = Mem1706[esp_19 + 0x10<32>:word32]
l00736DC9:
	Mem1712[eax_1385:word32] = Mem1710[eax_1385:word32] + 0xFFFFFFFF<32>
	word32 eax_1714 = Mem1712[esp_1705 + 0x10<32>:word32]
	branch Mem1712[eax_1714:word32] != 0<32> l007371DB
l00736DD9:
	word32 ecx_1717 = Mem1712[eax_1714 + 4<32>:word32]
	word32 edx_1718 = Mem1712[ecx_1717 + 0x18<32>:word32]
	Mem1720[esp_1705 - 4<i32>:word32] = eax_1714
	call edx_1718 (retsize: 4;)
		uses: ecx:ecx_1717,edx:edx_1746,Stack +0008:dwArg04
		defs: edx:edx_1746
l00736D8F:
	edx = Mem1657[esp_1655 + 0x14<32>:word32]
	Mem1752[ebx_1653 + edx:word32] = eax_1664
	esi_1650 = esi_1650 + 1<32>
	ebx_1653 = ebx_1653 + 4<32>
	branch esi_1650 < eax_1628 l00736D82
l00736DA0:
	eax_1385 = Mem1752[esp_1655 + 0x14<32>:word32]
l007371C8:
	eax_1760 = Mem51[0x00A17E2C<p32>:word32]
	esp_1762 = esp_19 - 4<i32>
	Mem1763[esp_1762:word32] = 0x8DB984<32>
l007371D2:
	Mem1767[esp_1762 - 4<i32>:word32] = eax_1760
l00736877:
	word32 ecx_1769 = Mem51[0x00A1745C<p32>:word32]
	word32 esp_1771 = esp_19 - 4<i32>
	Mem1772[esp_1771:word32] = 0x8DB998<32>
	Mem1774[esp_1771 - 4<i32>:word32] = ecx_1769
l007371D3:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_2791
	fn006E0F80(stackArg4, dwArg04, out ecx_2791, out edx)
l007371DB:
	eax_1385 = 0<32>
l007371DD:
	Mem1851[dwArg04 + 8<32>:word32] = Mem1846[dwArg04 + 8<32>:word32] + 0xFFFFFFFF<32>
l00736838:
	Mem1855[dwArg04 + 8<32>:word32] = eax_52 + 0xFFFFFFFF<32>
	word32 edx_1856 = Mem1855[0x00A17E2C<p32>:word32]
	word32 esp_1857 = esp_19 - 4<i32>
	Mem1858[esp_1857:word32] = 0x8DB9B8<32>
	Mem1860[esp_1857 - 4<i32>:word32] = edx_1856
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_2758
	fn006E0F80(stackArg4, dwArg04, out ecx_2758, out edx)
	eax_1385 = 0<32>
l007371E1:
	word32 ecx_2759
	word32 eax_2226 = fn00694B8E(eax_1385, eax_7 ^ fp - 332<i32>, edx, ebx, ebp, esi, edi, es, ds, ebx, out ecx_2759)
	edxOut = edx
	return eax_2226
fn007367D0_exit:


word32 fn00737370()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006F6630
//      fn006F6730
// MayUse: 
// LiveOut: eax
// Trashed: SCZO eax ecx edx Top
// Preserved: esp
fn00737370_entry:
l00737370:
	word32 edx_32
	return fn007366D0(0<32>, fp - 0x20<32>, out edx_32)
fn00737370_exit:


word32 fn007373A0(word32 dwArg04, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00737880
// MayUse:  Stack +0004:[0..31]
// LiveOut: eax edx
// Trashed: SCZO ecx edx Top
// Preserved: esi esp
fn007373A0_entry:
l007373A0:
	word32 edx_85
	word32 eax_15 = fn006F2650(0<32>, out edx_85)
	word32 edx_30
	word32 eax_28 = fn007367D0(edx, ebx, ebp, esi, edi, es, ds, fp - 0x20<32>, out edx_30)
	Mem36[eax_15:word32] = Mem26[eax_15:word32] + 0xFFFFFFFF<32>
	branch Mem36[eax_15:word32] != 0<32> l007373FA
l007373EE:
	word32 edx_41 = Mem36[eax_15 + 4<32>:word32]
	call Mem43[edx_41 + 0x18<32>:word32] (retsize: 4;)
		uses: edx:edx_41,Stack +0004:eax_15,Stack +0008:dwArg04,Stack +0030:dwArg04
		defs: edx:edx_48
l007373FA:
	edxOut = edx_30
	return eax_28
fn007373A0_exit:


word32 fn00737410(word32 dwArg04, word32 dwArg08, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006F6D50
//      fn00737880
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax edx
// Trashed: SCZO ecx edx Top
// Preserved: esi esp
fn00737410_entry:
l00737410:
	word32 edx_88
	word32 eax_19 = fn006F2650(0<32>, out edx_88)
	word32 edx_32
	word32 eax_30 = fn007367D0(fp - 0x20<32>, ebx, ebp, esi, edi, es, ds, fp - 0x20<32>, out edx_32)
	Mem38[eax_19:word32] = Mem28[eax_19:word32] + 0xFFFFFFFF<32>
	branch Mem38[eax_19:word32] != 0<32> l0073746C
l00737460:
	word32 ecx_43 = Mem38[eax_19 + 4<32>:word32]
	call Mem38[ecx_43 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_43,Stack +0004:eax_19,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0030:dwArg04,Stack +0034:dwArg08
		defs: edx:edx_50
l0073746C:
	edxOut = edx_32
	return eax_30
fn00737410_exit:


word32 fn00737880(word32 ebx, word32 ebp, word32 esi, word32 edi, selector es, selector ds, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006F66E0
// MayUse:  cs:[0..15] ds:[0..15] ebp:[0..31] ebx:[0..31] edi:[0..31] es:[0..15] esi:[0..31] fs:[0..15] gs:[0..15] ss:[0..15]
// LiveOut: eax edx
// Trashed: SCZDOP eax ebx ecx edi edx esi Top
// Preserved: esp
fn00737880_entry:
l00737880:
	fn006952A0(0x4034<32>, dwLoc04)
	word32 esp_7 = <invalid>
	word32 eax_14 = Mem0[0x00A14188<p32>:word32] ^ esp_7 + 4<32>
	Mem17[esp_7 + 0x4034<32>:word32] = eax_14
	Mem20[esp_7:word32] = ebx
	word32 ebx_21 = Mem20[esp_7 + 0x403C<32>:word32]
	Mem24[esp_7 - 4<i32>:word32] = esi
	Mem27[esp_7 - 8<i32>:word32] = edi
	Mem29[esp_7 - 12<i32>:word32] = ebx_21
	word32 esp_30
	word32 eax_31
	call fileno (retsize: 4;)
		uses: eax:eax_14,Stack +0000:dwLoc04
		defs: eax:eax_31,esp:esp_30
	Mem38[esp_30 - 4<i32>:word32] = esp_30 + 0x10<32>
	Mem40[esp_30 - 8<i32>:word32] = eax_31
	word32 esp_41
	word32 eax_42
	call fstat64i32 (retsize: 4;)
		uses: ecx:esp_30 + 0x10<32>,Stack +0000:dwLoc04
		defs: eax:eax_42,esp:esp_41
	branch eax_42 != 0<32> l0073792D
l007378BC:
	word32 edi_51 = Mem40[esp_41 + 0x2C<32>:word32]
	branch edi_51 <= 0<32> l0073792D
l007378C4:
	word32 esi_114
	branch edi_51 > 0x4000<32> l007378D2
l007378D2:
	branch edi_51 > 0x40000<32> l0073792D
l007378DA:
	Mem59[esp_41 + 8<32>:word32] = edi_51
	word32 eax_60 = malloc(Mem59[esp_41 + 8<32>:size_t])
	esi_114 = eax_60
	branch eax_60 == 0<32> l0073792D
l0073792D:
	Mem69[esp_41 + 8<32>:word32] = ebx_21
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 edx_76
	word32 ecx_240
	word32 eax_104 = fn00694B8E(fn007373A0(stackArg4, out edx_76), dwLoc04 ^ fp - 0x4034<32>, edx_76, dwLoc4038, ebp, dwLoc403C, dwLoc4040, es, ds, dwLoc4038, out ecx_240)
	edxOut = edx_76
	return eax_104
l007378CC:
	esi_114 = esp_41 + 0x48<32>
l007378EA:
	Mem118[esp_41 + 8<32>:word32] = ebx_21
	Mem121[esp_41 + 4<32>:word32] = edi_51
	Mem123[esp_41:word32] = 1<32>
	Mem126[esp_41 - 4<i32>:word32] = esi_114
	Mem129[esp_41 - 8<i32>:word32] = fread(Mem126[esp_41 - 4<i32>:(ptr32 void)], Mem126[esp_41:size_t], Mem126[esp_41 + 4<i32>:size_t], Mem126[esp_41 + 8<i32>:(ptr32 FILE)])
	Mem131[esp_41 - 12<i32>:word32] = esi_114
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 stackArg8 = <invalid>
	word32 edx_243
	word32 eax_141 = fn00737410(stackArg4, stackArg8, out edx_243)
	branch esi_114 == fp - 0x4004<32> l00737913
l00737909:
	free(esi_114)
l00737913:
	word32 ecx_244
	word32 eax_177 = fn00694B8E(eax_141, dwLoc04 ^ fp - 0x4034<32>, fp - 0x4004<32>, dwLoc4038, ebp, dwLoc403C, dwLoc4040, es, ds, dwLoc4038, out ecx_244)
	edxOut = fp - 0x4004<32>
	return eax_177
fn00737880_exit:


void fn00737950(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E8910
// MayUse:  Stack +0004:[0..31]
// LiveOut:
// Trashed: SCZO eax ecx Top
// Preserved: ebp ebx edi edx esi esp
fn00737950_entry:
l00737950:
	word32 ebp_10 = Mem9[dwArg04:word32]
	word32 ecx_6 = Mem0[dwArg04 + 4<32>:word32]
	Mem13[dwArg04 + 0x14<32>:word32] = 0<32>
	word32 ebp_11 = ebp_10 - 1<32>
	branch ebp_10 < 1<32> l007379AA
l00737966:
	word32 ebx_24 = ecx_6 + 0xC<32>
l00737970:
	word32 eax_28 = Mem27[ebx_24 + 4<32>:word32]
	word32 edi_29 = 0<32>
	branch Mem27[ebx_24:word32] <= 0<32> l0073799F
l00737979:
	word32 esi_32 = eax_28 + 0x10<32>
l00737980:
	word32 eax_37 = Mem36[esi_32:word32]
	branch eax_37 == 0<32> l0073798F
l00737986:
	word32 ecx_140
	word32 edx_141
	fn007239C0(eax_37, out ecx_140, out edx_141)
l0073798F:
	Mem54[esi_32:word32] = 0<32>
	edi_29 = edi_29 + 1<32>
	esi_32 = esi_32 + 0x18<32>
	branch edi_29 < Mem54[ebx_24:word32] l00737980
l0073799F:
	ebx_24 = ebx_24 + 0x18<32>
	ebp_11 = ebp_11 - 1<32>
	branch ebp_11 >= 0<32> l00737970
l007379A7:
l007379AA:
	return
fn00737950_exit:


void fn007379B0(word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00737BE0
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut:
// Trashed: SCZO eax ecx edx Top
// Preserved: ebp ebx edi esi esp
fn007379B0_entry:
l007379B0:
	word32 esi_18 = Mem17[dwArg04 + 8<32>:word32]
	Mem23[dwArg08 + 0x14<32>:word32] = 0<32>
	word32 dwLoc0C_366 = esi_18
	word32 ecx_504
	word32 edx_505
	word32 eax_24 = fn00723860(esi_18 * 4<32>, out ecx_504, out edx_505)
	branch eax_24 != 0<32> l00737A02
l00737A02:
	branch esi_18 <= 0<32> l00737A10
l00737A07:
	word32 ecx_324 = esi_18
	word32 edi_321 = eax_24
l00737A0E:
	branch ecx_324 == 0<32> l00737A10
l00737A10:
	word32 eax_52 = Mem49[dwArg08:word32]
	word32 ebx_55 = Mem49[dwArg08 + 4<32>:word32]
	word32 dwLoc08_370 = eax_52 - 1<32>
	branch eax_52 < 1<32> l00737B2C
l00737A2A:
	word32 ebx_164 = ebx_55
l00737A30:
	word32 eax_64 = CONVERT(Mem63[ebx_164:word16], word16, int32)
	word32 esi_68 = Mem63[Mem63[dwArg04 + 0xC<32>:word32] + eax_64 * 8<32>:word32]
	word16 cx_70 = Mem63[ebx_164 + 2<32>:word16]
	branch cx_70 < 0x80<16> l00737A5B
l00737A5B:
	branch esi_68 < 0x100<32> l00737AFA
l00737AFA:
	branch eax_64 != 0<32> l00737B07
l00737B07:
	branch eax_64 < 0<32> l00737B16
l00737B09:
	branch eax_64 >= esi_18 l00737B16
l00737B0F:
	Mem83[eax_24 + eax_64 * 4<32>:word32] = CONVERT(cx_70, word16, int32)
l00737AFE:
	Mem86[dwArg08 + 0x14<32>:word32] = 1<32>
l00737A67:
	word32 eax_92 = fn00752E10(dwArg04, esi_68)
	branch esi_68 < 0x180<32> l00737A97
l00737A97:
	word32 esi_101 = 0<32>
	branch Mem98[dwArg04 + 8<32>:word32] <= 0<32> l00737B16
l00737AA2:
	branch (CONVERT(Mem111[(esi_101 >>u 3<32>) + Mem111[eax_92 + 0x14<32>:word32]:byte], byte, int32) & 1<32> << SLICE(esi_101 & 7<32>, byte, 0)) == 0<32> l00737AEC
l00737AC2:
	branch Mem111[eax_24 + esi_101 * 4<32>:word32] == 0xFFFFFFFF<32> l00737AD7
l00737AC9:
	printf(0x8DBAF4<32>)
l00737AD7:
	Mem142[eax_24 + esi_101 * 4<32>:word32] = esi_68 - 0x100<32> << 8<32> | CONVERT(Mem130[ebx_164 + 2<32>:word16], word16, int32) | 0x80<32>
l00737AEC:
	esi_101 = esi_101 + 1<32>
	branch esi_101 < Mem145[dwArg04 + 8<32>:word32] l00737AA2
l00737AF8:
l00737A87:
	printf(0x8DBB04<32>)
l00737A48:
	printf(0x8DBB28<32>)
l00737B16:
	word32 v17_167 = dwLoc08_370 - 1<32>
	ebx_164 = ebx_164 + 4<32>
	dwLoc08_370 = v17_167
	branch v17_167 >= 0<32> l00737A30
l00737B28:
l00737B2C:
	word32 esi_172 = esi_18
	branch esi_18 <= 0<32> l00737B46
l00737B30:
	word32 eax_182 = eax_24 - 4<32> + esi_18 * 4<32>
l00737B34:
	branch Mem200[eax_182:word32] != 0xFFFFFFFF<32> l00737B42
l00737B39:
	esi_172 = esi_172 - 1<32>
	eax_182 = eax_182 - 4<32>
	branch esi_172 > 0<32> l00737B34
l00737B42:
	dwLoc0C_366 = esi_172
l00737B46:
	word32 esi_202 = 0<32>
	branch dwLoc0C_366 <= 0<32> l00737BCA
l00737B50:
	branch Mem199[eax_24 + esi_202 * 4<32>:word32] != 0xFFFFFFFF<32> l00737B6E
l00737B6E:
	branch esi_202 >= dwLoc0C_366 l00737BCA
l00737B72:
	word32 ecx_510
	word32 edx_511
	word32 eax_221 = fn00723860((dwLoc0C_366 - esi_202) * 4<32>, out ecx_510, out edx_511)
	Mem232[dwArg08 + 0x10<32>:word32] = eax_221
	branch eax_221 != 0<32> l00737BAE
l00737BAE:
	Mem234[dwArg08 + 8<32>:word32] = esi_202
	Mem235[dwArg08 + 0xC<32>:word32] = dwLoc0C_366
	word32 eax_236 = 0<32>
l00737BB6:
	Mem246[eax_236 + Mem241[dwArg08 + 0x10<32>:word32]:word32] = Mem241[eax_24 + esi_202 * 4<32>:word32]
	esi_202 = esi_202 + 1<32>
	eax_236 = eax_236 + 4<32>
	branch esi_202 < dwLoc0C_366 l00737BB6
l00737BCA:
	word32 edx_507
	word32 ecx_506
	fn007239C0(eax_24, out ecx_506, out edx_507)
	return
l00737B8E:
	word32 esp_282
	word32 eax_283
	call _iob_func (retsize: 4;)
		uses: Stack +0004:0x8DBAD0<32>,Stack +0028:dwArg04,Stack +002C:dwArg08
		defs: eax:eax_283,esp:esp_282
	Mem290[esp_282 - 4<i32>:word32] = eax_283 + 0x40<32>
	fprintf(Mem290[esp_282 - 4<i32>:(ptr32 FILE)], Mem290[esp_282:(ptr32 charconst )], 0<32>)
	Mem295[esp_282:word32] = 1<32>
	exit(Mem295[esp_282:int32])
l00737B57:
	esi_202 = esi_202 + 1<32>
	branch esi_202 < dwLoc0C_366 l00737B50
l00737B5D:
	word32 ecx_508
	word32 edx_509
	fn007239C0(eax_24, out ecx_508, out edx_509)
	return
fn007379B0_exit:
l00737A0E_1:
	Mem322[edi_321:word32] = 0xFFFFFFFF<32>
	edi_321 = edi_321 + 4<i32>
	ecx_324 = ecx_324 - 1<32>
l007379E2:
	word32 esp_327
	word32 eax_328
	call _iob_func (retsize: 4;)
		uses: Stack +0004:0x8DBB40<32>,Stack +0024:dwArg04,Stack +0028:dwArg08
		defs: eax:eax_328,esp:esp_327
	Mem335[esp_327 - 4<i32>:word32] = eax_328 + 0x40<32>
	fprintf(Mem335[esp_327 - 4<i32>:(ptr32 FILE)], Mem335[esp_327:(ptr32 charconst )], 0<32>)
	Mem340[esp_327:word32] = 1<32>
	exit(Mem340[esp_327:int32])


word32 fn00737BE0(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn007551F0
// MayUse:  Stack +0004:[0..31]
// LiveOut: ecx
// Trashed: SCZO eax ecx Top
// Preserved: ebp ebx edi edx esi esp
fn00737BE0_entry:
l00737BE0:
	word32 eax_11 = Mem9[dwArg04:word32]
	word32 ebx_12 = Mem9[dwArg04 + 4<32>:word32]
	word32 ecx_13 = 1<32>
	word32 dwArg04_84 = eax_11 - 1<32>
	branch eax_11 < 1<32> l00737C34
l00737BF9:
	word32 ebx_21 = ebx_12 + 0xC<32>
l00737C00:
	word32 edi_29 = Mem28[ebx_21 + 4<32>:word32]
	word32 esi_30 = 0<32>
	branch Mem28[ebx_21:word32] <= 0<32> l00737C29
l00737C09:
l00737C10:
	fn007379B0(dwArg04, edi_29)
	esi_30 = esi_30 + 1<32>
	edi_29 = edi_29 + 0x18<32>
	branch esi_30 < Mem41[ebx_21:word32] l00737C10
l00737C24:
	ecx_13 = 1<32>
l00737C29:
	word32 v14_63 = dwArg04_84 - ecx_13
	ebx_21 = ebx_21 + 0x18<32>
	dwArg04_84 = v14_63
	branch v14_63 >= 0<32> l00737C00
l00737C32:
l00737C34:
	Mem75[dwArg04 + 0x14<32>:word32] = ecx_13
	return ecx_13
fn00737BE0_exit:


word32 fn00737EB0(word32 ebx, word32 esi, word32 edi, ptr32 & ecxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn007380A0
//      fn00738130
//      fn00738600
// MayUse:  ebx:[0..31] edi:[0..31] esi:[0..31]
// LiveOut: eax ecx
// Trashed: SCZO eax ecx edx Top
// Preserved: esp
fn00737EB0_entry:
l00737EB0:
	word32 eax_16
	word32 ecx_18
	call Mem0[esi + 0x18<32>:word32] (retsize: 4;)
		defs: eax:eax_16,ecx:ecx_18
	branch eax_16 != 0<32> l00737EC3
l00737EC3:
	word32 edx_25 = Mem14[eax_16 + 4<32>:word32]
	branch edx_25 != 0<32> l00737EDD
l00737EDD:
	word32 ecx_29 = Mem14[0x00A6DF20<p32>:word32]
	branch edx_25 != ecx_29 l00737F04
l00737F04:
	word32 v17_32 = Mem14[edi:word32] + 0xFFFFFFFF<32>
	Mem33[edi:word32] = v17_32
	branch v17_32 != 0<32> l00737F15
l00737F09:
	word32 ecx_36 = Mem33[edi + 4<32>:word32]
	call Mem33[ecx_36 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_36,Stack +0004:edi
		defs: ecx:ecx_43
l00737EE7:
	Mem48[eax_16 + 4<32>:word32] = edi
	Mem49[eax_16:word32] = ebx
	Mem51[esi + 0xC<32>:word32] = Mem49[esi + 0xC<32>:word32] + 1<32>
	word32 v16_52 = Mem51[ecx_29:word32] + 0xFFFFFFFF<32>
	Mem53[ecx_29:word32] = v16_52
	branch v16_52 != 0<32> l00737F15
l00737F15:
	ecxOut = ecx_29
	return 0<32>
l00737EF5:
	word32 edx_59 = Mem53[ecx_29 + 4<32>:word32]
	word32 ecx_66
	call Mem53[edx_59 + 0x18<32>:word32] (retsize: 4;)
		uses: edx:edx_59,Stack +0004:ecx_29
		defs: ecx:ecx_66
	ecxOut = ecx_66
	return 0<32>
l00737ECA:
	Mem75[esi + 8<32>:word32] = Mem14[esi + 8<32>:word32] + 1<32>
	Mem76[eax_16 + 4<32>:word32] = edi
	Mem77[eax_16:word32] = ebx
	Mem79[esi + 0xC<32>:word32] = Mem77[esi + 0xC<32>:word32] + 1<32>
	ecxOut = 1<32>
	return 0<32>
l00737EBF:
	ecxOut = ecx_18
	return 0xFFFFFFFF<32>
fn00737EB0_exit:


word32 fn00737F20(word32 esi, word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00737F70
// MayUse:  esi:[0..31] Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: ecx
// Trashed: SCZO eax ecx edx Top
// Preserved: ebp ebx edi esp
fn00737F20_entry:
l00737F20:
	word32 edi_16 = Mem15[esi + 0x10<32>:word32]
	word32 ebx_8 = Mem6[esi + 0x14<32>:word32]
	word32 eax_18 = edi_16 & dwArg08
	word32 ecx_20 = ebx_8 + eax_18 * 8<32>
	word32 edx_21 = dwArg08
	branch Mem15[ebx_8 + 4<32> + eax_18 * 8<32>:word32] == 0<32> l00737F57
l00737F3D:
l00737F40:
	eax_18 = eax_18 + 1<32> + (edx_21 + eax_18 * 4<32>)
	ecx_20 = ebx_8 + (eax_18 & edi_16) * 8<32>
	edx_21 = edx_21 >>u 5<32>
	branch Mem15[ecx_20 + 4<32>:word32] != 0<32> l00737F40
l00737F57:
	Mem45[esi + 8<32>:word32] = Mem15[esi + 8<32>:word32] + 1<32>
	Mem51[ecx_20:word32] = dwArg08
	Mem54[ecx_20 + 4<32>:word32] = dwArg04
	Mem56[esi + 0xC<32>:word32] = Mem54[esi + 0xC<32>:word32] + 1<32>
	return ecx_20
fn00737F20_exit:


word32 fn00737F70(word32 eax, word32 dwArg04, ptr32 & ecxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn007380A0
//      fn00738130
//      fn00738600
//      fn007389B0
// MayUse:  eax:[0..31] Stack +0004:[0..31]
// LiveOut: eax ecx
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn00737F70_entry:
l00737F70:
	word32 ebx_16 = 8<32>
	branch eax < 8<32> l00737F9E
l00737F82:
	branch ebx_16 <= 0<32> l00737F90
l00737F86:
	ebx_16 = ebx_16 * 2<32>
	branch ebx_16 <= eax l00737F82
l00737F8C:
	branch ebx_16 > 0<32> l00737F9E
l00737F9E:
	word32 esi_101 = Mem31[dwArg04 + 0x14<32>:word32]
	word32 eax_113 = dwArg04 + 0x1C<32>
	word32 ecx_104 = CONVERT(CONVERT(esi_101 != dwArg04 + 0x1C<32>, bool, int8), int8, uint32)
	branch ebx_16 != 8<32> l00738039
l00738039:
	word32 eax_52 = ebx_16 * 8<32>
	branch eax_52 != 0<32> l00738049
l00738044:
	eax_52 = 1<32>
l00738049:
	eax_113 = malloc(eax_52)
	branch eax_113 != 0<32> l00737FDF
l00738057:
	word32 ecx_75
	word32 edx_337
	fn006E1210(out ecx_75, out edx_337)
	ecxOut = ecx_75
	return 0xFFFFFFFF<32>
l00737FBA:
	branch dwArg04 + 0x1C<32> != esi_101 l00737FDF
l00737FBE:
	branch Mem50[dwArg04 + 8<32>:word32] == Mem50[dwArg04 + 0xC<32>:word32] l00738092
l00737FCA:
	word32 ecx_214 = 0x10<32>
	word32 edi_210 = fp - 0x40<32>
l00737FD3:
	branch ecx_214 == 0<32> l00737FD5
l00737FD5:
	esi_101 = fp - 0x40<32>
l00737FDF:
	Mem118[dwArg04 + 0x14<32>:word32] = eax_113
	Mem119[dwArg04 + 0x10<32>:word32] = ebx_16 - 1<32>
	ecx_104 = ebx_16 * 8<32>
	memset(eax_113, 0<32>, ecx_104)
	word32 ebx_121 = Mem119[dwArg04 + 8<32>:word32]
	Mem124[dwArg04 + 0xC<32>:word32] = 0<32>
	Mem125[dwArg04 + 8<32>:word32] = 0<32>
	word32 esp_122 = fp - 0x58<32>
	branch ebx_121 <= 0<32> l00738081
l00738009:
	word32 edi_128 = esi_101 + 4<32>
	esp_122 = fp - 0x58<32>
l00738010:
	word32 eax_132 = Mem131[edi_128:word32]
	branch eax_132 == 0<32> l0073807A
l00738016:
	ebx_121 = ebx_121 - 1<32>
	branch eax_132 != Mem131[0x00A6DF20<p32>:word32] l00738067
l00738067:
	word32 esp_142 = esp_122 - 4<i32>
	Mem143[esp_142:word32] = Mem131[edi_128 - 4<32>:word32]
	Mem145[esp_142 - 4<i32>:word32] = eax_132
	ecx_104 = fn00737F20(dwArg04, Mem145[esp_142 - 4<i32>:word32], Mem145[esp_142:word32])
	esi_101 = Mem145[esp_142 + 0x14<32>:word32]
	esp_122 = esp_142 + 4<32>
l00738021:
	Mem159[eax_132:word32] = Mem131[eax_132:word32] + 0xFFFFFFFF<32>
	word32 eax_160 = Mem159[edi_128:word32]
	branch Mem159[eax_160:word32] != 0<32> l0073807A
l0073802B:
	word32 edx_163 = Mem159[eax_160 + 4<32>:word32]
	Mem165[esp_122 - 4<i32>:word32] = eax_160
	word32 eax_166 = Mem165[edx_163 + 0x18<32>:word32]
	word32 esp_169
	call eax_166 (retsize: 4;)
		uses: eax:eax_166,edx:edx_163,Stack +0008:dwArg04
		defs: ecx:ecx_171,esp:esp_169
	esp_122 = esp_169 + 4<32>
l0073807A:
	edi_128 = edi_128 + 8<32>
	branch ebx_121 > 0<32> l00738010
l00738081:
	branch Mem184[esp_122 + 0x14<32>:word32] == 0<32> l00738092
l00738088:
	word32 esp_188 = esp_122 - 4<i32>
	Mem191[esp_188:word32] = esi_101
	free(Mem191[esp_188:(ptr32 void)])
l00738092:
	ecxOut = ecx_104
	return 0<32>
l00737FD3_1:
	Mem211[edi_210:word32] = Mem208[esi_101:word32]
	esi_101 = esi_101 + 4<i32>
	edi_210 = edi_210 + 4<i32>
	ecx_214 = ecx_214 - 1<32>
l00737F90:
	word32 ecx_224
	word32 edx_336
	fn006E1210(out ecx_224, out edx_336)
	ecxOut = ecx_224
	return 0xFFFFFFFF<32>
fn00737F70_exit:


word32 fn007380A0(word32 eax, word32 dwArg04, ptr32 & ecxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn007389B0
// MayUse:  eax:[0..31] Stack +0004:[0..31]
// LiveOut: eax ecx
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn007380A0_entry:
l007380A0:
	word32 eax_18 = Mem17[dwArg04 + 4<32>:word32]
	word32 eax_16 = Mem13[eax + 0xC<32>:word32]
	Mem20[eax_18:word32] = Mem17[eax_18:word32] + 1<32>
	word32 ecx_141
	branch fn00737EB0(Mem20[dwArg04:word32], eax, Mem25[dwArg04 + 4<32>:word32], out ecx_141) != 0xFFFFFFFF<32> l007380EB
l007380EB:
	word32 eax_36 = Mem25[eax + 0xC<32>:word32]
	branch eax_36 <= eax_16 l0073811E
l007380F4:
	word32 ecx_41 = Mem25[eax + 8<32>:word32]
	word32 ecx_39 = Mem25[eax + 0x10<32>:word32]
	ecx_141 = ecx_41 * 3<32>
	branch ecx_41 * 3<32> < (ecx_39 + 2<32>) + ecx_39 l0073811E
l0073811E:
	ecxOut = ecx_141
	return 0<32>
l00738105:
	branch eax_36 > 0xC350<32> l0073810E
l0073810C:
	eax_36 = eax_36 * 2<32>
l0073810E:
	word32 ecx_75
	word32 eax_74 = fn00737F70(eax_36 * 2<32>, eax, out ecx_75)
	ecxOut = ecx_75
	return eax_74
l007380C7:
	word32 eax_89 = Mem25[dwArg04 + 4<32>:word32]
	Mem91[eax_89:word32] = Mem25[eax_89:word32] + 0xFFFFFFFF<32>
	word32 ecx_102 = Mem91[dwArg04 + 4<32>:word32]
	branch Mem91[ecx_102:word32] != 0<32> l007380E3
l007380D5:
	word32 edx_96 = Mem91[ecx_102 + 4<32>:word32]
	word32 eax_97 = Mem91[edx_96 + 0x18<32>:word32]
	call eax_97 (retsize: 4;)
		uses: eax:eax_97,edx:edx_96,Stack +0004:ecx_92,Stack +001C:eax_16
		defs: ecx:ecx_102
l007380E3:
	ecxOut = ecx_102
	return 0xFFFFFFFF<32>
fn007380A0_exit:


word32 fn00738130(word32 eax, word32 ecx, ptr32 & ecxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn007389B0
// MayUse:  eax:[0..31] ecx:[0..31]
// LiveOut: eax ecx
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn00738130_entry:
l00738130:
	word32 eax_16
	branch Mem9[eax + 4<32>:word32] != 0xA1B450<32> l00738147
l0073813F:
	eax_16 = Mem9[eax + 0xC<32>:word32]
	branch eax_16 != 0xFFFFFFFF<32> l0073815A
l00738147:
	word32 ecx_29
	word32 edx_217
	eax_16 = fn006DE2E0(eax, out ecx_29, out edx_217)
	branch eax_16 != 0xFFFFFFFF<32> l0073815A
l0073815A:
	word32 ebp_48 = Mem46[ecx + 0xC<32>:word32]
	Mem51[eax:word32] = Mem46[eax:word32] + 1<32>
	word32 ecx_129
	word32 eax_55 = fn00737EB0(eax_16, ecx, eax, out ecx_129)
	branch eax_55 != 0xFFFFFFFF<32> l00738186
l00738186:
	word32 eax_64 = Mem51[ecx + 0xC<32>:word32]
	branch eax_64 <= ebp_48 l007381B7
l0073818D:
	word32 ecx_68 = Mem51[ecx + 8<32>:word32]
	word32 edx_67 = Mem51[ecx + 0x10<32>:word32]
	ecx_129 = ecx_68 * 3<32>
	branch ecx_68 * 3<32> < (edx_67 + 2<32>) + edx_67 l007381B7
l007381B7:
	ecxOut = ecx_129
	return 0<32>
l0073819E:
	branch eax_64 > 0xC350<32> l007381A7
l007381A5:
	eax_64 = eax_64 * 2<32>
l007381A7:
	word32 ecx_105
	word32 eax_104 = fn00737F70(eax_64 * 2<32>, ecx, out ecx_105)
	ecxOut = ecx_105
	return eax_104
l0073816E:
	word32 v14_119 = Mem51[eax:word32] + eax_55
	Mem120[eax:word32] = v14_119
	branch v14_119 != 0<32> l0073817E
l00738172:
	word32 eax_123 = Mem120[eax + 4<32>:word32]
	word32 ecx_124 = Mem120[eax_123 + 0x18<32>:word32]
	call ecx_124 (retsize: 4;)
		uses: eax:eax_123,ecx:ecx_124,Stack +0004:eax
		defs: ecx:ecx_129
l0073817E:
	ecxOut = ecx_129
	return 0xFFFFFFFF<32>
l00738155:
	ecxOut = ecx_29
	return eax_16
fn00738130_exit:


word32 fn00738600(word32 eax, word32 dwArg04, ptr32 & ecxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn007389B0
// MayUse:  eax:[0..31] Stack +0004:[0..31]
// LiveOut: eax ecx
// Trashed: SCZO eax ebx ecx edi edx esi Top
// Preserved: ebp esp
fn00738600_entry:
l00738600:
	word32 edi_13 = dwArg04
	branch dwArg04 == eax l007386C0
l00738611:
	word32 ecx_18 = Mem12[dwArg04 + 0xC<32>:word32]
	branch ecx_18 == 0<32> l007386C0
l007386C0:
	ecxOut = ecx
	return 0<32>
l0073861C:
	word32 edx_34 = Mem12[eax + 0x10<32>:word32]
	branch (Mem12[eax + 8<32>:word32] + ecx_18) * 3<32> < (edx_34 + 2<32>) + edx_34 l0073864A
l0073862F:
	word32 ecx_250
	branch fn00737F70((Mem12[eax + 0xC<32>:word32] + ecx_18) * 2<32>, eax, out ecx_250) == 0<32> l0073864A
l0073864A:
	word32 ecx_134 = 0<32>
	word32 dwLoc04_224 = 0<32>
	branch Mem58[dwArg04 + 0x10<32>:word32] < 0<32> l00738693
l00738657:
	word32 ebp_75 = Mem72[edi_13 + 0x14<32>:word32] + ecx_134 * 8<32>
	word32 eax_76 = Mem72[ebp_75 + 4<32>:word32]
	branch eax_76 == 0<32> l00738687
l00738664:
	branch eax_76 == Mem72[0x00A6DF20<p32>:word32] l00738687
l0073866C:
	Mem83[eax_76:word32] = Mem72[eax_76:word32] + 1<32>
	word32 ecx_251
	branch fn00737EB0(Mem83[ebp_75:word32], eax, Mem83[ebp_75 + 4<32>:word32], out ecx_251) == 0xFFFFFFFF<32> l0073869B
l0073869B:
	word32 eax_97 = Mem83[ebp_75 + 4<32>:word32]
	Mem99[eax_97:word32] = Mem83[eax_97:word32] + 0xFFFFFFFF<32>
	word32 ecx_100 = Mem99[ebp_75 + 4<32>:word32]
	branch Mem99[ecx_100:word32] != 0<32> l007386B7
l007386A9:
	word32 edx_104 = Mem99[ecx_100 + 4<32>:word32]
	word32 eax_105 = Mem99[edx_104 + 0x18<32>:word32]
	call eax_105 (retsize: 4;)
		uses: eax:eax_105,ecx:ecx_100,edx:edx_104,Stack +0004:ecx_100,Stack +0008:dwArg04,Stack +0020:dwArg04
l007386B7:
	ecxOut = dwLoc04_224
	return 0xFFFFFFFF<32>
l0073867F:
	ecx_134 = dwLoc04_224
	edi_13 = dwArg04
l00738687:
	ecx_134 = ecx_134 + 1<32>
	dwLoc04_224 = ecx_134
	branch ecx_134 <= Mem139[edi_13 + 0x10<32>:word32] l00738657
l00738693:
	ecxOut = dwLoc04_224
	return 0<32>
l00738643:
	ecxOut = ecx
	return 0xFFFFFFFF<32>
fn00738600_exit:


word32 fn007389B0(word32 eax, word32 edi, ptr32 & ecxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00738BB0
// MayUse:  eax:[0..31] edi:[0..31]
// LiveOut: eax ecx
// Trashed: SCZO eax ecx edx esi Top
// Preserved: esp
fn007389B0_entry:
l007389B0:
	word32 eax_10 = Mem7[eax + 4<32>:word32]
	branch eax_10 == 0xA2B490<32> l00738B70
l007389C4:
	branch eax_10 == 0xA2B6F8<32> l00738B70
l007389CF:
	word32 edx_441
	word32 ecx_440
	branch fn006D5670(eax_10, 0xA2B490<32>, out ecx_440, out edx_441) != 0<32> l00738B70
l007389E5:
	word32 ecx_442
	word32 edx_443
	branch fn006D5670(Mem18[eax + 4<32>:word32], 0xA2B6F8<32>, out ecx_442, out edx_443) != 0<32> l00738B70
l00738B70:
	word32 ecx_56
	word32 eax_55 = fn00738600(edi, eax, out ecx_56)
	ecxOut = ecx_56
	return eax_55
l007389FE:
	word32 ecx_101
	branch Mem34[eax + 4<32>:word32] != 0xA1D1B8<32> l00738AC0
l00738AC0:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 edx_445
	word32 eax_70 = fn00704B00(stackArg4, out ecx_101, out edx_445)
	branch eax_70 == 0<32> l00738B68
l00738AD2:
	word32 edx_447
	word32 ecx_174
	word32 eax_173 = fn00704040(eax_70, out ecx_174, out edx_447)
	word32 esp_178 = fp - 0x1C<32>
	branch eax_173 == 0<32> l00738B1C
l00738AE3:
	word32 esp_122 = esp_178
	branch fn00738130(eax_173, edi, out ecx_101) == 0xFFFFFFFF<32> l00738B3B
l00738B3B:
	word32 v15_108 = Mem107[eax_70:word32] + 0xFFFFFFFF<32>
	Mem109[eax_70:word32] = v15_108
	branch v15_108 != 0<32> l00738B4C
l00738B40:
	word32 eax_112 = Mem109[eax_70 + 4<32>:word32]
	word32 ecx_113 = Mem109[eax_112 + 0x18<32>:word32]
	Mem115[esp_178 - 4<i32>:word32] = eax_70
	word32 esp_116
	call ecx_113 (retsize: 4;)
		uses: eax:eax_112
		defs: ecx:ecx_118,esp:esp_116
	esp_122 = esp_116 + 4<32>
l00738B4C:
	word32 eax_126 = Mem125[esp_122 + 4<32>:word32]
	Mem128[eax_126:word32] = Mem125[eax_126:word32] + 0xFFFFFFFF<32>
	word32 eax_129 = Mem128[esp_122 + 4<32>:word32]
	branch Mem128[eax_129:word32] != 0<32> l00738B68
l00738B5C:
	word32 edx_132 = Mem128[eax_129 + 4<32>:word32]
	Mem134[esp_122 - 4<i32>:word32] = eax_129
	word32 eax_135 = Mem134[edx_132 + 0x18<32>:word32]
	call eax_135 (retsize: 4;)
		uses: eax:eax_135,edx:edx_132
		defs: ecx:ecx_141
l00738AEF:
	word32 eax_147 = Mem107[esp_178 + 4<32>:word32]
	Mem149[eax_147:word32] = Mem107[eax_147:word32] + 0xFFFFFFFF<32>
	word32 eax_150 = Mem149[esp_178 + 4<32>:word32]
	branch Mem149[eax_150:word32] != 0<32> l00738B0B
l00738AFF:
	word32 ecx_153 = Mem149[eax_150 + 4<32>:word32]
	word32 edx_154 = Mem149[ecx_153 + 0x18<32>:word32]
	Mem156[esp_178 - 4<i32>:word32] = eax_150
	word32 esp_157
	call edx_154 (retsize: 4;)
		uses: eax:eax_150,ecx:ecx_153
		defs: esp:esp_157
	esp_122 = esp_157 + 4<32>
l00738B0B:
	word32 esp_166 = esp_122 - 4<i32>
	Mem168[esp_166:word32] = eax_70
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 edx_449
	eax_173 = fn00704040(stackArg4, out ecx_174, out edx_449)
	Mem181[esp_166 + 8<32>:word32] = eax_173
	esp_178 = esp_166 + 4<32>
	branch eax_173 != 0<32> l00738AE3
l00738B1C:
	word32 v14_185 = Mem184[eax_70:word32] + 0xFFFFFFFF<32>
	Mem186[eax_70:word32] = v14_185
	branch v14_185 != 0<32> l00738B2D
l00738B21:
	word32 ecx_189 = Mem186[eax_70 + 4<32>:word32]
	word32 edx_190 = Mem186[ecx_189 + 0x18<32>:word32]
	Mem193[esp_178 - 4<i32>:word32] = eax_70
	call edx_190 (retsize: 4;)
		uses: eax:eax_194,ecx:ecx_189
		defs: ecx:ecx_199
l00738B2D:
	word32 eax_208 = 0<32> - (fn006E0FC0() == 0<32>)
	ecxOut = ecx_174
	return eax_208
l00738A0C:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 eax_217 = fn006FCF20(stackArg4)
	ecx_101 = eax_217
	branch eax_217 == 0xFFFFFFFF<32> l00738B68
l00738A23:
	word32 eax_229 = Mem215[edi + 0x10<32>:word32]
	branch (Mem215[edi + 8<32>:word32] + eax_217) * 3<32> < (eax_229 + 2<32>) + eax_229 l00738A4E
l00738A36:
	branch fn00737F70((Mem215[edi + 0xC<32>:word32] + eax_217) * 2<32>, edi, out ecx_101) != 0<32> l00738B68
l00738A4E:
	word32 ecx_266
	branch fn006FC0E0(eax, fp - 0x10<32>, fp - 0x18<32>, fp - 0xC<32>, fp - 0x14<32>, out ecx_266) == 0<32> l00738AB9
l00738A6F:
l00738A70:
	branch fn007380A0(edi, fp - 8<32>, out ecx_101) == 0xFFFFFFFF<32> l00738B68
l00738B68:
	ecxOut = ecx_101
	return 0xFFFFFFFF<32>
l00738A98:
	branch fn006FC0E0(eax, fp - 0x10<32>, fp - 0x18<32>, fp - 0xC<32>, fp - 0x14<32>, out ecx_266) != 0<32> l00738A70
l00738AB9:
	ecxOut = ecx_266
	return 0<32>
fn007389B0_exit:


word32 fn00738BB0(word32 eax, word32 dwArg04, ptr32 & ecxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00738CB0
//      fn0073A5D0
// MayUse:  eax:[0..31] Stack +0004:[0..31]
// LiveOut: eax ecx
// Trashed: SCZO eax ebp ecx edi edx esi Top
// Preserved: esp
fn00738BB0_entry:
l00738BB0:
	branch Mem0[0x00A6DF20<p32>:word32] != 0<32> l00738BDA
l00738BC1:
	word32 ecx_21
	word32 edx_241
	word32 eax_19 = fn006ECAC0(0x8D646C<32>, out ecx_21, out edx_241)
	Mem27[0x00A6DF20<p32>:word32] = eax_19
	branch eax_19 != 0<32> l00738BDA
l00738BDA:
	word32 esp_104
	word32 edi_110
	word32 ecx_122
	word32 eax_30 = Mem29[0x00A6DF24<p32>:word32]
	branch eax_30 == 0<32> l00738C43
l00738BE4:
	branch eax == 0xA2B490<32> l00738BF4
l00738BEC:
	branch eax != 0xA2B6F8<32> l00738C43
l00738C43:
	word32 eax_46 = Mem37[eax + 0x98<32>:word32]
	word32 esp_57
	word32 eax_58
	call eax_46 (retsize: 4;)
		uses: eax:eax_46,Stack +0004:eax,Stack +0008:dwArg04,Stack +001C:dwArg04
		defs: eax:eax_58,ecx:ecx_60,esp:esp_57
	edi_110 = eax_58
	esp_104 = esp_57 + 8<32>
	branch eax_58 == 0<32> l00738C99
l00738C57:
	Mem69[eax_58 + 0x14<32>:word32] = eax_58 + 0x1C<32>
	Mem70[eax_58 + 0x10<32>:word32] = 7<32>
	Mem71[eax_58 + 0x5C<32>:word32] = 0xFFFFFFFF<32>
	ecx_122 = eax_58 + 0x1C<32>
l00738BF4:
	edi_110 = Mem37[eax_30 * 4<32> + 0xA6DDDC<32>:word32]
	Mem81[edi_110 + 4<32>:word32] = eax
	Mem87[0x00A6DF24<p32>:word32] = eax_30 - 1<32>
	Mem88[edi_110:word32] = 1<32>
	memset(edi_110 + 0x1C<32>, 0<32>, 0x40<32>)
	Mem92[edi_110 + 8<32>:word32] = 0<32>
	Mem93[edi_110 + 0xC<32>:word32] = 0<32>
	Mem94[edi_110 + 0x14<32>:word32] = edi_110 + 0x1C<32>
	Mem95[edi_110 + 0x10<32>:word32] = 7<32>
	Mem96[edi_110 + 0x5C<32>:word32] = 0xFFFFFFFF<32>
	word32 edx_242
	ecx_122 = fn006FEE30(edi_110, out edx_242)
	esp_104 = fp - 12<i32>
l00738C6B:
	Mem111[edi_110 + 0x18<32>:word32] = 0x737DA0<32>
	Mem112[edi_110 + 0x60<32>:word32] = 0<32>
	branch dwArg04 == 0<32> l00738C9F
l00738C7D:
	word32 eax_120 = fn007389B0(dwArg04, edi_110, out ecx_122)
	branch eax_120 != 0xFFFFFFFF<32> l00738C9F
l00738C9F:
	ecxOut = ecx_122
	return edi_110
l00738C89:
	word32 v11_137 = Mem112[edi_110:word32] + eax_120
	Mem138[edi_110:word32] = v11_137
	branch v11_137 != 0<32> l00738C99
l00738C8D:
	word32 edx_141 = Mem138[edi_110 + 4<32>:word32]
	word32 eax_142 = Mem138[edx_141 + 0x18<32>:word32]
	Mem144[esp_104 - 4<i32>:word32] = edi_110
	call eax_142 (retsize: 4;)
		uses: eax:eax_142,edx:edx_141,Stack +0008:dwArg04
		defs: ecx:ecx_148
l00738C99:
	ecxOut = ecx_122
	return 0<32>
l00738BD7:
	ecxOut = ecx_21
	return eax_19
fn00738BB0_exit:


word32 fn00738CB0(word32 dwArg04, word32 dwArg08, word32 dwArg0C)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073A5E0
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx edx esi Top
// Preserved: esp
fn00738CB0_entry:
l00738CB0:
	branch dwArg04 != 0xA2B6F8<32> l00738CE1
l00738CC6:
	branch fn006E5C00(dwArg0C) != 0<32> l00738CE1
l00738CE1:
	word32 esp_100 = fp - 8<32>
	branch fn006E5AD0(dwArg08, dwArg04, 0<32>, dwArg0C) == 0<32> l00738CDC
l00738CFF:
	branch dwArg04 == 0xA2B6F8<32> l00738D19
l00738D19:
	word32 eax_109
	branch true l00738D5A
l00738D21:
	branch Mem44[4<32>:word32] != 0xA2B6F8<32> l00738D34
l00738D34:
	word32 ecx_68
	eax_109 = fn00738BB0(dwArg04, 0<32>, out ecx_68)
	esp_100 = fp - 8<32>
	branch eax_109 == 0<32> l00738D7A
l00738D43:
	branch Mem65[eax_109 + 0xC<32>:word32] != 0<32> l00738D7A
l00738D49:
	word32 v12_79 = Mem65[eax_109:word32] + 0xFFFFFFFF<32>
	Mem80[eax_109:word32] = v12_79
	branch v12_79 != 0<32> l00738D5A
l00738D4E:
	word32 edx_83 = Mem80[eax_109 + 4<32>:word32]
	word32 esp_87
	call Mem85[edx_83 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_68,edx:edx_83,Stack +0004:eax_69,Stack +0008:dwArg04,Stack +0010:dwArg0C,Stack +0014:dwArg04,Stack +0018:dwArg08,Stack +001C:dwArg0C
		defs: esp:esp_87
	esp_100 = esp_87 + 4<32>
l00738D5A:
	eax_109 = Mem95[0x00A6DF28<p32>:word32]
	branch eax_109 != 0<32> l00738D77
l00738D63:
	Mem102[esp_100 - 4<i32>:word32] = eax_109
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_252
	eax_109 = fn00738BB0(dwArg04, stackArg4, out ecx_252)
	Mem116[0x00A6DF28<p32>:word32] = eax_109
	branch eax_109 == 0<32> l00738D7A
l00738D77:
	Mem121[eax_109:word32] = Mem119[eax_109:word32] + 1<32>
l00738D7A:
	return eax_109
l00738D2A:
	Mem131[0<32>:word32] = Mem44[0<32>:word32] + 1<32>
	return 0<32>
l00738D07:
	word32 ecx_250
	return fn00738BB0(dwArg04, 0<32>, out ecx_250)
l00738CDC:
	return 0<32>
fn00738CB0_exit:


void fn00738D80()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E8910
// MayUse: 
// LiveOut:
// Trashed: SCZO eax ecx edx Top
// Preserved: esp
fn00738D80_entry:
	word32 esp_15 = fp
l00738D80:
	word32 eax_10 = Mem0[0x00A6DF24<p32>:word32]
	branch eax_10 == 0<32> l00738DB1
l00738D89:
	esp_15 = fp
l00738D90:
	word32 eax_11 = eax_10 - 1<32>
	Mem13[0x00A6DF24<p32>:word32] = eax_11
	word32 esp_16 = esp_15 - 4<i32>
	Mem17[esp_16:word32] = Mem13[eax_11 * 4<32> + 0xA6DDE0<32>:word32]
	fn006FEFD0(Mem17[esp_16:word32])
	eax_10 = Mem17[0x00A6DF24<p32>:word32]
	esp_15 = esp_16
	branch eax_10 != 0<32> l00738D90
l00738DB1:
	word32 eax_32 = Mem31[0x00A6DF20<p32>:word32]
	branch eax_32 == 0<32> l00738DD5
l00738DBA:
	word32 v8_36 = Mem31[eax_32:word32] + 0xFFFFFFFF<32>
	Mem37[eax_32:word32] = v8_36
	Mem39[0x00A6DF20<p32>:word32] = 0<32>
	branch v8_36 != 0<32> l00738DD5
l00738DC9:
	word32 ecx_41 = Mem39[eax_32 + 4<32>:word32]
	word32 edx_42 = Mem39[ecx_41 + 0x18<32>:word32]
	Mem45[esp_15 - 4<i32>:word32] = eax_32
	word32 edx_51
	call edx_42 (retsize: 4;)
		uses: ecx:ecx_41,edx:edx_51
		defs: edx:edx_51
l00738DD5:
	word32 eax_57 = Mem56[0x00A6DF28<p32>:word32]
	branch eax_57 == 0<32> l00738DF7
l00738DDE:
	word32 v11_61 = Mem56[eax_57:word32] + 0xFFFFFFFF<32>
	Mem62[eax_57:word32] = v11_61
	Mem64[0x00A6DF28<p32>:word32] = 0<32>
	branch v11_61 != 0<32> l00738DF7
l00738DED:
	word32 ecx_66 = Mem64[eax_57 + 4<32>:word32]
	word32 edx_75
	call Mem64[ecx_66 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_66,edx:edx_75,Stack +0004:eax_57
		defs: edx:edx_75
l00738DF7:
	return
fn00738D80_exit:


word32 fn0073A5D0(ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn007367D0
// MayUse: 
// LiveOut: eax edx
// Trashed: eax Top
// Preserved: esp
fn0073A5D0_entry:
l0073A5D0:
l0073A5D5_thunk_fn00738BB0:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_13
	word32 eax_6 = fn00738BB0(eax, stackArg4, out ecx_13)
	edxOut = <invalid>
	return eax_6
fn0073A5D0_exit:


word32 fn0073A5E0(word32 dwArg04, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn007367D0
// MayUse:  Stack +0004:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ecx esi Top
// Preserved: edi esp
fn0073A5E0_entry:
l0073A5E0:
	word32 eax_17
	branch dwArg04 != 0<32> l0073A5F4
l0073A5F4:
	word32 edx_131
	word32 ecx_130
	word32 esi_132
	eax_17 = fn006DFF80(1<32>, out ecx_130, out edx_131, out esi_132)
l0073A5E9:
	word32 ecx_133
	word32 edx_134
	eax_17 = fn006DFD20(dwArg04, out ecx_133, out edx_134)
l0073A5FF:
	branch eax_17 != 0<32> l0073A607
l0073A607:
	word32 eax_50 = fn00738CB0(0xA2B6F8<32>, dwArg04, 0<32>)
	word32 v10_55 = Mem47[eax_17:word32] + 0xFFFFFFFF<32>
	Mem56[eax_17:word32] = v10_55
	branch v10_55 != 0<32> l0073A62B
l0073A61F:
	word32 eax_60 = Mem56[eax_17 + 4<32>:word32]
	call Mem56[eax_60 + 0x18<32>:word32] (retsize: 4;)
		uses: eax:eax_60,Stack +0004:eax_32,Stack +0008:dwArg04,Stack +0014:dwArg04
l0073A62B:
	edxOut = <invalid>
	return eax_50
l0073A605:
	edxOut = <invalid>
	return eax_17
fn0073A5E0_exit:


word32 fn0073AFB0(word32 dwArg04, word32 dwArg08, word32 dwArg0C, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00707850
//      fn0070B600
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn0073AFB0_entry:
l0073AFB0:
	word32 ebp_111
	word32 edi_13 = Mem12[dwArg04 + 8<32>:word32]
	branch edi_13 == 0<32> l0073AFF7
l0073AFC4:
	branch Mem16[edi_13 + 0x18<32>:word32] != dwArg0C l0073AFF7
l0073AFF7:
	word32 edx_672
	word32 ecx_671
	word32 eax_33 = fn006FBCC0(dwArg0C, Mem16[0x00A6DF2C<p32>:word32], out ecx_671, out edx_672)
	ebp_111 = eax_33
	branch eax_33 == 0<32> l0073B05E
l0073B011:
	word32 eax_43 = Mem28[eax_33 + 4<32>:word32]
	branch eax_43 == 0xA215C0<32> l0073B04B
l0073B01B:
	word32 ecx_676
	word32 edx_677
	branch fn006D5670(eax_43, 0xA215C0<32>, out ecx_676, out edx_677) != 0<32> l0073B04B
l0073B04B:
	word32 ecx_674
	word32 edx_675
	ebp_111 = fn00717230(eax_33, out ecx_674, out edx_675)
l0073B02D:
	word32 eax_76 = Mem49[eax_33 + 4<32>:word32]
	branch eax_76 == 0xA1D1B8<32> l0073B056
l0073B037:
	word32 ecx_678
	word32 edx_679
	branch fn006D5670(eax_76, 0xA1D1B8<32>, out ecx_678, out edx_679) != 0<32> l0073B056
l0073B056:
	branch ebp_111 != 0<32> l0073AFD0
l0073B049:
l0073B05E:
	word32 ecx_673
	word32 edx_108
	word32 eax_106 = fn006FDCC0(out ecx_673, out edx_108)
	ebp_111 = eax_106
	branch eax_106 == 0<32> l0073B084
l0073B069:
	word32 ecx_682
	word32 esi_683
	branch fn006FD8F0(eax_106, dwArg04, 0xA163B8<32>, out ecx_682, out edx_108, out esi_683) >= 0<32> l0073AFD4
l0073B084:
	edxOut = edx_108
	return 0<32>
l0073AFCD:
	ebp_111 = Mem16[edi_13 + 0x14<32>:word32]
l0073AFD0:
	Mem146[ebp_111:word32] = Mem144[ebp_111:word32] + 1<32>
l0073AFD4:
	word32 edx_202
	word32 esp_160 = fp - 0x18<32>
	word32 esi_169 = Mem168[dwArg08 + 0x40<32>:word32]
	branch esi_169 == 0<32> l0073B08C
l0073B08C:
	word32 edi_177 = Mem168[Mem168[dwArg08 + 0x2C<32>:word32] + 8<32>:word32]
	esi_169 = Mem168[0x00A6DF30<p32>:word32]
	word32 eax_182 = Mem168[dwArg08 + 0x10<32>:word32] + Mem168[dwArg08 + 0xC<32>:word32] + Mem168[Mem168[dwArg08 + 0x28<32>:word32] + 8<32>:word32] + edi_177
	branch esi_169 != 0<32> l0073B0E6
l0073B0E6:
	Mem187[0x00A6DF34<p32>:word32] = Mem184[0x00A6DF34<p32>:word32] - 1<32>
	Mem190[0x00A6DF30<p32>:word32] = Mem187[esi_169 + 0xC<32>:word32]
	branch Mem187[esi_169 + 8<32>:word32] >= eax_182 l0073B12D
l0073B0FB:
	word32 eax_200 = fn006FEF90(esi_169, dwArg04, out edx_202)
	esi_169 = eax_200
	esp_160 = fp - 0x14<32>
	branch eax_200 != 0<32> l0073B12B
l0073B12B:
l0073B12D:
	Mem215[esi_169:word32] = 1<32>
l0073B10B:
	word32 v24_216 = Mem195[ebp_111:word32] + 0xFFFFFFFF<32>
	Mem217[ebp_111:word32] = v24_216
	branch v24_216 != 0<32> l0073B1BB
l0073B115:
	word32 edx_220 = Mem217[ebp_111 + 4<32>:word32]
	word32 edx_227
	call Mem217[edx_220 + 0x18<32>:word32] (retsize: 4;)
		uses: edx:edx_220,Stack +0004:ebp_196,Stack +0008:dwArg04,Stack +0010:dwArg0C,Stack +0020:dwArg04,Stack +0024:dwArg08,Stack +0028:dwArg0C
		defs: edx:edx_227
	edxOut = edx_227
	return 0<32>
l0073B0B2:
	word32 ecx_680
	word32 eax_247 = fn006FEF50(0xA2B8D8<32>, dwArg04, out ecx_680, out edx_202)
	esi_169 = eax_247
	esp_160 = fp - 0x18<32>
	branch eax_247 != 0<32> l0073B135
l0073B135:
l0073B137:
	Mem263[esi_169 + 0x10<32>:word32] = dwArg08
	word32 ecx_270 = Mem263[dwArg08 + 0xC<32>:word32] + Mem263[esp_160 + 0x10<32>:word32] + edi_177
	Mem275[esi_169 + 0x20<32>:word32] = esi_169 + 0x138<32> + ecx_270 * 4<32>
	branch ecx_270 <= 0<32> l0073B15D
l0073B151:
	word32 edi_280 = esi_169 + 0x138<32>
l0073B159:
	branch ecx_270 == 0<32> l0073B15B
l0073B15B:
l0073B15D:
	edi_13 = Mem287[esp_160 + 0x14<32>:word32]
	Mem293[esi_169 + 0x1C<32>:word32] = 0<32>
	Mem294[esi_169 + 0x28<32>:word32] = 0<32>
	Mem295[esi_169 + 0x34<32>:word32] = 0<32>
	Mem296[esi_169 + 0x30<32>:word32] = 0<32>
	Mem297[esi_169 + 0x2C<32>:word32] = 0<32>
l0073B159_1:
	Mem300[edi_280:word32] = 0<32>
	edi_280 = edi_280 + 4<i32>
	ecx_270 = ecx_270 - 1<32>
l0073B0C6:
	word32 v15_303 = Mem245[ebp_111:word32] + 0xFFFFFFFF<32>
	Mem304[ebp_111:word32] = v15_303
	branch v15_303 != 0<32> l0073B1BB
l0073B0D0:
	word32 eax_307 = Mem304[ebp_111 + 4<32>:word32]
	word32 edx_314
	call Mem304[eax_307 + 0x18<32>:word32] (retsize: 4;)
		uses: eax:eax_307,Stack +0004:ebp_196,Stack +0008:dwArg04,Stack +0010:dwArg0C,Stack +0024:dwArg04,Stack +0028:dwArg08,Stack +002C:dwArg0C
		defs: edx:edx_314
	edxOut = edx_314
	return 0<32>
l0073AFE5:
	Mem329[dwArg08 + 0x40<32>:word32] = 0<32>
	Mem330[esi_169:word32] = 1<32>
l0073B170:
	Mem339[esi_169 + 0x24<32>:word32] = Mem337[esi_169 + 0x20<32>:word32]
	Mem345[esi_169 + 0x14<32>:word32] = ebp_111
	branch edi_13 == 0<32> l0073B180
l0073B17D:
	Mem348[edi_13:word32] = Mem345[edi_13:word32] + 1<32>
l0073B180:
	Mem352[esi_169 + 0xC<32>:word32] = edi_13
	Mem358[dwArg08:word32] = Mem352[dwArg08:word32] + 1<32>
	word32 edi_361 = Mem358[esp_160 + 0x24<32>:word32]
	Mem363[edi_361:word32] = Mem358[edi_361:word32] + 1<32>
	Mem364[esi_169 + 0x18<32>:word32] = edi_361
	word32 eax_365 = Mem364[dwArg08 + 0x14<32>:word32]
	byte al_371 = SLICE(eax_365, byte, 0)
	branch SLICE(eax_365 & 3<32>, byte, 0) == 3<8> l0073B1D4
l0073B19D:
	word32 eax_375
	branch (al_371 & 2<8>) == 0<8> l0073B1C5
l0073B1C5:
	eax_375 = Mem364[esp_160 + 0x28<32>:word32]
	branch eax_375 != 0<32> l0073B1CE
l0073B1CB_1:
	eax_375 = edi_361
l0073B1CE:
	Mem383[eax_375:word32] = Mem364[eax_375:word32] + 1<32>
l0073B1A1:
	word32 ecx_681
	eax_375 = fn006FDCC0(out ecx_681, out edx_202)
	branch eax_375 != 0<32> l0073B1D1
l0073B1D1:
	Mem404[esi_169 + 0x1C<32>:word32] = eax_375
l0073B1D4:
	Mem411[esi_169 + 0x38<32>:word32] = dwArg04
	Mem412[esi_169 + 0x3C<32>:word32] = 0xFFFFFFFF<32>
	Mem418[esi_169 + 0x40<32>:word32] = Mem412[dwArg08 + 0x38<32>:word32]
	Mem419[esi_169 + 0x44<32>:word32] = 0<32>
	word32 edi_417 = esi_169 - 0x10<32>
	branch Mem419[edi_417 + 8<32>:word32] == 0xFFFFFFFE<32> l0073B205
l0073B1F8:
	fn006E86F0(0x8D0E04<32>)
l0073B205:
	Mem432[edi_417 + 8<32>:word32] = 0xFFFFFFFD<32>
	Mem434[edi_417:word32] = Mem432[0x00A1D558<p32>:word32]
	word32 edx_435 = Mem434[0x00A1D558<p32>:word32]
	word32 eax_436 = Mem434[edx_435 + 4<32>:word32]
	Mem437[edi_417 + 4<32>:word32] = eax_436
	Mem438[eax_436:word32] = edi_417
	Mem440[Mem438[0x00A1D558<p32>:word32] + 4<32>:word32] = edi_417
	edxOut = edx_435
	return esi_169
l0073B1AA:
	word32 v21_454 = Mem364[esi_169:word32] + 0xFFFFFFFF<32>
	Mem455[esi_169:word32] = v21_454
	branch v21_454 != 0<32> l0073B1BB
l0073B1AF:
	word32 eax_458 = Mem455[esi_169 + 4<32>:word32]
	word32 ecx_459 = Mem455[eax_458 + 0x18<32>:word32]
	Mem461[esp_160 - 4<i32>:word32] = esi_169
	call ecx_459 (retsize: 4;)
		uses: eax:eax_458,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C
		defs: edx:edx_465
l0073B1BB:
	edxOut = edx_202
	return 0<32>
fn0073AFB0_exit:


void fn0073B240(word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00708DC0
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31] Stack +0010:[0..31]
// LiveOut:
// Trashed: SCZO eax ecx edx Top
// Preserved: esi esp
fn0073B240_entry:
l0073B240:
	branch Mem6[dwArg04 + 0x44<32>:word32] < 0x14<32> l0073B258
l0073B24B:
	fn006E86F0(0x8DC794<32>)
l0073B258:
	word32 eax_21 = Mem20[dwArg04 + 0x44<32>:word32]
	Mem28[dwArg04 + 0x44<32>:word32] = eax_21 + 1<32>
	word32 ecx_25 = dwArg04 + ((eax_21 + 0x12<32>) + eax_21 * 2<32>) * 4<32>
	Mem30[ecx_25:word32] = dwArg08
	Mem32[ecx_25 + 8<32>:word32] = dwArg10
	Mem33[ecx_25 + 4<32>:word32] = dwArg0C
	return
fn0073B240_exit:


word32 fn0073B280(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00708DC0
// MayUse:  Stack +0004:[0..31]
// LiveOut: eax
// Trashed: SCZO eax Top
// Preserved: esi esp
fn0073B280_entry:
l0073B280:
	branch Mem6[dwArg04 + 0x44<32>:word32] > 0<32> l0073B298
l0073B28B:
	fn006E86F0(0x8DC7B0<32>)
l0073B298:
	Mem22[dwArg04 + 0x44<32>:word32] = Mem20[dwArg04 + 0x44<32>:word32] + 0xFFFFFFFF<32>
	word32 eax_24 = Mem22[dwArg04 + 0x44<32>:word32]
	return dwArg04 + ((eax_24 + 0x12<32>) + eax_24 * 2<32>) * 4<32>
fn0073B280_exit:


word32 fn0073B2B0(word32 eax, word32 ecx, word32 ebx, word32 dwArg08, ptr32 & ecxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073B3D0
// MayUse:  eax:[0..31] ebx:[0..31] ecx:[0..31] Stack +0008:[0..31]
// LiveOut: eax ecx
// Trashed: SCZO eax ebp ecx edi edx esi Top
// Preserved: esp
fn0073B2B0_entry:
l0073B2B0:
	word32 esi_13 = ecx + 0xFFFFFFFF<32>
	branch ecx < 0xFFFFFFFF<32> l0073B306
l0073B2BD:
	word32 edi_20 = eax + 0xC<32> + (ecx + 0xFFFFFFFF<32>) * 4<32>
l0073B2C2:
	word32 ecx_26 = Mem25[edi_20:word32]
	word32 eax_29 = Mem25[dwArg08 + esi_13 * 4<32>:word32]
	branch ebx == 0<32> l0073B2CF
l0073B2CC:
	eax_29 = Mem25[eax_29 + 8<32>:word32]
l0073B2CF:
	branch eax_29 != 0<32> l0073B2E3
l0073B2E3:
	eax = fn00704300(dwArg04, ecx_26, dwArg08, out ecx)
l0073B2D3:
	eax = fn00704400(dwArg04, ecx_26, out ecx)
l0073B2F2:
	branch eax == 0<32> l0073B2FB
l0073B2F6:
	word32 edx_171
	eax = fn006E1160(out ecx, out edx_171)
l0073B2FB:
	esi_13 = esi_13 - 1<32>
	edi_20 = edi_20 - 4<32>
	branch esi_13 >= 0<32> l0073B2C2
l0073B305:
l0073B306:
	ecxOut = ecx
	return eax
fn0073B2B0_exit:


word32 fn0073B310(word32 eax, word32 ecx, word32 ebx, ptr32 & ecxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073B4E0
// MayUse:  eax:[0..31] ebx:[0..31] ecx:[0..31]
// LiveOut: eax ecx
// Trashed: SCZO eax ebp ecx edi edx esi Top
// Preserved: esp
fn0073B310_entry:
l0073B310:
	word32 edi_185 = ecx + 0xFFFFFFFF<32>
	branch ecx < 0xFFFFFFFF<32> l0073B3C8
l0073B31C:
	word32 esp_109 = fp - 12<i32>
	word32 ebp_187 = eax + 0xC<32> + (ecx + 0xFFFFFFFF<32>) * 4<32>
l0073B322:
	word32 ecx_24 = Mem21[esp_109 + 0x10<32>:word32]
	word32 esp_25 = esp_109 - 4<i32>
	Mem26[esp_25:word32] = Mem21[ebp_187:word32]
	Mem28[esp_25 - 4<i32>:word32] = ecx_24
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 stackArg8 = <invalid>
	word32 edx_259
	word32 eax_34 = fn00704220(stackArg4, stackArg8, out ecx, out edx_259)
	esp_109 = esp_25 + 4<32>
	eax = eax_34
	branch eax_34 != 0<32> l0073B33E
l0073B339:
	word32 edx_253
	eax = fn006E1160(out ecx, out edx_253)
l0073B33E:
	branch Mem28[esp_25 + 0x18<32>:word32] == 0<32> l0073B36C
l0073B36C:
	branch eax_34 != 0<32> l0073B376
l0073B370:
	branch Mem28[esp_25 + 0x1C<32>:word32] == eax_34 l0073B3B8
l0073B376:
	branch Mem28[ebx + edi_185 * 4<32>:word32] == eax_34 l0073B3A3
l0073B37B:
	branch eax_34 == 0<32> l0073B382
l0073B37F:
	Mem73[eax_34:word32] = Mem28[eax_34:word32] + 1<32>
l0073B382:
	eax = Mem77[ebx + edi_185 * 4<32>:word32]
	branch eax == 0<32> l0073B3A0
l0073B389:
	Mem83[eax:word32] = Mem77[eax:word32] + 0xFFFFFFFF<32>
	eax = Mem83[ebx + edi_185 * 4<32>:word32]
	branch Mem83[eax:word32] != 0<32> l0073B3A0
l0073B394:
	word32 edx_87 = Mem83[eax + 4<32>:word32]
	Mem91[esp_25:word32] = eax
	word32 eax_92 = Mem91[edx_87 + 0x18<32>:word32]
	word32 esp_103
	call eax_92 (retsize: 4;)
		uses: eax:eax_92,ecx:ecx_95,edx:edx_87
		defs: eax:eax_105,ecx:ecx_104,esp:esp_103
	esp_109 = esp_103 + 4<32>
l0073B3A0:
	Mem114[ebx + edi_185 * 4<32>:word32] = eax_34
l0073B345:
	branch eax_34 != 0<32> l0073B34F
l0073B349:
	branch Mem28[esp_25 + 0x1C<32>:word32] == eax_34 l0073B3B8
l0073B34F:
	eax = Mem28[ebx + edi_185 * 4<32>:word32]
	branch Mem28[eax + 8<32>:word32] == eax_34 l0073B3A3
l0073B357:
	Mem129[esp_25:word32] = eax_34
	Mem131[esp_25 - 4<i32>:word32] = eax
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 stackArg8 = <invalid>
	eax = fn00750420(stackArg4, stackArg8, out ecx)
	esp_109 = esp_25 + 4<32>
	branch eax >= 0<32> l0073B3A3
l0073B365:
	word32 edx_256
	eax = fn006E1160(out ecx, out edx_256)
l0073B3A3:
	branch eax_34 == 0<32> l0073B3B8
l0073B3A7:
	word32 v18_157 = Mem156[eax_34:word32] + 0xFFFFFFFF<32>
	Mem158[eax_34:word32] = v18_157
	branch v18_157 != 0<32> l0073B3B8
l0073B3AC:
	word32 ecx_161 = Mem158[eax_34 + 4<32>:word32]
	word32 edx_162 = Mem158[ecx_161 + 0x18<32>:word32]
	Mem166[esp_109 - 4<i32>:word32] = eax_34
	word32 esp_176
	word32 edx_179
	call edx_162 (retsize: 4;)
		uses: eax:eax_170,ecx:ecx_161,edx:edx_179
		defs: eax:eax_178,ecx:ecx_177,edx:edx_179,esp:esp_176
	esp_109 = esp_176 + 4<32>
l0073B3B8:
	edi_185 = edi_185 - 1<32>
	ebp_187 = ebp_187 - 4<32>
	branch edi_185 >= 0<32> l0073B322
l0073B3C6:
l0073B3C8:
	ecxOut = ecx
	return eax
fn0073B310_exit:


void fn0073B3D0(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00708DC0
//      fn0070BCC0
// MayUse:  Stack +0004:[0..31]
// LiveOut:
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn0073B3D0_entry:
l0073B3D0:
	branch dwArg04 == 0<32> l0073B4CE
l0073B3E0:
	branch Mem14[dwArg04 + 0x1C<32>:word32] != 0<32> l0073B401
l0073B3E8:
	word32 ecx_340
	word32 edx_341
	word32 eax_20 = fn006FDCC0(out ecx_340, out edx_341)
	Mem28[dwArg04 + 0x1C<32>:word32] = eax_20
	branch eax_20 != 0<32> l0073B401
l0073B401:
	word32 esi_36 = Mem34[dwArg04 + 0x10<32>:word32]
	word32 edi_41 = Mem40[esi_36 + 0x24<32>:word32]
	word32 eax_42 = Mem40[edi_41 + 4<32>:word32]
	branch eax_42 == 0xA16588<32> l0073B429
l0073B413:
	word32 ecx_344
	word32 edx_345
	branch fn006D5670(eax_42, 0xA16588<32>, out ecx_344, out edx_345) == 0<32> l0073B4CB
l0073B429:
	fn006E1130(fp - 4<32>, fp - 8<32>, fp - 0xC<32>)
	word32 eax_78 = Mem69[esi_36 + 0xC<32>:word32]
	branch Mem69[edi_41 + 8<32>:word32] <= eax_78 l0073B451
l0073B44E_1:
l0073B451:
	branch eax_78 == 0<32> l0073B467
l0073B459:
	word32 ecx_112
	fn0073B2B0(edi_41, ecx_112, 0<32>, dwArg04, out ecx_112)
l0073B467:
	word32 edi_122 = Mem119[Mem119[esi_36 + 0x2C<32>:word32] + 8<32>:word32]
	word32 ecx_125 = Mem119[Mem119[esi_36 + 0x28<32>:word32] + 8<32>:word32]
	branch edi_122 != 0<32> l0073B47F
l0073B47B:
	branch ecx_125 == 0<32> l0073B4B4
l0073B47F:
	word32 ecx_346
	fn0073B2B0(eax_167, edi_122, 1<32>, dwArg04, out ecx_346)
	word32 ecx_347
	word32 eax_167 = fn0073B2B0(Mem143[esi_36 + 0x28<32>:word32], ecx_125, 1<32>, dwArg04, out ecx_347)
l0073B4B4:
	word32 ecx_348
	word32 edx_349
	fn006E0E00(dwLoc0C, out ecx_348, out edx_349)
l0073B4CB:
l0073B4CE:
	return
l0073B3F6:
	word32 ecx_342
	word32 edx_343
	fn006E1160(out ecx_342, out edx_343)
	return
fn0073B3D0_exit:


word32 fn0073B4E0(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00708DC0
//      fn0070BCC0
// MayUse:  Stack +0004:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ebx ecx edi edx esi Top
// Preserved: ebp esp
fn0073B4E0_entry:
l0073B4E0:
	branch dwArg04 == 0<32> l0073B5D9
l0073B4F0:
	word32 esi_21 = Mem20[dwArg04 + 0x10<32>:word32]
	word32 edi_25 = Mem24[esi_21 + 0x24<32>:word32]
	branch Mem14[dwArg04 + 0x1C<32>:word32] == 0<32> l0073B5D6
l0073B508:
	word32 eax_28 = Mem26[edi_25 + 4<32>:word32]
	branch eax_28 == 0xA16588<32> l0073B528
l0073B512:
	word32 ecx_300
	word32 edx_301
	eax = fn006D5670(eax_28, 0xA16588<32>, out ecx_300, out edx_301)
	branch eax == 0<32> l0073B5D6
l0073B528:
	fn006E1130(fp - 4<32>, fp - 8<32>, fp - 0xC<32>)
	word32 eax_64 = Mem55[esi_21 + 0xC<32>:word32]
	branch Mem55[edi_25 + 8<32>:word32] <= eax_64 l0073B550
l0073B54D_1:
l0073B550:
	branch eax_64 == 0<32> l0073B569
l0073B554:
	word32 ecx_97
	fn0073B310(Mem81[esi_21 + 0x24<32>:word32], ecx_97, dwArg04 + 0x138<32>, out ecx_97)
l0073B569:
	word32 edi_107 = Mem104[Mem104[esi_21 + 0x2C<32>:word32] + 8<32>:word32]
	word32 ecx_110 = Mem104[Mem104[esi_21 + 0x28<32>:word32] + 8<32>:word32]
	branch edi_107 != 0<32> l0073B581
l0073B57D:
	branch ecx_110 == 0<32> l0073B5BF
l0073B581:
	word32 ecx_302
	fn0073B310(eax_157, edi_107, dwArg04 + 0x138<32> + Mem112[esi_21 + 0xC<32>:word32] * 4<32>, out ecx_302)
	word32 ecx_303
	word32 eax_157 = fn0073B310(Mem146[esi_21 + 0x28<32>:word32], ecx_110, dwArg04 + 0x138<32> + (Mem131[esi_21 + 0xC<32>:word32] + edi_107) * 4<32>, out ecx_303)
l0073B5BF:
	word32 ecx_304
	word32 edx_305
	eax = fn006E0E00(dwLoc0C, out ecx_304, out edx_305)
l0073B5D6:
l0073B5D9:
	return eax
fn0073B4E0_exit:


void fn0073B5E0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E8910
// MayUse: 
// LiveOut:
// Trashed: SCZO eax ecx edx Top
// Preserved: esp
fn0073B5E0_entry:
l0073B5E0:
	word32 eax_10 = Mem0[0x00A6DF30<p32>:word32]
	branch eax_10 == 0<32> l0073B612
l0073B5E9:
	word32 esp_13 = fp
l0073B5F0:
	word32 ecx_12 = Mem11[eax_10 + 0xC<32>:word32]
	word32 esp_14 = esp_13 - 4<i32>
	Mem15[esp_14:word32] = eax_10
	Mem16[0x00A6DF30<p32>:word32] = ecx_12
	fn006FEFD0(Mem16[esp_14:word32])
	eax_10 = Mem16[0x00A6DF30<p32>:word32]
	Mem27[0x00A6DF34<p32>:word32] = Mem16[0x00A6DF34<p32>:word32] - 1<32>
	esp_13 = esp_14
	branch eax_10 != 0<32> l0073B5F0
l0073B612:
	word32 eax_33 = Mem32[0x00A6DF2C<p32>:word32]
	branch eax_33 == 0<32> l0073B62C
l0073B61B:
	word32 v10_37 = Mem32[eax_33:word32] + 0xFFFFFFFF<32>
	Mem38[eax_33:word32] = v10_37
	branch v10_37 != 0<32> l0073B62C
l0073B620:
	word32 edx_41 = Mem38[eax_33 + 4<32>:word32]
	word32 ecx_50
	call Mem44[edx_41 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_50,edx:edx_41,Stack +0004:eax_33
		defs: ecx:ecx_50
l0073B62C:
	Mem56[0x00A6DF2C<p32>:word32] = 0<32>
	return
fn0073B5E0_exit:


word32 fn0073B660(word16 wArg04, ptr32 & ecxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn007406A0
//      fn007551F0
// MayUse:  Stack +0004:[0..15]
// LiveOut: eax ecx
// Trashed: SCZO eax ecx edx Top
// Preserved: esp
fn0073B660_entry:
l0073B660:
	word32 edx_47
	word32 ecx_46
	word32 eax_6 = fn00723860(0x18<32>, out ecx_46, out edx_47)
	branch eax_6 != 0<32> l0073B673
l0073B673:
	Mem18[eax_6:word16] = wArg04
	Mem19[eax_6 + 4<32>:word32] = 0<32>
	Mem20[eax_6 + 8<32>:word32] = 0<32>
	Mem21[eax_6 + 0x10<32>:word32] = 0<32>
	Mem22[eax_6 + 0x14<32>:word32] = 0<32>
	ecxOut = <invalid>
	return eax_6
l0073B670:
	ecxOut = <invalid>
	return 0<32>
fn0073B660_exit:


word32 fn0073B690(word32 ecx)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073B6B0
// MayUse:  ecx:[0..31]
// LiveOut: eax
// Trashed: SCZO eax Top
// Preserved: esp
fn0073B690_entry:
l0073B690:
	word32 eax_10 = 0x100<32>
	branch ecx <= 0x100<32> l0073B6AE
l0073B699:
l0073B6A0:
	eax_10 = eax_10 * 2<32>
	branch eax_10 <= 0<32> l0073B6AB
l0073B6AB:
	eax_10 = 0xFFFFFFFF<32>
l0073B6AE:
	return eax_10
l0073B6A6:
	branch eax_10 < ecx l0073B6A0
l0073B6AA:
	return eax_10
fn0073B690_exit:


word32 fn0073B6B0(word32 dwArg04, word16 wArg08, word32 dwArg0C, word32 dwArg10, word32 dwArg14)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn007552A0
//      fn00755500
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..15] Stack +000C:[0..31] Stack +0010:[0..31] Stack +0014:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx edx Top
// Preserved: esi esp
fn0073B6B0_entry:
l0073B6B0:
	word32 ecx_8 = Mem6[dwArg04 + 0x10<32>:word32]
	branch ecx_8 == 0x7FFFFFFF<32> l0073B782
l0073B6C4:
	branch ecx_8 < 0<32> l0073B782
l0073B6CC:
	word32 edx_23
	branch ecx_8 > 1<32> l0073B6D5
l0073B6D5:
	branch ecx_8 > 0x80<32> l0073B6E5
l0073B6E5:
	edx_23 = fn0073B690(ecx_8)
l0073B6DD:
	edx_23 = ecx_8 + 3<32> & 0xFFFFFFFC<32>
l0073B6D1:
	edx_23 = ecx_8
l0073B6EC:
	word32 eax_30 = ecx_8 + 1<32>
	branch ecx_8 <= 0<32> l0073B70A
l0073B6F4:
	branch ecx_8 > 0x7F<32> l0073B703
l0073B703:
	eax_30 = fn0073B690(ecx_8 + 1<32>)
l0073B6FB:
	eax_30 = ecx_8 + 4<32> & 0xFFFFFFFC<32>
l0073B70A:
	branch edx_23 < 0<32> l0073B782
l0073B70E:
	branch eax_30 < 0<32> l0073B782
l0073B782:
	return 0x13<32>
l0073B712:
	branch edx_23 >= eax_30 l0073B741
l0073B716:
	branch eax_30 <=u 0xAAAAAAA<32> l0073B724
l0073B724:
	word32 ecx_195
	word32 edx_196
	word32 eax_79 = fn00723B60(Mem6[dwArg04 + 0x14<32>:word32], eax_30 * 0x18<32>, out ecx_195, out edx_196)
	branch eax_79 == 0<32> l0073B71D
l0073B73E:
	Mem90[dwArg04 + 0x14<32>:word32] = eax_79
l0073B741:
	word32 ecx_93 = Mem92[dwArg04 + 0x10<32>:word32]
	word32 eax_96 = Mem92[dwArg04 + 0x14<32>:word32] + ecx_93 * 0x18<32>
	Mem100[dwArg04 + 0x10<32>:word32] = ecx_93 + 1<32>
	Mem102[eax_96:word16] = wArg08
	Mem104[eax_96 + 4<32>:word32] = dwArg0C
	Mem106[eax_96 + 8<32>:word32] = dwArg10
	Mem107[eax_96 + 0xC<32>:word32] = dwArg14
	Mem108[eax_96 + 0x10<32>:word32] = 0<32>
	Mem109[eax_96 + 0x14<32>:word32] = 0<32>
	return 0<32>
l0073B71D:
	return 0xF<32>
fn0073B6B0_exit:


void fn0073B790(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073B790
//      fn0073B7F0
// MayUse:  Stack +0004:[0..31]
// LiveOut:
// Trashed: SCZO eax ecx edx Top
// Preserved: ebx edi esi esp
fn0073B790_entry:
l0073B790:
	word32 esi_11 = Mem10[dwArg04 + 0x10<32>:word32]
	word32 esi_12 = esi_11 - 1<32>
	branch esi_11 < 1<32> l0073B7C1
l0073B79E:
	word32 edi_21 = (esi_11 - 1<32> + (esi_11 - 1<32>) * 2<32>) * 8<32>
l0073B7A8:
	fn0073B790(Mem24[dwArg04 + 0x14<32>:word32] + edi_21)
	esi_12 = esi_12 - 1<32>
	edi_21 = edi_21 - 0x18<32>
	branch esi_12 >= 0<32> l0073B7A8
l0073B7C0:
l0073B7C1:
	word32 eax_48 = Mem47[dwArg04 + 0x14<32>:word32]
	branch eax_48 == 0<32> l0073B7D1
l0073B7C8:
	word32 ecx_135
	word32 edx_136
	fn007239C0(eax_48, out ecx_135, out edx_136)
l0073B7D1:
	word32 ebx_66 = Mem65[dwArg04 + 4<32>:word32]
	branch ebx_66 == 0<32> l0073B7E1
l0073B7D8:
	word32 ecx_137
	word32 edx_138
	fn007239C0(ebx_66, out ecx_137, out edx_138)
l0073B7E1:
	return
fn0073B790_exit:


void fn0073B7F0(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E8AC0
//      fn006E8B50
//      fn00755280
// MayUse:  Stack +0004:[0..31]
// LiveOut:
// Trashed: SCZO eax ecx edx Top
// Preserved: esi esp
fn0073B7F0_entry:
l0073B7F0:
	branch dwArg04 == 0<32> l0073B808
l0073B7F9:
	fn0073B790(dwArg04)
	word32 ecx_57
	word32 edx_58
	fn007239C0(dwArg04, out ecx_57, out edx_58)
l0073B808:
	return
fn0073B7F0_exit:


word32 fn0073B810()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073C870
//      fn0073FAF0
// MayUse: 
// LiveOut: eax
// Trashed: SCZO ecx Top
// Preserved: esi esp
fn0073B810_entry:
l0073B810:
	word32 ecx_44
	word32 edx_45
	word32 eax_11 = fn006F1A70(out ecx_44, out edx_45)
	fn00740DF0(dwArg04, eax_11)
	return eax_11
fn0073B810_exit:


word32 fn0073B830(ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073BBE0
//      fn0073C870
//      fn0073CAE0
//      fn0073DBD0
//      fn0073EB70
//      fn0073F7B0
//      fn00740060
//      fn007403E0
// MayUse: 
// LiveOut: eax edx
// Trashed: SCZO eax ecx edx Top
// Preserved: esi esp
fn0073B830_entry:
l0073B830:
	word32 esi_82
	word32 edx_20
	word32 eax_19 = fn006EA200(out edx_20, out esi_82)
	branch eax_19 == 0<32> l0073B869
l0073B849:
	word32 ecx_83
	word32 eax_33 = fn006E0E90(Mem16[0x00A178F4<p32>:word32], eax_19, out ecx_83, out edx_20)
	word32 v11_41 = Mem32[eax_19:word32] + 0xFFFFFFFF<32>
	Mem42[eax_19:word32] = v11_41
	branch v11_41 != 0<32> l0073B869
l0073B85D:
	word32 ecx_45 = Mem42[eax_19 + 4<32>:word32]
	word32 edx_46 = Mem42[ecx_45 + 0x18<32>:word32]
	call edx_46 (retsize: 4;)
		uses: eax:eax_33,ecx:ecx_45,edx:edx_46,Stack +0004:eax_19
		defs: edx:edx_52
l0073B869:
	edxOut = edx_20
	return 0<32>
fn0073B830_exit:


void fn0073B870(word32 esi, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn007403E0
// MayUse:  esi:[0..31] Stack +0004:[0..31]
// LiveOut:
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn0073B870_entry:
l0073B870:
	word32 ecx_418
	word32 edx_419
	branch fn006E1110(out ecx_418, out edx_419) == 0<32> l0073B9A9
l0073B88E:
	fn006E1130(fp - 4<32>, fp - 0xC<32>, fp - 8<32>)
	word32 eax_49 = fn006DFE60(dwLoc0C, dwArg04)
	branch eax_49 == 0<32> l0073B9A8
l0073B8BC:
	Mem60[eax_49:word32] = Mem47[eax_49:word32] + 1<32>
	word32 esi_422
	word32 edi_423
	word32 ecx_420
	word32 edx_421
	word32 eax_79 = fn007051A0(eax_49, fn006DFE60(dwLoc0C, dwArg04), out ecx_420, out edx_421, out esi_422, out edi_423)
	word32 esp_104 = fp - 0x18<32>
	branch eax_79 == 0xFFFFFFFF<32> l0073B942
l0073B8DC:
	Mem90[dwLoc0C:word32] = Mem77[dwLoc0C:word32] + 0xFFFFFFFF<32>
	branch Mem90[dwLoc0C:word32] != 0<32> l0073B8F8
l0073B8EC:
	word32 edx_94 = Mem90[dwLoc0C + 4<32>:word32]
	word32 esp_98
	call Mem96[edx_94 + 0x18<32>:word32] (retsize: 4;)
		uses: edx:edx_94,Stack +0004:dwLoc0C,Stack +0008:dwArg04,Stack +0014:dwLoc0C,Stack +0024:dwArg04
		defs: esp:esp_98
	esp_104 = esp_98 + 4<32>
l0073B8F8:
	word32 esp_107 = esp_104 - 4<i32>
	Mem110[esp_107:word32] = esi
	Mem113[esp_107 - 4<i32>:word32] = eax_79
	Mem116[esp_107 - 8<i32>:word32] = dwArg04
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 eax_120 = fn006E1AB0(edx, eax_79, dwArg04, esi, eax_49, es, ds, stackArg4, dwArg04)
	word32 esi_125 = eax_120
	branch eax_120 != 0<32> l0073B915
l0073B909:
	Mem131[0x00A163B8<p32>:word32] = Mem116[0x00A163B8<p32>:word32] + 1<32>
	esi_125 = 0xA163B8<32>
l0073B915:
	Mem137[esp_107 - 4<32>:word32] = esi_125
	Mem139[esp_107 - 8<i32>:word32] = 0xA163B8<32>
	Mem142[esp_107 - 12<i32>:word32] = eax_79
	Mem145[esp_107 - 16<i32>:word32] = dwArg04
	Mem147[esp_107 - 20<i32>:word32] = 0x8DC7D0<32>
	word32 edx_428
	word32 esi_429
	word32 eax_151 = fn006EA200(out edx_428, out esi_429)
	word32 v18_157 = Mem147[esi_125:word32] + 0xFFFFFFFF<32>
	Mem158[esi_125:word32] = v18_157
	word32 esp_156 = esp_107
	branch v18_157 != 0<32> l0073B93D
l0073B931:
	word32 ecx_162 = Mem158[esi_125 + 4<32>:word32]
	word32 edx_163 = Mem158[ecx_162 + 0x18<32>:word32]
	Mem165[esp_107 - 4<32>:word32] = esi_125
	word32 esp_166
	call edx_163 (retsize: 4;)
		uses: ecx:ecx_162,Stack +0008:dwArg04,Stack +FFFFFFF8:dwLoc0C
		defs: esp:esp_166
	esp_156 = esp_166 + 4<32>
l0073B93D:
	esp_104 = esp_156 + 4<i32>
	branch eax_151 != 0<32> l0073B95A
l0073B95A:
	Mem183[esp_104 - 4<i32>:word32] = eax_151
	Mem186[esp_104 - 8<i32>:word32] = eax_49
	Mem188[esp_104 - 12<i32>:word32] = 2<32>
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 edx_432
	word32 esi_433
	word32 ecx_431
	Mem198[esp_104 + 0xC<32>:word32] = fn006DFF80(stackArg4, out ecx_431, out edx_432, out esi_433)
	word32 v19_199 = Mem198[eax_49:word32] + 0xFFFFFFFF<32>
	Mem200[eax_49:word32] = v19_199
	word32 esp_197 = esp_104
	branch v19_199 != 0<32> l0073B97B
l0073B96F:
	word32 edx_203 = Mem200[eax_49 + 4<32>:word32]
	word32 eax_204 = Mem200[edx_203 + 0x18<32>:word32]
	Mem206[esp_104 - 4<32>:word32] = eax_49
	word32 esp_207
	call eax_204 (retsize: 4;)
		uses: edx:edx_203,Stack +0008:dwArg04,Stack +FFFFFFF8:dwLoc0C
		defs: esp:esp_207
	esp_197 = esp_207 + 4<32>
l0073B97B:
	word32 v20_217 = Mem216[eax_151:word32] + 0xFFFFFFFF<32>
	Mem218[eax_151:word32] = v20_217
	branch v20_217 != 0<32> l0073B98C
l0073B980:
	word32 ecx_221 = Mem218[eax_151 + 4<32>:word32]
	word32 edx_222 = Mem218[ecx_221 + 0x18<32>:word32]
	Mem225[esp_197 - 4<i32>:word32] = eax_151
	word32 esp_230
	call edx_222 (retsize: 4;)
		uses: ecx:ecx_221,Stack +0008:dwArg04,Stack +FFFFFFF8:dwLoc0C
		defs: esp:esp_230
	esp_197 = esp_230 + 4<32>
l0073B98C:
	word32 eax_240 = Mem239[esp_197 + 0xC<32>:word32]
	branch eax_240 == 0<32> l0073B9A7
l0073B994:
	word32 edx_245 = Mem239[esp_197 + 0x14<32>:word32]
	word32 esp_246 = esp_197 - 4<i32>
	Mem247[esp_246:word32] = Mem239[esp_197 + 0x10<32>:word32]
	Mem249[esp_246 - 4<i32>:word32] = eax_240
	Mem251[esp_246 - 8<i32>:word32] = edx_245
	word32 ecx_434
	word32 edx_435
	fn006E0E00(Mem251[esp_246:word32], out ecx_434, out edx_435)
l0073B942:
	word32 v17_263 = Mem262[eax_49:word32] + 0xFFFFFFFF<32>
	Mem264[eax_49:word32] = v17_263
	branch v17_263 != 0<32> l0073B9A7
l0073B9A7:
l0073B9A8:
l0073B9A9:
	return
l0073B947:
	word32 eax_282 = Mem264[eax_49 + 4<32>:word32]
	word32 ecx_283 = Mem264[eax_282 + 0x18<32>:word32]
	Mem285[esp_104 - 4<i32>:word32] = eax_49
	call ecx_283 (retsize: 4;)
		uses: eax:eax_282,Stack +0008:dwArg04,Stack +FFFFFFF8:dwLoc0C
	return
fn0073B870_exit:


word32 fn0073B9B0(word32 edx, word32 ebx, word32 ebp, word32 esi, word32 edi, selector es, selector ds, word32 dwArg04, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073B9B0
//      fn0073CEC0
//      fn007403E0
// MayUse:  cs:[0..15] ds:[0..15] ebp:[0..31] ebx:[0..31] edi:[0..31] edx:[0..31] es:[0..15] esi:[0..31] fs:[0..15] gs:[0..15] ss:[0..15] Stack +0004:[0..31]
// LiveOut: eax edx
// Trashed: SCZDOP eax ecx edx Top
// Preserved: ebp ebx edi esi esp
fn0073B9B0_entry:
l0073B9B0:
	word32 eax_120
	word32 eax_19 = CONVERT(Mem17[dwArg04:word16], word16, int32)
	word32 eax_7 = Mem0[0x00A14188<p32>:word32] ^ fp - 0x84<32>
	word32 esi_121 = dwArg04
	word32 eax_127 = eax_19 - 0x100<32>
	branch eax_19 >u 0x12B<32> l0073BA13
l0073B9DC:
l0073B9E0:
	switch (CONVERT(Mem24[eax_127 + 0x73BAF4<32>:byte], byte, word32)) { l0073B9EE l0073BA53 l0073BA13 l0073BA13 l0073BA13 l0073BA13 l0073BA13 l0073BA13 l0073BA13 l0073BA13 l0073BA03 l0073BA8D l0073BA13 l0073BA13 l0073BA13 l0073BA13 l0073BA13 l0073BA13 l0073BA13 l0073BA13 l0073BA13 l0073BA13 l0073BA13 l0073BA13 l0073BA13 l0073BA13 l0073BA13 l0073BA13 l0073BA13 l0073BA13 l0073BA13 l0073BA13 l0073BA13 l0073BA13 l0073BA13 l0073BA86 l0073BA13 l0073BA13 l0073BA13 l0073BA13 l0073BA13 l0073BA13 l0073BA13 l0073B9F9 }
l0073B9F9:
	branch Mem24[esi_121 + 0x10<32>:word32] != 1<32> l0073BA97
l0073BA97:
	word32 edi_34 = 2<32>
	word32 ebp_36 = 0<32>
	branch Mem24[esi_121 + 0x10<32>:word32] <= 3<32> l0073BAD0
l0073BAA8:
	word32 ebx_39 = 0x30<32>
l0073BAB0:
	word32 edx_45 = Mem42[esi_121 + 0x14<32>:word32] + ebx_39
	ebp_36 = ebp_36 + fn0073B9B0(edx_45, ebx_39, ebp_36, esi_121, edi_34, es, ds, edx_45, out edx)
	edi_34 = edi_34 + 1<32>
	ebx_39 = ebx_39 + 0x18<32>
	branch edi_34 < Mem49[esi_121 + 0x10<32>:word32] - 1<32> l0073BAB0
l0073BAD0:
	eax_120 = ebp_36
l0073BA86:
	eax_120 = 1<32>
l0073BA8D:
	int64 edx_eax_71 = CONVERT(Mem24[esi_121 + 0x10<32>:word32], word32, int64)
	edx = SLICE(edx_eax_71, word32, 32) (alias)
	eax_120 = SLICE(edx_eax_71, word32, 0) - edx >> 1<32>
l0073BA03:
	esi_121 = Mem24[esi_121 + 0x14<32>:word32]
l0073BA53:
	word32 ebx_111 = 0<32>
	word32 ebp_108 = 0<32>
	branch Mem24[esi_121 + 0x10<32>:word32] <= 0<32> l0073BA82
l0073BA5C:
	word32 edi_113 = 0<32>
l0073BA60:
	word32 edx_104
	word32 eax_92 = Mem89[esi_121 + 0x14<32>:word32] + edi_113
	branch Mem89[eax_92:word16] != 0x10A<16> l0073BA77
l0073BA6C:
	ebp_108 = ebp_108 + fn0073B9B0(edx_104, ebx_111, ebp_108, esi_121, edi_113, es, ds, eax_92, out edx_104)
	edx = edx_104
l0073BA77:
	ebx_111 = ebx_111 + 1<32>
	edi_113 = edi_113 + 0x18<32>
	branch ebx_111 < Mem115[esi_121 + 0x10<32>:word32] l0073BA60
l0073BA82:
	eax_120 = ebp_108
l0073B9EE:
	esi_121 = Mem24[esi_121 + 0x14<32>:word32]
	branch Mem24[esi_121:word16] == 4<16> l0073BA38
l0073B9F7:
l0073BA06:
	word32 eax_126 = CONVERT(Mem24[esi_121:word16], word16, int32)
	eax_127 = eax_126 - 0x100<32>
	branch eax_126 <=u 0x12B<32> l0073B9E0
l0073BA13:
	edx = CONVERT(Mem24[esi_121:word16], word16, int32)
	sprintf(fp - 0x84<32>, 0x8DC7D8<32>, edx, Mem24[esi_121 + 0x10<32>:word32])
	fn006E86F0(fp - 0x84<32>)
l0073BA38:
	eax_120 = 0<32>
l0073BA3A:
	word32 ecx_369
	word32 eax_265 = fn00694B8E(eax_120, eax_7 ^ fp - 132<i32>, edx, ebx, ebp, esi, edi, es, ds, ebx, out ecx_369)
	edxOut = edx
	return eax_265
fn0073B9B0_exit:


word32 fn0073BB20(word32 eax)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073C680
// MayUse:  eax:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx Top
// Preserved: esp
fn0073BB20_entry:
l0073BB20:
	word32 eax_6 = CONVERT(Mem0[eax:word16], word16, int32)
	branch eax_6 >u 0x30<32> l0073BB7B
l0073BB2B:
	switch (eax_6 + 0xFFFFFFF2<32>) { l0073BB57 l0073BB5D l0073BB63 l0073BB69 l0073BB39 l0073BB45 l0073BB7B l0073BB7B l0073BB7B l0073BB7B l0073BB75 l0073BB7B l0073BB7B l0073BB7B l0073BB7B l0073BB7B l0073BB7B l0073BB7B l0073BB7B l0073BB3F l0073BB4B l0073BB51 l0073BB7B l0073BB7B l0073BB7B l0073BB7B l0073BB7B l0073BB7B l0073BB7B l0073BB7B l0073BB7B l0073BB7B l0073BB7B l0073BB7B l0073BB6F }
l0073BB6F:
	return 0xC<32>
l0073BB51:
	return 8<32>
l0073BB4B:
	return 7<32>
l0073BB3F:
	return 0xA<32>
l0073BB75:
	return 5<32>
l0073BB7B:
	return 0<32>
l0073BB45:
	return 0xB<32>
l0073BB39:
	return 9<32>
l0073BB69:
	return 4<32>
l0073BB63:
	return 3<32>
l0073BB5D:
	return 2<32>
l0073BB57:
	return 1<32>
fn0073BB20_exit:


word32 fn0073BBE0(word32 ebx, word32 ebp, word32 esi, word32 edi, selector es, selector ds, word32 dwArg04, word32 dwArg08, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073BBE0
//      fn0073C100
//      fn0073C7D0
//      fn0073EB70
//      fn0073F690
//      fn0073FA50
// MayUse:  cs:[0..15] ds:[0..15] ebp:[0..31] ebx:[0..31] edi:[0..31] es:[0..15] esi:[0..31] fs:[0..15] gs:[0..15] ss:[0..15] Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax edx
// Trashed: SCZDOP eax ecx edx Top
// Preserved: ebp ebx edi esi esp
fn0073BBE0_entry:
l0073BBE0:
	word32 eax_108
	word32 eax_7 = Mem0[0x00A14188<p32>:word32] ^ fp - 0x134<32>
	word32 edx_10 = Mem8[dwArg04:word32]
	branch edx_10 >u 0x13<32> l0073BD8E
l0073BD8E:
	word32 ecx_616
	fn006E15D0(Mem26[0x00A18720<p32>:word32], 0x8DC7F4<32>, out ecx_616, out edx_10)
l0073BC18:
	word32 ebx_54
	switch (edx_10 - 1<32>) { l0073BD1E l0073BD1E l0073BD1E l0073BD10 l0073BD4F l0073BD3A l0073BD33 l0073BD25 l0073BD2C l0073BD41 l0073BD17 l0073BD48 l0073BD3A l0073BD3A l0073BC1F l0073BC61 l0073BC75 l0073BCA4 l0073BCE5 }
l0073BCE5:
	word32 ecx_46 = Mem26[dwArg04 + 4<32>:word32]
	branch ecx_46 == 0<32> l0073BCF1
l0073BCEC:
	branch Mem26[ecx_46:word32] != 0<32> l0073BD02
l0073BD02:
	Mem53[dwArg04 + 8<32>:word32] = dwArg08
	ebx_54 = ecx_46
l0073BCF1:
	eax_108 = fn0073B830(out edx_10)
l0073BCA4:
	ebx_54 = Mem26[dwArg04 + 4<32>:word32]
	Mem71[dwArg04 + 8<32>:word32] = dwArg08
l0073BCB1:
	branch ebx_54 == 0<32> l0073BC57
l0073BCB5:
	word32 esi_111 = 0<32>
	word32 edi_112 = ebx_54 + 4<32>
l0073BCC0:
	branch esi_111 >= Mem83[ebx_54:word32] l0073BC57
l0073BCC4:
	branch fn0073BBE0(ebx_54, dwArg08, esi_111, edi_112, es, ds, Mem83[edi_112:word32], dwArg04, out edx_10) == 0<32> l0073BDA7
l0073BDA7:
	eax_108 = 0<32>
l0073BCDD:
	esi_111 = esi_111 + 1<32>
	edi_112 = edi_112 + 4<32>
l0073BC75:
	edx_10 = dwArg08
	branch dwArg08 != 2<32> l0073BC97
l0073BC81:
	word32 esi_118 = Mem26[dwArg04 + 4<32>:word32] + 0x14<32>
	word32 edi_119 = 0x8ABDD0<32>
	word32 ecx_120 = 5<32>
	bool v27_434 = true
l0073BC93:
	branch ecx_120 == 0<32> l0073BC95
l0073BC93_1:
	v27_434 = Mem26[esi_618:byte] == Mem26[edi_619:byte]
	esi_118 = esi_618 + 1<i32>
	edi_119 = edi_619 + 1<i32>
	ecx_120 = ecx_120 - 1<32>
	esi_618 = esi_118
	edi_619 = edi_119
	branch Mem26[esi_618:byte] != Mem26[edi_619:byte] l0073BC93
l0073BC95:
	branch v27_434 l0073BC41
l0073BC97:
	Mem142[dwArg04 + 8<32>:word32] = dwArg08
	eax_108 = 1<32>
l0073BC61:
	Mem145[dwArg04 + 0xC<32>:word32] = dwArg08
	eax_108 = 1<32>
l0073BC1F:
	edx_10 = dwArg08
	branch dwArg08 != 2<32> l0073BC54
l0073BC2B:
	word32 esi_151 = Mem26[dwArg04 + 8<32>:word32] + 0x14<32>
	word32 edi_152 = 0x8ABDD0<32>
	word32 ecx_153 = 5<32>
	bool v31_438 = false
l0073BC3D:
	branch ecx_153 == 0<32> l0073BC3F
l0073BC3D_1:
	v31_438 = Mem26[esi_620:byte] != Mem26[edi_621:byte]
	esi_151 = esi_620 + 1<i32>
	edi_152 = edi_621 + 1<i32>
	ecx_153 = ecx_153 - 1<32>
	esi_620 = esi_151
	edi_621 = edi_152
	branch Mem26[esi_620:byte] != Mem26[edi_621:byte] l0073BC3D
l0073BC3F:
	branch v31_438 l0073BC54
l0073BC54:
	Mem175[dwArg04 + 0xC<32>:word32] = dwArg08
l0073BC57:
	eax_108 = 1<32>
l0073BC41:
	eax_108 = fn0073B830(out edx_10)
l0073BD48:
l0073BD17:
l0073BD41:
l0073BD2C:
l0073BD25:
l0073BD33:
l0073BD3A:
l0073BD4F:
l0073BD10:
l0073BD1E:
l0073BD54:
	branch dwArg08 == 2<32> l0073BD68
l0073BD63:
l0073BD68:
	fn00724FE0(fp - 0x130<32>, 0x12C<32>, 0x8DC828<32>)
	eax_108 = fn0073B830(out edx_10)
l0073BDA9:
	word32 ecx_617
	word32 eax_422 = fn00694B8E(eax_108, eax_7 ^ fp - 308<i32>, edx_10, ebx, ebp, esi, edi, es, ds, ebx, out ecx_617)
	edxOut = edx_10
	return eax_422
fn0073BBE0_exit:


word32 fn0073BE10(word32 eax, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073EB70
// MayUse:  eax:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ecx edx Top
// Preserved: esp
fn0073BE10_entry:
l0073BE10:
	word32 eax_7 = Mem0[Mem0[eax + 0x14<32>:word32] + 4<32>:word32]
	word32 ecx_8 = CONVERT(Mem0[eax_7:byte], byte, int32)
	branch ecx_8 >u 0x7C<32> l0073BE82
l0073BE21:
	switch (CONVERT(Mem0[ecx_8 + 0x73BEA3<32>:byte], byte, word32)) { l0073BE4E l0073BE60 l0073BE82 l0073BE82 l0073BE82 l0073BE72 l0073BE2F l0073BE82 l0073BE35 l0073BE82 l0073BE3B l0073BE82 l0073BE82 l0073BE82 l0073BE82 l0073BE82 l0073BE82 l0073BE82 l0073BE82 l0073BE82 l0073BE82 l0073BE82 l0073BE82 l0073BE54 l0073BE82 l0073BE5A l0073BE82 l0073BE82 l0073BE82 l0073BE82 l0073BE82 l0073BE82 l0073BE82 l0073BE82 l0073BE82 l0073BE82 l0073BE82 l0073BE82 l0073BE82 l0073BE82 l0073BE82 l0073BE82 l0073BE82 l0073BE82 l0073BE82 l0073BE82 l0073BE82 l0073BE82 l0073BE82 l0073BE82 l0073BE82 l0073BE82 l0073BE82 l0073BE82 l0073BE82 l0073BE82 l0073BE82 l0073BE66 l0073BE82 l0073BE82 l0073BE82 l0073BE82 l0073BE82 l0073BE82 l0073BE82 l0073BE82 l0073BE82 l0073BE82 l0073BE82 l0073BE82 l0073BE82 l0073BE82 l0073BE82 l0073BE82 l0073BE82 l0073BE82 l0073BE82 l0073BE82 l0073BE82 l0073BE82 l0073BE82 l0073BE82 l0073BE82 l0073BE82 l0073BE82 l0073BE82 l0073BE82 l0073BE6C }
l0073BE6C:
	edxOut = edx
	return 9<32>
l0073BE66:
	edxOut = edx
	return 0xA<32>
l0073BE5A:
	edxOut = edx
	return 8<32>
l0073BE54:
	edxOut = edx
	return 7<32>
l0073BE3B:
	word32 edx_23 = CONVERT(CONVERT(Mem0[eax_7 + 1<32>:byte] == 0x2F<8>, bool, int8), int8, uint32) * 8<32> + 4<32>
	edxOut = edx_23
	return edx_23
l0073BE35:
	edxOut = edx
	return 2<32>
l0073BE2F:
	edxOut = edx
	return 1<32>
l0073BE72:
	word32 eax_33 = (0<32> - (Mem0[eax_7 + 1<32>:byte] == 0x2A<8>) & 0xFFFFFFFD<32>) + 6<32>
	edxOut = edx
	return eax_33
l0073BE82:
	word32 edx_48
	word32 ecx_87
	fn006E15D0(Mem38[0x00A18720<p32>:word32], 0x8DC8E8<32>, out ecx_87, out edx_48)
	edxOut = edx_48
	return 0<32>
l0073BE60:
	edxOut = edx
	return 0xB<32>
l0073BE4E:
	edxOut = edx
	return 5<32>
fn0073BE10_exit:


word32 fn0073BF20(word32 edx, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073E7A0
// MayUse:  edx:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ecx edx Top
// Preserved: ebx edi esi esp
fn0073BF20_entry:
l0073BF20:
	word32 eax_6 = Mem0[edx + 0x10<32>:word32]
	branch eax_6 != 1<32> l0073BFC5
l0073BFC5:
	branch eax_6 != 2<32> l0073C031
l0073C031:
l0073BFCA:
	word32 eax_24 = Mem16[edx + 0x14<32>:word32]
	branch CONVERT(Mem16[eax_24:word16], word16, int32) != 1<32> l0073C00D
l0073BFD5:
	word32 esi_29 = Mem16[eax_24 + 0x1C<32>:word32]
	word32 edi_30 = 0x8DBBCC<32>
	word32 ecx_31 = 3<32>
	bool v15_298 = false
l0073BFE4:
	branch ecx_31 == 0<32> l0073BFE6
l0073BFE4_1:
	v15_298 = Mem16[esi_437:byte] != Mem16[edi_438:byte]
	esi_29 = esi_437 + 1<i32>
	edi_30 = edi_438 + 1<i32>
	ecx_31 = ecx_31 - 1<32>
	esi_437 = esi_29
	edi_438 = edi_30
	branch Mem16[esi_437:byte] != Mem16[edi_438:byte] l0073BFE4
l0073BFE6:
	branch v15_298 l0073BFF1
l0073BFF1:
	word32 esi_50 = Mem16[eax_24 + 4<32>:word32]
	word32 edi_51 = 0x8DBB70<32>
	word32 ecx_52 = 3<32>
	bool v19_302 = false
l0073C000:
	branch ecx_52 == 0<32> l0073C002
l0073C000_1:
	v19_302 = Mem16[esi_439:byte] != Mem16[edi_440:byte]
	esi_50 = esi_439 + 1<i32>
	edi_51 = edi_440 + 1<i32>
	ecx_52 = ecx_52 - 1<32>
	esi_439 = esi_50
	edi_440 = edi_51
	branch Mem16[esi_439:byte] != Mem16[edi_440:byte] l0073C000
l0073C002:
	branch v19_302 l0073C00D
l0073C00D:
	word32 edx_108
	word32 ecx_434
	fn006E15D0(Mem16[0x00A18720<p32>:word32], 0x8DC924<32>, out ecx_434, out edx_108)
	edxOut = edx_108
	return 0<32>
l0073C004:
	edxOut = edx
	return 8<32>
l0073BFE8:
	edxOut = edx
	return 0xA<32>
l0073BF2F:
	word32 eax_136 = Mem16[edx + 0x14<32>:word32]
	word32 ecx_137 = CONVERT(Mem16[eax_136:word16], word16, int32)
	branch ecx_137 >u 0x1F<32> l0073BFBA
l0073BF3D:
	switch (CONVERT(Mem16[ecx_137 + 0x73C06B<32>:byte], byte, word32)) { l0073BF81 l0073BFBA l0073BFBA l0073BFBA l0073BFBA l0073BFBA l0073BFBA l0073BFBA l0073BFBA l0073BFBA l0073BFBA l0073BFBA l0073BFBA l0073BFBA l0073BFBA l0073BFBA l0073BFBA l0073BFBA l0073BFBA l0073BF4B l0073BF54 l0073BFBA l0073BFBA l0073BFBA l0073BFBA l0073BFBA l0073BFBA l0073BF5D l0073BF78 l0073BF66 l0073BF6F }
l0073BF6F:
	edxOut = edx
	return 6<32>
l0073BF66:
	edxOut = edx
	return 4<32>
l0073BF78:
	edxOut = edx
	return 2<32>
l0073BF5D:
	edxOut = edx
	return 1<32>
l0073BF54:
	edxOut = edx
	return 5<32>
l0073BF4B:
	edxOut = edx
	return 3<32>
l0073BF81:
	word32 edx_184 = Mem16[eax_136 + 4<32>:word32]
	word32 edi_185 = 0x8DBBCC<32>
	word32 esi_186 = edx_184
	word32 ecx_187 = 3<32>
	bool v23_306 = false
l0073BF92:
	branch ecx_187 == 0<32> l0073BF94
l0073BF92_1:
	v23_306 = Mem16[esi_441:byte] != Mem16[edi_442:byte]
	esi_186 = esi_441 + 1<i32>
	edi_185 = edi_442 + 1<i32>
	ecx_187 = ecx_187 - 1<32>
	esi_441 = esi_186
	edi_442 = edi_185
	branch Mem16[esi_441:byte] != Mem16[edi_442:byte] l0073BF92
l0073BF94:
	branch v23_306 l0073BF9F
l0073BF9F:
	word32 esi_205 = edx_184
	word32 edi_206 = 0x8DBB70<32>
	word32 ecx_207 = 3<32>
	bool v27_310 = false
l0073BFAD:
	branch ecx_207 == 0<32> l0073BFAF
l0073BFAD_1:
	v27_310 = Mem16[esi_443:byte] != Mem16[edi_444:byte]
	esi_205 = esi_443 + 1<i32>
	edi_206 = edi_444 + 1<i32>
	ecx_207 = ecx_207 - 1<32>
	esi_443 = esi_205
	edi_444 = edi_206
	branch Mem16[esi_443:byte] != Mem16[edi_444:byte] l0073BFAD
l0073BFAF:
	branch v27_310 l0073BFBA
l0073BFBA:
l0073C037:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg8 = <invalid>
	word32 edx_269
	word32 ecx_436
	fn006E15D0(Mem240[0x00A18720<p32>:word32], stackArg8, out ecx_436, out edx_269)
	edxOut = edx_269
	return 0<32>
l0073BFB1:
	edxOut = 0<32>
	return 7<32>
l0073BF96:
	edxOut = edx_184
	return 9<32>
fn0073BF20_exit:


word32 fn0073C090(word32 edi, word32 dwArg04, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073C790
//      fn0073D050
//      fn0073DF10
//      fn0073E050
//      fn0073EB20
//      fn0073EB70
// MayUse:  edi:[0..31] Stack +0004:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ebp ebx ecx edx esi Top
// Preserved: esp
fn0073C090_entry:
l0073C090:
	int64 edx_eax_10 = CONVERT(Mem0[edi + 0x10<32>:word32] + 1<32>, word32, int64)
	word32 edx_119
	word32 eax_24 = fn00752E30(SLICE(edx_eax_10, word32, 0) - SLICE(edx_eax_10, word32, 32) >> 1<32>, out edx_119)
	branch eax_24 != 0<32> l0073C0B5
l0073C0B5:
	word32 esi_40 = 0<32>
	branch Mem39[edi + 0x10<32>:word32] <= 0<32> l0073C0EF
l0073C0BE:
l0073C0C0:
	word32 edx_64
	word32 eax_62 = fn0073E7A0(dwArg04, out edx_64)
	branch eax_62 == 0<32> l0073C0F5
l0073C0F5:
	edxOut = edx_64
	return 0<32>
l0073C0D9:
	int64 edx_eax_82 = CONVERT(esi_40, word32, int64)
	edx_119 = SLICE(edx_eax_82, word32, 32) (alias)
	Mem88[eax_24 + 4<32> + (SLICE(edx_eax_82, word32, 0) - edx_119 >> 1<32>) * 4<32>:word32] = eax_62
	esi_40 = esi_40 + 2<32>
	branch esi_40 < Mem88[edi + 0x10<32>:word32] l0073C0C0
l0073C0EF:
	edxOut = edx_119
	return eax_24
l0073C0B3:
	edxOut = edx_119
	return eax_24
fn0073C090_exit:


word32 fn0073C100(word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073C100
//      fn0073FC30
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn0073C100_entry:
l0073C100:
	int64 edx_eax_18 = CONVERT(Mem14[dwArg08 + 0x10<32>:word32] + 1<32>, word32, int64)
	word32 eax_21 = SLICE(edx_eax_18, word32, 0) - SLICE(edx_eax_18, word32, 32)
	word32 edi_15 = dwArg08
	word32 esi_229 = eax_21 >> 1<32>
	word32 edx_476
	word32 eax_32 = fn00752E30(eax_21 >> 1<32>, out edx_476)
	branch eax_32 != 0<32> l0073C13F
l0073C13F:
	word32 dwLoc10_375 = 1<32>
	branch eax_21 >> 1<32> <= 0<32> l0073C206
l0073C14C:
	word32 dwLoc0C_377 = eax_32 + 4<32>
l0073C160:
	word32 eax_223
	ebx = Mem53[Mem53[edi_15 + 0x14<32>:word32] + dwArg04 + 0x14<32>:word32]
	branch Mem53[ebx:word16] == 1<16> l0073C187
l0073C174:
	word32 eax_66 = ebx + 0x18<32>
	branch Mem53[ebx + 0x28<32>:word32] != 1<32> l0073C1D3
l0073C1D3:
	eax_223 = fn0073C100(dwArg04, dwArg04)
l0073C17C:
	ebx = Mem53[Mem53[eax_66 + 0x14<32>:word32] + 0x14<32>:word32]
	branch Mem53[ebx:word16] != 1<16> l0073C174
l0073C187:
	word32 edi_102 = 0x8ABDD0<32>
	word32 esi_100 = Mem53[ebx + 4<32>:word32]
	word32 ecx_106 = 5<32>
	bool v22_317 = true
l0073C198:
	branch ecx_106 == 0<32> l0073C19A
l0073C198_1:
	v22_317 = Mem53[esi_488:byte] == Mem53[edi_489:byte]
	esi_100 = esi_488 + 1<i32>
	edi_102 = edi_489 + 1<i32>
	ecx_106 = ecx_106 - 1<32>
	esi_488 = esi_100
	edi_489 = edi_102
	branch Mem53[esi_488:byte] != Mem53[edi_489:byte] l0073C198
l0073C19A:
	branch v22_317 l0073C236
l0073C236:
	word32 esi_482
	word32 edx_481
	word32 eax_135 = fn006EA200(out edx_481, out esi_482)
	branch eax_135 == 0<32> l0073C273
l0073C252:
	word32 edx_487
	word32 ecx_486
	fn006E0E90(Mem123[0x00A178F4<p32>:word32], eax_135, out ecx_486, out edx_487)
	word32 v16_158 = Mem149[eax_135:word32] + 0xFFFFFFFF<32>
	Mem159[eax_135:word32] = v16_158
	branch v16_158 != 0<32> l0073C273
l0073C267:
	word32 edx_162 = Mem159[eax_135 + 4<32>:word32]
	call Mem159[edx_162 + 0x18<32>:word32] (retsize: 4;)
		uses: edx:edx_162,Stack +0004:eax_135,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +002C:dwArg04,Stack +0030:dwArg08
l0073C273:
	return 0<32>
l0073C1A0:
	word32 edi_187 = Mem53[dwArg04 + 4<32>:word32]
	word32 edx_484
	word32 ecx_483
	word32 eax_193 = fn006F1A70(out ecx_483, out edx_484)
	fn00740DF0(edi_187, dwArg04)
	word32 edx_485
	eax_223 = fn00743EE0(eax_193, dwArg04, dwArg08, Mem202[ebx + 0xC<32>:word32], out edx_485)
	edi_15 = dwArg08
	esi_229 = eax_21 >> 1<32>
l0073C1DD:
	Mem238[dwLoc0C_377:word32] = eax_223
	dwLoc10_375 = dwLoc10_490 + 1<32>
	dwLoc0C_377 = dwLoc0C_377 + 4<32>
	dwLoc10_490 = dwLoc10_375
	branch dwLoc10_490 + 0<32> < esi_229 l0073C160
l0073C202:
l0073C206:
	word32 edx_477
	word32 eax_274 = fn00743FC0(eax_32, dwArg04, dwArg08, Mem250[edi_15 + 0xC<32>:word32], out edx_477)
	word32 edx_480
	return 0<32> - (fn0073BBE0(ebx, dwArg04, eax_274, edi_15, es, ds, eax_274, dwArg04, out edx_480) == 0<32>) & eax_274
l0073C136:
	return 0<32>
fn0073C100_exit:


word32 fn0073C280(word32 ebx, word32 dwArg04, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073DF70
// MayUse:  ebx:[0..31] Stack +0004:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ebp ecx edi edx esi Top
// Preserved: esp
fn0073C280_entry:
l0073C280:
	word32 eax_8 = Mem0[ebx + 8<32>:word32]
	word32 ecx_10 = Mem0[ebx + 0xC<32>:word32]
	word32 edi_23 = Mem22[dwArg04 + 4<32>:word32]
	word32 ecx_249
	word32 edx_250
	word32 eax_28 = fn006F1A70(out ecx_249, out edx_250)
	word32 edx_105 = fn00740DF0(edi_23, dwArg04)
	branch eax_28 != 0<32> l0073C2C0
l0073C2C0:
	word32 eax_62 = fn00743EE0(eax_28, dwArg04, eax_8, ecx_10, out edx_105)
	word32 edi_134 = eax_62
	branch eax_62 == 0<32> l0073C2B7
l0073C2DF:
	word32 dwLoc08_216 = 4<32>
	branch Mem60[ebx + 0x10<32>:word32] <= 2<32> l0073C35A
l0073C2ED:
l0073C2F5:
	word32 eax_79 = Mem78[dwArg04 + 4<32>:word32]
	word32 edx_252
	word32 ecx_251
	word32 eax_92 = fn006F1A70(out ecx_251, out edx_252)
	edx_105 = fn00740DF0(eax_79, dwArg04)
	branch eax_92 == 0<32> l0073C2B7
l0073C321:
	word32 eax_129 = fn00743D80(edi_134, dwArg04, 1<32>, eax_8, ecx_10, out edx_105)
	edi_134 = eax_129
	branch eax_129 == 0<32> l0073C2B7
l0073C345:
	dwLoc08_216 = dwLoc08_253 + 2<32>
	dwLoc08_253 = dwLoc08_216
	branch dwLoc08_253 + 0<32> < Mem141[ebx + 0x10<32>:word32] l0073C2F5
l0073C35A:
	edxOut = edx_105
	return edi_134
l0073C2B7:
	edxOut = edx_105
	return 0<32>
fn0073C280_exit:


word32 fn0073C370(word32 esi, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073E7A0
// MayUse:  esi:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ebx ecx edx Top
// Preserved: esp
fn0073C370_entry:
l0073C370:
	word32 edx_124
	word32 ebx_25
	branch Mem0[esi + 0x10<32>:word32] != 3<32> l0073C3A9
l0073C3A9:
	word32 eax_20 = fn0073FC30(edi, Mem9[esi + 0x14<32>:word32] + 0x18<32>, out edx_124)
	ebx_25 = eax_20
	branch eax_20 == 0<32> l0073C3A5
l0073C3BF:
l0073C377:
	word32 eax_47 = fn007441C0(0<32>, 0<32>, 0<32>, 0<32>, out edx_124)
	ebx_25 = eax_47
	branch eax_47 == 0<32> l0073C3A5
l0073C391:
l0073C398:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg8 = <invalid>
	word32 eax_70 = fn0073E7A0(stackArg8, out edx_124)
	branch eax_70 != 0<32> l0073C3C8
l0073C3C8:
	word32 edx_95
	word32 eax_93 = fn00743900(ebx_25, eax_70, Mem82[esi + 8<32>:word32], Mem65[esi + 0xC<32>:word32], out edx_95)
	edxOut = edx_95
	return eax_93
l0073C3A5:
	edxOut = edx_124
	return 0<32>
fn0073C370_exit:


word32 fn0073C3E0(word32 esi, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073E7A0
// MayUse:  esi:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ebp ebx ecx edx Top
// Preserved: esp
fn0073C3E0_entry:
l0073C3E0:
	word32 edx_18
	word32 eax_16 = fn0073E7A0(Mem0[esi + 0x14<32>:word32], out edx_18)
	branch eax_16 != 0<32> l0073C3F6
l0073C3F6:
	word32 edx_113
	word32 eax_37 = fn0073E7A0(Mem14[esi + 0x14<32>:word32] + 0x30<32>, out edx_113)
	branch eax_37 == 0<32> l0073C421
l0073C40D:
	word32 eax_55 = fn0073E7A0(Mem35[esi + 0x14<32>:word32] + 0x60<32>, out edx_113)
	branch eax_55 != 0<32> l0073C426
l0073C426:
	word32 edx_82
	word32 eax_80 = fn00743980(eax_37, eax_16, eax_55, Mem67[esi + 8<32>:word32], Mem53[esi + 0xC<32>:word32], out edx_82)
	edxOut = edx_82
	return eax_80
l0073C421:
	edxOut = edx_113
	return 0<32>
l0073C3F4:
	edxOut = edx_18
	return eax_16
fn0073C3E0_exit:


word32 fn0073C440(word32 eax, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073D7A0
// MayUse:  eax:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ecx edx Top
// Preserved: edi esp
fn0073C440_entry:
l0073C440:
	word32 ecx_6 = Mem0[eax + 0x14<32>:word32]
	word32 ecx_15 = ecx_6 + 0x18<32>
	word32 eax_12 = 1<32>
	branch Mem0[ecx_6 + 0x28<32>:word32] != 5<32> l0073C4A4
l0073C452:
l0073C457:
	ecx_15 = Mem11[Mem11[ecx_15 + 0x14<32>:word32] + 0x74<32>:word32]
	word32 edx_119 = CONVERT(Mem11[ecx_15:word16], word16, word32)
	branch SLICE(edx_119, word16, 0) == 0x14C<16> l0073C483
l0073C467:
	edx = edx_119 (alias)
	branch SLICE(edx_119, word16, 0) != 0x14D<16> l0073C48E
l0073C48E:
	word32 ecx_121
	fn006E0F80(Mem11[0x00A18720<p32>:word32], 0x8DC950<32>, out ecx_121, out edx)
	eax_12 = 0xFFFFFFFF<32>
l0073C46E:
	branch Mem11[ecx_15 + 0x10<32>:word32] != 3<32> l0073C4A4
l0073C4A4:
	edxOut = edx
	return eax_12
l0073C473:
	ecx_15 = Mem11[Mem11[ecx_15 + 0x14<32>:word32] + 0x44<32>:word32]
	edx_119 = CONVERT(Mem11[ecx_15:word16], word16, word32)
	branch SLICE(edx_119, word16, 0) != 0x14C<16> l0073C467
l0073C483:
	eax_12 = eax_12 + 1<32>
	branch Mem11[ecx_15 + 0x10<32>:word32] == 5<32> l0073C457
l0073C48C:
	edxOut = edx_119
	return eax_12
fn0073C440_exit:


word32 fn0073C4B0(word32 eax, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073D9C0
// MayUse:  eax:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ecx edx Top
// Preserved: edi esp
fn0073C4B0_entry:
l0073C4B0:
	word32 ecx_6 = Mem0[eax + 0x14<32>:word32]
	word32 ecx_15 = ecx_6 + 0x18<32>
	word32 eax_12 = 1<32>
	branch Mem0[ecx_6 + 0x28<32>:word32] != 5<32> l0073C514
l0073C4C2:
l0073C4C7:
	ecx_15 = Mem11[Mem11[ecx_15 + 0x14<32>:word32] + 0x74<32>:word32]
	word32 edx_119 = CONVERT(Mem11[ecx_15:word16], word16, word32)
	branch SLICE(edx_119, word16, 0) == 0x14F<16> l0073C4F3
l0073C4D7:
	edx = edx_119 (alias)
	branch SLICE(edx_119, word16, 0) != 0x150<16> l0073C4FE
l0073C4FE:
	word32 ecx_121
	fn006E0F80(Mem11[0x00A18720<p32>:word32], 0x8DC970<32>, out ecx_121, out edx)
	eax_12 = 0xFFFFFFFF<32>
l0073C4DE:
	branch Mem11[ecx_15 + 0x10<32>:word32] != 3<32> l0073C514
l0073C514:
	edxOut = edx
	return eax_12
l0073C4E3:
	ecx_15 = Mem11[Mem11[ecx_15 + 0x14<32>:word32] + 0x44<32>:word32]
	edx_119 = CONVERT(Mem11[ecx_15:word16], word16, word32)
	branch SLICE(edx_119, word16, 0) != 0x14F<16> l0073C4D7
l0073C4F3:
	eax_12 = eax_12 + 1<32>
	branch Mem11[ecx_15 + 0x10<32>:word32] == 5<32> l0073C4C7
l0073C4FC:
	edxOut = edx_119
	return eax_12
fn0073C4B0_exit:


word32 fn0073C520(word32 eax, word32 esi, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073E390
// MayUse:  eax:[0..31] esi:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ebp ebx ecx edi edx Top
// Preserved: esp
fn0073C520_entry:
l0073C520:
	word32 edi_16 = Mem15[eax + 0x14<32>:word32]
	word16 ax_19 = Mem15[edi_16:word16]
	word32 ebp_119 = 0<32>
	word32 dwLoc04_276 = 0<32>
	word32 dwLoc08_277 = 0<32>
	branch ax_19 != 0x17<16> l0073C551
l0073C551:
	word32 edx_116
	branch Mem22[eax + 0x10<32>:word32] != 1<32> l0073C57F
l0073C57F:
	branch ax_19 != 0x12F<16> l0073C597
l0073C585:
	word32 eax_34 = fn0073E7A0(edi_16, out edx_116)
	dwLoc04_276 = eax_34
	branch eax_34 == 0<32> l0073C5C2
l0073C557:
	branch ax_19 != 0x12F<16> l0073C597
l0073C597:
	word32 eax_54
	branch Mem47[edi_16:word16] != 0xB<16> l0073C5CB
l0073C5CB:
	branch Mem47[eax + 0x10<32>:word32] <= 2<32> l0073C5D9
l0073C5D1:
	eax_54 = Mem47[eax + 0x14<32>:word32] + 0x30<32>
l0073C59D:
	branch Mem47[eax + 0x10<32>:word32] <= 1<32> l0073C5D9
l0073C5A3:
	eax_54 = Mem47[eax + 0x14<32>:word32] + 0x18<32>
l0073C5A9:
	branch Mem47[eax_54:word16] != 0x12F<16> l0073C5D9
l0073C5B0:
	word32 eax_80 = fn0073E7A0(eax_54, out edx_116)
	dwLoc08_277 = eax_80
	branch eax_80 != 0<32> l0073C5D9
l0073C5D9:
	word32 eax_92 = Mem91[eax + 0x10<32>:word32]
	word32 eax_94 = Mem91[eax + 0x14<32>:word32]
	word32 eax_96 = eax_94 - 0x18<32> + eax_92 * 0x18<32>
	branch Mem91[eax_94 - 0x18<32> + eax_92 * 0x18<32>:word16] != 0x144<16> l0073C653
l0073C5EF:
	branch Mem91[eax_96 + 0x10<32>:word32] != 1<32> l0073C632
l0073C632:
	word32 eax_100 = Mem91[eax_96 + 0x14<32>:word32]
	branch Mem91[eax_100 + 0x18<32>:word16] != 0x12F<16> l0073C653
l0073C63F:
	word32 eax_114 = fn0073E7A0(eax_100 + 0x18<32>, out edx_116)
	ebp_119 = eax_114
	branch eax_114 == 0<32> l0073C5C2
l0073C5F5:
	word32 edi_124 = Mem91[eax_96 + 0x14<32>:word32]
	word32 ebp_125 = Mem91[esi + 4<32>:word32]
	word32 edx_383
	word32 ecx_382
	word32 eax_129 = fn006F1A70(out ecx_382, out edx_383)
	fn00740DF0(ebp_125, eax_129)
	word32 edx_161
	word32 eax_159 = fn00743EE0(eax_129, 1<32>, Mem138[edi_124 + 8<32>:word32], Mem138[edi_124 + 0xC<32>:word32], out edx_161)
	ebp_119 = eax_159
	branch eax_159 != 0<32> l0073C653
l0073C653:
	word32 edx_190
	word32 eax_188 = fn00744050(dwLoc04_276, dwLoc08_277, ebp_119, out edx_190)
	edxOut = edx_190
	return eax_188
l0073C62B:
	edxOut = edx_161
	return eax_159
l0073C55D:
	word32 eax_215 = fn0073E7A0(edi_16, out edx_116)
	branch eax_215 == 0<32> l0073C5C2
l0073C5C2:
	edxOut = edx_116
	return 0<32>
l0073C56B:
	word32 edx_243
	word32 eax_241 = fn007440C0(eax_215, out edx_243)
	edxOut = edx_243
	return eax_241
l0073C53E:
	word32 edx_261
	word32 eax_259 = fn00744020(out edx_261)
	edxOut = edx_261
	return eax_259
fn0073C520_exit:


word32 fn0073C680(word32 dwArg04, word32 dwArg08, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073E7A0
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn0073C680_entry:
l0073C680:
	word32 edx_237
	word32 eax_23 = fn0073E7A0(Mem8[dwArg08 + 0x14<32>:word32], out edx_237)
	branch eax_23 != 0<32> l0073C6AA
l0073C6AA:
	word32 edx_308
	word32 eax_41 = fn0073E7A0(dwArg04, out edx_308)
	edx_237 = eax_41
	branch eax_41 == 0<32> l0073C6A1
l0073C6C0:
	branch fn0073BB20(Mem39[dwArg08 + 0x14<32>:word32] + 0x18<32>) == 0<32> l0073C6A1
l0073C6CF:
	word32 edx_109
	word32 eax_82 = fn007437D0(eax_23, dwArg04, dwArg08, Mem71[dwArg08 + 8<32>:word32], Mem68[dwArg08 + 0xC<32>:word32], out edx_109)
	word32 ebx_130 = eax_82
	branch eax_82 == 0<32> l0073C784
l0073C6F1:
	int64 edx_eax_94 = CONVERT(Mem80[dwArg08 + 0x10<32>:word32] - 1<32>, word32, int64)
	edx_109 = SLICE(edx_eax_94, word32, 32) (alias)
	word32 eax_97 = SLICE(edx_eax_94, word32, 0) - edx_109
	word32 dwLoc08_274 = 2<32>
	branch eax_97 >> 1<32> <= 1<32> l0073C77A
l0073C70D:
l0073C715:
	edx_109 = Mem105[dwArg08 + 0x14<32>:word32] + dwArg08
	branch fn0073BB20(edx_109 + 0x18<32>) == 0<32> l0073C784
l0073C72E:
	branch fn0073E7A0(dwArg04, out edx_109) == 0<32> l0073C784
l0073C743:
	word32 eax_159 = fn007437D0(ebx_130, dwArg04, dwArg08, Mem146[edx_109 + 0x20<32>:word32], Mem129[edx_109 + 0x24<32>:word32], out edx_109)
	branch eax_159 == 0<32> l0073C784
l0073C784:
	edxOut = edx_109
	return 0<32>
l0073C762:
	ebx_130 = eax_159
	dwLoc08_274 = dwLoc08_309 + 1<32>
	dwLoc08_309 = dwLoc08_274
	branch dwLoc08_309 + 0<32> < eax_97 >> 1<32> l0073C715
l0073C77A:
	edxOut = edx_109
	return ebx_130
l0073C6A1:
	edxOut = edx_237
	return 0<32>
fn0073C680_exit:


word32 fn0073C790(word32 eax, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073D7A0
//      fn0073E050
//      fn0073E7A0
//      fn0073EB70
//      fn0073EF40
//      fn007403E0
// MayUse:  eax:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ecx edi edx Top
// Preserved: esp
fn0073C790_entry:
l0073C790:
	branch Mem6[eax + 0x10<32>:word32] != 1<32> l0073C7A8
l0073C7A8:
	word32 edx_17
	word32 eax_15 = fn0073C090(eax, esi, out edx_17)
	branch eax_15 != 0<32> l0073C7B7
l0073C7B7:
	word32 edx_40
	word32 eax_38 = fn00743FC0(eax_15, 1<32>, Mem27[eax + 8<32>:word32], Mem13[eax + 0xC<32>:word32], out edx_40)
	edxOut = edx_40
	return eax_38
l0073C7B5:
	edxOut = edx_17
	return eax_15
l0073C799:
	word32 edx_57
	word32 eax_55 = fn0073E7A0(Mem6[eax + 0x14<32>:word32], out edx_57)
	edxOut = edx_57
	return eax_55
fn0073C790_exit:


word32 fn0073C7D0(word32 esi, word32 dwArg04, word32 dwArg08, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073D050
//      fn0073D7A0
//      fn0073D9C0
//      fn00740160
// MayUse:  esi:[0..31] Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ebp ebx ecx edi edx Top
// Preserved: esp
fn0073C7D0_entry:
l0073C7D0:
	int64 edx_eax_12 = CONVERT(Mem6[esi + 0x10<32>:word32] + 1<32>, word32, int64)
	word32 edx_167
	word32 eax_106 = fn00752E30(SLICE(edx_eax_12, word32, 0) - SLICE(edx_eax_12, word32, 32) >> 1<32>, out edx_167)
	branch eax_106 != 0<32> l0073C7FD
l0073C7FD:
	word32 ebx_122 = 0<32>
	branch Mem39[esi + 0x10<32>:word32] <= 0<32> l0073C866
l0073C806:
	word32 edi_124 = 0<32>
l0073C810:
	word32 eax_67 = fn0073E7A0(dwArg04, out edx_167)
	branch eax_67 == 0<32> l0073C864
l0073C829:
	int64 edx_eax_77 = CONVERT(ebx_122, word32, int64)
	Mem85[eax_106 + 4<32> + (SLICE(edx_eax_77, word32, 0) - SLICE(edx_eax_77, word32, 32) >> 1<32>) * 4<32>:word32] = eax_67
	edx_167 = eax_106
	branch dwArg08 == 0<32> l0073C850
l0073C83C:
	branch fn0073BBE0(ebx_122, dwArg08, esi, edi_124, es, ds, eax_67, dwArg04, out edx_167) == 0<32> l0073C864
l0073C864:
	eax_106 = 0<32>
l0073C866:
	edxOut = edx_167
	return eax_106
l0073C850:
	ebx_122 = ebx_122 + 2<32>
	edi_124 = edi_124 + 0x30<32>
	branch ebx_122 < Mem126[esi + 0x10<32>:word32] l0073C810
l0073C85B:
	edxOut = edx_167
	return eax_106
l0073C7FA:
	edxOut = edx_167
	return eax_106
fn0073C7D0_exit:


word32 fn0073C870(word32 dwArg04, word32 dwArg08, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073C870
//      fn0073CAE0
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn0073C870_entry:
l0073C870:
	word32 edx_163
	word32 eax_14 = CONVERT(Mem12[dwArg08:word16], word16, int32)
	word32 ebp_13 = dwArg08
	bool v18_561 = eax_14 != 0x11C<32>
	branch eax_14 > 0x11C<32> l0073C89E
l0073C884:
	branch v18_561 l0073C8C9
l0073C8C9:
	branch eax_14 == 0x10<32> l0073C957
l0073C957:
	word32 edx_820
	word32 ecx_819
	fn006F1A70(out ecx_819, out edx_820)
l0073C8D2:
	branch eax_14 != 0x11B<32> l0073C8A9
l0073C8D9:
	word32 ecx_49 = 3<32>
	branch Mem50[ebp_13 + 0x10<32>:word32] != 3<32> l0073C927
l0073C8EF:
	word32 esi_54 = Mem50[Mem50[ebp_13 + 0x14<32>:word32] + 0x1C<32>:word32]
	word32 edi_55 = 0x8DBBE0<32>
	bool v21_564 = true
l0073C8FC:
	branch ecx_49 == 0<32> l0073C8FE
l0073C8FC_1:
	v21_564 = Mem50[esi_824:byte] == Mem50[edi_825:byte]
	esi_54 = esi_824 + 1<i32>
	edi_55 = edi_825 + 1<i32>
	ecx_49 = ecx_49 - 1<32>
	esi_824 = esi_54
	edi_825 = edi_55
	branch Mem50[esi_824:byte] != Mem50[edi_825:byte] l0073C8FC
l0073C8FE:
	branch v21_564 l0073C914
l0073C914:
	fn0073B810()
l0073C927:
	word32 edi_102 = Mem98[dwArg04 + 4<32>:word32]
	word32 ecx_821
	word32 edx_822
	word32 eax_111 = fn006F1A70(out ecx_821, out edx_822)
	fn00740DF0(edi_102, eax_111)
	word32 edx_137
	word32 eax_136 = fn00744270(eax_111, 0<32>, out edx_137)
	edxOut = edx_137
	return eax_136
l0073C886:
	branch Mem21[ebp_13 + 0x10<32>:word32] != 1<32> l0073C96B
l0073C96B:
	word32 eax_162 = fn0073C870(dwArg04, Mem21[ebp_13 + 0x14<32>:word32], out edx_163)
	branch eax_162 == 0<32> l0073C90C
l0073C982:
	word32 esi_172 = Mem159[Mem159[ebp_13 + 0x14<32>:word32] + 0x1C<32>:word32]
	word32 edi_173 = 0x8DBBE0<32>
	word32 ecx_174 = 3<32>
	bool v25_568 = false
l0073C994:
	branch ecx_174 == 0<32> l0073C996
l0073C994_1:
	v25_568 = Mem159[esi_826:byte] != Mem159[edi_827:byte]
	esi_172 = esi_826 + 1<i32>
	edi_173 = edi_827 + 1<i32>
	ecx_174 = ecx_174 - 1<32>
	esi_826 = esi_172
	edi_827 = edi_173
	branch Mem159[esi_826:byte] != Mem159[edi_827:byte] l0073C994
l0073C996:
	branch v25_568 l0073C900
l0073C900:
	fn0073B830(out edx_163)
l0073C99C:
	word32 edi_222 = Mem159[dwArg04 + 4<32>:word32]
	word32 ecx_815
	word32 edx_816
	word32 eax_227 = fn006F1A70(out ecx_815, out edx_816)
	word32 edx_239 = fn00740DF0(edi_222, eax_227)
	Mem246[eax_162 + 4<32>:word32] = eax_227
	edxOut = edx_239
	return eax_162
l0073C890:
	ebp_13 = Mem21[ebp_13 + 0x14<32>:word32]
	eax_14 = CONVERT(Mem21[ebp_13:word16], word16, int32)
	v18_561 = eax_14 != 0x11C<32>
	branch eax_14 <= 0x11C<32> l0073C884
l0073C89E:
	branch eax_14 == 0x11F<32> l0073C9C3
l0073C9C3:
	word32 edi_265 = Mem21[ebp_13 + 0x10<32>:word32]
	branch edi_265 != 1<32> l0073C9FC
l0073C9FC:
	word32 esi_268 = 0<32>
	branch edi_265 <= 0<32> l0073CA2C
l0073CA02:
	word32 ecx_274 = Mem21[ebp_13 + 0x14<32>:word32] + 4<32>
	word32 edi_275 = (edi_265 + 0xFFFFFFFF<32> >>u 1<32>) + 1<32>
l0073CA10:
	word32 eax_279 = Mem21[ecx_274:word32]
	eax_281 = eax_279
l0073CA15:
	word32 eax_281
	eax_281 = eax_828 + 1<32>
	eax_828 = eax_281
	branch Mem21[eax_828:byte] != 0<8> l0073CA15
l0073CA1E:
	ecx_274 = ecx_274 + 0x30<32>
	edi_275 = edi_275 - 1<32>
	esi_268 = esi_268 + 1<32> + (eax_281 - (eax_279 + 1<32>))
	branch edi_275 != 0<32> l0073CA10
l0073CA2C:
	word32 ecx_817
	word32 eax_325 = fn006EC9B0(0<32>, esi_268 + 0xFFFFFFFF<32>, out ecx_817, out edx_163)
	branch eax_325 == 0<32> l0073C90C
l0073CA46:
	word32 ecx_334 = eax_325 + 0x14<32>
	branch eax_325 == 0x14<32> l0073C90C
l0073C90C:
	edxOut = edx_163
	return 0<32>
l0073CA51:
	word32 ebx_354 = 0<32>
	branch Mem332[ebp_13 + 0x10<32>:word32] <= 0<32> l0073CAA1
l0073CA58:
	word32 dwLoc04_749 = 4<32>
l0073CA60:
	word32 eax_364 = Mem360[dwLoc04_749 + 0<32> + Mem360[ebp_13 + 0x14<32>:word32]:word32]
	word32 esi_365 = eax_364
	word32 edi_367 = ecx_334
l0073CA70:
	byte dl_370 = Mem369[esi_365:byte]
	Mem372[edi_367:byte] = dl_370
	esi_365 = esi_365 + 1<32>
	edi_367 = edi_367 + 1<32>
	branch dl_370 != 0<8> l0073CA70
l0073CA7E:
	eax_380 = eax_364
l0073CA81:
	word32 eax_380
	eax_380 = eax_829 + 1<32>
	eax_829 = eax_380
	branch Mem372[eax_829:byte] != 0<8> l0073CA81
l0073CA8A:
	word32 ecx_395 = ecx_334 + (eax_380 - (eax_364 + 1<32>))
	Mem396[ecx_395:byte] = 0x2E<8>
	dwLoc04_749 = dwLoc04_749 + 0x30<32>
	ebx_354 = ebx_354 + 2<32>
	ecx_334 = ecx_395 + 1<32>
	branch ebx_354 < Mem396[ebp_13 + 0x10<32>:word32] l0073CA60
l0073CAA1:
	Mem411[ecx_334 - 1<32>:byte] = 0<8>
	word32 edx_818
	fn006EC890(fp + 8<32>, out edx_818)
l0073CAB4:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg8 = <invalid>
	fn00740DF0(Mem431[dwArg04 + 4<32>:word32], stackArg8)
	word32 edx_458
	word32 eax_457 = fn00744270(dwArg08, 0<32>, out edx_458)
	edxOut = edx_458
	return eax_457
l0073C9CB:
	word32 ebx_476 = Mem21[dwArg04 + 4<32>:word32]
	word32 edx_814
	word32 ecx_813
	word32 eax_482 = fn006F1A70(out ecx_813, out edx_814)
	fn00740DF0(ebx_476, dwArg04)
	word32 edx_507
	word32 eax_506 = fn00744270(eax_482, dwArg04, out edx_507)
	edxOut = edx_507
	return eax_506
l0073C8A9:
	word32 edx_542
	word32 ecx_812
	fn006E15D0(Mem21[0x00A18720<p32>:word32], 0x8DC9A8<32>, out ecx_812, out edx_542)
	edxOut = edx_542
	return 0<32>
fn0073C870_exit:


word32 fn0073CAE0(word32 eax, word32 dwArg04, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00740160
// MayUse:  eax:[0..31] Stack +0004:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn0073CAE0_entry:
l0073CAE0:
	word32 edx_141
	word32 edi_21 = Mem20[eax + 0x14<32>:word32]
	word32 ecx_7 = Mem0[eax + 8<32>:word32]
	word32 edx_8 = Mem0[eax + 0xC<32>:word32]
	word16 ax_23 = Mem20[edi_21:word16]
	branch ax_23 != 0x119<16> l0073CB96
l0073CB96:
	branch ax_23 != 0x11A<16> l0073CDD2
l0073CDD2:
	word32 ecx_798
	fn006E15D0(Mem26[0x00A18720<p32>:word32], 0x8DC9C4<32>, out ecx_798, out edx_141)
l0073CBA0:
	word32 eax_47 = Mem26[edi_21 + 0x10<32>:word32]
	word32 ebp_120 = 0<32>
	word32 esi_106 = 1<32>
	word32 dwLoc10_586 = 0<32>
	word32 dwLoc0C_587 = 0<32>
	branch eax_47 <= 1<32> l0073CBE5
l0073CBB6:
	word32 ebx_54 = Mem52[edi_21 + 0x14<32>:word32]
	word32 ecx_55 = ebx_54 + 0x18<32>
l0073CBC0:
	word16 dx_60 = Mem52[ecx_55:word16]
	branch dx_60 == 0x11F<16> l0073CC61
l0073CC61:
	dwLoc10_586 = ebp_120
	word32 edx_799
	dwLoc0C_587 = fn0073C870(dwArg04, ebx_54 + esi_106 * 0x18<32>, out edx_799)
	esi_106 = esi_106 + 1<32>
l0073CBCE:
	branch dx_60 != 0x17<16> l0073CBE1
l0073CBD4:
	esi_106 = esi_106 + 1<32>
	ebp_120 = ebp_120 + 1<32>
	ecx_55 = ecx_55 + 0x18<32>
	branch esi_106 < eax_47 l0073CBC0
l0073CBE1:
	dwLoc10_586 = ebp_120
l0073CBE5:
l0073CBE9:
	word32 eax_115
	word32 edx_105 = Mem104[edi_21 + 0x14<32>:word32]
	word32 esi_109 = esi_106 + 1<32>
	word32 eax_111 = CONVERT(Mem104[edx_105 + esi_109 * 0x18<32>:word16], word16, int32)
	word32 esi_113 = edx_105 + esi_109 * 0x18<32>
	branch eax_111 == 7<32> l0073CD06
l0073CD06:
	eax_115 = Mem104[esi_113 + 0x28<32>:word32]
	esi_113 = esi_113 + 0x18<32>
l0073CC02:
	branch eax_111 == 0x10<32> l0073CCAF
l0073CCAF:
	eax_115 = 1<32>
	branch ebp_120 == 0<32> l0073CD0C
l0073CCB8:
	word32 esi_802
	word32 eax_140 = fn006EA200(out edx_141, out esi_802)
	branch eax_140 == 0<32> l0073CDED
l0073CCD8:
	word32 ecx_803
	word32 eax_154 = fn006E0E90(Mem133[0x00A178F4<p32>:word32], eax_140, out ecx_803, out edx_141)
	word32 v20_162 = Mem153[eax_140:word32] + 0xFFFFFFFF<32>
	Mem163[eax_140:word32] = v20_162
	branch v20_162 != 0<32> l0073CDED
l0073CCF0:
	word32 ecx_166 = Mem163[eax_140 + 4<32>:word32]
	word32 edx_173
	call Mem163[ecx_166 + 0x18<32>:word32] (retsize: 4;)
		uses: eax:eax_154,ecx:ecx_166,Stack +0004:eax_140,Stack +0008:dwArg04,Stack +002C:dwArg04
		defs: edx:edx_173
	edxOut = edx_173
	return 0<32>
l0073CC0B:
	branch eax_111 == 0x11D<32> l0073CC85
l0073CC85:
	eax_115 = Mem104[esi_113 + 0x10<32>:word32]
	bool v23_574 = (eax_115 & 0x80000001<32>) != 0<32>
	branch (eax_115 & 0x80000001<32>) >= 0<32> l0073CC97
l0073CC92:
	v23_574 = ((eax_115 & 0x80000001<32>) - 1<32> | 0xFFFFFFFE<32>) != 1<32>
l0073CC97:
	branch v23_574 l0073CD0C
l0073CD0C:
	int64 edx_eax_212 = CONVERT(eax_115 + 1<32>, word32, int64)
	word32 eax_234 = fn00752E30(SLICE(edx_eax_212, word32, 0) - SLICE(edx_eax_212, word32, 32) >> 1<32>, out edx_141)
	branch eax_234 == 0<32> l0073CDED
l0073CD2B:
	branch Mem223[esi_113:word16] != 0x10<16> l0073CD48
l0073CD48:
	word32 edi_245 = 0<32>
	branch Mem223[esi_113 + 0x10<32>:word32] <= 0<32> l0073CD88
l0073CD4F:
l0073CD51:
	word32 eax_268 = fn0073C870(dwArg04, dwArg04, out edx_141)
	branch eax_268 == 0<32> l0073CDED
l0073CD6E:
	int64 edx_eax_278 = CONVERT(edi_245, word32, int64)
	Mem284[eax_234 + 4<32> + (SLICE(edx_eax_278, word32, 0) - SLICE(edx_eax_278, word32, 32) >> 1<32>) * 4<32>:word32] = eax_268
	edi_245 = edi_245 + 2<32>
	branch edi_245 < Mem284[esi_113 + 0x10<32>:word32] l0073CD51
l0073CD84:
l0073CD31:
	word32 eax_295 = fn0073C870(dwArg04, dwArg04, out edx_141)
	branch eax_295 == 0<32> l0073CDED
l0073CD43:
	Mem303[eax_234 + 4<32>:word32] = eax_295
l0073CD88:
	word32 esi_323
	branch dwLoc0C_587 == 0<32> l0073CD94
l0073CD94:
	word32 edi_311 = Mem305[dwArg04 + 4<32>:word32]
	word32 edx_805
	word32 ecx_804
	esi_323 = fn006F1A70(out ecx_804, out edx_805)
	fn00740DF0(edi_311, dwArg04)
l0073CD90:
	esi_323 = Mem305[dwLoc0C_587:word32]
l0073CDAD:
	word32 edx_364
	word32 eax_363 = fn00743560(esi_323, dwArg04, dwLoc10_586, ecx_7, edx_8, out edx_364)
	edxOut = edx_364
	return eax_363
l0073CC99:
	word32 edx_383
	fn0073B830(out edx_383)
	edxOut = edx_383
	return 0<32>
l0073CC12:
	word32 esi_800
	word32 eax_406 = fn006EA200(out edx_141, out esi_800)
	branch eax_406 == 0<32> l0073CDED
l0073CC32:
	word32 ecx_801
	fn006E0E90(Mem403[0x00A178F4<p32>:word32], eax_406, out ecx_801, out edx_141)
	word32 v18_428 = Mem419[eax_406:word32] + 0xFFFFFFFF<32>
	Mem429[eax_406:word32] = v18_428
	branch v18_428 != 0<32> l0073CDED
l0073CC4B:
	word32 edx_432 = Mem429[eax_406 + 4<32>:word32]
	word32 eax_433 = Mem429[edx_432 + 0x18<32>:word32]
	word32 edx_439
	call eax_433 (retsize: 4;)
		uses: eax:eax_433,edx:edx_432,Stack +0004:eax_406,Stack +0008:dwArg04,Stack +002C:dwArg04
		defs: edx:edx_439
	edxOut = edx_439
	return 0<32>
l0073CB05:
	word32 esi_454 = Mem26[edi_21 + 0x14<32>:word32]
	int64 edx_eax_460 = CONVERT(Mem26[esi_454 + 0x28<32>:word32] + 1<32>, word32, int64)
	word32 eax_472 = fn00752E30(SLICE(edx_eax_460, word32, 0) - SLICE(edx_eax_460, word32, 32) >> 1<32>, out edx_141)
	branch eax_472 == 0<32> l0073CDED
l0073CB31:
	word32 edi_481 = 0<32>
	branch Mem469[esi_454 + 0x28<32>:word32] <= 0<32> l0073CB73
l0073CB38:
l0073CB40:
	word32 eax_505 = fn0073C870(dwArg04, dwArg04, out edx_141)
	branch eax_505 == 0<32> l0073CDED
l0073CDED:
	edxOut = edx_141
	return 0<32>
l0073CB5D:
	int64 edx_eax_528 = CONVERT(edi_481, word32, int64)
	Mem534[eax_472 + 4<32> + (SLICE(edx_eax_528, word32, 0) - SLICE(edx_eax_528, word32, 32) >> 1<32>) * 4<32>:word32] = eax_505
	edi_481 = edi_481 + 2<32>
	branch edi_481 < Mem534[esi_454 + 0x28<32>:word32] l0073CB40
l0073CB73:
	word32 edx_560
	word32 eax_559 = fn00743520(eax_472, dwArg04, edx_8, out edx_560)
	edxOut = edx_560
	return eax_559
fn0073CAE0_exit:


word32 fn0073CE00(word32 edi, word32 dwArg04, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00740160
// MayUse:  edi:[0..31] Stack +0004:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ebp ebx ecx edx esi Top
// Preserved: esp
fn0073CE00_entry:
l0073CE00:
	int64 edx_eax_10 = CONVERT(Mem0[edi + 0x10<32>:word32], word32, int64)
	word32 edx_23
	word32 eax_21 = fn00752E30(SLICE(edx_eax_10, word32, 0) - SLICE(edx_eax_10, word32, 32) >> 1<32>, out edx_23)
	branch eax_21 != 0<32> l0073CE27
l0073CE27:
	word32 ebx_34 = 1<32>
	branch Mem33[edi + 0x10<32>:word32] <= 1<32> l0073CE88
l0073CE34:
l0073CE40:
	word32 eax_48 = Mem46[dwArg04 + 4<32>:word32]
	word32 ecx_197
	word32 edx_198
	word32 eax_60 = fn006F1A70(out ecx_197, out edx_198)
	word32 edx_74 = fn00740DF0(eax_48, dwArg04)
	branch eax_60 == 0<32> l0073CEA8
l0073CEA8:
	edxOut = edx_74
	return 0<32>
l0073CE6C:
	int64 edx_eax_92 = CONVERT(ebx_34, word32, int64)
	Mem98[eax_21 + 4<32> + (SLICE(edx_eax_92, word32, 0) - SLICE(edx_eax_92, word32, 32) >> 1<32>) * 4<32>:word32] = eax_60
	ebx_34 = ebx_34 + 2<32>
	branch ebx_34 < Mem98[edi + 0x10<32>:word32] l0073CE40
l0073CE86:
l0073CE88:
	word32 edx_126
	word32 eax_124 = fn00743640(eax_21, dwArg04, Mem104[edi + 0xC<32>:word32], out edx_126)
	edxOut = edx_126
	return eax_124
l0073CE23:
	edxOut = edx_23
	return eax_21
fn0073CE00_exit:


word32 fn0073CEC0(word32 edx, word32 ebx, word32 edi, selector es, selector ds, word32 dwArg04, word32 dwArg08, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073D050
//      fn0073F2C0
//      fn0073F5B0
//      fn0073F690
//      fn0073F7B0
//      fn0073FA50
//      fn0073FAF0
//      fn00740060
// MayUse:  cs:[0..15] ds:[0..15] ebx:[0..31] edi:[0..31] edx:[0..31] es:[0..15] fs:[0..15] gs:[0..15] ss:[0..15] Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax edx
// Trashed: SCZDOP eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn0073CEC0_entry:
l0073CEC0:
	word32 ebp_150 = dwArg08
	word32 esi_12 = 0<32>
	word32 dwLoc10_318 = 0<32>
	word32 edx_473
	word32 edx_131
	word32 eax_245 = fn00752E30(fn0073B9B0(edx, ebx, dwArg08, 0<32>, edi, es, ds, dwArg08, out edx_473), out edx_131)
	branch eax_245 != 0<32> l0073CEF4
l0073CEF4:
	word32 ecx_53 = Mem51[dwArg08 + 0x14<32>:word32]
	branch Mem51[ecx_53:word16] != 0x10B<16> l0073CF6A
l0073CF6A:
	word32 dwLoc04_401 = 3<32>
	branch Mem59[dwArg08 + 0x10<32>:word32] <= 3<32> l0073D046
l0073CF81:
	word32 dwLoc08_402 = 0x30<32>
l0073CF90:
	word32 edi_72 = Mem69[ebp_150 + 0x14<32>:word32] + dwLoc08_402
	word32 edx_474
	branch fn0073B9B0(edx_131, ebx, ebp_150, esi_12, edi_72, es, ds, edi_72, out edx_474) != 1<32> l0073CFCC
l0073CFCC:
	ebx = Mem75[edi_72 + 0x14<32>:word32]
	word32 edi_120 = 0<32>
	branch Mem75[ebx + 0x10<32>:word32] <= 0<32> l0073D01A
l0073CFD6:
	word32 ebp_102 = 0<32>
	word32 esi_105 = eax_245 + 4<32> + esi_12 * 4<32>
l0073CFE0:
	branch Mem107[Mem107[ebx + 0x14<32>:word32] + ebp_102 + 0x10<32>:word32] == 0<32> l0073D012
l0073CFEB:
	word32 eax_132 = fn00740160(dwArg04, out edx_131)
	branch eax_132 == 0<32> l0073D044
l0073CFFD:
	Mem141[esi_105:word32] = eax_132
	dwLoc10_318 = dwLoc10_318 + 1<32>
	edi_120 = edi_120 + 2<32>
	esi_105 = esi_105 + 4<32>
	ebp_102 = ebp_102 + 0x30<32>
	branch edi_120 < Mem141[ebx + 0x10<32>:word32] l0073CFE0
l0073D012:
	esi_12 = dwLoc10_318
	ebp_150 = dwArg08
l0073CFA5:
	word32 eax_160 = fn00740160(dwArg04, out edx_131)
	branch eax_160 == 0<32> l0073D044
l0073CFBB:
	Mem168[eax_245 + 4<32> + esi_12 * 4<32>:word32] = eax_160
	esi_12 = esi_12 + 1<32>
	dwLoc10_318 = esi_12
l0073D01A:
	word32 edx_176 = Mem173[ebp_150 + 0x10<32>:word32]
	dwLoc08_402 = dwLoc08_402 + 0x18<32>
	edx_131 = edx_176 - 1<32>
	dwLoc04_401 = dwLoc04_475 + 1<32>
	dwLoc04_475 = dwLoc04_401
	branch dwLoc04_475 + 0<32> < edx_176 - 1<32> l0073CF90
l0073D038:
	edxOut = edx_176 - 1<32>
	return eax_245
l0073CF04:
	word32 ebp_195 = Mem59[ecx_53 + 0x10<32>:word32]
	word32 ebp_197 = ebp_195 - 1<32>
	edx_131 = ebp_195 - 1<32> + (ebp_195 - 1<32>) * 2<32>
	branch Mem59[Mem59[ecx_53 + 0x14<32>:word32] - 0x18<32> + edx_131 * 8<32>:word16] != 0xD<16> l0073CF1C
l0073CF19:
	ebp_197 = ebp_195 - 2<32>
l0073CF1C:
	word32 esi_203 = 0<32>
	branch ebp_197 <= 0<32> l0073D046
l0073CF26:
	word32 ebx_211 = eax_245 + 4<32>
l0073CF34:
	word32 eax_238 = fn00740160(dwArg04, out edx_131)
	branch eax_238 == 0<32> l0073D044
l0073D044:
	eax_245 = 0<32>
l0073D046:
	edxOut = edx_131
	return eax_245
l0073CF4F:
	Mem264[ebx_211:word32] = eax_238
	esi_203 = esi_203 + 2<32>
	ebx_211 = ebx_211 + 4<32>
	branch esi_203 < ebp_197 l0073CF30
l0073CF30:
l0073CF5E:
	edxOut = edx_131
	return eax_245
l0073CEEE:
	edxOut = edx_131
	return eax_245
fn0073CEC0_exit:


word32 fn0073D050(word32 ebx, word32 dwArg04, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00740160
// MayUse:  ebx:[0..31] Stack +0004:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ebp ecx edi edx esi Top
// Preserved: esp
fn0073D050_entry:
l0073D050:
	word32 dwLoc04_229 = 0<32>
	branch Mem6[ebx + 0x10<32>:word32] != 9<32> l0073D081
l0073D064:
	word32 edx_25
	word32 eax_24 = fn0073CEC0(edx, ebx, edi, es, ds, dwArg04, Mem13[ebx + 0x14<32>:word32] + 0xC0<32>, out edx_25)
	dwLoc04_229 = eax_24
	branch eax_24 != 0<32> l0073D081
l0073D081:
	word32 edi_43 = Mem41[ebx + 0x14<32>:word32]
	word32 edx_105
	word32 eax_56 = fn0073C7D0(edi_43 + 0x18<32>, dwArg04, dwArg04, out edx_105)
	branch eax_56 == 0<32> l0073D117
l0073D09A:
	word32 esi_100
	branch Mem50[edi_43 + 0x28<32>:word32] != 1<32> l0073D0A5
l0073D0A5:
	word32 edx_320
	esi_100 = fn00743FC0(eax_56, dwArg04, Mem69[ebx + 8<32>:word32], Mem50[ebx + 0xC<32>:word32], out edx_320)
l0073D0A0:
	esi_100 = Mem50[eax_56 + 4<32>:word32]
l0073D0BE:
	word32 eax_127
	word32 edi_91 = Mem90[ebx + 0x14<32>:word32]
	branch Mem90[edi_91 + 0x58<32>:word32] != 1<32> l0073D0D9
l0073D0D9:
	word32 eax_104 = fn0073C090(edi_91 + 0x48<32>, dwArg04, out edx_105)
	branch eax_104 == 0<32> l0073D117
l0073D0E6:
	eax_127 = fn00743FC0(eax_104, dwArg04, Mem115[edi_91 + 0x50<32>:word32], Mem98[edi_91 + 0x54<32>:word32], out edx_105)
l0073D0CA:
	eax_127 = fn0073E7A0(dwArg04, out edx_105)
l0073D0FD:
	branch eax_127 == 0<32> l0073D117
l0073D103:
	word32 eax_167 = fn0073CEC0(Mem152[ebx + 0x14<32>:word32] + 0x78<32>, ebx, eax_127, es, ds, dwArg04, dwArg04, out edx_105)
	branch eax_167 != 0<32> l0073D11E
l0073D11E:
	word32 edx_196
	word32 eax_195 = fn00743200(esi_100, dwArg04, eax_167, dwLoc04_229, Mem178[ebx + 8<32>:word32], Mem161[ebx + 0xC<32>:word32], out edx_196)
	edxOut = edx_196
	return eax_195
l0073D117:
	edxOut = edx_105
	return 0<32>
l0073D07E:
	edxOut = edx_25
	return eax_24
fn0073D050_exit:


word32 fn0073D140(word32 esi, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073E050
// MayUse:  esi:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ebp ebx ecx edi edx FPU -1 FPU -2 Top
// Preserved: esp
fn0073D140_entry:
l0073D140:
	Mem17[_errno():word32] = 0<32>
	word32 eax_19 = esi
l0073D160:
	eax_19 = eax_332 + 1<32>
	eax_332 = eax_19
	branch Mem17[eax_332:byte] != 0<8> l0073D160
l0073D169:
	word32 ebp_104
	word32 eax_32 = eax_19 - (esi + 1<32>) - 1<32> + esi
	byte al_35 = Mem34[eax_32:byte]
	branch al_35 == 0x6A<8> l0073D181
l0073D179:
	branch al_35 == 0x4A<8> l0073D181
l0073D181:
	ebp_104 = 1<32>
l0073D17D:
	ebp_104 = 0<32>
l0073D186:
	branch al_35 == 0x6C<8> l0073D1B0
l0073D18A:
	branch al_35 == 0x4C<8> l0073D1B0
l0073D18E:
	word32 edi_130
	branch Mem34[esi:byte] != 0x30<8> l0073D1C4
l0073D1C4:
	edi_130 = fn007502F0(esi, fp - 0x14<32>, 0<32>)
l0073D195:
	word32 eax_80 = fn007501A0(esi, fp - 0x14<32>, 0<32>)
	edi_130 = eax_80
	branch eax_80 >= 0<32> l0073D1D4
l0073D1A9:
	branch Mem79[_errno():word32] != 0<32> l0073D1D4
l0073D1D4:
	branch Mem99[eax_32:byte] != 0<8> l0073D1F4
l0073D1F4:
	branch ebp_104 == 0<32> l0073D221
l0073D221:
	word64 rRet0_118
	fn0074F3B0(esi, out rRet0_118)
	word32 edx_133
	word32 eax_132 = fn006FF060(rRet0_118, out edx_133)
	edxOut = edx_133
	return eax_132
l0073D1F9:
	word64 rRet0_157
	fn0074F3B0(esi, out rRet0_157)
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg8 = <invalid>
	word32 stackArg16 = <invalid>
	word32 edx_171
	word32 eax_170 = fn007331D0(0.0, stackArg8, rRet0_157, stackArg16, out edx_171)
	edxOut = edx_171
	return eax_170
l0073D1DD:
	branch Mem99[_errno():word32] != 0<32> l0073D1B0
l0073D1E4:
	word32 edx_192
	word32 ecx_329
	word32 eax_191 = fn007050A0(edi_130, out ecx_329, out edx_192)
	edxOut = edx_192
	return eax_191
l0073D1B0:
	word32 edx_222
	word32 eax_221 = fn007120F0(es, ds, esi, 0<32>, 0<32>, out edx_222)
	edxOut = edx_222
	return eax_221
fn0073D140_exit:


word32 fn0073D240(word32 eax, word32 edx, word32 dwArg04, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073D2A0
// MayUse:  eax:[0..31] edx:[0..31] Stack +0004:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ecx edx esi Top
// Preserved: edi esp
fn0073D240_entry:
l0073D240:
	word32 eax_14 = Mem6[eax:word32]
	branch eax_14 >=u edx l0073D25C
l0073D24B:
l0073D250:
	branch (Mem6[eax_14:byte] & 0x80<8>) == 0<8> l0073D25C
l0073D255:
	eax_14 = eax_14 + 1<32>
	branch eax_14 <u edx l0073D250
l0073D25C:
	Mem26[eax:word32] = eax_14
	word32 edx_44
	word32 eax_43 = fn0071FC80(out edx_44)
	branch eax_43 != 0<32> l0073D274
l0073D274:
	word32 ecx_148
	word32 edx_112
	word32 eax_66 = fn0071FB20(eax_43, dwArg04, 0<32>, out ecx_148, out edx_112)
	word32 v12_72 = Mem64[eax_43:word32] + 0xFFFFFFFF<32>
	Mem73[eax_43:word32] = v12_72
	branch v12_72 != 0<32> l0073D298
l0073D28C:
	word32 ecx_77 = Mem73[eax_43 + 4<32>:word32]
	word32 edx_78 = Mem73[ecx_77 + 0x18<32>:word32]
	call edx_78 (retsize: 4;)
		uses: eax:eax_66,ecx:ecx_77,edx:edx_78,Stack +0004:eax_43,Stack +0014:dwArg04
		defs: edx:edx_83
l0073D298:
	edxOut = edx_112
	return eax_66
l0073D272:
	edxOut = edx_44
	return eax_43
fn0073D240_exit:


word32 fn0073D2A0(word32 eax, word32 dwArg04, word32 dwArg08, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073D450
// MayUse:  eax:[0..31] Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn0073D2A0_entry:
l0073D2A0:
	word32 edi_262
	word32 ebx_105 = dwArg04
	word32 ebp_12 = dwArg08
	word32 esi_17 = eax
	word32 esp_20 = fp - 0x20<32>
	branch eax != 0<32> l0073D2BC
l0073D2BC:
	word32 edi_24 = 0x8DCAA0<32>
	word32 ecx_25 = 0xB<32>
	bool v23_346 = false
l0073D2C8:
	branch ecx_25 == 0<32> l0073D2CA
l0073D2C8_1:
	v23_346 = Mem22[esi_499:byte] != Mem22[edi_500:byte]
	esi_17 = esi_499 + 1<i32>
	edi_24 = edi_500 + 1<i32>
	ecx_25 = ecx_25 - 1<32>
	esi_499 = esi_17
	edi_500 = edi_24
	branch Mem22[esi_499:byte] != Mem22[edi_500:byte] l0073D2C8
l0073D2CA:
	branch v23_346 l0073D2D3
l0073D2D3:
	branch dwArg08 >u 0x3FFFFFFF<32> l0073D41C
l0073D2DF:
	word32 ecx_489
	word32 eax_61 = fn006EC9B0(0<32>, dwArg08 * 4<32>, out ecx_489, out edx)
	branch eax_61 == 0<32> l0073D41C
l0073D2FD:
	word32 ecx_490
	word32 esi_492
	word32 edx_491
	word32 eax_252 = fn006ECC50(eax_61, out ecx_490, out edx_491, out esi_492)
	word32 edx_242 = dwArg04 + dwArg08
	esp_20 = fp - 0x20<32>
	word32 edi_103 = eax_252
	branch dwArg04 >=u edx_242 l0073D3DD
l0073D31B:
l0073D320:
	branch Mem87[ebx_105:byte] != 0x5C<8> l0073D34C
l0073D325:
	Mem91[edi_103:byte] = 0x5C<8>
	ebx_105 = ebx_105 + 1<32>
	Mem97[esp_20 + 0x24<32>:word32] = ebx_105
	edi_103 = edi_103 + 1<32>
	branch (Mem91[ebx_105:byte] & 0x80<8>) == 0<8> l0073D34C
l0073D337:
	Mem100[edi_103:word32] = Mem97[0x008DCA98<p32>:word32]
	Mem102[edi_103 + 4<32>:word16] = Mem100[0x008DCA9C<p32>:word16]
	edi_103 = edi_103 + 5<32>
l0073D34C:
	byte al_107 = Mem106[ebx_105:byte]
	branch al_107 >= 0<8> l0073D3F9
l0073D3F9:
	Mem112[edi_103:byte] = al_107
	ebx_105 = ebx_105 + 1<32>
	Mem117[esp_20 + 0x24<32>:word32] = ebx_105
	edi_103 = edi_103 + 1<32>
l0073D356:
	word32 esp_118 = esp_20 - 4<i32>
	Mem119[esp_118:word32] = 0x8DCA8C<32>
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 eax_128 = fn0073D240(esp_118 + 0x28<32>, edx, stackArg4, out edx)
	Mem137[esp_118 + 0x1C<32>:word32] = eax_128
	branch eax_128 == 0<32> l0073D407
l0073D407:
	word32 eax_139 = Mem137[esp_118 + 0x14<32>:word32]
	word32 v21_140 = Mem137[eax_139:word32] + 0xFFFFFFFF<32>
	Mem141[eax_139:word32] = v21_140
	branch v21_140 != 0<32> l0073D41C
l0073D410:
	word32 ecx_144 = Mem141[eax_139 + 4<32>:word32]
	word32 edx_145 = Mem141[ecx_144 + 0x18<32>:word32]
	Mem147[esp_118:word32] = eax_139
	call edx_145 (retsize: 4;)
		uses: eax:eax_139,ecx:ecx_144,edx:edx_151,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: edx:edx_151
l0073D41C:
	edxOut = edx
	return 0<32>
l0073D375:
	Mem171[esp_118:word32] = eax_128
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 esi_497
	word32 edx_496
	word32 ecx_495
	word32 eax_173 = fn006ECC50(stackArg4, out ecx_495, out edx_496, out esi_497)
	Mem179[esp_118 - 4<i32>:word32] = eax_128
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 eax_182 = fn006ECC00(stackArg4)
	word32 esi_189 = 0<32>
	branch eax_182 <= 0<32> l0073D3B4
l0073D38E:
l0073D390:
	word32 eax_197 = CONVERT(Mem195[esi_189 + eax_173:byte], byte, word32)
	Mem200[esp_118:word32] = CONVERT(Mem195[esi_189 + 1<32> + eax_173:byte], byte, word32)
	Mem202[esp_118 - 4<i32>:word32] = eax_197
	Mem204[esp_118 - 8<32>:word32] = 0x8DCA80<32>
	Mem207[esp_118 - 0xC<32>:word32] = edi_103
	sprintf(Mem207[esp_118 - 0xC<32>:(ptr32 charconst )], Mem207[esp_118 - 8<32>:(ptr32 charconst )], Mem207[esp_118 - 4<i32>:uint32], Mem207[esp_118:uint32])
	esi_189 = esi_189 + 2<32>
	edi_103 = edi_103 + 6<32>
	branch esi_189 < eax_182 l0073D390
l0073D3B4:
	word32 eax_217 = Mem216[esp_118 + 0x1C<32>:word32]
	word32 v20_218 = Mem216[eax_217:word32] + 0xFFFFFFFF<32>
	Mem219[eax_217:word32] = v20_218
	esp_20 = esp_118 + 4<32>
	branch v20_218 != 0<32> l0073D3C9
l0073D3BD:
	word32 ecx_222 = Mem219[eax_217 + 4<32>:word32]
	word32 edx_223 = Mem219[ecx_222 + 0x18<32>:word32]
	Mem225[esp_118:word32] = eax_217
	word32 esp_232
	word32 edx_235
	call edx_223 (retsize: 4;)
		uses: eax:eax_217,ecx:ecx_222,edx:edx_235,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: edx:edx_235,esp:esp_232
	esp_20 = esp_232 + 4<32>
l0073D3C9:
	edx_242 = Mem241[esp_20 + 0x14<32>:word32]
	ebx_105 = Mem241[esp_20 + 0x24<32>:word32]
l0073D3D1:
	branch ebx_105 <u edx_242 l0073D320
l0073D3D9:
	eax_252 = Mem251[esp_20 + 0x1C<32>:word32]
l0073D3DD:
	ebp_12 = edi_103 - eax_252
	edi_262 = Mem261[esp_20 + 0x10<32>:word32]
	ebx_105 = eax_252
l0073D2CC:
	edi_262 = 0<32>
l0073D2B5:
	edi_262 = 0<32>
l0073D3E7:
	word32 eax_291
	word32 edx_293
	word32 esp_271 = esp_20 - 4<i32>
	Mem272[esp_271:word32] = 0<32>
	Mem275[esp_271 - 4<i32>:word32] = ebp_12
	Mem278[esp_271 - 8<i32>:word32] = ebx_105
	branch Mem269[esp_20 + 0x2C<32>:word32] == 0<32> l0073D426
l0073D426:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	eax_291 = fn00718F10(stackArg4, dwArg04, out edx_293)
l0073D3F2:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	eax_291 = fn00719870(stackArg4, dwArg04, out edx_293)
l0073D42B:
	word32 esp_302 = esp_20 - 12<i32>
	branch edi_262 == 0<32> l0073D445
l0073D434:
	word32 v15_311 = Mem278[edi_262:word32] + 0xFFFFFFFF<32>
	Mem312[edi_262:word32] = v15_311
	branch v15_311 != 0<32> l0073D445
l0073D439:
	word32 eax_315 = Mem312[edi_262 + 4<32>:word32]
	word32 ecx_316 = Mem312[eax_315 + 0x18<32>:word32]
	Mem318[esp_302 + 8<32>:word32] = edi_262
	call ecx_316 (retsize: 4;)
		uses: eax:eax_315,edx:edx_325,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: edx:edx_325
l0073D445:
	edxOut = edx_293
	return eax_291
fn0073D2A0_exit:


word32 fn0073D450(word32 eax, word32 dwArg04, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073D660
// MayUse:  eax:[0..31] Stack +0004:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn0073D450_entry:
l0073D450:
	word32 esi_15 = CONVERT(Mem12[eax:byte], byte, word32)
	word32 ebx_14 = eax
	word32 edi_121 = 0<32>
	word32 dwLoc04_545 = 0<32>
	branch isalpha(esi_15) != 0<32> l0073D472
l0073D46D:
	branch esi_15 != 0x5F<32> l0073D4A1
l0073D472:
	branch esi_15 == 0x75<32> l0073D47C
l0073D477:
	branch esi_15 != 0x55<32> l0073D488
l0073D47C:
	esi_15 = CONVERT(Mem22[eax + 1<32>:byte], byte, int32)
	ebx_14 = eax + 1<32>
	edi_121 = 1<32>
l0073D488:
	branch esi_15 == 0x72<32> l0073D492
l0073D48D:
	branch esi_15 != 0x52<32> l0073D4A1
l0073D492:
	esi_15 = CONVERT(Mem22[ebx_14 + 1<32>:byte], byte, int32)
	ebx_14 = ebx_14 + 1<32>
	dwLoc04_545 = 1<32>
l0073D4A1:
	branch esi_15 == 0x27<32> l0073D4C4
l0073D4A6:
	branch esi_15 == 0x22<32> l0073D4C4
l0073D4C4:
	word32 ebx_110 = ebx_14 + 1<32>
	word32 ebp_80 = ebx_110
l0073D4D0:
	ebp_80 = ebp_755 + 1<32>
	ebp_755 = ebp_80
	branch Mem79[ebp_755:byte] != 0<8> l0073D4D0
l0073D4DA:
	word32 ebp_91 = ebp_80 - (ebx_110 + 1<32>)
	branch ebp_91 <=u 0x7FFFFFFF<32> l0073D4FF
l0073D4FF:
	word32 ebp_115 = ebp_91 - 1<32>
	branch CONVERT(Mem79[ebx_110 - 1<32> + ebp_91:byte], byte, int32) == esi_15 l0073D525
l0073D525:
	word32 edx_318
	branch ebp_91 <u 5<32> l0073D56E
l0073D52A:
	branch CONVERT(Mem79[ebx_110:byte], byte, int32) != esi_15 l0073D56E
l0073D531:
	branch CONVERT(Mem79[ebx_110 + 1<32>:byte], byte, int32) != esi_15 l0073D56E
l0073D539:
	ebx_110 = ebx_110 + 2<32>
	branch CONVERT(Mem79[ebx_110 - 1<32> + (ebp_91 - 1<32>):byte], byte, int32) != esi_15 l0073D554
l0073D548:
	ebp_115 = ebp_91 - 5<32>
	branch CONVERT(Mem79[ebx_110 + 1<32> + (ebp_91 - 4<32>):byte], byte, int32) == esi_15 l0073D56E
l0073D56E:
	branch edi_121 != 0<32> l0073D640
l0073D576:
	branch Mem79[0x00A6C618<p32>:word32] != edi_121 l0073D640
l0073D640:
	word32 edx_162
	word32 eax_161 = fn0073D2A0(dwArg04, ebx_110, ebp_115, out edx_162)
	edxOut = edx_162
	return eax_161
l0073D582:
	word32 esi_219
	branch dwArg04 == 0<32> l0073D5B5
l0073D58A:
	word32 edi_181 = 0x8D9880<32>
	word32 esi_182 = dwArg04
	word32 ecx_183 = 6<32>
	bool v21_532 = true
l0073D598:
	branch ecx_183 == 0<32> l0073D59A
l0073D598_1:
	v21_532 = Mem79[esi_756:byte] == Mem79[edi_757:byte]
	esi_182 = esi_756 + 1<i32>
	edi_181 = edi_757 + 1<i32>
	ecx_183 = ecx_183 - 1<32>
	esi_756 = esi_182
	edi_757 = edi_181
	branch Mem79[esi_756:byte] != Mem79[edi_757:byte] l0073D598
l0073D59A:
	branch v21_532 l0073D5B5
l0073D59C:
	word32 esi_201 = dwArg04
	word32 edi_202 = 0x8DCAA0<32>
	word32 ecx_203 = 0xB<32>
	bool v25_536 = true
l0073D5AA:
	branch ecx_203 == 0<32> l0073D5AC
l0073D5AA_2:
	v25_536 = Mem79[esi_758:byte] == Mem79[edi_759:byte]
	esi_201 = esi_758 + 1<i32>
	edi_202 = edi_759 + 1<i32>
	ecx_203 = ecx_203 - 1<32>
	esi_758 = esi_201
	edi_759 = edi_202
	branch Mem79[esi_758:byte] != Mem79[edi_759:byte] l0073D5AA
l0073D5AC:
	branch v25_536 l0073D5B5
l0073D5B5:
	esi_219 = 0<32>
l0073D5AE:
	esi_219 = 1<32>
l0073D5B7:
	branch dwLoc04_545 != 0<32> l0073D5EB
l0073D5BE:
	branch strchr(ebx_110, 0x5C<32>) == 0<32> l0073D5EB
l0073D5EB:
	branch esi_219 == 0<32> l0073D630
l0073D630:
	word32 edx_294
	word32 ecx_754
	word32 eax_293 = fn006EC9B0(ebx_110, ebp_115, out ecx_754, out edx_294)
	edxOut = edx_294
	return eax_293
l0073D5EF:
	word32 eax_317 = fn0071FC80(out edx_318)
	branch eax_317 == 0<32> l0073D566
l0073D605:
	word32 ecx_334
	word32 edx_336
	word32 eax_335 = fn0071FB20(eax_317, dwArg04, 0<32>, out ecx_334, out edx_336)
	word32 v16_340 = Mem332[eax_317:word32] + 0xFFFFFFFF<32>
	Mem341[eax_317:word32] = v16_340
	branch v16_340 != 0<32> l0073D628
l0073D61C:
	word32 edx_345 = Mem341[eax_317 + 4<32>:word32]
	word32 eax_346 = Mem341[edx_345 + 0x18<32>:word32]
	call eax_346 (retsize: 4;)
		uses: eax:eax_346,ecx:ecx_334,edx:edx_345,Stack +0004:eax_317,Stack +0008:dwArg04,Stack +0020:dwArg04
		defs: edx:edx_352
l0073D628:
	edxOut = edx_336
	return eax_335
l0073D5CE:
	word32 edx_390
	word32 eax_389 = fn006F2090(ebx_110, ebp_115, 0<32> - (esi_219 == 0<32>) & dwArg04, out edx_390)
	edxOut = edx_390
	return eax_389
l0073D554:
	fn006E1DC0(out edx_318)
l0073D566:
	edxOut = edx_318
	return 0<32>
l0073D50B:
	word32 edx_456
	fn006E1DC0(out edx_456)
	edxOut = edx_456
	return 0<32>
l0073D4E4:
	word32 edx_481
	word32 ecx_753
	fn006E0F80(Mem79[0x00A18598<p32>:word32], 0x8DCAAC<32>, out ecx_753, out edx_481)
	edxOut = edx_481
	return 0<32>
l0073D4AB:
	word32 edx_517
	fn006E1DC0(out edx_517)
	edxOut = edx_517
	return 0<32>
fn0073D450_exit:


word32 fn0073D660(word32 ebx, word32 dwArg04, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073E050
// MayUse:  ebx:[0..31] Stack +0004:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ebp ecx edi edx esi Top
// Preserved: esp
fn0073D660_entry:
l0073D660:
	word32 edx_142
	word32 eax_219 = fn0073D450(Mem0[Mem0[ebx + 0x14<32>:word32] + 4<32>:word32], Mem0[dwArg04:word32], out edx_142)
	branch eax_219 == 0<32> l0073D797
l0073D687:
	word32 dwLoc04_311 = 2<32>
	branch Mem32[ebx + 0x10<32>:word32] <= 1<32> l0073D797
l0073D699:
	word32 ebp_240 = 0x18<32>
l0073D6A0:
	word32 eax_54 = fn0073D450(Mem41[Mem41[ebx + 0x14<32>:word32] + 4<32> + ebp_240:word32], Mem41[dwArg04:word32], out edx_142)
	branch eax_54 == 0<32> l0073D779
l0073D779:
	branch eax_219 == 0<32> l0073D795
l0073D77D:
	Mem69[eax_219:word32] = Mem49[eax_219:word32] + 0xFFFFFFFF<32>
	branch Mem69[eax_219:word32] != 0<32> l0073D795
l0073D789:
	word32 ecx_73 = Mem69[eax_219 + 4<32>:word32]
	call Mem69[ecx_73 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_73,Stack +0004:eax_24,Stack +0008:dwArg04,Stack +0020:dwArg04
		defs: edx:edx_80
l0073D6C4:
	word32 eax_145
	bool v21_259
	branch Mem49[eax_219 + 4<32>:word32] == 0xA1B450<32> l0073D6E2
l0073D6CD:
	word32 edx_376
	word32 ecx_375
	branch fn006D5670(Mem49[eax_219 + 4<32>:word32], 0xA1B450<32>, out ecx_375, out edx_376) == 0<32> l0073D6FE
l0073D6E2:
	word32 eax_105 = Mem104[eax_54 + 4<32>:word32]
	branch eax_105 == 0xA1B450<32> l0073D745
l0073D6EC:
	word32 edx_378
	word32 ecx_377
	branch fn006D5670(eax_105, 0xA1B450<32>, out ecx_377, out edx_378) != 0<32> l0073D745
l0073D745:
	edx_142 = fn006EC4C0(fp - 8<32>, dwArg04)
	eax_145 = eax_219
	v21_259 = eax_219 == 0<32>
l0073D6FE:
	word32 eax_162 = fn00721290(eax_219, dwArg04, out edx_142)
	word32 v14_168 = Mem156[eax_54:word32] + 0xFFFFFFFF<32>
	Mem169[eax_54:word32] = v14_168
	word32 esp_167 = fp - 0x14<32>
	branch v14_168 != 0<32> l0073D71F
l0073D713:
	word32 edx_173 = Mem169[eax_54 + 4<32>:word32]
	word32 esp_177
	call Mem169[edx_173 + 0x18<32>:word32] (retsize: 4;)
		uses: edx:edx_173,Stack +0004:eax_54,Stack +0008:dwArg04,Stack +0020:dwArg04
		defs: edx:edx_180,esp:esp_177
	esp_167 = esp_177 + 4<32>
l0073D71F:
	word32 eax_187 = Mem186[esp_167 + 0xC<32>:word32]
	Mem189[eax_187:word32] = Mem186[eax_187:word32] + 0xFFFFFFFF<32>
	word32 eax_190 = Mem189[esp_167 + 0xC<32>:word32]
	branch Mem189[eax_190:word32] != 0<32> l0073D73B
l0073D72F:
	word32 ecx_193 = Mem189[eax_190 + 4<32>:word32]
	word32 edx_194 = Mem189[ecx_193 + 0x18<32>:word32]
	Mem196[esp_167 - 4<i32>:word32] = eax_190
	word32 esp_202
	call edx_194 (retsize: 4;)
		uses: ecx:ecx_193,Stack +0008:dwArg04
		defs: edx:edx_205,esp:esp_202
	esp_167 = esp_202 + 4<32>
l0073D73B:
	Mem213[esp_167 + 0xC<32>:word32] = eax_162
	eax_145 = eax_162
	v21_259 = eax_162 == 0<32>
l0073D759:
	branch v21_259 l0073D795
l0073D795:
	eax_219 = 0<32>
l0073D797:
	edxOut = edx_142
	return eax_219
l0073D75B:
	ebp_240 = ebp_240 + 0x18<32>
	dwLoc04_311 = dwLoc04_379 + 1<32>
	dwLoc04_379 = dwLoc04_311
	branch dwLoc04_379 + 0<32> < Mem227[ebx + 0x10<32>:word32] l0073D6A0
l0073D772:
	edxOut = edx_142
	return eax_145
fn0073D660_exit:


word32 fn0073D7A0(word32 dwArg04, word32 dwArg08, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073E050
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn0073D7A0_entry:
l0073D7A0:
	word32 edx_22
	word32 eax_20 = fn0073E7A0(Mem8[dwArg08 + 0x14<32>:word32], out edx_22)
	branch eax_20 != 0<32> l0073D7C8
l0073D7C8:
	word32 edx_37
	word32 eax_35 = fn0073C440(dwArg08, out edx_37)
	branch eax_35 == 0xFFFFFFFF<32> l0073D7F0
l0073D7DB:
	word32 eax_50 = fn00752E30(eax_35, out edx_37)
	branch eax_50 != 0<32> l0073D7F9
l0073D7F9:
	word32 edi_179 = Mem62[dwArg08 + 0x14<32>:word32] + 0x18<32>
	word32 dwLoc18_472 = 1<32>
	branch eax_35 <= 0<32> l0073D987
l0073D810:
	word32 dwLoc14_473 = eax_50 + 4<32>
l0073D817:
	word32 ebx_73 = Mem72[edi_179 + 0x14<32>:word32]
	word32 edx_103
	word32 eax_86 = fn0073C7D0(ebx_73 + 0x18<32>, dwArg04, dwArg04, out edx_103)
	branch eax_86 == 0<32> l0073D9A9
l0073D834:
	branch fn0073C790(Mem81[edi_179 + 0x14<32>:word32] + 0x48<32>, out edx_103) == 0<32> l0073D9A9
l0073D84B:
	word32 dwLoc1C_493
	word32 ebp_148
	branch Mem81[ebx_73 + 0x28<32>:word32] != 1<32> l0073D86B
l0073D86B:
	word32 edx_630
	word32 eax_142 = fn00744110(fn00743FC0(eax_86, dwArg04, dwArg08, Mem81[edi_179 + 0xC<32>:word32], out edx_630), dwArg04, dwArg08, out edx_103)
	dwLoc1C_493 = eax_142
	ebp_148 = eax_142
l0073D851:
	word32 eax_161 = fn00744110(Mem81[eax_86 + 4<32>:word32], dwArg04, dwArg08, out edx_103)
	ebp_148 = eax_161
	dwLoc1C_493 = eax_161
l0073D894:
	branch ebp_148 == 0<32> l0073D9A9
l0073D89F:
	branch Mem175[edi_179 + 0x10<32>:word32] != 5<32> l0073D959
l0073D8A9:
	word32 edi_178 = Mem175[edi_179 + 0x14<32>:word32]
	edi_179 = edi_178 + 0x60<32> + 0x14<32>
	word32 eax_181 = edi_178 + 0x74<32>
	word32 esi_182 = 0<32>
	branch Mem175[Mem175[edi_178 + 0x74<32>:word32]:word16] == 0x14C<16> l0073D8E6
l0073D8BE:
l0073D8C3:
	word32 eax_188 = Mem175[eax_181:word32]
	esi_182 = esi_182 + 1<32>
	branch Mem175[eax_188 + 0x10<32>:word32] == 2<32> l0073D8DD
l0073D8CD:
	word32 eax_194 = Mem175[eax_188 + 0x14<32>:word32]
	edx_103 = Mem175[eax_194 + 0x44<32>:word32]
	eax_181 = eax_194 + 0x44<32>
	branch Mem175[edx_103:word16] != 0x14C<16> l0073D8C3
l0073D8DD:
	branch esi_182 == 0xFFFFFFFF<32> l0073D9A9
l0073D8E6:
	word32 eax_229 = fn00752E30(esi_182, out edx_103)
	branch eax_229 == 0<32> l0073D9A9
l0073D903:
	word32 ebx_239 = 0<32>
	branch esi_182 <= 0<32> l0073D94C
l0073D909:
	word32 ebp_242 = eax_229 + 4<32>
l0073D910:
	edi_179 = Mem245[edi_179 + 0<32>:word32]
	word32 eax_261 = fn0073E7A0(dwArg04, out edx_103)
	branch eax_261 == 0<32> l0073D9A9
l0073D9A9:
	edxOut = edx_103
	return 0<32>
l0073D92B:
	Mem283[ebp_242:word32] = eax_261
	branch Mem283[edi_179 + 0x10<32>:word32] != 3<32> l0073D93A
l0073D934:
	edi_179 = Mem283[edi_179 + 0x14<32>:word32] + 0x30<32>
l0073D93A:
	ebx_239 = ebx_239 + 1<32>
	ebp_242 = ebp_242 + 4<32>
	branch ebx_239 < esi_182 l0073D910
l0073D944:
	ebp_148 = dwLoc1C_493
l0073D94C:
	branch Mem302[edi_179:word16] != 0x14B<16> l0073D956
l0073D953:
	edi_179 = Mem302[edi_179 + 0x14<32>:word32]
l0073D956:
	Mem310[ebp_148 + 8<32>:word32] = eax_229
l0073D959:
	Mem320[dwLoc14_473:word32] = ebp_148
	dwLoc18_472 = dwLoc18_631 + 1<32>
	dwLoc14_473 = dwLoc14_473 + 4<32>
	dwLoc18_631 = dwLoc18_472
	branch dwLoc18_631 + 0<32> < eax_35 l0073D817
l0073D97F:
l0073D987:
	word32 edx_359
	word32 eax_357 = fn00743A70(eax_20, dwArg04, dwArg08, Mem329[dwArg08 + 0xC<32>:word32], out edx_359)
	edxOut = edx_359
	return eax_357
l0073D7F0:
	edxOut = edx_37
	return 0<32>
l0073D7C2:
	edxOut = edx_22
	return eax_20
fn0073D7A0_exit:


word32 fn0073D9C0(word32 dwArg04, word32 dwArg08, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073DBD0
//      fn0073DF10
//      fn0073E050
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn0073D9C0_entry:
l0073D9C0:
	word32 ebp_299 = dwArg04
	word32 edx_22
	word32 eax_20 = fn0073E7A0(Mem12[dwArg08 + 0x14<32>:word32], out edx_22)
	branch eax_20 != 0<32> l0073D9E8
l0073D9E8:
	word32 edx_37
	word32 eax_35 = fn0073C4B0(dwArg08, out edx_37)
	branch eax_35 == 0xFFFFFFFF<32> l0073DA10
l0073D9FB:
	word32 eax_50 = fn00752E30(eax_35, out edx_37)
	branch eax_50 != 0<32> l0073DA19
l0073DA19:
	word32 edi_173 = Mem62[dwArg08 + 0x14<32>:word32] + 0x18<32>
	word32 dwLoc18_465 = 1<32>
	branch eax_35 <= 0<32> l0073DB96
l0073DA30:
	word32 dwLoc14_466 = eax_50 + 4<32>
l0073DA37:
	word32 esi_73 = Mem72[edi_173 + 0x14<32>:word32]
	word32 edx_105
	word32 eax_85 = fn0073C7D0(esi_73 + 0x18<32>, ebp_299, dwArg04, out edx_105)
	branch eax_85 == 0<32> l0073DBB8
l0073DA52:
	branch fn0073E7A0(dwArg04, out edx_105) == 0<32> l0073DBB8
l0073DA6A:
	word32 dwLoc1C_488
	word32 ebx_150
	branch Mem101[esi_73 + 0x28<32>:word32] != 1<32> l0073DA88
l0073DA88:
	word32 edx_622
	word32 eax_144 = fn00744110(fn00743FC0(eax_85, dwArg04, dwArg08, Mem119[edi_173 + 0xC<32>:word32], out edx_622), dwArg04, dwArg08, out edx_105)
	dwLoc1C_488 = eax_144
	ebx_150 = eax_144
l0073DA77:
	word32 eax_155 = fn00744110(Mem119[eax_85 + 4<32>:word32], dwArg04, dwArg08, out edx_105)
	ebx_150 = eax_155
	dwLoc1C_488 = eax_155
l0073DAA8:
	branch ebx_150 == 0<32> l0073DBB8
l0073DAB3:
	branch Mem169[edi_173 + 0x10<32>:word32] != 5<32> l0073DB6C
l0073DABD:
	word32 edi_172 = Mem169[edi_173 + 0x14<32>:word32]
	edi_173 = edi_172 + 0x60<32> + 0x14<32>
	edx_105 = Mem169[edi_172 + 0x74<32>:word32]
	word32 eax_175 = edi_172 + 0x74<32>
	word32 esi_176 = 0<32>
	branch Mem169[edx_105:word16] == 0x14F<16> l0073DAF6
l0073DAD2:
	word32 eax_181 = Mem169[eax_175:word32]
	esi_176 = esi_176 + 1<32>
	branch Mem169[eax_181 + 0x10<32>:word32] == 2<32> l0073DAED
l0073DADD:
	word32 eax_186 = Mem169[eax_181 + 0x14<32>:word32]
	eax_175 = eax_186 + 0x44<32>
	branch Mem169[Mem169[eax_186 + 0x44<32>:word32]:word16] != 0x14F<16> l0073DAD2
l0073DAED:
	branch esi_176 == 0xFFFFFFFF<32> l0073DBB8
l0073DAF6:
	word32 eax_220 = fn00752E30(esi_176, out edx_105)
	branch eax_220 == 0<32> l0073DBB8
l0073DB0F:
	word32 ebp_230 = 0<32>
	branch esi_176 <= 0<32> l0073DB5B
l0073DB15:
	word32 ebx_233 = eax_220 + 4<32>
l0073DB20:
	edi_173 = Mem235[edi_173 + 0<32>:word32]
	word32 eax_251 = fn0073E7A0(dwArg04, out edx_105)
	branch eax_251 == 0<32> l0073DBB8
l0073DBB8:
	edxOut = edx_105
	return 0<32>
l0073DB3B:
	Mem273[ebx_233:word32] = eax_251
	branch Mem273[edi_173 + 0x10<32>:word32] != 3<32> l0073DB49
l0073DB43:
	edi_173 = Mem273[edi_173 + 0x14<32>:word32] + 0x30<32>
l0073DB49:
	ebp_230 = ebp_230 + 1<32>
	ebx_233 = ebx_233 + 4<32>
	branch ebp_230 < esi_176 l0073DB20
l0073DB53:
	ebx_150 = dwLoc1C_488
l0073DB5B:
	branch Mem292[edi_173:word16] != 0x14E<16> l0073DB65
l0073DB62:
	edi_173 = Mem292[edi_173 + 0x14<32>:word32]
l0073DB65:
	Mem304[ebx_150 + 8<32>:word32] = eax_220
	ebp_299 = dwArg04
l0073DB6C:
	Mem311[dwLoc14_466:word32] = ebx_150
	dwLoc18_465 = dwLoc18_623 + 1<32>
	dwLoc14_466 = dwLoc14_466 + 4<32>
	dwLoc18_623 = dwLoc18_465
	branch dwLoc18_623 + 0<32> < eax_35 l0073DA37
l0073DB8E:
l0073DB96:
	word32 edx_351
	word32 eax_349 = fn00743AD0(eax_20, dwArg04, dwArg08, Mem321[dwArg08 + 0xC<32>:word32], out edx_351)
	edxOut = edx_351
	return eax_349
l0073DA10:
	edxOut = edx_37
	return 0<32>
l0073D9E2:
	edxOut = edx_22
	return eax_20
fn0073D9C0_exit:


word32 fn0073DBD0(word32 dwArg04, word32 dwArg08, word32 dwArg0C, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073DF70
//      fn0073E390
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn0073DBD0_entry:
l0073DBD0:
	word32 edx_107
	word32 eax_18 = Mem16[dwArg08 + 0x10<32>:word32]
	word32 edx_129 = 0<32>
	word32 ebx_132 = 0<32>
	word32 ebp_130 = 0<32>
	word32 dwLoc08_593 = 0<32>
	word32 dwLoc0C_594 = 0<32>
	branch eax_18 <= 0<32> l0073DC3D
l0073DBF0:
	word32 ecx_26 = Mem24[dwArg08 + 0x14<32>:word32]
l0073DBF3:
	branch Mem24[ecx_26:word16] != 0x14A<16> l0073DC18
l0073DBFA:
	branch Mem24[ecx_26 + 0x10<32>:word32] != 1<32> l0073DC05
l0073DC05:
	branch Mem24[Mem24[ecx_26 + 0x14<32>:word32] + 0x18<32>:word16] != 0x14F<16> l0073DC15
l0073DC15:
	ebp_130 = ebp_130 + 1<32>
l0073DC10:
	edx_129 = edx_129 + 1<32>
l0073DC00:
	ebx_132 = ebx_132 + 1<32>
l0073DC18:
	ecx_26 = ecx_26 + 0x18<32>
	eax_18 = eax_18 - 1<32>
	branch eax_18 != 0<32> l0073DBF3
l0073DC20:
	branch edx_129 > 1<32> l0073DEC0
l0073DC29:
	branch edx_129 == 0<32> l0073DC3D
l0073DC2D:
	branch ebx_132 != 0<32> l0073DEC0
l0073DC35:
	branch ebp_130 != 0<32> l0073DEC0
l0073DEC0:
	word32 esi_862
	word32 eax_90 = fn006EA200(out edx_107, out esi_862)
	branch eax_90 == 0<32> l0073DEFD
l0073DEDC:
	word32 ecx_863
	fn006E0E90(Mem80[0x00A178F4<p32>:word32], eax_90, out ecx_863, out edx_107)
	word32 v16_113 = Mem104[eax_90:word32] + 0xFFFFFFFF<32>
	Mem114[eax_90:word32] = v16_113
	branch v16_113 != 0<32> l0073DEFD
l0073DEF1:
	word32 edx_117 = Mem114[eax_90 + 4<32>:word32]
	call Mem114[edx_117 + 0x18<32>:word32] (retsize: 4;)
		uses: edx:edx_117,Stack +0004:eax_90,Stack +000C:dwArg08,Stack +003C:dwArg04,Stack +0040:dwArg08
		defs: edx:edx_123
l0073DC3D:
	branch edx_129 + ebp_130 + ebx_132 <= 0xFF<32> l0073DC98
l0073DC98:
	word32 esi_138 = dwArg04
	word32 eax_149 = fn00752E30(edx_129 + ebx_132, out edx_107)
	branch eax_149 == 0<32> l0073DEFD
l0073DCB9:
	word32 eax_166 = fn00752E30(ebp_130, out edx_107)
	word32 ebp_171 = 0<32>
	branch eax_166 == 0<32> l0073DEFD
l0073DCD4:
	word32 dwLoc1C_686 = 0<32>
	word32 dwLoc18_687 = 0<32>
	branch Mem174[dwArg08 + 0x10<32>:word32] <= 0<32> l0073DE3A
l0073DCE5:
	word32 edi_180 = 0<32>
	word32 dwLoc14_688 = 0<32>
	word32 dwLoc20_689 = eax_149 + 4<32>
l0073DCF2:
	word32 ebx_190 = edi_180 + Mem186[dwArg08 + 0x14<32>:word32]
	word16 ax_192 = Mem186[ebx_190:word16]
	branch ax_192 != 0x14A<16> l0073DDE4
l0073DDE4:
	branch ax_192 != 0x10<16> l0073DDFA
l0073DDFA:
	branch ax_192 != 0x24<16> l0073DE17
l0073DE00:
	word32 edx_865
	dwLoc0C_594 = fn0073E7A0(dwArg04, out edx_865)
l0073DDEA:
	word32 edx_864
	dwLoc08_593 = fn0073E7A0(dwArg04, out edx_864)
l0073DE0E:
	ebp_171 = ebp_171 + 1<32>
	edi_180 = edi_180 + 0x18<32>
l0073DD09:
	word32 eax_395
	branch Mem186[ebx_190 + 0x10<32>:word32] != 1<32> l0073DD26
l0073DD26:
	branch Mem186[Mem186[ebx_190 + 0x14<32>:word32] + 0x18<32>:word16] != 0x14F<16> l0073DD55
l0073DD55:
	word32 eax_245 = fn0073E7A0(dwArg04, out edx_107)
	branch eax_245 == 0<32> l0073DEFD
l0073DD67:
	word32 ecx_254 = Mem243[eax_245:word32]
	branch ecx_254 == 4<32> l0073DE7E
l0073DE7E:
	word32 edx_261
	fn0073B830(out edx_261)
	edxOut = edx_261
	return 0<32>
l0073DD72:
	branch ecx_254 != 0x11<32> l0073DE95
l0073DE95:
	word32 edx_282
	fn0073B830(out edx_282)
	edxOut = edx_282
	return 0<32>
l0073DD7B:
	word32 ebp_297 = Mem243[eax_245 + 4<32>:word32]
	word32 edi_299 = 0x8ABDD0<32>
	word32 esi_300 = ebp_297 + 0x14<32>
	word32 ecx_301 = 5<32>
	bool v21_584 = true
l0073DD90:
	branch ecx_301 == 0<32> l0073DD92
l0073DD90_1:
	v21_584 = Mem243[esi_866:byte] == Mem243[edi_867:byte]
	esi_300 = esi_866 + 1<i32>
	edi_299 = edi_867 + 1<i32>
	ecx_301 = ecx_301 - 1<32>
	esi_866 = esi_300
	edi_867 = edi_299
	branch Mem243[esi_866:byte] != Mem243[edi_867:byte] l0073DD90
l0073DD92:
	branch v21_584 l0073DEAC
l0073DEAC:
	word32 edx_330
	fn0073B830(out edx_330)
	edxOut = edx_330
	return 0<32>
l0073DD98:
	esi_138 = dwArg04
	branch fn0073E7A0(dwArg04, out edx_107) == 0<32> l0073DEFD
l0073DDB1:
	word32 eax_373 = fn00744200(ebp_297, dwArg04, out edx_107)
	branch eax_373 == 0<32> l0073DEFD
l0073DDC7:
	Mem386[eax_166 + 4<32> + dwLoc1C_686 * 4<32>:word32] = eax_373
	ebp_171 = dwLoc18_687
	edi_180 = dwLoc14_688
	dwLoc1C_686 = dwLoc1C_686 + 1<32>
l0073DD31:
	eax_395 = fn0073D9C0(esi_138, dwArg04, out edx_107)
l0073DD0F:
	branch dwLoc1C_686 != 0<32> l0073DE67
l0073DE67:
	word32 edx_406
	fn0073B830(out edx_406)
	edxOut = edx_406
	return 0<32>
l0073DD1A:
	eax_395 = fn0073E7A0(dwArg04, out edx_107)
l0073DD38:
	branch eax_395 == 0<32> l0073DEFD
l0073DD43:
	Mem440[dwLoc20_689:word32] = eax_395
	dwLoc20_689 = dwLoc20_689 + 4<32>
l0073DE17:
	ebp_171 = ebp_171 + 1<32>
	edi_180 = edi_180 + 0x18<32>
	dwLoc18_687 = ebp_171
	dwLoc14_688 = edi_180
	branch ebp_171 < Mem445[dwArg08 + 0x10<32>:word32] l0073DCF2
l0073DE32:
l0073DE3A:
	word32 edx_498
	word32 eax_497 = fn00743BE0(dwArg0C, dwArg04, dwArg08, dwLoc08_593, dwLoc0C_594, Mem472[dwArg0C + 0x18<32>:word32], Mem468[dwArg0C + 0x1C<32>:word32], out edx_498)
	edxOut = edx_498
	return eax_497
l0073DC49:
	word32 esi_860
	word32 eax_522 = fn006EA200(out edx_107, out esi_860)
	branch eax_522 == 0<32> l0073DEFD
l0073DC69:
	word32 ecx_861
	fn006E0E90(Mem519[0x00A178F4<p32>:word32], eax_522, out ecx_861, out edx_107)
	word32 v14_545 = Mem536[eax_522:word32] + 0xFFFFFFFF<32>
	Mem546[eax_522:word32] = v14_545
	branch v14_545 != 0<32> l0073DEFD
l0073DEFD:
	edxOut = edx_107
	return 0<32>
l0073DC82:
	word32 eax_562 = Mem546[eax_522 + 4<32>:word32]
	word32 edx_568
	call Mem546[eax_562 + 0x18<32>:word32] (retsize: 4;)
		uses: eax:eax_562,Stack +0004:eax_522,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +003C:dwArg04,Stack +0040:dwArg08,Stack +0044:dwArg0C
		defs: edx:edx_568
	edxOut = edx_568
	return 0<32>
fn0073DBD0_exit:


word32 fn0073DF10(word32 eax, word32 esi, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073E050
// MayUse:  eax:[0..31] esi:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ecx edi edx Top
// Preserved: esp
fn0073DF10_entry:
l0073DF10:
	word32 eax_9 = Mem6[eax + 0x10<32>:word32]
	branch eax_9 <= 1<32> l0073DF35
l0073DF1B:
	branch Mem6[Mem6[eax + 0x14<32>:word32] + 0x18<32>:word16] != 0x14F<16> l0073DF32
l0073DF32:
l0073DF35:
	branch eax_9 != 1<32> l0073DF46
l0073DF46:
	word32 edx_30
	word32 eax_28 = fn0073C090(eax, esi, out edx_30)
	branch eax_28 != 0<32> l0073DF55
l0073DF55:
	word32 edx_53
	word32 eax_51 = fn00743FC0(eax_28, 1<32>, Mem40[eax + 8<32>:word32], Mem23[eax + 0xC<32>:word32], out edx_53)
	edxOut = edx_53
	return eax_51
l0073DF53:
	edxOut = edx_30
	return eax_28
l0073DF37:
	word32 edx_71
	word32 eax_69 = fn0073E7A0(Mem6[eax + 0x14<32>:word32], out edx_71)
	edxOut = edx_71
	return eax_69
l0073DF26:
	word32 edx_85
	word32 eax_83 = fn0073D9C0(esi, eax, out edx_85)
	edxOut = edx_85
	return eax_83
fn0073DF10_exit:


word32 fn0073DF70(word32 edi, word32 dwArg04, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00740060
// MayUse:  edi:[0..31] Stack +0004:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ebp ebx ecx edx esi Top
// Preserved: esp
fn0073DF70_entry:
l0073DF70:
	word32 edx_108
	word32 eax_19 = fn00752E30(Mem11[dwArg04 + 0x10<32>:word32], out edx_108)
	branch eax_19 != 0<32> l0073DF99
l0073DF99:
	word32 dwLoc0C_212 = 1<32>
	branch Mem27[dwArg04 + 0x10<32>:word32] <= 0<32> l0073E034
l0073DFA8:
	word32 dwLoc08_214 = eax_19 + 4<32>
l0073DFB3:
	word32 esi_46 = Mem43[dwArg04 + 0x14<32>:word32] + dwArg04
	word32 eax_106 = fn0073C280(Mem49[esi_46 + 0x14<32>:word32] + 0x18<32>, edi, out edx_108)
	branch eax_106 == 0<32> l0073E03B
l0073DFCD:
	word32 ecx_64 = Mem49[esi_46 + 0x10<32>:word32]
	branch ecx_64 == 3<32> l0073E00E
l0073DFD5:
	branch ecx_64 != 5<32> l0073DFF9
l0073DFF9:
	eax_106 = fn0073DBD0(edi, dwArg04, eax_106, out edx_108)
l0073DFDA:
	eax_106 = fn00743BE0(eax_106, dwArg04, 0<32>, 0<32>, 0<32>, Mem89[esi_46 + 8<32>:word32], Mem49[esi_46 + 0xC<32>:word32], out edx_108)
l0073E00A:
	branch eax_106 == 0<32> l0073E03B
l0073E03B:
	edxOut = edx_108
	return 0<32>
l0073E00E:
	Mem136[dwLoc08_214:word32] = eax_106
	dwLoc0C_212 = dwLoc0C_261 + 1<32>
	dwLoc08_214 = dwLoc08_214 + 4<32>
	dwLoc0C_261 = dwLoc0C_212
	branch dwLoc0C_261 + 0<32> < Mem136[dwArg04 + 0x10<32>:word32] l0073DFB3
l0073E030:
l0073E034:
	edxOut = edx_108
	return eax_19
l0073DF92:
	edxOut = edx_108
	return 0<32>
fn0073DF70_exit:


word32 fn0073E050(word32 dwArg04, word32 dwArg08, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073E590
//      fn0073E6E0
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn0073E050_entry:
l0073E050:
	word32 edx_120
	word32 edi_19 = Mem18[dwArg08 + 0x14<32>:word32]
	word32 ecx_20 = CONVERT(Mem18[edi_19:word16], word16, int32)
	branch ecx_20 >u 0x1A<32> l0073E32D
l0073E071:
	switch (CONVERT(Mem18[ecx_20 + 0x73E36B<32>:byte], byte, word32)) { l0073E07F l0073E0EF l0073E0B3 l0073E32D l0073E32D l0073E32D l0073E12C l0073E32D l0073E1A4 l0073E32D l0073E32D l0073E32D l0073E32D l0073E32D l0073E32D l0073E32D l0073E32D l0073E32D l0073E32D l0073E32D l0073E32D l0073E32D l0073E32D l0073E32D l0073E2FE l0073E21F }
l0073E21F:
	int64 edx_eax_27 = CONVERT(Mem18[edi_19 + 0x28<32>:word32] + 1<32>, word32, int64)
	word32 eax_31 = SLICE(edx_eax_27, word32, 0) + (SLICE(edx_eax_27, word32, 32) & 3<32>)
	word32 eax_42 = fn00752E30(eax_31 >> 2<32>, out edx_120)
	branch eax_42 == 0<32> l0073E342
l0073E249:
	word32 eax_58 = fn00752E30(eax_31 >> 2<32>, out edx_120)
	branch eax_58 == 0<32> l0073E342
l0073E262:
	word32 ebx_130 = 0<32>
	branch Mem65[edi_19 + 0x28<32>:word32] <= 0<32> l0073E2DC
l0073E269:
l0073E270:
	word32 eax_88 = fn0073E7A0(dwArg04, out edx_120)
	branch eax_88 == 0<32> l0073E342
l0073E28B:
	int64 edx_eax_98 = CONVERT(ebx_130, word32, int64)
	word32 esi_106 = (SLICE(edx_eax_98, word32, 0) + (SLICE(edx_eax_98, word32, 32) & 3<32>) >> 2<32>) * 2<32>
	Mem109[esi_106 * 2<32> + 4<32> + eax_42:word32] = eax_88
	word32 eax_119 = fn0073E7A0(dwArg04, out edx_120)
	branch eax_119 == 0<32> l0073E342
l0073E2C1:
	Mem131[esi_106 * 2<32> + 4<32> + eax_58:word32] = eax_119
	ebx_130 = ebx_130 + 4<32>
	branch ebx_130 < Mem131[edi_19 + 0x28<32>:word32] l0073E270
l0073E2D6:
l0073E2DC:
	word32 edx_161
	word32 eax_160 = fn00743A30(eax_42, dwArg04, dwArg08, Mem137[dwArg08 + 0xC<32>:word32], out edx_161)
	edxOut = edx_161
	return eax_160
l0073E2FE:
	word32 eax_179 = fn0073C790(edi_19 + 0x18<32>, out edx_120)
	branch eax_179 == 0<32> l0073E342
l0073E30C:
	word32 edx_201
	word32 eax_200 = fn00743C60(eax_179, dwArg04, dwArg08, out edx_201)
	edxOut = edx_201
	return eax_200
l0073E1A4:
	branch Mem18[edi_19 + 0x18<32>:word16] != 0xA<16> l0073E1CD
l0073E1CD:
	branch Mem18[edi_19 + 0x28<32>:word32] == 1<32> l0073E1EF
l0073E1D3:
	branch Mem18[Mem18[edi_19 + 0x2C<32>:word32] + 0x18<32>:word16] == 0xC<16> l0073E1EF
l0073E1EF:
	word32 eax_233 = fn0073C090(edi_19 + 0x18<32>, dwArg04, out edx_120)
	branch eax_233 == 0<32> l0073E342
l0073E200:
	word32 edx_257
	word32 eax_256 = fn00743F60(eax_233, dwArg04, dwArg08, Mem226[dwArg08 + 0xC<32>:word32], out edx_257)
	edxOut = edx_257
	return eax_256
l0073E1DD:
	word32 edx_278
	word32 eax_277 = fn0073D7A0(dwArg04, edi_19 + 0x18<32>, out edx_278)
	edxOut = edx_278
	return eax_277
l0073E1AD:
	word32 edx_308
	word32 eax_307 = fn00743F60(0<32>, 1<32>, Mem18[dwArg08 + 8<32>:word32], Mem18[dwArg08 + 0xC<32>:word32], out edx_308)
	edxOut = edx_308
	return eax_307
l0073E12C:
	word16 cx_323 = Mem18[edi_19 + 0x18<32>:word16]
	branch cx_323 != 8<16> l0073E159
l0073E159:
	branch cx_323 != 0x153<16> l0073E172
l0073E172:
	branch Mem18[edi_19 + 0x28<32>:word32] <= 1<32> l0073E195
l0073E178:
	branch Mem18[Mem18[edi_19 + 0x2C<32>:word32] + 0x18<32>:word16] != 0x14F<16> l0073E195
l0073E195:
	word32 edx_343
	word32 eax_342 = fn0073DF10(eax, dwArg04, out edx_343)
	edxOut = edx_343
	return eax_342
l0073E183:
	word32 edx_364
	word32 eax_363 = fn0073D9C0(dwArg04, edi_19 + 0x18<32>, out edx_364)
	edxOut = edx_364
	return eax_363
l0073E160:
	word32 edx_385
	word32 eax_384 = fn0073E7A0(edi_19 + 0x18<32>, out edx_385)
	edxOut = edx_385
	return eax_384
l0073E139:
	word32 edx_415
	word32 eax_414 = fn00743FC0(0<32>, 1<32>, Mem18[dwArg08 + 8<32>:word32], Mem18[dwArg08 + 0xC<32>:word32], out edx_415)
	edxOut = edx_415
	return eax_414
l0073E32D:
	word32 ecx_850
	fn006E15D0(Mem18[0x00A18720<p32>:word32], 0x8DCB98<32>, out ecx_850, out edx_120)
l0073E0B3:
	word32 eax_457 = fn0073D660(dwArg08, dwArg04, out edx_120)
	branch eax_457 == 0<32> l0073E342
l0073E0C8:
	fn00740DF0(Mem453[dwArg04 + 4<32>:word32], dwArg04)
	word32 edx_491
	word32 eax_490 = fn00743D20(eax_457, dwArg04, dwArg08, out edx_491)
	edxOut = edx_491
	return eax_490
l0073E0EF:
	word32 eax_508 = fn0073D140(Mem18[edi_19 + 4<32>:word32], out edx_120)
	branch eax_508 == 0<32> l0073E342
l0073E342:
	edxOut = edx_120
	return 0<32>
l0073E101:
	fn00740DF0(Mem18[dwArg04 + 4<32>:word32], dwArg04)
	word32 edx_555
	word32 eax_554 = fn00743CC0(eax_508, dwArg04, dwArg08, out edx_555)
	edxOut = edx_555
	return eax_554
l0073E07F:
	word32 ebx_570 = Mem18[dwArg04 + 4<32>:word32]
	word32 ecx_851
	word32 edx_852
	word32 eax_575 = fn006F1A70(out ecx_851, out edx_852)
	fn00740DF0(ebx_570, dwArg04)
	word32 edx_606
	word32 eax_605 = fn00743EE0(eax_575, dwArg04, dwArg08, Mem583[dwArg08 + 0xC<32>:word32], out edx_606)
	edxOut = edx_606
	return eax_605
fn0073E050_exit:


word32 fn0073E390(word32 eax, word32 ecx, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073E6E0
// MayUse:  eax:[0..31] ecx:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn0073E390_entry:
l0073E390:
	word32 edi_16 = Mem15[eax + 0x14<32>:word32]
	word16 ax_18 = Mem15[edi_16:word16]
	branch ax_18 != 7<16> l0073E3ED
l0073E3ED:
	branch ax_18 != 0x17<16> l0073E42D
l0073E42D:
	word32 edx_122
	word32 eax_185
	word32 eax_28 = Mem26[edi_16 + 0x28<32>:word32]
	branch eax_28 != 1<32> l0073E458
l0073E458:
	int64 edx_eax_33 = CONVERT(eax_28 + 1<32>, word32, int64)
	word32 dwLoc04_431 = 1<32>
	word32 eax_45 = fn00752E30(SLICE(edx_eax_33, word32, 0) - SLICE(edx_eax_33, word32, 32) >> 1<32>, out edx_122)
	branch eax_45 == 0<32> l0073E555
l0073E481:
	branch Mem43[edi_16 + 0x28<32>:word32] <= 0<32> l0073E500
l0073E486:
	word32 dwLoc08_487 = 0<32>
	word32 ebx_58 = 0<32>
l0073E490:
	word32 eax_71 = fn0073C520(Mem60[edi_16 + 0x2C<32>:word32] + dwLoc08_487, ecx, out edx_122)
	branch eax_71 == 0<32> l0073E555
l0073E4A6:
	branch Mem60[eax_71:word32] == 4<32> l0073E4B3
l0073E4AB:
	dwLoc04_431 = 0<32>
l0073E4B3:
	int64 edx_eax_89 = CONVERT(ebx_58, word32, int64)
	Mem97[eax_45 + 4<32> + (SLICE(edx_eax_89, word32, 0) - SLICE(edx_eax_89, word32, 32) >> 1<32>) * 4<32>:word32] = eax_71
	dwLoc08_487 = dwLoc08_487 + 0x30<32>
	ebx_58 = ebx_58 + 2<32>
	branch ebx_58 < Mem97[edi_16 + 0x28<32>:word32] l0073E490
l0073E4CB:
	branch dwLoc04_431 != 0<32> l0073E500
l0073E500:
	word32 eax_120 = fn00752E30(Mem105[eax_45:word32], out edx_122)
	branch eax_120 == 0<32> l0073E555
l0073E514:
	word32 edx_130 = 0<32>
	word32 ebx_131 = eax_45 - eax_120
	word32 ecx_133 = eax_120 + 4<32>
l0073E521:
	branch edx_130 >= Mem137[eax_45:word32] l0073E53A
l0073E53A:
	word32 eax_160 = fn00743FC0(eax_120, 1<32>, Mem146[edi_16 + 0x20<32>:word32], Mem137[edi_16 + 0x24<32>:word32], out edx_122)
	branch eax_160 != 0<32> l0073E55F
l0073E55F:
	word32 edx_595
	eax_185 = fn007440C0(eax_160, out edx_595)
l0073E526:
	Mem195[ecx_133:word32] = Mem137[Mem137[ebx_131 + ecx_133:word32] + 4<32>:word32]
	edx_130 = edx_130 + 1<32>
	ecx_133 = ecx_133 + 4<32>
l0073E4D2:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg12 = <invalid>
	word32 stackArg16 = <invalid>
	word32 stackArg20 = <invalid>
	word32 edx_231
	word32 eax_229 = fn00743E30(dwArg04, fn00744090(eax_45), stackArg12, stackArg16, stackArg20, out edx_231)
	edxOut = edx_231
	return eax_229
l0073E435:
	eax_185 = fn0073C520(Mem26[edi_16 + 0x2C<32>:word32], ecx, out edx_122)
	branch eax_185 == 0<32> l0073E555
l0073E555:
	edxOut = edx_122
	return 0<32>
l0073E445:
l0073E577:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg12 = <invalid>
	word32 stackArg16 = <invalid>
	word32 stackArg20 = <invalid>
	word32 edx_296
	word32 eax_294 = fn00743E30(dwArg04, eax_185, stackArg12, stackArg16, stackArg20, out edx_296)
	edxOut = edx_296
	return eax_294
l0073E3F4:
	word32 ebp_311 = Mem26[ecx + 4<32>:word32]
	word32 ecx_587
	word32 edx_588
	word32 eax_315 = fn006F1A70(out ecx_587, out edx_588)
	fn00740DF0(ebp_311, eax_315)
	word32 edx_350
	word32 eax_348 = fn00743D80(dwArg04, eax_315, 1<32>, Mem324[eax + 8<32>:word32], Mem324[eax + 0xC<32>:word32], out edx_350)
	edxOut = edx_350
	return eax_348
l0073E3A6:
	branch Mem15[eax + 0x10<32>:word32] != 2<32> l0073E3D4
l0073E3D4:
	word32 edx_378
	word32 eax_376 = fn0073DBD0(ecx, edi_16 + 0x18<32>, dwArg04, out edx_378)
	edxOut = edx_378
	return eax_376
l0073E3AC:
	word32 edx_413
	word32 eax_411 = fn00743BE0(dwArg04, 0<32>, 0<32>, 0<32>, 0<32>, Mem15[eax + 8<32>:word32], Mem15[eax + 0xC<32>:word32], out edx_413)
	edxOut = edx_413
	return eax_411
fn0073E390_exit:


word32 fn0073E590(word32 eax, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073E7A0
// MayUse:  eax:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn0073E590_entry:
l0073E590:
	word32 edx_171
	word32 eax_16 = Mem13[eax + 0x14<32>:word32]
	branch Mem13[eax_16:word16] != 0xF<16> l0073E63F
l0073E5A7:
	branch Mem20[eax + 0x10<32>:word32] != 2<32> l0073E63F
l0073E5B1:
	branch Mem20[eax_16 + 0x18<32>:word16] != 0x13B<16> l0073E63F
l0073E5BD:
	branch Mem20[eax_16 + 0x28<32>:word32] != 1<32> l0073E63F
l0073E5C7:
	word32 ecx_29 = Mem20[eax_16 + 0x2C<32>:word32]
	branch Mem20[ecx_29:word16] != 0x13C<16> l0073E63F
l0073E5D1:
	branch Mem20[ecx_29 + 0x10<32>:word32] != 1<32> l0073E63F
l0073E5D6:
	word32 ebx_34 = Mem20[ecx_29 + 0x14<32>:word32]
	branch Mem20[ebx_34:word16] != 0x13D<16> l0073E63F
l0073E5E0:
	word32 edi_37 = Mem20[ebx_34 + 0x14<32>:word32]
	branch Mem20[edi_37:word16] != 2<16> l0073E63F
l0073E63F:
	branch fn0073E7A0(eax_16 + 0x18<32>, out edx_171) == 0<32> l0073E67C
l0073E650:
	word32 edx_64 = CONVERT(Mem48[Mem48[eax + 0x14<32>:word32]:word16], word16, int32)
	branch edx_64 == 0xE<32> l0073E6BB
l0073E6BB:
	word32 edx_84
	word32 eax_83 = fn00743880(3<32>, dwArg04, Mem72[eax + 8<32>:word32], Mem48[eax + 0xC<32>:word32], out edx_84)
	edxOut = edx_84
	return eax_83
l0073E65D:
	branch edx_64 == 0xF<32> l0073E69F
l0073E69F:
	word32 edx_116
	word32 eax_115 = fn00743880(4<32>, dwArg04, Mem104[eax + 8<32>:word32], Mem48[eax + 0xC<32>:word32], out edx_116)
	edxOut = edx_116
	return eax_115
l0073E662:
	branch edx_64 == 0x20<32> l0073E683
l0073E683:
	word32 edx_148
	word32 eax_147 = fn00743880(1<32>, dwArg04, Mem136[eax + 8<32>:word32], Mem48[eax + 0xC<32>:word32], out edx_148)
	edxOut = edx_148
	return eax_147
l0073E667:
	word32 ecx_371
	fn006E15D0(Mem163[0x00A18720<p32>:word32], dwArg04, out ecx_371, out edx_171)
l0073E5E9:
	word32 eax_177 = Mem20[edi_37 + 4<32>:word32]
	eax_179 = eax_177
l0073E5F0:
	word32 eax_179
	eax_179 = eax_372 + 1<32>
	eax_372 = eax_179
	branch Mem20[eax_372:byte] != 0<8> l0073E5F0
l0073E5F9:
	word32 ecx_368
	word32 eax_193 = fn00723860(eax_179 - (eax_177 + 1<32>) + 2<32>, out ecx_368, out edx_171)
	branch eax_193 == 0<32> l0073E67C
l0073E67C:
	edxOut = edx_171
	return 0<32>
l0073E60D:
	Mem218[eax_193:byte] = 0x2D<8>
	word32 ecx_220 = Mem218[edi_37 + 4<32>:word32]
	word32 edx_221 = eax_193 + 1<32>
l0073E616:
	byte al_224 = Mem223[ecx_220:byte]
	Mem226[edx_221:byte] = al_224
	ecx_220 = ecx_220 + 1<32>
	edx_221 = edx_221 + 1<32>
	branch al_224 != 0<8> l0073E616
l0073E624:
	word32 edx_370
	word32 ecx_369
	fn007239C0(Mem226[edi_37 + 4<32>:word32], out ecx_369, out edx_370)
	Mem253[edi_37 + 4<32>:word32] = eax_193
	word32 edx_258
	word32 eax_257 = fn0073E050(dwArg04, ebx_34, out edx_258)
	edxOut = edx_258
	return eax_257
fn0073E590_exit:


word32 fn0073E6E0(word32 edi, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073E7A0
// MayUse:  edi:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ebp ebx ecx edx esi Top
// Preserved: esp
fn0073E6E0_entry:
l0073E6E0:
	word32 edx_18
	word32 eax_16 = fn0073E050(dwArg04, Mem0[edi + 0x14<32>:word32], out edx_18)
	word32 esi_124 = eax_16
	branch eax_16 != 0<32> l0073E6FA
l0073E6FA:
	word32 eax_26 = Mem14[edi + 0x10<32>:word32]
	branch eax_26 != 1<32> l0073E706
l0073E706:
	word32 edx_117
	word32 ebx_32 = 1<32>
	branch eax_26 <= 1<32> l0073E74C
l0073E711:
	word32 ebp_38 = 0x18<32>
l0073E716:
	branch Mem40[Mem40[edi + 0x14<32>:word32] + ebp_38:word16] != 0x141<16> l0073E74C
l0073E722:
	word32 eax_54 = fn0073E390(eax, dwArg04, out edx_117)
	branch eax_54 == 0<32> l0073E790
l0073E733:
	Mem64[eax_54 + 0x18<32>:word32] = Mem50[esi_124 + 0x18<32>:word32]
	Mem67[eax_54 + 0x1C<32>:word32] = Mem64[esi_124 + 0x1C<32>:word32]
	ebx_32 = ebx_32 + 1<32>
	ebp_38 = ebp_38 + 0x18<32>
	esi_124 = eax_54
	branch ebx_32 < Mem67[edi + 0x10<32>:word32] l0073E716
l0073E74C:
	word32 eax_74 = Mem73[edi + 0x10<32>:word32]
	edx_117 = eax_74 * 3<32>
	branch Mem73[Mem73[edi + 0x14<32>:word32] - 0x18<32> + eax_74 * 0x18<32>:word16] != 0x13B<16> l0073E798
l0073E762:
	word32 eax_90 = fn0073E7A0(dwArg04, out edx_117)
	branch eax_90 == 0<32> l0073E790
l0073E774:
	word32 eax_115 = fn007437D0(esi_124, dwArg04, eax_90, Mem102[edi + 8<32>:word32], Mem85[edi + 0xC<32>:word32], out edx_117)
	branch eax_115 != 0<32> l0073E796
l0073E796:
	esi_124 = eax_115
l0073E798:
	edxOut = edx_117
	return esi_124
l0073E790:
	edxOut = edx_117
	return 0<32>
l0073E702:
	edxOut = edx_18
	return eax_16
l0073E6F8:
	edxOut = edx_18
	return eax_16
fn0073E6E0_exit:


word32 fn0073E7A0(word32 dwArg08, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073C090
//      fn0073C370
//      fn0073C3E0
//      fn0073C520
//      fn0073C680
//      fn0073C790
//      fn0073C7D0
//      fn0073D050
//      fn0073D7A0
//      fn0073D9C0
//      fn0073DBD0
//      fn0073DF10
//      fn0073E050
//      fn0073E590
//      fn0073E6E0
//      fn0073E7A0
//      fn0073EB20
//      fn0073EB70
//      fn0073EE40
//      fn0073EF40
//      fn0073F160
//      fn0073F220
//      fn0073F2C0
//      fn0073F5B0
//      fn0073F690
//      fn0073F9D0
//      fn0073FA50
//      fn0073FC30
// MayUse:  Stack +0008:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn0073E7A0_entry:
l0073E7A0:
	word32 edx_186
	word32 eax_11 = CONVERT(Mem9[dwArg08:word16], word16, int32)
	word32 eax_15 = eax_11 - 0x12D<32>
	branch eax_11 >u 0x153<32> l0073EA08
l0073E7BA:
	word32 ebx_24 = dwArg08
l0073E7C0:
	switch (CONVERT(Mem22[eax_15 + 0x73EAF0<32>:byte], byte, word32)) { l0073E7CE l0073EA08 l0073E7CE l0073E7F2 l0073E7F2 l0073E89E l0073E8E1 l0073EA08 l0073E9D0 l0073E9D0 l0073E9D0 l0073E9D0 l0073E9D0 l0073E9D0 l0073E9EA l0073EAB6 l0073EA08 l0073EA08 l0073EA08 l0073EA08 l0073EA08 l0073EA08 l0073EA08 l0073EA08 l0073EA08 l0073EA08 l0073EA08 l0073EA08 l0073EA08 l0073EA08 l0073EA08 l0073EA08 l0073EA08 l0073EA08 l0073EA08 l0073EA08 l0073EA08 l0073EA08 l0073EA6B }
l0073EA6B:
	word32 eax_30 = 0<32>
	branch Mem22[ebx_24 + 0x10<32>:word32] != 2<32> l0073EA86
l0073EA77:
	eax_30 = fn0073C790(Mem22[ebx_24 + 0x14<32>:word32] + 0x18<32>, out edx_186)
	branch eax_30 == 0<32> l0073EA20
l0073EA86:
	word32 edx_72
	word32 eax_71 = fn00743B30(eax_30, Mem57[ebx_24 + 8<32>:word32], dwArg08, out edx_72)
	edxOut = edx_72
	return eax_71
l0073EAB6:
	word32 edx_95
	word32 eax_94 = fn0073E6E0(ebx_24, out edx_95)
	edxOut = edx_95
	return eax_94
l0073E9EA:
	branch Mem22[ebx_24 + 0x10<32>:word32] != 1<32> l0073EAA1
l0073EAA1:
	word32 edx_119
	word32 eax_118 = fn0073E590(ebx_24, out edx_119)
	edxOut = edx_119
	return eax_118
l0073E9D0:
	branch Mem22[ebx_24 + 0x10<32>:word32] == 1<32> l0073E9F4
l0073E9D6:
	word32 edx_152
	word32 eax_151 = fn0073C680(dwArg04, ebx_24, out edx_152)
	edxOut = edx_152
	return eax_151
l0073E8E1:
	word32 esi_167 = 1<32>
	branch Mem22[ebx_24 + 0x10<32>:word32] == 1<32> l0073E9F4
l0073E8EF:
	int64 edx_eax_175 = CONVERT(Mem22[ebx_24 + 0x10<32>:word32], word32, int64)
	branch fn00752E30(SLICE(edx_eax_175, word32, 0) - SLICE(edx_eax_175, word32, 32) >> 1<32>, out edx_186) == 0<32> l0073EA20
l0073E914:
	int64 edx_eax_198 = CONVERT(Mem196[ebx_24 + 0x10<32>:word32], word32, int64)
	word32 eax_208 = fn00752E30(SLICE(edx_eax_198, word32, 0) - SLICE(edx_eax_198, word32, 32) >> 1<32>, out edx_186)
	branch eax_208 == 0<32> l0073EA20
l0073E937:
	branch Mem216[ebx_24 + 0x10<32>:word32] <= 1<32> l0073E99E
l0073E93C:
	word32 edi_220 = 0x18<32>
l0073E941:
	word32 eax_234 = fn0073BF20(Mem222[ebx_24 + 0x14<32>:word32] + edi_220, out edx_186)
	branch eax_234 == 0<32> l0073EA20
l0073E955:
	word32 eax_251 = fn0073E7A0(edi_220 + 0x18<32> + Mem222[ebx_24 + 0x14<32>:word32], out edx_186)
	branch eax_251 == 0<32> l0073EA20
l0073E974:
	int64 edx_eax_261 = CONVERT(esi_167, word32, int64)
	word32 eax_267 = (SLICE(edx_eax_261, word32, 0) - SLICE(edx_eax_261, word32, 32) >> 1<32>) * 2<32>
	Mem269[eax_267 * 2<32> + 4<32> + dwArg08:word32] = eax_234
	Mem272[eax_267 * 2<32> + 4<32> + eax_208:word32] = eax_251
	esi_167 = esi_167 + 2<32>
	edi_220 = edi_220 + 0x30<32>
	branch esi_167 < Mem272[ebx_24 + 0x10<32>:word32] l0073E941
l0073E99A:
l0073E99E:
	word32 eax_292 = fn0073E7A0(Mem278[ebx_24 + 0x14<32>:word32], out edx_186)
	branch eax_292 == 0<32> l0073EA20
l0073E9AF:
	word32 edx_319
	word32 eax_318 = fn00743B70(eax_292, dwArg08, dwArg08, Mem303[ebx_24 + 8<32>:word32], Mem285[ebx_24 + 0xC<32>:word32], out edx_319)
	edxOut = edx_319
	return eax_318
l0073E89E:
	branch Mem22[ebx_24 + 0x10<32>:word32] == 1<32> l0073E9F4
l0073E8A8:
	word32 eax_346 = fn0073E7A0(Mem22[ebx_24 + 0x14<32>:word32] + 0x18<32>, out edx_186)
	branch eax_346 == 0<32> l0073EA20
l0073E8C4:
	word32 edx_370
	word32 eax_369 = fn00743880(2<32>, eax_346, dwArg08, Mem343[ebx_24 + 0xC<32>:word32], out edx_370)
	edxOut = edx_370
	return eax_369
l0073E7CE:
	word32 ecx_387 = Mem22[ebx_24 + 0x14<32>:word32]
	word16 ax_389 = Mem22[ecx_387:word16]
	branch ax_389 == 0x140<16> l0073EA39
l0073E7DE:
	branch ax_389 == 0x12E<16> l0073EA39
l0073EA39:
	word32 edx_408
	word32 eax_407 = fn0073C370(ecx_387, out edx_408)
	edxOut = edx_408
	return eax_407
l0073E7E8:
	branch Mem22[ebx_24 + 0x10<32>:word32] > 1<32> l0073EA28
l0073EA28:
	word32 edx_428
	word32 eax_427 = fn0073C3E0(ebx_24, out edx_428)
	edxOut = edx_428
	return eax_427
l0073E7F2:
	branch Mem22[ebx_24 + 0x10<32>:word32] == 1<32> l0073E9F4
l0073E9F4:
	ebx_24 = Mem22[ebx_24 + 0x14<32>:word32]
	word32 eax_448 = CONVERT(Mem22[ebx_24:word16], word16, int32)
	eax_15 = eax_448 - 0x12D<32>
	branch eax_448 <=u 0x153<32> l0073E7C0
l0073EA08:
	word32 ecx_932
	fn006E15D0(Mem22[0x00A18720<p32>:word32], 0x8DCBC4<32>, out ecx_932, out edx_186)
l0073E7FC:
	int64 edx_eax_493 = CONVERT(Mem490[ebx_24 + 0x10<32>:word32] + 1<32>, word32, int64)
	word32 eax_504 = fn00752E30(SLICE(edx_eax_493, word32, 0) - SLICE(edx_eax_493, word32, 32) >> 1<32>, out edx_186)
	branch eax_504 == 0<32> l0073EA20
l0073E822:
	word32 esi_513 = 0<32>
	branch Mem500[ebx_24 + 0x10<32>:word32] <= 0<32> l0073E863
l0073E829:
	word32 edi_516 = 0<32>
l0073E830:
	word32 eax_536 = fn0073E7A0(Mem520[ebx_24 + 0x14<32>:word32] + edi_516, out edx_186)
	branch eax_536 == 0<32> l0073EA20
l0073EA20:
	edxOut = edx_186
	return 0<32>
l0073E84D:
	int64 edx_eax_561 = CONVERT(esi_513, word32, int64)
	Mem567[eax_504 + 4<32> + (SLICE(edx_eax_561, word32, 0) - SLICE(edx_eax_561, word32, 32) >> 1<32>) * 4<32>:word32] = eax_536
	esi_513 = esi_513 + 2<32>
	edi_516 = edi_516 + 0x30<32>
	branch esi_513 < Mem567[ebx_24 + 0x10<32>:word32] l0073E830
l0073E863:
	word32 esi_574 = Mem572[Mem572[ebx_24 + 0x14<32>:word32] + 0x1C<32>:word32]
	word32 edi_575 = 0x8DBB78<32>
	word32 ecx_576 = 4<32>
	bool v19_671 = false
l0073E875:
	branch ecx_576 == 0<32> l0073E877
l0073E875_1:
	v19_671 = Mem572[esi_933:byte] != Mem572[edi_934:byte]
	esi_574 = esi_933 + 1<i32>
	edi_575 = edi_934 + 1<i32>
	ecx_576 = ecx_576 - 1<32>
	esi_933 = esi_574
	edi_934 = edi_575
	branch Mem572[esi_933:byte] != Mem572[edi_934:byte] l0073E875
l0073E877:
	branch v19_671 l0073EA4A
l0073EA4A:
	word32 edx_623
	word32 eax_622 = fn00743770(2<32>, eax_504, dwArg08, Mem572[ebx_24 + 0xC<32>:word32], out edx_623)
	edxOut = edx_623
	return eax_622
l0073E87D:
	word32 edx_655
	word32 eax_654 = fn00743770(1<32>, eax_504, dwArg08, Mem572[ebx_24 + 0xC<32>:word32], out edx_655)
	edxOut = edx_655
	return eax_654
fn0073E7A0_exit:


word32 fn0073EB20(word32 eax, word32 ebx, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073FAF0
// MayUse:  eax:[0..31] ebx:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ecx edi esi Top
// Preserved: esp
fn0073EB20_entry:
l0073EB20:
	branch Mem6[eax + 0x10<32>:word32] != 1<32> l0073EB5C
l0073EB5C:
	word32 edx_107
	word32 eax_15 = fn0073C090(eax, ebx, out edx_107)
	edxOut = <invalid>
	return eax_15
l0073EB29:
	word32 edx_108
	word32 eax_32 = fn00752E30(1<32>, out edx_108)
	branch eax_32 == 0<32> l0073EB4F
l0073EB3E:
	word32 edx_109
	word32 eax_47 = fn0073E7A0(Mem30[eax + 0x14<32>:word32], out edx_109)
	branch eax_47 != 0<32> l0073EB54
l0073EB54:
	Mem55[eax_32 + 4<32>:word32] = eax_47
	edxOut = <invalid>
	return eax_32
l0073EB4F:
	edxOut = <invalid>
	return 0<32>
fn0073EB20_exit:


word32 fn0073EB70(word32 ebx, word32 dwArg04, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00740160
// MayUse:  ebx:[0..31] Stack +0004:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ebp ecx edi edx esi Top
// Preserved: esp
fn0073EB70_entry:
l0073EB70:
	word32 eax_8 = Mem6[ebx + 0x10<32>:word32]
	word32 edi_16 = Mem15[ebx + 0x14<32>:word32]
	branch eax_8 != 1<32> l0073EBE5
l0073EBE5:
	word32 edx_108
	branch Mem15[edi_16 + 0x18<32>:word16] != 0x10E<16> l0073ED06
l0073ED06:
	int64 edx_eax_28 = CONVERT(eax_8, word32, int64)
	word32 eax_38 = fn00752E30(SLICE(edx_eax_28, word32, 0) - SLICE(edx_eax_28, word32, 32) >> 1<32>, out edx_108)
	branch eax_38 == 0<32> l0073EDE7
l0073ED24:
	word32 edi_153 = 0<32>
	branch Mem45[ebx + 0x10<32>:word32] <= 2<32> l0073ED89
l0073ED30:
	word32 ebp_155 = 0<32>
l0073ED32:
	branch Mem56[Mem56[ebx + 0x14<32>:word32] + ebp_155:word16] == 0x153<16> l0073EDAA
l0073EDAA:
	word32 esi_779
	word32 eax_75 = fn006EA200(out edx_108, out esi_779)
	branch eax_75 == 0<32> l0073EDE7
l0073EDC6:
	word32 ecx_780
	fn006E0E90(Mem69[0x00A178F4<p32>:word32], eax_75, out ecx_780, out edx_108)
	word32 v17_97 = Mem88[eax_75:word32] + 0xFFFFFFFF<32>
	Mem98[eax_75:word32] = v17_97
	branch v17_97 != 0<32> l0073EDE7
l0073EDDB:
	word32 eax_101 = Mem98[eax_75 + 4<32>:word32]
	word32 ecx_102 = Mem98[eax_101 + 0x18<32>:word32]
	call ecx_102 (retsize: 4;)
		uses: eax:eax_101,ecx:ecx_102,Stack +0004:eax_75,Stack +0008:dwArg04,Stack +001C:dwArg04
		defs: edx:edx_108
l0073ED3E:
	word32 eax_116 = fn0073C790(eax, out edx_108)
	branch eax_116 == 0<32> l0073EDE7
l0073ED4D:
	branch fn0073BBE0(ebx, ebp_155, eax_116, edi_153, es, ds, eax_116, dwArg04, out edx_108) == 0<32> l0073EDE7
l0073ED66:
	int64 edx_eax_144 = CONVERT(edi_153, word32, int64)
	Mem150[eax_38 + 4<32> + (SLICE(edx_eax_144, word32, 0) - SLICE(edx_eax_144, word32, 32) >> 1<32>) * 4<32>:word32] = eax_116
	edi_153 = edi_153 + 2<32>
	ebp_155 = ebp_155 + 0x30<32>
	branch edi_153 < Mem150[ebx + 0x10<32>:word32] - 2<32> l0073ED32
l0073ED89:
	word32 eax_178
	branch Mem159[Mem159[ebx + 0x14<32>:word32] - 0x18<32> + Mem159[ebx + 0x10<32>:word32] * 0x18<32>:word16] != 0x146<16> l0073EDEE
l0073EDEE:
	eax_178 = fn0073E7A0(dwArg04, out edx_108)
l0073ED9F:
	eax_178 = fn0073C790(eax, out edx_108)
l0073EDF8:
	branch eax_178 == 0<32> l0073EDE7
l0073EDFC:
	word32 edx_219
	word32 eax_218 = fn007430A0(eax_38, dwArg04, Mem202[ebx + 8<32>:word32], Mem196[ebx + 0xC<32>:word32], out edx_219)
	edxOut = edx_219
	return eax_218
l0073EBFA:
	word32 eax_235 = fn0073C790(edi_16, out edx_108)
	branch eax_235 == 0<32> l0073EDE7
l0073EC0B:
	word32 eax_243 = Mem23[eax_235:word32]
	branch eax_243 >u 0x11<32> l0073ECF3
l0073EC1A:
	switch (CONVERT(Mem23[eax_243 + 0x73EE28<32>:byte], byte, word32)) { l0073EC28 l0073EC3B l0073ECF3 l0073ECF3 l0073ECF3 l0073ECF3 l0073ECF3 l0073EC88 l0073EC88 l0073EC4E }
l0073EC4E:
	word32 eax_248 = Mem23[eax_235 + 4<32>:word32]
	branch Mem23[eax_248 + 0x14<32>:byte] != 0x4E<8> l0073EC88
l0073EC59:
	word32 edi_252 = 0x8ABDD0<32>
	word32 esi_253 = eax_248 + 0x14<32>
	word32 ecx_254 = 5<32>
	bool v21_579 = false
l0073EC67:
	branch ecx_254 == 0<32> l0073EC69
l0073EC67_1:
	v21_579 = Mem23[esi_781:byte] != Mem23[edi_782:byte]
	esi_253 = esi_781 + 1<i32>
	edi_252 = edi_782 + 1<i32>
	ecx_254 = ecx_254 - 1<32>
	esi_781 = esi_253
	edi_782 = edi_252
	branch Mem23[esi_781:byte] != Mem23[edi_782:byte] l0073EC67
l0073EC69:
	branch v21_579 l0073EC80
l0073EC80:
l0073EC6B:
	word32 edx_289
	fn0073B830(out edx_289)
	edxOut = edx_289
	return 0<32>
l0073EC88:
	branch fn0073BBE0(ebx, eax_235, dwArg04, edi_16, es, ds, eax_235, dwArg04, out edx_108) == 0<32> l0073EDE7
l0073EC9C:
	word32 eax_336
	branch Mem311[Mem311[ebx + 0x14<32>:word32] + 0x30<32>:word16] != 0x146<16> l0073ECB0
l0073ECB0:
	eax_336 = fn0073E7A0(dwArg04, out edx_108)
l0073ECA9:
	eax_336 = fn0073C790(eax, out edx_108)
l0073ECBA:
	branch eax_336 == 0<32> l0073EDE7
l0073ECC4:
	branch fn0073BE10(Mem354[ebx + 0x14<32>:word32] + 0x18<32>, out edx_108) == 0<32> l0073EDE7
l0073EDE7:
	edxOut = edx_108
	return 0<32>
l0073ECD7:
	word32 edx_403
	word32 eax_402 = fn00743100(eax_235, dwArg04, eax_336, Mem388[ebx + 8<32>:word32], Mem354[ebx + 0xC<32>:word32], out edx_403)
	edxOut = edx_403
	return eax_402
l0073ECF3:
	word32 edx_428
	fn0073B830(out edx_428)
	edxOut = edx_428
	return 0<32>
l0073EC3B:
	word32 edx_448
	fn0073B830(out edx_448)
	edxOut = edx_448
	return 0<32>
l0073EC28:
	word32 edx_467
	fn0073B830(out edx_467)
	edxOut = edx_467
	return 0<32>
l0073EB7E:
	word32 eax_511
	word32 edx_489
	branch Mem15[edi_16 + 0x10<32>:word32] != eax_8 l0073EB96
l0073EB96:
	word32 eax_488 = fn0073C090(edi_16, dwArg04, out edx_489)
	branch eax_488 == 0<32> l0073EBC2
l0073EBA7:
	eax_511 = fn00743FC0(eax_488, dwArg04, Mem499[edi_16 + 8<32>:word32], Mem485[edi_16 + 0xC<32>:word32], out edx_489)
l0073EB83:
	eax_511 = fn0073E7A0(Mem15[edi_16 + 0x14<32>:word32], out edx_489)
l0073EBBE:
	branch eax_511 != 0<32> l0073EBC8
l0073EBC8:
	word32 edx_557
	word32 eax_556 = fn00743680(eax_511, dwArg04, Mem536[ebx + 0xC<32>:word32], out edx_557)
	edxOut = edx_557
	return eax_556
l0073EBC2:
	edxOut = edx_489
	return 0<32>
fn0073EB70_exit:


word32 fn0073EE40(word32 esi, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00740160
// MayUse:  esi:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ebp ebx ecx edi edx Top
// Preserved: esp
fn0073EE40_entry:
l0073EE40:
	word32 edx_202
	word32 dwLoc08_182 = 0<32>
	word32 edi_12 = 1<32>
	branch Mem0[esi + 0x10<32>:word32] < 2<32> l0073EE86
l0073EE57:
	word32 eax_14 = Mem11[esi + 0x14<32>:word32]
	branch Mem11[eax_14 + 0x18<32>:word16] != 0x23<16> l0073EE86
l0073EE61:
	word32 eax_25 = fn0073E7A0(eax_14 + 0x30<32>, out edx_202)
	dwLoc08_182 = eax_25
	branch eax_25 != 0<32> l0073EE81
l0073EE81:
	edi_12 = 4<32>
l0073EE86:
	int64 edx_eax_47 = CONVERT(Mem37[esi + 0x10<32>:word32] - edi_12 + 1<32>, word32, int64)
	word32 eax_57 = fn00752E30(SLICE(edx_eax_47, word32, 0) - SLICE(edx_eax_47, word32, 32) >> 1<32>, out edx_202)
	branch eax_57 == 0<32> l0073EE7A
l0073EEAC:
	word32 ebp_119 = edi_12
	branch edi_12 >= Mem65[esi + 0x10<32>:word32] l0073EEEC
l0073EEB5:
	word32 ebx_121 = eax_57 + 4<32>
l0073EEC1:
	word32 edx_102
	word32 eax_100 = fn0073E7A0(dwArg04, out edx_102)
	branch eax_100 == 0<32> l0073EF28
l0073EF28:
	edxOut = edx_102
	return 0<32>
l0073EED8:
	Mem118[ebx_121:word32] = eax_100
	ebp_119 = ebp_119 + 2<32>
	ebx_121 = ebx_121 + 4<32>
	branch ebp_119 < Mem118[esi + 0x10<32>:word32] l0073EEC1
l0073EEE8:
l0073EEEC:
	word32 edx_162
	word32 eax_160 = fn007431B0(dwLoc08_182, dwArg04, CONVERT(CONVERT(Mem126[Mem126[esi + 0x14<32>:word32] - 0x18<32> + Mem126[esi + 0x10<32>:word32] * 0x18<32>:word16] != 0xC<16>, bool, int8), int8, uint32), Mem141[esi + 8<32>:word32], Mem136[esi + 0xC<32>:word32], out edx_162)
	edxOut = edx_162
	return eax_160
l0073EE7A:
	edxOut = edx_202
	return 0<32>
fn0073EE40_exit:


word32 fn0073EF40(word32 edi, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00740160
// MayUse:  edi:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ebp ebx ecx edx esi Top
// Preserved: esp
fn0073EF40_entry:
l0073EF40:
	word32 edx_102
	word32 ebx_11 = Mem9[edi + 0x14<32>:word32]
	word32 ecx_12 = CONVERT(Mem9[ebx_11:word16], word16, int32)
	branch ecx_12 >u 0x117<32> l0073F12E
l0073EF5B:
	switch (ecx_12 - 0x113<32>) { l0073EF62 l0073EF7B l0073EFC3 l0073EF94 l0073F011 }
l0073F011:
	word32 eax_24 = Mem18[ebx_11 + 0x10<32>:word32]
	branch eax_24 != 1<32> l0073F038
l0073F038:
	branch eax_24 != 2<32> l0073F073
l0073F073:
	branch eax_24 != 4<32> l0073F0C7
l0073F0C7:
	branch eax_24 != 6<32> l0073F12E
l0073F12E:
	word32 ecx_621
	fn006E15D0(Mem36[0x00A18720<p32>:word32], 0x8DCCA4<32>, out ecx_621, out edx_102)
l0073F0CC:
	word32 eax_65 = fn0073E7A0(Mem18[ebx_11 + 0x14<32>:word32] + 0x18<32>, out edx_102)
	branch eax_65 == 0<32> l0073F143
l0073F0E4:
	word32 eax_83 = fn0073E7A0(Mem72[ebx_11 + 0x14<32>:word32] + 0x48<32>, out edx_102)
	branch eax_83 == 0<32> l0073F143
l0073F0FA:
	word32 eax_101 = fn0073E7A0(Mem80[ebx_11 + 0x14<32>:word32] + 0x78<32>, out edx_102)
	branch eax_101 == 0<32> l0073F143
l0073F10E:
	word32 edx_128
	word32 eax_127 = fn007433E0(eax_65, eax_83, eax_101, Mem112[edi + 8<32>:word32], Mem98[edi + 0xC<32>:word32], out edx_128)
	edxOut = edx_128
	return eax_127
l0073F078:
	word32 eax_150 = fn0073E7A0(Mem18[ebx_11 + 0x14<32>:word32] + 0x18<32>, out edx_102)
	branch eax_150 == 0<32> l0073F143
l0073F092:
	word32 eax_168 = fn0073E7A0(Mem147[ebx_11 + 0x14<32>:word32] + 0x48<32>, out edx_102)
	branch eax_168 == 0<32> l0073F143
l0073F0AA:
	word32 edx_194
	word32 eax_193 = fn007433E0(eax_150, eax_168, 0<32>, Mem179[edi + 8<32>:word32], Mem165[edi + 0xC<32>:word32], out edx_194)
	edxOut = edx_194
	return eax_193
l0073F03D:
	word32 eax_216 = fn0073E7A0(Mem18[ebx_11 + 0x14<32>:word32] + 0x18<32>, out edx_102)
	branch eax_216 == 0<32> l0073F143
l0073F055:
	word32 edx_242
	word32 eax_241 = fn007433E0(eax_216, 0<32>, 0<32>, Mem227[edi + 8<32>:word32], Mem213[edi + 0xC<32>:word32], out edx_242)
	edxOut = edx_242
	return eax_241
l0073F019:
	word32 edx_273
	word32 eax_272 = fn007433E0(0<32>, 0<32>, 0<32>, Mem18[edi + 8<32>:word32], Mem18[edi + 0xC<32>:word32], out edx_273)
	edxOut = edx_273
	return eax_272
l0073EF94:
	word32 eax_293 = fn0073E7A0(Mem18[ebx_11 + 0x14<32>:word32], out edx_102)
	branch eax_293 == 0<32> l0073F143
l0073EFA9:
	word32 edx_315
	word32 eax_314 = fn00743680(eax_293, Mem304[edi + 8<32>:word32], Mem290[edi + 0xC<32>:word32], out edx_315)
	edxOut = edx_315
	return eax_314
l0073EFC3:
	branch Mem18[ebx_11 + 0x10<32>:word32] != 1<32> l0073EFE4
l0073EFE4:
	word32 eax_335 = fn0073C790(Mem18[ebx_11 + 0x14<32>:word32] + 0x18<32>, out edx_102)
	branch eax_335 == 0<32> l0073F143
l0073F143:
	edxOut = edx_102
	return 0<32>
l0073EFF7:
	word32 edx_369
	word32 eax_368 = fn00743020(eax_335, Mem358[edi + 8<32>:word32], Mem18[edi + 0xC<32>:word32], out edx_369)
	edxOut = edx_369
	return eax_368
l0073EFC9:
	word32 edx_396
	word32 eax_395 = fn00743020(0<32>, Mem18[edi + 8<32>:word32], Mem18[edi + 0xC<32>:word32], out edx_396)
	edxOut = edx_396
	return eax_395
l0073EF7B:
	word32 edx_421
	word32 eax_420 = fn00743740(Mem18[edi + 8<32>:word32], Mem18[edi + 0xC<32>:word32], out edx_421)
	edxOut = edx_421
	return eax_420
l0073EF62:
	word32 edx_446
	word32 eax_445 = fn00743710(Mem18[edi + 8<32>:word32], Mem18[edi + 0xC<32>:word32], out edx_446)
	edxOut = edx_446
	return eax_445
fn0073EF40_exit:


word32 fn0073F160(word32 esi, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00740160
// MayUse:  esi:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ebp ebx ecx edi edx Top
// Preserved: esp
fn0073F160_entry:
l0073F160:
	word32 edx_152
	word32 edi_17 = Mem15[esi + 0x10<32>:word32]
	word32 ebx_117 = 0<32>
	branch edi_17 == 2<32> l0073F195
l0073F170:
	branch edi_17 == 4<32> l0073F195
l0073F175:
	branch edi_17 == 6<32> l0073F195
l0073F195:
	word32 eax_43 = fn0073E7A0(Mem15[esi + 0x14<32>:word32] + 0x18<32>, out edx_152)
	branch eax_43 == 0<32> l0073F18E
l0073F1B1:
	branch edi_17 < 4<32> l0073F1D0
l0073F1B6:
	branch fn0073E7A0(dwArg04, out edx_152) == 0<32> l0073F18E
l0073F1D0:
	branch edi_17 != 6<32> l0073F1EF
l0073F1D5:
	word32 eax_93 = fn0073E7A0(dwArg04, out edx_152)
	ebx_117 = eax_93
	branch eax_93 == 0<32> l0073F18E
l0073F1EF:
	word32 edx_129
	word32 eax_128 = fn007435D0(eax_43, dwArg04, ebx_117, Mem103[esi + 8<32>:word32], Mem103[esi + 0xC<32>:word32], out edx_129)
	edxOut = edx_129
	return eax_128
l0073F17A:
	word32 ecx_241
	fn006E15D0(Mem15[0x00A18720<p32>:word32], 0x8DCCC0<32>, out ecx_241, out edx_152)
l0073F18E:
	edxOut = edx_152
	return 0<32>
fn0073F160_exit:


word32 fn0073F220(word32 esi, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00740160
// MayUse:  esi:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ebx ecx edx Top
// Preserved: esp
fn0073F220_entry:
l0073F220:
	word32 edx_105
	word32 eax_6 = Mem0[esi + 0x10<32>:word32]
	branch eax_6 != 2<32> l0073F254
l0073F254:
	branch eax_6 != 4<32> l0073F2A0
l0073F2A0:
	word32 ecx_202
	fn006E15D0(Mem0[0x00A18720<p32>:word32], 0x8DCCF8<32>, out ecx_202, out edx_105)
l0073F259:
	word32 edx_154
	word32 eax_38 = fn0073E7A0(Mem0[esi + 0x14<32>:word32] + 0x18<32>, out edx_154)
	branch eax_38 == 0<32> l0073F284
l0073F270:
	word32 eax_56 = fn0073E7A0(Mem36[esi + 0x14<32>:word32] + 0x48<32>, out edx_154)
	branch eax_56 != 0<32> l0073F288
l0073F288:
	word32 edx_81
	word32 eax_79 = fn007434C0(eax_38, eax_56, Mem68[esi + 8<32>:word32], Mem54[esi + 0xC<32>:word32], out edx_81)
	edxOut = edx_81
	return eax_79
l0073F284:
	edxOut = edx_154
	return 0<32>
l0073F228:
	word32 eax_103 = fn0073E7A0(Mem0[esi + 0x14<32>:word32] + 0x18<32>, out edx_105)
	branch eax_103 == 0<32> l0073F2B5
l0073F2B5:
	edxOut = edx_105
	return 0<32>
l0073F23C:
	word32 edx_131
	word32 eax_129 = fn007434C0(eax_103, 0<32>, Mem118[esi + 8<32>:word32], Mem101[esi + 0xC<32>:word32], out edx_131)
	edxOut = edx_131
	return eax_129
fn0073F220_exit:


word32 fn0073F2C0(word32 esi, word32 edi, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00740160
// MayUse:  edi:[0..31] esi:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ebp ebx ecx edx Top
// Preserved: esp
fn0073F2C0_entry:
l0073F2C0:
	word32 eax_6 = Mem0[esi + 0x10<32>:word32]
	branch eax_6 != 4<32> l0073F31A
l0073F31A:
	word32 edx_119
	word32 ecx_13 = Mem11[esi + 0x14<32>:word32]
	word32 ebx_14 = Mem11[ecx_13 + 0x64<32>:word32]
	byte dl_15 = Mem11[ebx_14 + 2<32>:byte]
	branch dl_15 != 0x73<8> l0073F392
l0073F392:
	branch dl_15 != 0x69<8> l0073F58B
l0073F58B:
	word32 ecx_682
	fn006E15D0(Mem19[0x00A18720<p32>:word32], 0x8DCD2C<32>, out ecx_682, out edx_119)
l0073F39B:
	word32 edx_39 = eax_6 + 0xFFFFFFFC<32> + (eax_6 + 0xFFFFFFFC<32>) * 2<32>
	word32 eax_38 = eax_6 + 0xFFFFFFFC<32>
	word32 ebp_40 = 0<32>
	word32 ecx_42 = ecx_13 + edx_39 * 8<32>
	word32 dwLoc10_515 = 0<32>
	branch Mem19[ecx_13 + 0x18<32> + edx_39 * 8<32>:word16] != 1<16> l0073F3C3
l0073F3B2:
	branch Mem43[Mem43[ecx_42 + 0x1C<32>:word32] + 2<32>:byte] != 0x73<8> l0073F3C3
l0073F3BB:
	ebp_40 = 1<32>
	eax_38 = eax_6 + 0xFFFFFFF9<32>
l0073F3C3:
	int64 edx_eax_52 = CONVERT(eax_38, word32, int64)
	word32 eax_56 = SLICE(edx_eax_52, word32, 0) + (SLICE(edx_eax_52, word32, 32) & 3<32>)
	word32 ebx_173 = eax_56 >> 2<32>
	word32 dwLoc04_516 = eax_56 >> 2<32>
	branch ebp_40 == 0<32> l0073F496
l0073F3DA:
	word32 eax_75 = fn00752E30(1<32>, out edx_119)
	dwLoc10_515 = eax_75
	branch eax_75 == 0<32> l0073F59F
l0073F3F4:
	word32 eax_85 = Mem83[esi + 0x10<32>:word32]
	word32 eax_96 = fn0073E7A0(Mem83[esi + 0x14<32>:word32] + ((eax_85 - 6<32>) + (eax_85 - 6<32>) * 2<32>) * 8<32>, out edx_119)
	branch eax_96 == 0<32> l0073F59F
l0073F419:
	word32 eax_106 = Mem104[esi + 0x10<32>:word32]
	word32 edx_111 = Mem104[esi + 0x14<32>:word32] + ((eax_106 - 4<32>) + (eax_106 - 4<32>) * 2<32>) * 8<32>
	word32 eax_117 = fn0073CEC0(edx_111, eax_56 >> 2<32>, edi, es, ds, edi, edx_111, out edx_119)
	branch eax_117 == 0<32> l0073F59F
l0073F43C:
	word32 edx_130 = Mem115[esi + 0x14<32>:word32] - 0x18<32> + Mem115[esi + 0x10<32>:word32] * 0x18<32>
	word32 eax_136 = fn0073CEC0(edx_130, eax_56 >> 2<32>, edi, es, ds, edi, edx_130, out edx_119)
	branch eax_136 == 0<32> l0073F59F
l0073F45B:
	word32 ecx_148 = Mem134[esi + 0x14<32>:word32] + Mem134[esi + 0x10<32>:word32] * 0x18<32>
	word32 edx_683
	Mem175[eax_75 + 4<32>:word32] = fn00743300(eax_96, eax_117, eax_136, Mem151[ecx_148 - 0x88<32>:word32], Mem151[ecx_148 - 0x84<32>:word32], out edx_683)
	ebx_173 = (eax_56 >> 2<32>) - 1<32>
	dwLoc04_516 = ebx_173
l0073F496:
	word32 dwLoc08_588 = 1<32>
	branch ebx_173 <= 0<32> l0073F540
l0073F4A6:
	word32 ebx_184 = ebx_173 * 0x60<32> + 0x18<32>
l0073F4B0:
	word32 eax_199 = fn00752E30(1<32>, out edx_119)
	branch eax_199 == 0<32> l0073F59F
l0073F4C8:
	word32 eax_217 = fn0073E7A0(Mem193[esi + 0x14<32>:word32] + ebx_184, out edx_119)
	branch eax_217 == 0<32> l0073F59F
l0073F4E3:
	word32 edx_228 = ebx_184 + 0x30<32> + Mem225[esi + 0x14<32>:word32]
	word32 eax_234 = fn0073CEC0(edx_228, ebx_184, edi, es, ds, edi, edx_228, out edx_119)
	branch eax_234 == 0<32> l0073F59F
l0073F4FC:
	word32 ecx_243 = Mem232[esi + 0x14<32>:word32]
	word32 edx_684
	Mem269[eax_199 + 4<32>:word32] = fn00743300(eax_217, eax_234, dwLoc10_515, Mem246[ecx_243 + ebx_184 + 8<32>:word32], Mem246[ecx_243 + 0xC<32> + ebx_184:word32], out edx_684)
	ebx_184 = ebx_184 - 0x60<32>
	dwLoc10_515 = eax_199
	dwLoc08_588 = dwLoc08_685 + 1<32>
	dwLoc08_685 = dwLoc08_588
	branch dwLoc08_685 + 0<32> < dwLoc04_516 l0073F4B0
l0073F540:
	word32 eax_297 = fn0073E7A0(Mem280[esi + 0x14<32>:word32] + 0x18<32>, out edx_119)
	branch eax_297 == 0<32> l0073F59F
l0073F556:
	word32 edx_307 = Mem290[esi + 0x14<32>:word32]
	word32 eax_315 = fn0073CEC0(edx_307 + 0x48<32>, eax_297, edi, es, ds, edi, edx_307 + 0x48<32>, out edx_119)
	branch eax_315 == 0<32> l0073F59F
l0073F56A:
	word32 edx_343
	word32 eax_341 = fn00743300(eax_297, eax_315, dwLoc10_515, Mem327[esi + 8<32>:word32], Mem313[esi + 0xC<32>:word32], out edx_343)
	edxOut = edx_343
	return eax_341
l0073F329:
	word32 eax_360 = fn0073E7A0(ecx_13 + 0x18<32>, out edx_119)
	branch eax_360 == 0<32> l0073F59F
l0073F340:
	word32 eax_378 = fn0073CEC0(edx, ebx_14, edi, es, ds, edi, Mem358[esi + 0x14<32>:word32] + 0x48<32>, out edx_119)
	branch eax_378 == 0<32> l0073F59F
l0073F35A:
	word32 eax_396 = fn0073CEC0(edx, eax_378, edi, es, ds, edi, Mem376[esi + 0x14<32>:word32] + 0x90<32>, out edx_119)
	branch eax_396 == 0<32> l0073F59F
l0073F59F:
	edxOut = edx_119
	return 0<32>
l0073F375:
	word32 edx_432
	word32 eax_430 = fn00743300(eax_360, eax_378, eax_396, Mem417[esi + 8<32>:word32], Mem394[esi + 0xC<32>:word32], out edx_432)
	edxOut = edx_432
	return eax_430
l0073F2CC:
	word32 edx_452
	word32 eax_450 = fn0073E7A0(Mem11[esi + 0x14<32>:word32] + 0x18<32>, out edx_452)
	branch eax_450 != 0<32> l0073F2E9
l0073F2E9:
	word32 eax_468 = fn0073CEC0(edx, eax_450, edi, es, ds, edi, Mem448[esi + 0x14<32>:word32] + 0x48<32>, out edx_452)
	branch eax_468 == 0<32> l0073F2E2
l0073F2FD:
	word32 edx_495
	word32 eax_493 = fn00743300(eax_450, eax_468, 0<32>, Mem480[esi + 8<32>:word32], Mem466[esi + 0xC<32>:word32], out edx_495)
	edxOut = edx_495
	return eax_493
l0073F2E2:
	edxOut = edx_452
	return 0<32>
fn0073F2C0_exit:


word32 fn0073F5B0(word32 esi, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00740160
// MayUse:  esi:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ebp ebx ecx edx Top
// Preserved: esp
fn0073F5B0_entry:
l0073F5B0:
	word32 edx_132
	word32 eax_6 = Mem0[esi + 0x10<32>:word32]
	branch eax_6 != 4<32> l0073F605
l0073F605:
	branch eax_6 != 7<32> l0073F66D
l0073F66D:
	word32 ecx_271
	fn006E15D0(Mem10[0x00A18720<p32>:word32], 0x8DCD54<32>, out ecx_271, out edx_132)
l0073F60A:
	word32 edx_209
	word32 eax_41 = fn0073E7A0(Mem10[esi + 0x14<32>:word32] + 0x18<32>, out edx_209)
	branch eax_41 == 0<32> l0073F64E
l0073F621:
	word32 eax_59 = fn0073CEC0(edx, ebx, edi, es, ds, edi, Mem39[esi + 0x14<32>:word32] + 0x48<32>, out edx_209)
	branch eax_59 == 0<32> l0073F64E
l0073F637:
	word32 edx_69 = Mem57[esi + 0x14<32>:word32]
	word32 eax_77 = fn0073CEC0(edx_69 + 0x90<32>, eax_59, edi, es, ds, edi, edx_69 + 0x90<32>, out edx_209)
	branch eax_77 != 0<32> l0073F653
l0073F653:
	word32 edx_104
	word32 eax_102 = fn00743290(eax_41, eax_59, eax_77, Mem89[esi + 8<32>:word32], Mem75[esi + 0xC<32>:word32], out edx_104)
	edxOut = edx_104
	return eax_102
l0073F64E:
	edxOut = edx_209
	return 0<32>
l0073F5B9:
	word32 eax_130 = fn0073E7A0(Mem10[esi + 0x14<32>:word32] + 0x18<32>, out edx_132)
	branch eax_130 == 0<32> l0073F682
l0073F5D3:
	word32 eax_148 = fn0073CEC0(edx, eax_130, edi, es, ds, edi, Mem128[esi + 0x14<32>:word32] + 0x48<32>, out edx_132)
	branch eax_148 == 0<32> l0073F682
l0073F682:
	edxOut = edx_132
	return 0<32>
l0073F5EB:
	word32 edx_182
	word32 eax_180 = fn00743290(eax_130, eax_148, 0<32>, Mem167[esi + 8<32>:word32], Mem146[esi + 0xC<32>:word32], out edx_182)
	edxOut = edx_182
	return eax_180
fn0073F5B0_exit:


word32 fn0073F690(word32 esi, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073F7B0
// MayUse:  esi:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ebp ebx ecx edx Top
// Preserved: esp
fn0073F690_entry:
l0073F690:
	word32 eax_6 = Mem0[esi + 0x10<32>:word32]
	branch eax_6 != 1<32> l0073F6C5
l0073F6C5:
	word32 edx_150
	branch eax_6 != 2<32> l0073F715
l0073F715:
	branch eax_6 != 4<32> l0073F78E
l0073F78E:
	word32 ecx_350
	fn006E15D0(Mem12[0x00A18720<p32>:word32], 0x8DCD88<32>, out ecx_350, out edx_150)
l0073F71A:
	word32 eax_40 = fn0073E7A0(Mem12[esi + 0x14<32>:word32] + 0x48<32>, out edx_150)
	branch eax_40 == 0<32> l0073F7A3
l0073F730:
	branch fn0073BBE0(eax_40, ebp, esi, edi, es, ds, eax_40, 2<32>, out edx_150) == 0<32> l0073F7A3
l0073F746:
	word32 edx_267
	word32 eax_80 = fn0073E7A0(Mem58[esi + 0x14<32>:word32] + 0x18<32>, out edx_267)
	branch eax_80 == 0<32> l0073F76F
l0073F75D:
	word32 eax_96 = fn0073CEC0(dwArg04, eax_40, edi, es, ds, edi, dwArg04, out edx_267)
	branch eax_96 != 0<32> l0073F774
l0073F774:
	word32 edx_122
	word32 eax_121 = fn00744180(eax_80, eax_40, eax_96, Mem108[esi + 8<32>:word32], Mem94[esi + 0xC<32>:word32], out edx_122)
	edxOut = edx_122
	return eax_121
l0073F76F:
	edxOut = edx_267
	return 0<32>
l0073F6CB:
	word32 eax_149 = fn0073E7A0(Mem12[esi + 0x14<32>:word32] + 0x18<32>, out edx_150)
	branch eax_149 == 0<32> l0073F7A3
l0073F6E5:
	word32 eax_165 = fn0073CEC0(edx, eax_149, edi, es, ds, edi, dwArg04, out edx_150)
	branch eax_165 == 0<32> l0073F7A3
l0073F7A3:
	edxOut = edx_150
	return 0<32>
l0073F6FB:
	word32 edx_198
	word32 eax_197 = fn00744180(eax_149, 0<32>, eax_165, Mem184[esi + 8<32>:word32], Mem163[esi + 0xC<32>:word32], out edx_198)
	edxOut = edx_198
	return eax_197
l0073F698:
	word32 edx_213
	word32 eax_212 = fn0073CEC0(edx, ebx, edi, es, ds, edi, dwArg04, out edx_213)
	branch eax_212 != 0<32> l0073F6AB
l0073F6AB:
	word32 edx_238
	word32 eax_237 = fn00744180(0<32>, dwArg04, eax_212, Mem224[esi + 8<32>:word32], Mem210[esi + 0xC<32>:word32], out edx_238)
	edxOut = edx_238
	return eax_237
l0073F6AA:
	edxOut = edx_213
	return eax_212
fn0073F690_exit:


word32 fn0073F7B0(word32 dwArg04, word32 dwArg08, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00740160
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn0073F7B0_entry:
l0073F7B0:
	word32 ebp_17 = Mem15[dwArg08 + 0x10<32>:word32]
	word32 edx_29 = SLICE((ebp_17 - 3<32>) *s64 0x55555556<32>, word32, 32)
	word32 ebx_155 = (edx_29 >>u 0x1F<32>) + edx_29
	word32 edx_147
	word32 eax_40 = fn0073CEC0(edx_29, ebx_155, ebp_17 - 3<32>, es, ds, dwArg04, Mem26[dwArg08 + 0x14<32>:word32] + 0x30<32>, out edx_147)
	word32 dwLoc14_385 = 0<32>
	word32 dwLoc10_441 = eax_40
	branch eax_40 == 0<32> l0073F884
l0073F7F9:
	word32 edx_111
	word32 eax_49 = Mem47[dwArg08 + 0x14<32>:word32]
	word16 cx_52 = Mem47[eax_49 + ((ebp_17 - 3<32>) + (ebp_17 - 3<32>) * 2<32>) * 8<32>:word16]
	branch cx_52 != 1<16> l0073F968
l0073F968:
	branch cx_52 == 0x12A<16> l0073F8B7
l0073F973:
	fn0073B830(out edx_111)
l0073F80D:
	word32 esi_69 = Mem47[ebp_17 * 0x18<32> - 0x44<32> + eax_49:word32]
	word32 edi_105 = 0x8DBB98<32>
	word32 ecx_72 = 8<32>
	bool v18_374 = false
l0073F82B:
	branch ecx_72 == 0<32> l0073F82D
l0073F82B_1:
	v18_374 = Mem70[esi_563:byte] != Mem70[edi_105:byte]
	esi_69 = esi_563 + 1<i32>
	edi_105 = edi_105 + 1<i32>
	ecx_72 = ecx_72 - 1<32>
	esi_563 = esi_69
	branch Mem70[esi_563:byte] != Mem70[edi_105:byte] l0073F82B
l0073F82D:
	branch v18_374 l0073F88E
l0073F88E:
	branch fn0073CEC0(ebp_17 * 0x18<32> - 0x18<32> + eax_49, ebx_155, edi_105, es, ds, dwArg04, dwArg04, out edx_111) == 0<32> l0073F97F
l0073F97F:
	edxOut = edx_111
	return 0<32>
l0073F82F:
	branch ebp_17 < 9<32> l0073F85F
l0073F834:
	branch Mem70[eax_49 + ((ebp_17 - 0x12<32>) + ebp_17 * 2<32>) * 8<32>:word16] != 1<16> l0073F85F
l0073F83F:
	branch fn0073CEC0(ebp_17 - 0xC<32> + ebp_17 * 2<32>, ebx_155, edi_105, es, ds, dwArg04, dwArg04, out edx_147) == 0<32> l0073F884
l0073F85C:
	ebx_155 = ebx_155 - 1<32>
l0073F85F:
	word32 eax_175 = fn0073CEC0(ebp_17 * 0x18<32> - 0x18<32> + Mem158[dwArg08 + 0x14<32>:word32], ebx_155, edi_105, es, ds, dwArg04, dwArg04, out edx_147)
	dwLoc14_385 = eax_175
	branch eax_175 != 0<32> l0073F8B0
l0073F8B0:
	ebx_155 = ebx_155 - 1<32>
l0073F8B7:
	branch ebx_155 <= 0<32> l0073F9A6
l0073F8C3:
	word32 eax_208 = fn00752E30(ebx_155, out edx_147)
	word32 ebp_212 = 0<32>
	branch eax_208 == 0<32> l0073F884
l0073F8DA:
	word32 dwLoc0C_480 = 1<32>
	branch ebx_155 <= 0<32> l0073F938
l0073F8E2:
	word32 dwLoc08_481 = eax_208 + 4<32>
l0073F8F0:
	word32 eax_239 = fn0073F690(Mem225[dwArg08 + 0x14<32>:word32] + ebp_212 + 0x48<32>, out edx_147)
	branch eax_239 == 0<32> l0073F884
l0073F90D:
	Mem250[dwLoc08_481:word32] = eax_239
	ebp_212 = ebp_212 + 0x48<32>
	dwLoc0C_480 = dwLoc0C_565 + 1<32>
	dwLoc08_481 = dwLoc08_481 + 4<32>
	dwLoc0C_565 = dwLoc0C_480
	branch dwLoc0C_565 + 0<32> < ebx_155 l0073F8F0
l0073F934:
l0073F938:
	word32 edx_288
	word32 eax_287 = fn00743430(eax_40, dwArg04, dwArg08, Mem267[dwArg08 + 8<32>:word32], Mem261[dwArg08 + 0xC<32>:word32], out edx_288)
	branch dwLoc14_385 != 0<32> l0073F989
l0073F989:
	word32 eax_302 = fn00752E30(1<32>, out edx_147)
	dwLoc10_441 = eax_302
	branch eax_302 == 0<32> l0073F884
l0073F9A3:
	Mem311[eax_302 + 4<32>:word32] = eax_287
l0073F9A6:
	word32 edx_337
	word32 eax_336 = fn00743480(dwLoc10_441, dwArg04, dwArg08, Mem313[dwArg08 + 0xC<32>:word32], out edx_337)
	edxOut = edx_337
	return eax_336
l0073F960:
	edxOut = edx_288
	return eax_287
l0073F884:
	edxOut = edx_147
	return 0<32>
fn0073F7B0_exit:


word32 fn0073F9D0(word32 edx, word32 dwArg04, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073FA50
// MayUse:  edx:[0..31] Stack +0004:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ebx ecx edi edx esi Top
// Preserved: esp
fn0073F9D0_entry:
l0073F9D0:
	word32 eax_6 = Mem0[edx + 0x14<32>:word32]
	word32 esi_13 = Mem12[eax_6 + 4<32>:word32]
	word32 edi_17 = 0x8DBBE0<32>
	word32 ecx_18 = 3<32>
	bool v17_126 = true
l0073F9E5:
	branch ecx_18 == 0<32> l0073F9E7
l0073F9E5_1:
	v17_126 = Mem16[esi_183:byte] == Mem16[edi_184:byte]
	esi_13 = esi_183 + 1<i32>
	edi_17 = edi_184 + 1<i32>
	ecx_18 = ecx_18 - 1<32>
	esi_183 = esi_13
	edi_184 = edi_17
	branch Mem16[esi_183:byte] != Mem16[edi_184:byte] l0073F9E5
l0073F9E7:
	branch v17_126 l0073FA2C
l0073FA2C:
	word32 edx_56
	word32 eax_55 = fn0073E7A0(eax_6 + 0x18<32>, out edx_56)
	edxOut = edx_56
	return eax_55
l0073F9E9:
	word32 esi_181
	word32 edx_109
	word32 eax_76 = fn006EA200(out edx_109, out esi_181)
	branch eax_76 == 0<32> l0073FA26
l0073FA05:
	word32 ecx_182
	fn006E0E90(Mem74[0x00A178F4<p32>:word32], eax_76, out ecx_182, out edx_109)
	word32 v13_99 = Mem90[eax_76:word32] + 0xFFFFFFFF<32>
	Mem100[eax_76:word32] = v13_99
	branch v13_99 != 0<32> l0073FA26
l0073FA1A:
	word32 edx_103 = Mem100[eax_76 + 4<32>:word32]
	call Mem100[edx_103 + 0x18<32>:word32] (retsize: 4;)
		uses: edx:edx_103,Stack +0004:eax_76,Stack +0008:dwArg04,Stack +0018:dwArg04
		defs: edx:edx_109
l0073FA26:
	edxOut = edx_109
	return 0<32>
fn0073F9D0_exit:


word32 fn0073FA50(word32 esi, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00740160
// MayUse:  esi:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ebp ebx ecx edx Top
// Preserved: esp
fn0073FA50_entry:
l0073FA50:
	word32 ebx_21 = 0<32>
	word32 ebp_24 = 3<32>
	word32 edx_147
	word32 eax_27 = fn0073E7A0(Mem6[esi + 0x14<32>:word32] + 0x18<32>, out edx_147)
	branch eax_27 != 0<32> l0073FA78
l0073FA78:
	branch Mem34[Mem34[esi + 0x14<32>:word32] + 0x30<32>:word16] != 0x129<16> l0073FAAA
l0073FA86:
	word32 eax_44 = fn0073F9D0(edx, edi, out edx_147)
	ebx_21 = eax_44
	branch eax_44 == 0<32> l0073FA72
l0073FA95:
	branch fn0073BBE0(eax_44, 3<32>, esi, edi, es, ds, eax_44, 2<32>, out edx_147) == 0<32> l0073FA72
l0073FAA5:
	ebp_24 = 4<32>
l0073FAAA:
	word32 edx_72 = Mem71[esi + 0x14<32>:word32]
	word32 eax_86 = fn0073CEC0(edx_72, ebx_21, edi, es, ds, edi, edx_72 + ebp_24 * 0x18<32>, out edx_147)
	branch eax_86 == 0<32> l0073FA72
l0073FAC2:
	word32 edx_113
	word32 eax_112 = fn00743370(eax_27, ebx_21, eax_86, Mem97[esi + 8<32>:word32], Mem81[esi + 0xC<32>:word32], out edx_113)
	edxOut = edx_113
	return eax_112
l0073FA72:
	edxOut = edx_147
	return 0<32>
fn0073FA50_exit:


word32 fn0073FAF0(word32 eax, word32 dwArg04, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00740160
// MayUse:  eax:[0..31] Stack +0004:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn0073FAF0_entry:
l0073FAF0:
	word32 edx_11 = Mem9[dwArg04 + 0x14<32>:word32]
	word32 esi_15 = Mem14[edx_11 + 0x1C<32>:word32]
	word32 edi_21 = 0x8ABDD0<32>
	word32 ecx_22 = 5<32>
	bool v18_292 = false
l0073FB0C:
	branch ecx_22 == 0<32> l0073FB0E
l0073FB0C_1:
	v18_292 = Mem18[esi_409:byte] != Mem18[edi_21:byte]
	esi_15 = esi_409 + 1<i32>
	edi_21 = edi_21 + 1<i32>
	ecx_22 = ecx_22 - 1<32>
	esi_409 = esi_15
	branch Mem18[esi_409:byte] != Mem18[edi_21:byte] l0073FB0C
l0073FB0E:
	word32 edx_160
	branch v18_292 l0073FB54
l0073FB54:
	word32 edi_138
	branch Mem18[dwArg04 + 0x10<32>:word32] != 4<32> l0073FBAA
l0073FBAA:
	branch Mem18[edx_11 + 0x48<32>:word16] != 8<16> l0073FBCC
l0073FBCC:
	branch fn0073EB20(edx_11 + 0x48<32>, eax, out edx_160) == 0<32> l0073FB4D
l0073FBDB:
	branch fn0073CEC0(Mem18[dwArg04 + 0x14<32>:word32] + 0x90<32>, eax, edi_21, es, ds, eax, dwArg04, out edx_160) == 0<32> l0073FB4D
l0073FBF6:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg12 = <invalid>
	word32 stackArg16 = <invalid>
	word32 stackArg20 = <invalid>
	word32 edx_111
	word32 eax_112 = fn00742FB0(fn0073B810(), dwArg04, stackArg12, stackArg16, stackArg20, out edx_111)
	edxOut = edx_111
	return eax_112
l0073FBB4:
	word32 edx_133
	word32 eax_134 = fn0073CEC0(edx_11 + 0x78<32>, eax, edi_21, es, ds, eax, edx_11 + 0x78<32>, out edx_133)
	edi_138 = eax_134
	branch eax_134 != 0<32> l0073FB6D
l0073FBC7:
	edxOut = edx_133
	return eax_134
l0073FB5A:
	word32 eax_161 = fn0073CEC0(edx_11 + 0x48<32>, eax, edi_21, es, ds, eax, edx_11 + 0x48<32>, out edx_160)
	edi_138 = eax_161
	branch eax_161 == 0<32> l0073FB4D
l0073FB6D:
	word32 edx_175 = Mem171[eax + 4<32>:word32]
	word32 edx_405
	word32 ecx_404
	word32 eax_185 = fn006F1A70(out ecx_404, out edx_405)
	fn00740DF0(edx_175, dwArg04)
	word32 edx_217
	word32 eax_218 = fn00742FB0(eax_185, dwArg04, edi_138, Mem194[dwArg04 + 8<32>:word32], Mem194[dwArg04 + 0xC<32>:word32], out edx_217)
	edxOut = edx_217
	return eax_218
l0073FB10:
	word32 esi_400
	word32 eax_241 = fn006EA200(out edx_160, out esi_400)
	branch eax_241 == 0<32> l0073FB4D
l0073FB2C:
	word32 ecx_401
	fn006E0E90(Mem238[0x00A178F4<p32>:word32], eax_241, out ecx_401, out edx_160)
	word32 v14_263 = Mem254[eax_241:word32] + 0xFFFFFFFF<32>
	Mem264[eax_241:word32] = v14_263
	branch v14_263 != 0<32> l0073FB4D
l0073FB41:
	word32 eax_267 = Mem264[eax_241 + 4<32>:word32]
	call Mem264[eax_267 + 0x18<32>:word32] (retsize: 4;)
		uses: eax:eax_267,Stack +0004:eax_241,Stack +0008:dwArg04,Stack +001C:dwArg04
		defs: edx:edx_272
l0073FB4D:
	edxOut = edx_160
	return 0<32>
fn0073FAF0_exit:


word32 fn0073FC30(word32 dwArg04, word32 dwArg08, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073C370
//      fn00740060
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn0073FC30_entry:
l0073FC30:
	word32 ebp_14 = 0<32>
	word32 edi_149 = dwArg08
	word32 esi_19 = 0<32>
	word32 ebx_108 = 0<32>
	word32 dwLoc04_1225 = 0<32>
	branch Mem17[dwArg08:word16] != 0x106<16> l0073FC82
l0073FC54:
	branch Mem24[dwArg08 + 0x10<32>:word32] != 2<32> l0073FC76
l0073FC76:
	word32 edx_28 = Mem24[dwArg08 + 0x14<32>:word32]
	dwArg08 = edx_28 + 0x18<32>
	edi_149 = edx_28 + 0x18<32>
l0073FC82:
	word32 dwLoc14_1117
	word32 esi_103
	word32 edx_100
	word32 eax_35 = Mem34[edi_149 + 0x10<32>:word32]
	branch eax_35 <= 0<32> l0073FD08
l0073FC89:
	word32 edx_39 = Mem34[edi_149 + 0x14<32>:word32]
l0073FC90:
	word16 cx_45 = Mem34[edx_39:word16]
	branch cx_45 != 0x108<16> l0073FC9D
l0073FC9A:
	esi_19 = esi_19 + 1<32>
l0073FC9D:
	branch cx_45 != 0x16<16> l0073FCA6
l0073FCA3:
	ebx_108 = ebx_108 + 1<32>
l0073FCA6:
	edx_39 = edx_39 + 0x18<32>
	eax_35 = eax_35 - 1<32>
	branch eax_35 != 0<32> l0073FC90
l0073FCAE:
	branch esi_19 == 0<32> l0073FD08
l0073FD08:
	dwLoc14_1117 = 0<32>
	esi_103 = 0<32>
l0073FCB2:
	word32 eax_98 = fn00752E30(esi_19, out edx_100)
	esi_103 = eax_98
	dwLoc14_1117 = eax_98
	branch eax_98 == 0<32> l00740055
l0073FCD1:
	word32 dwLoc10_1128
	branch ebx_108 == 0<32> l0073FD10
l0073FD10:
	dwLoc10_1128 = 0<32>
l0073FCD5:
	word32 eax_129 = fn00752E30(ebx_108, out edx_100)
	dwLoc10_1128 = eax_129
	branch eax_129 == 0<32> l00740055
l0073FCF2:
	word32 dwLoc1C_1211 = 0<32>
	branch Mem139[edi_149 + 0x10<32>:word32] <= 0<32> l0073FEF2
l0073FCFF:
	word32 dwLoc20_1109 = esi_103 + 4<32>
l0073FD24:
	word32 esp_273
	word32 esp_298
	word32 esi_153 = ebp_14 * 3<32>
	word32 ecx_151 = Mem150[edi_149 + 0x14<32>:word32]
	word32 esi_156 = esi_153 * 8<32>
	word32 eax_157 = CONVERT(Mem150[ecx_151 + esi_153 * 8<32>:word16], word16, int32)
	word32 ebx_159 = ecx_151 + esi_153 * 8<32>
	branch eax_157 == 0x10<32> l0073FEA8
l0073FEA8:
	word32 edi_162 = 0x8ABDD0<32>
	word32 esi_163 = Mem150[ebx_159 + 0x1C<32>:word32]
	word32 ecx_164 = 5<32>
	bool v26_803 = true
l0073FEB9:
	branch ecx_164 == 0<32> l0073FEBB
l0073FEB9_1:
	v26_803 = Mem150[esi_1266:byte] == Mem150[edi_1267:byte]
	esi_163 = esi_1266 + 1<i32>
	edi_162 = edi_1267 + 1<i32>
	ecx_164 = ecx_164 - 1<32>
	esi_1266 = esi_163
	edi_1267 = edi_162
	branch Mem150[esi_1266:byte] != Mem150[edi_1267:byte] l0073FEB9
l0073FEBB:
	branch v26_803 l0073FFD8
l0073FFD8:
l0073FEC1:
	word32 edi_196 = Mem150[dwArg04 + 4<32>:word32]
	word32 edx_1263
	word32 ecx_1262
	fn006F1A70(out ecx_1262, out edx_1263)
	fn00740DF0(edi_196, dwArg04)
l0073FD41:
	branch eax_157 == 0x24<32> l0073FE73
l0073FE73:
	word32 edi_226 = 0x8ABDD0<32>
	word32 esi_227 = Mem150[ebx_159 + 0x1C<32>:word32]
	word32 ecx_228 = 5<32>
	bool v30_807 = true
l0073FE84:
	branch ecx_228 == 0<32> l0073FE86
l0073FE84_1:
	v30_807 = Mem150[esi_1268:byte] == Mem150[edi_1269:byte]
	esi_227 = esi_1268 + 1<i32>
	edi_226 = edi_1269 + 1<i32>
	ecx_228 = ecx_228 - 1<32>
	esi_1268 = esi_227
	edi_1269 = edi_226
	branch Mem150[esi_1268:byte] != Mem150[edi_1269:byte] l0073FE84
l0073FE86:
	branch v30_807 l0073FF8E
l0073FF8E:
	word32 esi_1254
	word32 eax_267 = fn006EA200(out edx_100, out esi_1254)
	esp_273 = fp - 0x30<32>
	branch eax_267 == 0<32> l00740023
l0073FFB8:
	word32 ecx_1260
	fn006E0E90(Mem259[0x00A178F4<p32>:word32], eax_267, out ecx_1260, out edx_100)
	word32 v20_290 = Mem281[eax_267:word32] + 0xFFFFFFFF<32>
	Mem291[eax_267:word32] = v20_290
	esp_273 = fp - 0x30<32>
	branch v20_290 != 0<32> l00740023
l0073FFCD:
	word32 edx_294 = Mem291[eax_267 + 4<32>:word32]
	call Mem291[edx_294 + 0x18<32>:word32] (retsize: 4;)
		uses: edx:edx_294,Stack +0004:eax_267,Stack +0008:dwArg04,Stack +000C:dwArg08_835,Stack +003C:dwArg04,Stack +0040:dwArg08_835
		defs: edx:edx_301,esp:esp_298
l0073FE8C:
	word32 edi_305 = Mem150[dwArg04 + 4<32>:word32]
	word32 edx_1256
	word32 ecx_1255
	fn006F1A70(out ecx_1255, out edx_1256)
	fn00740DF0(edi_305, dwArg04)
l0073FEDB:
	ebp_14 = ebp_14 + 3<32>
l0073FD4A:
	branch eax_157 != 0x108<32> l0073FF1A
l0073FF1A:
	word32 ecx_1253
	fn006E15D0(Mem150[0x00A18720<p32>:word32], dwArg04, out ecx_1253, out edx_100)
	esp_273 = fp - 0x30<32>
l0073FD55:
	word32 dwLoc18_1223 = ebp_14 + 1<32>
	word32 edi_355 = dwLoc10_1128 + 4<32> + dwLoc1C_1211 * 4<32>
l0073FD70:
	branch dwLoc18_1223 >= Mem357[dwArg08 + 0x10<32>:word32] l0073FDC1
l0073FD7D:
	branch Mem357[esi_156 + 0x18<32> + Mem357[dwArg08 + 0x14<32>:word32]:word16] != 0x16<16> l0073FDC1
l0073FDC1:
	branch dwLoc04_1225 != 0<32> l0073FF37
l0073FF37:
l0073FFEF:
	word32 esi_1264
	word32 eax_395 = fn006EA200(out edx_100, out esi_1264)
	esp_273 = fp - 0x30<32>
	branch eax_395 == 0<32> l00740023
l00740002:
	word32 ecx_1265
	fn006E0E90(Mem378[0x00A178F4<p32>:word32], eax_395, out ecx_1265, out edx_100)
	word32 v22_418 = Mem409[eax_395:word32] + 0xFFFFFFFF<32>
	Mem419[eax_395:word32] = v22_418
	esp_273 = fp - 0x30<32>
	branch v22_418 != 0<32> l00740023
l00740017:
	word32 eax_422 = Mem419[eax_395 + 4<32>:word32]
	call Mem419[eax_422 + 0x18<32>:word32] (retsize: 4;)
		uses: eax:eax_422,Stack +0004:eax_395,Stack +0008:dwArg04,Stack +000C:dwArg08_835,Stack +003C:dwArg04,Stack +0040:dwArg08_835
		defs: edx:edx_429,esp:esp_426
l0073FDCC:
l0073FD88:
	word32 eax_440 = fn0073E7A0(dwArg04, out edx_100)
	esp_273 = fp - 0x30<32>
	branch eax_440 == 0<32> l00740023
l0073FDA2:
	Mem454[edi_355:word32] = eax_440
	dwLoc18_1223 = dwLoc18_1223 + 2<32>
	dwLoc1C_1211 = dwLoc1C_1211 + 1<32>
	edi_355 = edi_355 + 4<32>
	ebp_14 = ebp_14 + 2<32>
	esi_156 = esi_156 + 0x30<32>
	dwLoc04_1225 = 1<32>
l0073FDD1:
	branch Mem461[ebx_159 + 0x10<32>:word32] != 3<32> l0073FE07
l0073FDD7:
	word32 ebx_464 = Mem461[ebx_159 + 0x14<32>:word32]
	ebx_159 = ebx_464 + 0x18<32>
	branch Mem461[ebx_464 + 0x28<32>:word32] != 1<32> l0073FDE7
l0073FDE7:
	Mem486[dwLoc20_1109:word32] = fn0073C100(dwArg04, dwArg04)
	dwLoc20_1109 = dwLoc20_1109 + 4<32>
l0073FE07:
	word32 eax_494 = Mem493[ebx_159 + 0x14<32>:word32]
	branch Mem493[eax_494:word16] != 1<16> l0073FE6E
l0073FE0F:
	word32 edi_501 = 0x8ABDD0<32>
	word32 esi_502 = Mem493[eax_494 + 4<32>:word32]
	word32 ecx_503 = 5<32>
	bool v34_811 = true
l0073FE20:
	branch ecx_503 == 0<32> l0073FE22
l0073FE20_1:
	v34_811 = Mem493[esi_1270:byte] == Mem493[edi_1271:byte]
	esi_502 = esi_1270 + 1<i32>
	edi_501 = edi_1271 + 1<i32>
	ecx_503 = ecx_503 - 1<32>
	esi_1270 = esi_502
	edi_1271 = edi_501
	branch Mem493[esi_1270:byte] != Mem493[edi_1271:byte] l0073FE20
l0073FE22:
	branch v34_811 l0073FF45
l0073FF45:
	word32 esi_1257
	word32 eax_542 = fn006EA200(out edx_100, out esi_1257)
	esp_273 = fp - 0x30<32>
	branch eax_542 == 0<32> l00740023
l0073FF68:
	word32 ecx_1261
	fn006E0E90(Mem532[0x00A178F4<p32>:word32], eax_542, out ecx_1261, out edx_100)
	word32 v21_565 = Mem556[eax_542:word32] + 0xFFFFFFFF<32>
	Mem566[eax_542:word32] = v21_565
	esp_273 = fp - 0x30<32>
	branch v21_565 != 0<32> l00740023
l0073FF80:
	word32 ecx_569 = Mem566[eax_542 + 4<32>:word32]
	call Mem566[ecx_569 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_569,Stack +0004:eax_542,Stack +0008:dwArg04,Stack +000C:dwArg08_835,Stack +003C:dwArg04,Stack +0040:dwArg08_835
		defs: edx:edx_576,esp:esp_573
l00740020:
	esp_273 = esp_298 + 4<32>
l0073FE28:
	word32 edi_583 = Mem493[dwArg04 + 4<32>:word32]
	word32 edx_1259
	word32 ecx_1258
	word32 eax_589 = fn006F1A70(out ecx_1258, out edx_1259)
	fn00740DF0(edi_583, dwArg04)
	word32 eax_620 = fn00743EE0(eax_589, dwArg04, dwArg08, Mem598[ebx_159 + 0xC<32>:word32], out edx_100)
	esp_273 = fp - 0x30<32>
	branch eax_620 == 0<32> l00740023
l00740023:
	word32 eax_632 = Mem630[esp_273 + 0x28<32>:word32]
	branch eax_632 == 0<32> l0074003C
l0074002B:
	word32 v18_636 = Mem630[eax_632:word32] + 0xFFFFFFFF<32>
	Mem637[eax_632:word32] = v18_636
	branch v18_636 != 0<32> l0074003C
l00740030:
	word32 edx_640 = Mem637[eax_632 + 4<32>:word32]
	Mem642[esp_273 - 4<i32>:word32] = eax_632
	word32 esp_654
	call Mem642[edx_640 + 0x18<32>:word32] (retsize: 4;)
		uses: edx:edx_640,Stack +0008:dwArg04,Stack +000C:dwArg08_835
		defs: edx:edx_657,esp:esp_654
	esp_273 = esp_654 + 4<32>
l0074003C:
	word32 eax_664 = Mem663[esp_273 + 0x24<32>:word32]
	branch eax_664 == 0<32> l00740055
l00740044:
	word32 v19_668 = Mem663[eax_664:word32] + 0xFFFFFFFF<32>
	Mem669[eax_664:word32] = v19_668
	branch v19_668 != 0<32> l00740055
l00740049:
	word32 ecx_672 = Mem669[eax_664 + 4<32>:word32]
	word32 edx_673 = Mem669[ecx_672 + 0x18<32>:word32]
	Mem675[esp_273 - 4<i32>:word32] = eax_664
	call edx_673 (retsize: 4;)
		uses: ecx:ecx_672,Stack +0008:dwArg04,Stack +000C:dwArg08_835
		defs: edx:edx_684
l00740055:
	edxOut = edx_100
	return 0<32>
l0073FE61:
	Mem703[dwLoc20_1109:word32] = eax_620
	dwLoc20_1109 = dwLoc20_1109 + 4<32>
l0073FE6E:
	ebp_14 = ebp_14 + 2<32>
l0073FEE1:
	branch ebp_14 < Mem712[dwArg08 + 0x10<32>:word32] l0073FD20
l0073FD20:
	edi_149 = dwArg08
l0073FEEE:
	esi_103 = dwLoc14_1117
l0073FEF2:
	word32 edx_758
	word32 eax_756 = fn007441C0(esi_103, dwArg04, dwArg08, dwLoc10_1128, out edx_758)
	edxOut = edx_758
	return eax_756
l0073FDE2:
	ebx_159 = Mem461[ebx_464 + 0x2C<32>:word32]
l0073FC5A:
	word32 edx_788
	word32 eax_786 = fn007441C0(0<32>, 0<32>, 0<32>, 0<32>, out edx_788)
	edxOut = edx_788
	return eax_786
fn0073FC30_exit:


word32 fn00740060(word32 ebx, word32 dwArg04, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00740160
// MayUse:  ebx:[0..31] Stack +0004:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ebp ecx edi edx esi Top
// Preserved: esp
fn00740060_entry:
l00740060:
	word32 ebp_16
	word32 dwLoc0C_210 = 0<32>
	branch Mem0[ebx + 0x10<32>:word32] != 6<32> l00740098
l00740098:
	ebp_16 = 1<32>
l00740073:
	word32 edx_24
	word32 eax_22 = fn0073DF70(dwArg04, Mem14[ebx + 0x14<32>:word32], out edx_24)
	dwLoc0C_210 = eax_22
	branch eax_22 != 0<32> l00740091
l00740091:
	ebp_16 = 2<32>
l0074009D:
	word32 edx_38 = Mem34[dwArg04 + 4<32>:word32]
	word32 ecx_294
	word32 edx_295
	word32 eax_56 = fn006F1A70(out ecx_294, out edx_295)
	word32 esi_44 = ebp_16 * 3<32>
	word32 edx_120 = fn00740DF0(edx_38, dwArg04)
	branch eax_56 == 0<32> l007400FB
l007400D8:
	word32 esi_80 = Mem67[esi_44 * 8<32> + Mem67[ebx + 0x14<32>:word32] + 4<32>:word32]
	word32 edi_81 = 0x8ABDD0<32>
	word32 ecx_82 = 5<32>
	bool v15_204 = false
l007400ED:
	branch ecx_82 == 0<32> l007400EF
l007400ED_1:
	v15_204 = Mem67[esi_296:byte] != Mem67[edi_297:byte]
	esi_80 = esi_296 + 1<i32>
	edi_81 = edi_297 + 1<i32>
	ecx_82 = ecx_82 - 1<32>
	esi_296 = esi_80
	edi_297 = edi_81
	branch Mem67[esi_296:byte] != Mem67[edi_297:byte] l007400ED
l007400EF:
	branch v15_204 l00740104
l00740104:
	word32 eax_118 = fn0073FC30(dwArg04, dwArg04, out edx_120)
	branch eax_118 == 0<32> l007400FB
l0074011B:
	word32 eax_136 = fn0073CEC0(Mem109[ebx + 0x14<32>:word32] + ((ebp_16 + 9<32>) + ebp_16 * 2<32>) * 8<32>, ebx, eax_118, es, ds, dwArg04, dwArg04, out edx_120)
	branch eax_136 == 0<32> l007400FB
l00740133:
	word32 edx_167
	word32 eax_165 = fn00742F20(eax_56, dwArg04, eax_136, dwLoc0C_210, Mem148[ebx + 8<32>:word32], Mem134[ebx + 0xC<32>:word32], out edx_167)
	edxOut = edx_167
	return eax_165
l007400F1:
	fn0073B830(out edx_120)
l007400FB:
	edxOut = edx_120
	return 0<32>
l0074008B:
	edxOut = edx_24
	return eax_22
fn00740060_exit:


word32 fn00740160(word32 dwArg08, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073CEC0
//      fn007403E0
// MayUse:  Stack +0008:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ebx ecx edi edx esi Top
// Preserved: esp
fn00740160_entry:
l00740160:
	word32 eax_13 = dwArg08
	branch Mem0[dwArg08:word16] != 0x10A<16> l0074016E
l0074016B:
	eax_13 = Mem0[dwArg08 + 0x14<32>:word32]
l0074016E:
	branch Mem0[eax_13:word16] != 0x10B<16> l00740178
l00740175:
	eax_13 = Mem0[eax_13 + 0x14<32>:word32]
l00740178:
	word32 edx_286
	branch Mem0[eax_13:word16] != 0x10C<16> l00740281
l00740281:
	word32 esi_37 = Mem35[eax_13 + 0x14<32>:word32]
	word32 ecx_38 = CONVERT(Mem35[esi_37:word16], word16, int32)
	branch ecx_38 >u 0xFFFFFEB8<32> l00740310
l00740292:
	switch (CONVERT(Mem35[ecx_38 + 0x74028F<32>:byte], byte, word32)) { l007402EC l00740310 l00740310 l00740310 l00740310 l00740310 l00740310 l00740310 l00740310 l00740310 l00740310 l00740310 l00740310 l00740310 l00740310 l00740310 l00740310 l00740310 l00740310 l00740310 l00740310 l00740310 l00740310 l00740310 l00740310 l00740310 l00740310 l00740310 l00740310 l00740310 l00740310 l007402A0 l007402AD l007402BA l007402CD l007402DF l00740310 l00740310 l00740310 l00740310 l00740310 l00740310 l00740310 l00740310 l00740310 l00740310 l00740310 l00740310 l00740310 l00740310 l00740310 l00740310 l00740310 l00740310 l00740310 l00740310 l00740310 l00740310 l00740310 l00740310 l00740310 l00740310 l00740310 l00740310 l00740310 l00740310 l00740310 l007402FF }
l007402FF:
	word32 edx_50
	word32 eax_49 = fn0073FAF0(dwArg04, esi_37, out edx_50)
	edxOut = edx_50
	return eax_49
l007402DF:
	word32 edx_65
	word32 eax_64 = fn0073FA50(esi_37, out edx_65)
	edxOut = edx_65
	return eax_64
l007402CD:
	word32 edx_82
	word32 eax_81 = fn0073F7B0(dwArg04, esi_37, out edx_82)
	edxOut = edx_82
	return eax_81
l007402BA:
	word32 edx_100
	word32 eax_99 = fn0073D050(esi_37, dwArg04, out edx_100)
	edxOut = edx_100
	return eax_99
l007402AD:
	word32 edx_115
	word32 eax_114 = fn0073F5B0(esi_37, out edx_115)
	edxOut = edx_115
	return eax_114
l007402A0:
	word32 edx_128
	word32 eax_127 = fn0073F2C0(esi_37, dwArg04, out edx_128)
	edxOut = edx_128
	return eax_127
l00740310:
l007402EC:
	word32 edx_154
	word32 eax_153 = fn00740060(esi_37, dwArg04, out edx_154)
	edxOut = edx_154
	return eax_153
l00740189:
	word32 edi_166 = Mem35[eax_13 + 0x14<32>:word32]
	word32 eax_167 = CONVERT(Mem35[edi_166:word16], word16, int32)
	branch eax_167 >u 0x122<32> l00740277
l0074019E:
	switch (CONVERT(Mem35[eax_167 + 0x74024F<32>:byte], byte, word32)) { l007401AC l00740277 l007401BF l007401D2 l00740208 l00740224 l00740277 l00740277 l00740277 l00740277 l00740277 l00740231 l00740277 l00740277 l00740277 l00740277 l00740277 l00740277 l00740277 l00740244 l00740255 l00740268 }
l00740268:
	word32 edx_176
	word32 eax_175 = fn0073F220(edi_166, out edx_176)
	edxOut = edx_176
	return eax_175
l00740255:
	word32 edx_192
	word32 eax_191 = fn0073F160(edi_166, out edx_192)
	edxOut = edx_192
	return eax_191
l00740244:
	word32 edx_209
	word32 eax_208 = fn0073CE00(edi_166, dwArg04, out edx_209)
	edxOut = edx_209
	return eax_208
l00740231:
	word32 edx_227
	word32 eax_226 = fn0073CAE0(edi_166, dwArg04, out edx_227)
	edxOut = edx_227
	return eax_226
l00740224:
	word32 edx_242
	word32 eax_241 = fn0073EF40(edi_166, out edx_242)
	edxOut = edx_242
	return eax_241
l00740208:
	word32 edx_264
	word32 eax_263 = fn007436E0(Mem35[edi_166 + 8<32>:word32], Mem35[edi_166 + 0xC<32>:word32], out edx_264)
	edxOut = edx_264
	return eax_263
l007401D2:
	word32 eax_285 = fn0073C7D0(Mem35[edi_166 + 0x14<32>:word32] + 0x18<32>, dwArg04, 3<32>, out edx_286)
	branch eax_285 == 0<32> l0074032C
l007401EF:
	word32 edx_307
	word32 eax_306 = fn00743060(eax_285, dwArg04, dwArg08, out edx_307)
	edxOut = edx_307
	return eax_306
l007401BF:
	word32 edx_325
	word32 eax_324 = fn0073EE40(edi_166, out edx_325)
	edxOut = edx_325
	return eax_324
l00740277:
l00740318:
	word32 ecx_572
	fn006E15D0(Mem346[0x00A18720<p32>:word32], 0x8DCE50<32>, out ecx_572, out edx_286)
l0074032C:
	edxOut = edx_286
	return 0<32>
l007401AC:
	word32 edx_389
	word32 eax_388 = fn0073EB70(edi_166, dwArg04, out edx_389)
	edxOut = edx_389
	return eax_388
fn00740160_exit:


word32 fn007403E0(word32 edx, word32 edi, selector es, selector ds, word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E8AC0
//      fn006E8B50
// MayUse:  cs:[0..15] ds:[0..15] edi:[0..31] edx:[0..31] es:[0..15] fs:[0..15] gs:[0..15] ss:[0..15] Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax
// Trashed: SCZDOP eax ebx ecx edi edx esi Top
// Preserved: ebp esp
fn007403E0_entry:
l007403E0:
	word32 ebx_326
	__align(fp - 4<i32>)
	word32 esi_104 = 0<32>
	branch dwArg08 == 0<32> l00740430
l007403F5:
	branch (Mem20[dwArg08:word32] & 0x100<32>) == 0<32> l00740430
l00740430:
	branch Mem20[dwArg04:word16] != 0x152<16> l0074044B
l0074044B:
	ebx_326 = dwArg04
l0074043A:
	edx = Mem20[dwArg04 + 0x14<32>:word32]
	dwArg04 = edx
	ebx_326 = edx
l007403FD:
	ebx_326 = dwArg04
	branch Mem20[dwArg04:word16] != 0x152<16> l00740451
l00740451:
	word32 eax_49 = CONVERT(Mem47[ebx_326:word16], word16, int32)
	word32 dwLoc20_586 = 0<32>
	branch eax_49 == 0x100<32> l007405A3
l007405A3:
	word32 edi_55 = Mem53[ebx_326 + 0x14<32>:word32]
	branch Mem53[edi_55:word16] != 4<16> l007405E6
l007405E6:
	word32 edx_812
	word32 eax_81 = fn0073B9B0(edx, ebx_326, fp - 4<i32>, 0<32>, edi_55, es, ds, edi_55, out edx_812)
	word32 edx_813
	word32 eax_99 = fn00752E30(eax_81, out edx_813)
	esi_104 = eax_99
	branch eax_99 == 0<32> l0074041B
l00740609:
	branch eax_81 != 1<32> l0074063B
l0074063B:
	esi_104 = 0<32>
	branch Mem108[edi_55 + 0x10<32>:word32] <= 0<32> l00740683
l00740642:
	word32 ebx_115 = 0<32>
l00740644:
	branch Mem119[Mem119[edi_55 + 0x14<32>:word32] + ebx_115:word16] == 4<16> l00740683
l00740651:
	word32 edx_817
	word32 eax_141 = fn00740160(dwArg04, out edx_817)
	branch eax_141 == 0<32> l0074041B
l00740669:
	int64 edx_eax_152 = CONVERT(esi_104, word32, int64)
	Mem159[eax_99 + 4<32> + (SLICE(edx_eax_152, word32, 0) - SLICE(edx_eax_152, word32, 32) >> 1<32>) * 4<32>:word32] = eax_141
	esi_104 = esi_104 + 2<32>
	ebx_115 = ebx_115 + 0x30<32>
	branch esi_104 < Mem159[edi_55 + 0x10<32>:word32] l00740644
l00740683:
	return fn00742EA0(eax_99)
l0074060E:
	word32 edx_816
	word32 eax_205 = fn00740160(dwArg04, out edx_816)
	branch eax_205 == 0<32> l0074041B
l00740624:
	Mem219[eax_99 + 4<32>:word32] = eax_205
	return fn00742EA0(eax_99)
l007405AC:
	word32 edx_814
	word32 eax_241 = fn00752E30(1<32>, out edx_814)
	branch eax_241 == 0<32> l0074041B
l007405C1:
	word32 edx_815
	Mem270[eax_241 + 4<32>:word32] = fn007436E0(Mem239[ebx_326 + 8<32>:word32], dwArg04, out edx_815)
	return fn00742EA0(eax_241)
l0074046A:
	branch eax_49 == 0x101<32> l00740498
l00740498:
	word32 edx_809
	word32 edx_808
	word32 eax_310 = fn00752E30(fn0073B9B0(edx, ebx_326, fp - 4<i32>, 0<32>, edi, es, ds, ebx_326, out edx_808), out edx_809)
	branch eax_310 == 0<32> l00740427
l007404B9:
	word32 edx_320 = Mem318[ebx_326 + 0x10<32>:word32]
	word32 edx_321 = edx_320 - 1<32>
	word32 dwLoc18_742 = 1<32>
	branch edx_320 <= 1<32> l0074058F
l007404CB:
	word32 dwLoc1C_743 = 0<32>
l007404D0:
	word32 edi_330 = Mem327[ebx_326 + 0x14<32>:word32] + dwLoc1C_743
	branch Mem327[edi_330:word16] == 4<16> l0074056D
l007404E1:
	word32 edx_811
	word32 eax_344 = fn0073B9B0(edx_321, ebx_326, fp - 4<i32>, esi_104, edi_330, es, ds, edi_330, out edx_811)
	branch eax_344 != 1<32> l0074051A
l0074051A:
	edx_321 = Mem355[edi_330 + 0x14<32>:word32]
	word32 edi_358 = 0<32>
	branch eax_344 <= 0<32> l0074056D
l00740527:
	esi_104 = eax_310 + 4<32> + esi_104 * 4<32>
l00740531:
	word32 eax_390 = fn00740160(dwArg04, out edx_321)
	branch eax_390 == 0<32> l0074041B
l00740550:
	word32 v16_399 = dwLoc20_586 + 1<32>
	Mem401[esi_104:word32] = eax_390
	dwLoc20_586 = v16_399
	edi_358 = edi_358 + 1<32>
	esi_104 = esi_104 + 4<32>
	branch edi_358 < eax_344 l00740531
l00740566:
	esi_104 = v16_399
	ebx_326 = dwArg04
l007404F3:
	word32 eax_416 = fn00740160(dwArg04, out edx_321)
	branch eax_416 == 0<32> l0074041B
l00740509:
	Mem426[eax_310 + 4<32> + esi_104 * 4<32>:word32] = eax_416
	esi_104 = esi_104 + 1<32>
	dwLoc20_586 = esi_104
l0074056D:
	dwLoc1C_743 = dwLoc1C_743 + 0x18<32>
	dwLoc18_742 = dwLoc18_818 + 1<32>
	dwLoc18_818 = dwLoc18_742
	branch dwLoc18_818 + 0<32> < Mem431[ebx_326 + 0x10<32>:word32] - 1<32> l007404D0
l0074058B:
l0074058F:
	return fn00742E70(eax_310)
l0074046F:
	branch eax_49 != 0x102<32> l0074041B
l00740474:
	esi_104 = fp - 0xC<32>
	word32 edx_810
	word32 eax_494 = fn0073C790(Mem53[ebx_326 + 0x14<32>:word32], out edx_810)
	branch eax_494 == 0<32> l0074041B
l00740484:
	return fn00742ED0(eax_494)
l0074040F:
	word32 edx_807
	fn0073B830(out edx_807)
l0074041B:
	fn0073B870(esi_104, dwArg0C)
l00740427:
	return 0<32>
fn007403E0_exit:


word32 fn007406A0(word32 eax, word32 ecx, word32 dwArg04, word32 dwArg08, byte bArg0C)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00740A90
//      fn00740B40
// MayUse:  eax:[0..31] ecx:[0..31] Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..7]
// LiveOut: eax
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn007406A0_entry:
l007406A0:
	word32 esi_22 = 0<32>
	word32 dwLoc10_1187 = 0<32>
	word32 dwLoc0C_1198 = 0<32>
	word32 ecx_28
	word32 eax_27 = fn007551F0(ecx, eax, out ecx_28)
	branch eax_27 != 0<32> l007406F9
l007406F9:
	branch (bArg0C & 3<8>) == 0<8> l0074070A
l00740700:
	Mem42[eax_27 + 0x177C<32>:word32] = Mem36[eax_27 + 0x177C<32>:word32] | 0x8000<32>
l0074070A:
	word32 ebx_480
	word32 edi_476
	word32 esp_140
	word32 eax_63 = fn00754FA0(dwArg04)
	word32 dwLoc1C_838 = eax_63
	branch eax_63 == 0x34<32> l0074090E
l0074072B:
l00740734:
	word32 dwLoc08_840
	branch dwLoc1C_838 != 0<32> l0074076D
l0074073A:
	branch esi_22 == 0<32> l0074076D
l0074076D:
	dwLoc08_840 = 1<32>
l0074073E:
	word32 eax_83 = Mem73[dwArg04 + 0x20<32>:word32]
	dwLoc1C_838 = 4<32>
	dwLoc10_1187 = 0<32>
	dwLoc0C_1198 = 0<32>
	dwLoc08_840 = 0<32>
	branch eax_83 == 0<32> l00740775
l00740759:
	branch (bArg0C & 2<8>) != 0<8> l00740775
l00740760:
	Mem96[dwArg04 + 0x1B8<32>:word32] = -eax_83
	Mem97[dwArg04 + 0x20<32>:word32] = 0<32>
l00740775:
	word32 ebx_101 = dwLoc04 - dwLoc14
	word32 ecx_107
	word32 edx_1207
	word32 eax_106 = fn00723860(ebx_101 + 1<32>, out ecx_107, out edx_1207)
	word32 esi_113 = eax_106
	branch eax_106 == 0<32> l0074091C
l0074091C:
	word32 esp_129
	word32 eax_130
	call _iob_func (retsize: 4;)
		uses: eax:eax_106,ecx:ecx_107,Stack +0004:0x8DCEA0<32>,Stack +0008:dwArg04,Stack +0010:bArg0C,Stack +003C:dwArg04,Stack +0044:bArg0C
		defs: eax:eax_130,esp:esp_129
	Mem137[esp_129 - 4<i32>:word32] = eax_130 + 0x40<32>
	fprintf(Mem137[esp_129 - 4<i32>:(ptr32 FILE)], Mem137[esp_129:(ptr32 charconst )], 0<32>)
	Mem141[Mem137[esp_129 + 0x3C<32>:word32]:word32] = 0xF<32>
	esp_140 = esp_129 + 4<32>
l00740797:
	branch ebx_101 <=u 0<32> l007407AB
l0074079B:
	strncpy(eax_106, dwLoc14, ebx_101)
l007407AB:
	Mem164[eax_106 + ebx_101:byte] = 0<8>
	branch dwLoc1C_838 != 1<32> l00740833
l007407B6:
	branch ebx_101 != 6<32> l007407DC
l007407BB:
	branch Mem164[eax_106:byte] != 0x69<8> l007407DC
l007407C0:
	word32 edi_170 = 0x8DBBEC<32>
	word32 ecx_171 = 7<32>
	bool v19_714 = false
l007407CC:
	branch ecx_171 == 0<32> l007407CE
l007407CC_1:
	v19_714 = Mem164[esi_1214:byte] != Mem164[edi_1215:byte]
	esi_113 = esi_1214 + 1<i32>
	edi_170 = edi_1215 + 1<i32>
	ecx_171 = ecx_171 - 1<32>
	esi_1214 = esi_113
	edi_1215 = edi_170
	branch Mem164[esi_1214:byte] != Mem164[edi_1215:byte] l007407CC
l007407CE:
	branch v19_714 l007407DC
l007407D4:
	dwLoc10_1187 = 1<32>
l007407DC:
	word32 esi_203 = eax_106
	branch (Mem193[eax_27 + 0x177C<32>:word32] & 0x8000<32>) != 0<32> l00740890
l00740890:
	branch ebx_101 != 4<32> l00740833
l00740895:
	branch Mem193[eax_106:byte] != 0x77<8> l00740833
l0074089A:
	word32 edi_206 = 0x8DBB90<32>
	word32 ecx_207 = 5<32>
	bool v23_718 = false
l007408A6:
	branch ecx_207 == 0<32> l007408A8
l007408A6_1:
	v23_718 = Mem193[esi_1216:byte] != Mem193[edi_1217:byte]
	esi_203 = esi_1216 + 1<i32>
	edi_206 = edi_1217 + 1<i32>
	ecx_207 = ecx_207 - 1<32>
	esi_1216 = esi_203
	edi_1217 = edi_206
	branch Mem193[esi_1216:byte] != Mem193[edi_1217:byte] l007408A6
l007408A8:
	branch v23_718 l00740833
l007408AE:
	dwLoc0C_1198 = 1<32>
l007407F0:
	branch ebx_101 != 4<32> l00740849
l007407F5:
	branch Mem193[eax_106:byte] != 0x77<8> l00740849
l007407FA:
	word32 edi_232 = 0x8DBB90<32>
	word32 ecx_233 = 5<32>
	bool v27_722 = false
l00740806:
	branch ecx_233 == 0<32> l00740808
l00740806_1:
	v27_722 = Mem193[esi_1218:byte] != Mem193[edi_1219:byte]
	esi_203 = esi_1218 + 1<i32>
	edi_232 = edi_1219 + 1<i32>
	ecx_233 = ecx_233 - 1<32>
	esi_1218 = esi_203
	edi_1219 = edi_232
	branch Mem193[esi_1218:byte] != Mem193[edi_1219:byte] l00740806
l00740808:
	branch v27_722 l00740845
l00740845:
l00740849:
	word32 esi_264 = eax_106
	branch dwLoc10_1187 != 0<32> l00740833
l00740850:
	branch dwLoc0C_1198 != 0<32> l00740833
l00740857:
	branch ebx_101 != 2<32> l00740833
l0074085C:
	branch Mem193[eax_106:byte] != 0x61<8> l00740833
l00740861:
	word32 edi_267 = 0x8DBBE0<32>
	word32 ecx_268 = 3<32>
	bool v31_726 = false
l0074086D:
	branch ecx_268 == 0<32> l0074086F
l0074086D_1:
	v31_726 = Mem193[esi_1220:byte] != Mem193[edi_1221:byte]
	esi_264 = esi_1220 + 1<i32>
	edi_267 = edi_1221 + 1<i32>
	ecx_268 = ecx_268 - 1<32>
	esi_1220 = esi_264
	edi_1221 = edi_267
	branch Mem193[esi_1220:byte] != Mem193[edi_1221:byte] l0074086D
l0074086F:
	branch v31_726 l0074082F
l00740871:
	branch Mem193[dwArg08 + 4<32>:word32] != 0<32> l00740887
l00740882:
l00740887:
l0074080A:
	branch Mem193[dwArg08 + 4<32>:word32] != 0<32> l00740820
l0074081B:
l00740820:
l00740827:
	word32 edx_1210
	fn00716B20(out edx_1210)
l0074082F:
l00740833:
	word32 eax_383
	word32 ecx_378 = Mem377[dwArg04 + 0x380<32>:word32]
	branch dwLoc14 <u ecx_378 l007408BB
l007408BB:
	eax_383 = 0xFFFFFFFF<32>
l00740841:
	eax_383 = dwLoc14 - ecx_378
l007408BE:
	word32 eax_411 = fn00755500(eax_27, dwLoc1C_838, eax_106, Mem377[dwArg04 + 0x1C4<32>:word32], eax_383, dwArg08 + 0x18<32>)
	Mem420[dwArg08:word32] = eax_411
	branch eax_411 != 0xA<32> l007409E6
l007409E6:
	branch eax_411 == 0x10<32> l00740A06
l007409EB:
	word32 ecx_1212
	word32 edx_1213
	fn007239C0(eax_106, out ecx_1212, out edx_1213)
	Mem434[dwArg08 + 0x14<32>:word32] = dwLoc1C_838
l007408EC:
	word32 eax_452 = fn00754FA0(dwArg04)
	dwLoc1C_838 = eax_452
	branch eax_452 != 0x34<32> l00740730
l00740730:
	esi_22 = dwLoc08_840
l0074090E:
	Mem468[dwArg08:word32] = Mem464[dwArg04 + 0x14<32>:word32]
l007409F9:
	esp_140 = fp - 0x30<32>
	branch Mem470[dwArg08:word32] != 0x10<32> l00740940
l00740940:
	ebx_480 = 0<32>
	edi_476 = Mem475[esp_140 + 0x38<32>:word32]
l00740A06:
	ebx_480 = Mem478[eax_27 + 0x1778<32>:word32]
	Mem482[eax_27 + 0x1778<32>:word32] = 0<32>
	edi_476 = dwArg08
l00740944:
	fn00755280(eax_27)
	branch ebx_480 != 0<32> l00740A21
l00740A21:
	branch Mem487[dwArg04 + 0x378<32>:word32] == 0<32> l00740A75
l00740A2A:
	word32 ecx_1211
	word32 eax_511 = fn0073B660(0x152<16>, out ecx_1211)
	branch eax_511 != 0<32> l00740A56
l00740A56:
	word32 ecx_522 = Mem510[dwArg04 + 0x378<32>:word32]
	Mem523[eax_511 + 0x14<32>:word32] = ebx_480
	Mem524[eax_511 + 4<32>:word32] = ecx_522
	Mem525[eax_511 + 0x10<32>:word32] = 1<32>
	Mem526[dwArg04 + 0x378<32>:word32] = 0<32>
	ebx_480 = eax_511
l00740A3B:
	Mem532[edi_476:word32] = 0xF<32>
	fn007539D0(dwArg04)
	return 0<32>
l00740959:
	branch Mem487[dwArg04 + 0x1C4<32>:word32] > 1<32> l0074096E
l00740962:
	branch Mem487[dwArg04 + 0x14<32>:word32] != 0xB<32> l0074096E
l00740968:
	Mem557[edi_476:word32] = 0xB<32>
l0074096E:
	Mem562[edi_476 + 8<32>:word32] = Mem559[dwArg04 + 0x1C4<32>:word32]
	word32 ecx_563 = Mem562[dwArg04:word32]
	branch ecx_563 == 0<32> l00740A75
l00740A75:
	fn007539D0(dwArg04)
	return ebx_480
l00740982:
	Mem594[edi_476 + 0xC<32>:word32] = Mem562[dwArg04 + 4<32>:word32] - ecx_563
	word32 esi_596 = Mem594[dwArg04 + 8<32>:word32] - Mem594[dwArg04:word32]
	word32 eax_611 = fn00755020(dwArg04, dwArg04)
	word32 edi_616 = eax_611
	branch eax_611 != 0<32> l007409CC
l007409A3:
	word32 ecx_1208
	word32 edx_1209
	word32 eax_624 = fn00723860(esi_596 + 1<32>, out ecx_1208, out edx_1209)
	edi_616 = eax_624
	branch eax_624 == 0<32> l007409CC
l007409B5:
	branch esi_596 <=u 0<32> l007409C8
l007409B9:
	strncpy(eax_624, Mem623[dwArg04:word32], esi_596)
l007409C8:
	Mem652[esi_596 + eax_624:byte] = 0<8>
l007409CC:
	Mem662[dwArg08 + 0x10<32>:word32] = edi_616
	fn007539D0(dwArg04)
	return ebx_480
l007406C8:
	word32 eax_685
	call _iob_func (retsize: 4;)
		uses: eax:eax_27,ecx:ecx_28,Stack +0004:0x8DCEB8<32>,Stack +0038:dwArg04,Stack +003C:dwArg08,Stack +0040:bArg0C
		defs: eax:eax_685
	fprintf(eax_685 + 0x40<32>, 0x8DCEB8<32>, 0<32>)
	Mem698[dwArg08:word32] = 0xF<32>
	fn007539D0(dwArg04)
	return 0<32>
fn007406A0_exit:


word32 fn00740A90(word32 dwArg08, word32 dwArg14)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E8AC0
// MayUse:  Stack +0008:[0..31] Stack +0014:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx edi edx Top
// Preserved: esi esp
fn00740A90_entry:
l00740A90:
	Mem12[dwArg14 + 0x14<32>:word32] = 0xFFFFFFFF<32>
	Mem13[dwArg14 + 0x18<32>:word32] = 0xFFFFFFFF<32>
	Mem21[dwArg14:word32] = 0xA<32>
	Mem22[dwArg14 + 4<32>:word32] = dwArg08
	Mem23[dwArg14 + 8<32>:word32] = 0<32>
	Mem24[dwArg14 + 0xC<32>:word32] = 0<32>
	Mem25[dwArg14 + 0x10<32>:word32] = 0<32>
	word32 edi_18 = dwArg08
	word32 eax_27 = fn00755100()
	branch eax_27 != 0<32> l00740AE8
l00740AE8:
	branch dwArg08 != 0<32> l00740AF1
l00740AEC:
	edi_18 = 0x8D3F0C<32>
l00740AF1:
	Mem42[eax_27 + 0x1CC<32>:word32] = edi_18
	branch Mem42[0x00A74AEC<p32>:word32] != 0<32> l00740B09
l00740B00:
	branch Mem42[0x00A74AF0<p32>:word32] == 0<32> l00740B26
l00740B09:
	Mem55[eax_27 + 0x1D0<32>:word32] = CONVERT(CONVERT(edi_18 != 0<32>, bool, int8), int8, uint32)
	branch Mem55[0x00A74AEC<p32>:word32] < 2<32> l00740B26
l00740B1F:
	Mem59[eax_27 + 0x1D4<32>:word32] = Mem55[eax_27 + 0x1D4<32>:word32] + 1<32>
l00740B26:
	return fn007406A0(dwArg10, dwArg0C, eax_27, dwArg04, dwArg08)
l00740AD2:
	Mem100[dwArg14:word32] = (0<32> - (fn006E0FC0() == 0<32>) & 7<32>) + 0xF<32>
	return 0<32>
fn00740A90_exit:


word32 fn00740B40(word32 dwArg04, word32 dwArg08, word32 dwArg14, word32 dwArg18, word32 dwArg1C)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E8B50
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +0014:[0..31] Stack +0018:[0..31] Stack +001C:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx edi edx esi Top
// Preserved: esp
fn00740B40_entry:
l00740B40:
	Mem19[dwArg1C + 0x14<32>:word32] = 0xFFFFFFFF<32>
	Mem20[dwArg1C + 0x18<32>:word32] = 0xFFFFFFFF<32>
	Mem28[dwArg1C:word32] = 0xA<32>
	Mem29[dwArg1C + 4<32>:word32] = dwArg08
	Mem30[dwArg1C + 8<32>:word32] = 0<32>
	Mem31[dwArg1C + 0xC<32>:word32] = 0<32>
	Mem32[dwArg1C + 0x10<32>:word32] = 0<32>
	word32 eax_33 = fn00755140(dwArg04, dwArg14, dwArg18)
	branch eax_33 != 0<32> l00740B95
l00740B95:
	Mem44[eax_33 + 0x1CC<32>:word32] = dwArg08
	branch Mem44[0x00A74AEC<p32>:word32] != 0<32> l00740BAD
l00740BA4:
	branch Mem44[0x00A74AF0<p32>:word32] == 0<32> l00740BCA
l00740BAD:
	Mem57[eax_33 + 0x1D0<32>:word32] = CONVERT(CONVERT(dwArg08 != 0<32>, bool, int8), int8, uint32)
	branch Mem57[0x00A74AEC<p32>:word32] < 2<32> l00740BCA
l00740BC3:
	Mem61[eax_33 + 0x1D4<32>:word32] = Mem57[eax_33 + 0x1D4<32>:word32] + 1<32>
l00740BCA:
	return fn007406A0(dwArg10, dwArg0C, eax_33, dwArg1C, dwArg20)
l00740B8C:
	Mem95[dwArg1C:word32] = 0xF<32>
	return eax_33
fn00740B40_exit:


void fn00740C20(word32 eax)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00740CC0
// MayUse:  eax:[0..31]
// LiveOut:
// Trashed: SCZO eax Top
// Preserved: edi esi esp
fn00740C20_entry:
l00740C20:
	branch eax == 0<32> l00740C41
l00740C24:
l00740C30:
	word32 esi_18 = Mem17[eax + 8<32>:word32]
	free(eax)
	eax = esi_18
	branch esi_18 != 0<32> l00740C30
l00740C3F:
l00740C41:
	return
fn00740C20_exit:


word32 fn00740C50(word32 eax, word32 ecx, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00740DC0
// MayUse:  eax:[0..31] ecx:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ecx edx Top
// Preserved: ebx edi esi esp
fn00740C50_entry:
l00740C50:
	word32 esi_19 = ecx + 7<32> & 0xFFFFFFF8<32>
	word32 edi_16 = eax
	branch Mem14[eax + 4<32>:word32] + esi_19 <=u Mem14[eax:word32] l00740CA5
l00740C66:
	word32 ebx_24 = 0x2000<32>
	branch esi_19 <u 0x2000<32> l00740C75
l00740C73:
	ebx_24 = esi_19
l00740C75:
	word32 eax_32 = malloc(ebx_24 + 0x10<32>)
	branch eax_32 == 0<32> l00740CB6
l00740CB6:
	edxOut = edx
	return 0<32>
l00740C86:
	Mem51[eax_32:word32] = ebx_24
	Mem52[eax_32 + 0xC<32>:word32] = eax_32 + 0x10<32>
	Mem53[eax_32 + 8<32>:word32] = 0<32>
	edx = (eax_32 + 0x17<32> & 0xFFFFFFF8<32>) - (eax_32 + 0x10<32>)
	Mem54[eax_32 + 4<32>:word32] = edx
	Mem56[eax + 8<32>:word32] = eax_32
	edi_16 = eax_32
l00740CA5:
	word32 ecx_60 = Mem59[edi_16 + 4<32>:word32]
	word32 eax_62 = Mem59[edi_16 + 0xC<32>:word32] + ecx_60
	Mem67[edi_16 + 4<32>:word32] = ecx_60 + esi_19
	edxOut = edx
	return eax_62
fn00740C50_exit:


word32 fn00740CC0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E9040
//      fn006E90B0
//      fn006F67C0
// MayUse: 
// LiveOut: eax
// Trashed: SCZO eax ecx edi edx esi Top
// Preserved: esp
fn00740CC0_entry:
l00740CC0:
	word32 eax_13 = malloc(0xC<32>)
	branch eax_13 != 0<32> l00740CDC
l00740CDC:
	word32 esi_35
	word32 eax_21 = malloc(0x2010<32>)
	branch eax_21 != 0<32> l00740CEE
l00740CEE:
	Mem31[eax_21:word32] = 0x2000<32>
	Mem32[eax_21 + 0xC<32>:word32] = eax_21 + 0x10<32>
	Mem33[eax_21 + 8<32>:word32] = 0<32>
	Mem34[eax_21 + 4<32>:word32] = (eax_21 + 0x17<32> & 0xFFFFFFF8<32>) - (eax_21 + 0x10<32>)
	esi_35 = eax_21
l00740CEA:
	esi_35 = 0<32>
l00740D0E:
	Mem43[eax_13:word32] = esi_35
	Mem44[eax_13 + 4<32>:word32] = esi_35
	branch esi_35 != 0<32> l00740D28
l00740D28:
	word32 edx_154
	word32 eax_51 = fn006F2650(0<32>, out edx_154)
	Mem59[eax_13 + 8<32>:word32] = eax_51
	branch eax_51 != 0<32> l00740D51
l00740D51:
	return eax_13
l00740D39:
	fn00740C20(esi_35)
	free(eax_13)
l00740D4C_thunk_fn006E1210:
	word32 ecx_157
	word32 edx_158
	return fn006E1210(out ecx_157, out edx_158)
l00740D17:
	free(eax_13)
l00740D23_thunk_fn006E1210:
	word32 ecx_155
	word32 edx_156
	return fn006E1210(out ecx_155, out edx_156)
l00740CD5:
l00740CD7_thunk_fn006E1210:
	word32 ecx_152
	word32 edx_153
	return fn006E1210(out ecx_152, out edx_153)
fn00740CC0_exit:


void fn00740D60(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E9040
//      fn006E90B0
//      fn006F67C0
// MayUse:  Stack +0004:[0..31]
// LiveOut:
// Trashed: SCZO eax ebx ecx edi edx Top
// Preserved: esi esp
fn00740D60_entry:
l00740D60:
	word32 eax_12 = Mem10[dwArg04:word32]
	branch eax_12 == 0<32> l00740D83
l00740D72:
l00740D73:
	word32 esi_21 = Mem20[eax_12 + 8<32>:word32]
	free(eax_12)
	eax_12 = esi_21
	branch esi_21 != 0<32> l00740D73
l00740D82:
l00740D83:
	fn006F34B0(Mem34[dwArg04 + 8<32>:word32])
	word32 eax_57 = Mem45[dwArg04 + 8<32>:word32]
	Mem59[eax_57:word32] = Mem45[eax_57:word32] + 0xFFFFFFFF<32>
	word32 edx_60 = Mem59[dwArg04 + 8<32>:word32]
	branch Mem59[edx_60:word32] != 0<32> l00740DB3
l00740DA5:
	word32 ecx_65 = Mem59[edx_60 + 4<32>:word32]
	call Mem59[ecx_65 + 0x18<32>:word32] (retsize: 4;)
		uses: eax:edx_60,ecx:ecx_65,Stack +0004:edx_60,Stack +0008:dwArg04,Stack +0014:dwArg04
l00740DB3:
	free(dwArg04)
	return
fn00740D60_exit:


word32 fn00740DC0(word32 dwArg04, word32 dwArg08, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00742E70
//      fn00742EA0
//      fn00742ED0
//      fn00742F20
//      fn00742FB0
//      fn00743020
//      fn00743060
//      fn007430A0
//      fn00743100
//      fn007431B0
//      fn00743200
//      fn00743290
//      fn00743300
//      fn00743370
//      fn007433E0
//      fn00743430
//      fn00743480
//      fn007434C0
//      fn00743520
//      fn00743560
//      fn007435D0
//      fn00743640
//      fn00743680
//      fn007436E0
//      fn00743710
//      fn00743740
//      fn00743770
//      fn007437D0
//      fn00743880
//      fn00743900
//      fn00743980
//      fn00743A30
//      fn00743A70
//      fn00743AD0
//      fn00743B30
//      fn00743B70
//      fn00743BE0
//      fn00743C60
//      fn00743CC0
//      fn00743D20
//      fn00743D80
//      fn00743E30
//      fn00743EE0
//      fn00743F60
//      fn00743FC0
//      fn00744020
//      fn00744050
//      fn00744090
//      fn007440C0
//      fn00744110
//      fn00744180
//      fn007441C0
//      fn00744200
//      fn00744270
//      fn00752E30
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ecx edx Top
// Preserved: esi esp
fn00740DC0_entry:
l00740DC0:
	word32 edx_13
	word32 eax_11 = fn00740C50(Mem8[dwArg04 + 4<32>:word32], dwArg08, out edx_13)
	branch eax_11 != 0<32> l00740DDB
l00740DDB:
	word32 ecx_22 = Mem8[Mem8[dwArg04 + 4<32>:word32] + 8<32>:word32]
	branch ecx_22 == 0<32> l00740DE8
l00740DE5:
	Mem26[dwArg04 + 4<32>:word32] = ecx_22
l00740DE8:
	edxOut = edx_13
	return eax_11
l00740DD5:
l00740DD6_thunk_fn006E1210:
	word32 edx_37
	word32 ecx_70
	word32 eax_35 = fn006E1210(out ecx_70, out edx_37)
	edxOut = edx_37
	return eax_35
fn00740DC0_exit:


word32 fn00740DF0(word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0072DD60
//      fn0073B810
//      fn0073C100
//      fn0073C280
//      fn0073C520
//      fn0073C870
//      fn0073CAE0
//      fn0073CE00
//      fn0073E050
//      fn0073E390
//      fn0073FAF0
//      fn0073FC30
//      fn00740060
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: edx
// Trashed: SCZO ecx edx Top
// Preserved: edi esi esp
fn00740DF0_entry:
l00740DF0:
	word32 ecx_82
	word32 edx_21
	branch fn006F2A10(Mem0[dwArg04 + 8<32>:word32], dwArg08, out ecx_82, out edx_21) < 0<32> l00740E20
l00740E0D:
	word32 v11_29 = Mem17[dwArg08:word32] + 0xFFFFFFFF<32>
	Mem30[dwArg08:word32] = v11_29
	branch v11_29 != 0<32> l00740E20
l00740E12:
	word32 edx_33 = Mem30[dwArg08 + 4<32>:word32]
	call Mem30[edx_33 + 0x18<32>:word32] (retsize: 4;)
		uses: edx:edx_33,Stack +0004:dwArg08,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0014:dwArg04,Stack +0018:dwArg08
		defs: edx:edx_40
l00740E20:
	return edx_21
fn00740DF0_exit:


