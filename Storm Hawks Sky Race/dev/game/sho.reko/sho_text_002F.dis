word32 fn006F1A70(ptr32 & ecxOut, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006D9ED0
//      fn006DF760
//      fn006DF800
//      fn006F6D50
//      fn006F6EA0
//      fn006F9120
//      fn006FE400
//      fn00725010
//      fn00729D20
//      fn0072A5D0
//      fn0072C510
//      fn0072DD60
//      fn0072E790
//      fn0073B810
//      fn0073C100
//      fn0073C280
//      fn0073C520
//      fn0073C870
//      fn0073CAE0
//      fn0073CE00
//      fn0073E050
//      fn0073E390
//      fn0073FAF0
//      fn0073FC30
//      fn00740060
//      fn00748090
//      fn00748310
//      fn00748810
//      fn00748D30
//      fn00749820
//      fn00752CA0
// MayUse: 
// LiveOut: eax ecx edx
// Trashed: SCZO eax ecx Top
// Preserved: esp
fn006F1A70_entry:
l006F1A70:
	word32 ecx_60
	word32 edx_61
	branch fn006ECAC0(dwArg04, out ecx_60, out edx_61) != 0<32> l006F1A87
l006F1A87:
	word32 edx_62
	fn006EC890(fp - 4<32>, out edx_62)
	return
l006F1A85:
	return
fn006F1A70_exit:


word32 fn006F1AA0(word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E15D0
//      fn006F2070
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn006F1AA0_entry:
l006F1AA0:
	word32 edi_250
	word32 esi_136 = dwArg04
	word32 edi_100 = 0<32>
	branch Mem17[dwArg04:byte] == 0<8> l006F1B65
l006F1AB6:
	word32 ebp_102 = dwArg08 + 0xFFFFFFFC<32>
l006F1AC0:
	branch Mem27[esi_136:byte] != 0x25<8> l006F1B1A
l006F1AC5:
l006F1AC7:
	byte al_33 = Mem32[esi_136 + 1<32>:byte]
	esi_136 = esi_136 + 1<32>
	branch al_33 == 0<8> l006F1AE6
l006F1AD1:
	branch al_33 == 0x25<8> l006F1AE6
l006F1AD5:
	branch isalpha(CONVERT(al_33, byte, word32)) == 0<32> l006F1AC7
l006F1AE6:
	byte al_51 = Mem50[esi_136:byte]
	branch al_51 == 0x6C<8> l006F1AF0
l006F1AEC:
	branch al_51 != 0x7A<8> l006F1AFE
l006F1AF0:
	byte al_58 = Mem50[esi_136 + 1<32>:byte]
	branch al_58 == 0x64<8> l006F1AFB
l006F1AF7:
	branch al_58 != 0x75<8> l006F1AFE
l006F1AFB:
	esi_136 = esi_136 + 1<32>
l006F1AFE:
	word32 eax_69 = CONVERT(Mem50[esi_136:byte], byte, int32)
	branch eax_69 >u 0x78<32> l006F1B4F
l006F1B09:
	switch (eax_69 + 0xFFFFFFDB<32>) { l006F1B1A l006F1B4F l006F1B4F l006F1B4F l006F1B4F l006F1B4F l006F1B4F l006F1B4F l006F1B4F l006F1B4F l006F1B4F l006F1B4F l006F1B4F l006F1B4F l006F1B4F l006F1B4F l006F1B4F l006F1B4F l006F1B4F l006F1B4F l006F1B4F l006F1B4F l006F1B4F l006F1B4F l006F1B4F l006F1B4F l006F1B4F l006F1B4F l006F1B4F l006F1B4F l006F1B4F l006F1B4F l006F1B4F l006F1B4F l006F1B4F l006F1B4F l006F1B4F l006F1B4F l006F1B4F l006F1B4F l006F1B4F l006F1B4F l006F1B4F l006F1B4F l006F1B4F l006F1B4F l006F1B4F l006F1B4F l006F1B4F l006F1B4F l006F1B4F l006F1B4F l006F1B4F l006F1B4F l006F1B4F l006F1B4F l006F1B4F l006F1B4F l006F1B4F l006F1B4F l006F1B4F l006F1B4F l006F1B17 l006F1B27 l006F1B4F l006F1B4F l006F1B4F l006F1B4F l006F1B27 l006F1B4F l006F1B4F l006F1B4F l006F1B4F l006F1B4F l006F1B4F l006F1B47 l006F1B4F l006F1B4F l006F1B2F l006F1B4F l006F1B27 l006F1B4F l006F1B4F l006F1B27 }
l006F1B2F:
	word32 eax_80 = Mem50[ebp_102 + 4<32>:word32]
	ebp_102 = ebp_102 + 4<32>
	eax_84 = eax_80
l006F1B38:
	word32 eax_84
	eax_84 = eax_1522 + 1<32>
	eax_1522 = eax_84
	branch Mem50[eax_1522:byte] != 0<8> l006F1B38
l006F1B41:
	edi_100 = edi_100 + (eax_84 - (eax_80 + 1<32>))
l006F1B47:
	ebp_102 = ebp_102 + 4<32>
	edi_100 = edi_100 + 0x13<32>
l006F1B27:
	ebp_102 = ebp_102 + 4<32>
	edi_100 = edi_100 + 0x14<32>
l006F1B17:
	ebp_102 = ebp_102 + 4<32>
l006F1B4F:
	word32 eax_118 = esi_136
	word32 edx_119 = esi_136 + 1<32>
l006F1B54:
	eax_118 = eax_1523 + 1<32>
	eax_1523 = eax_118
	branch Mem50[eax_1523:byte] != 0<8> l006F1B54
l006F1B5D:
	edi_100 = edi_100 + (eax_118 - edx_119)
l006F1B1A:
	edi_100 = edi_100 + 1<32>
l006F1B1D:
	esi_136 = esi_136 + 1<32>
	branch Mem141[esi_136:byte] != 0<8> l006F1AC0
l006F1B25:
l006F1B61:
	branch edi_100 != 0<32> l006F1B79
l006F1B65:
	word32 eax_153 = Mem151[0x00A6C63C<p32>:word32]
	branch eax_153 == 0<32> l006F1B79
l006F1B79:
	word32 ecx_1511
	word32 edx_1512
	word32 eax_176 = fn00723860(edi_100 + 0x18<32>, out ecx_1511, out edx_1512)
	branch eax_176 != 0<32> l006F1B96
l006F1B96:
	Mem189[eax_176 + 8<32>:word32] = edi_100
	Mem190[eax_176 + 4<32>:word32] = 0xA1B450<32>
	Mem191[eax_176:word32] = 1<32>
	Mem192[eax_176 + 0xC<32>:word32] = 0xFFFFFFFF<32>
	Mem193[eax_176 + 0x10<32>:word32] = 0<32>
	Mem194[eax_176 + 0x14<32> + edi_100:byte] = 0<8>
	branch edi_100 != 0<32> l006F1BDA
l006F1BBD:
	word32 edx_1518
	fn006EC890(fp - 0x10<32>, out edx_1518)
	Mem246[eax_176:word32] = Mem199[eax_176:word32] + 1<32>
	Mem248[0x00A6C63C<p32>:word32] = eax_176
l006F1BDA:
	edi_250 = eax_176
l006F1B89:
	word32 ecx_1513
	word32 edx_1514
	edi_250 = fn006E1210(out ecx_1513, out edx_1514)
l006F1B6E:
	Mem262[eax_153:word32] = Mem151[eax_153:word32] + 1<32>
	edi_250 = eax_153
l006F1BE0:
	branch edi_250 != 0<32> l006F1BF2
l006F1BF2:
	word32 esi_291
	word32 eax_272 = Mem270[edi_250 + 4<32>:word32]
	branch eax_272 == 0xA1B450<32> l006F1C2F
l006F1BFC:
	word32 edx_1516
	word32 ecx_1515
	branch fn006D5670(eax_272, 0xA1B450<32>, out ecx_1515, out edx_1516) != 0<32> l006F1C2F
l006F1C2F:
	esi_291 = edi_250 + 0x14<32>
l006F1C0E:
	word32 edx_1517
	esi_291 = ~(0<32> - (fn006EA420(edi_250, dwArg04, dwArg08, out edx_1517) == 0<32>)) & dwLoc08
l006F1C32:
	word32 edi_860
	word32 esp_323 = fp - 0x20<32>
	word32 ebp_327 = dwArg04
	edi_860 = edi_250
	branch Mem325[dwArg04:byte] == 0<8> l006F1F62
l006F1C40:
	word32 ebx_331 = dwArg08 + 0xFFFFFFFC<32>
l006F1C50:
	byte al_335 = Mem334[ebp_327:byte]
	branch al_335 != 0x25<8> l006F1F24
l006F1F24:
	Mem339[esi_291:byte] = al_335
l006F1C5B:
	word32 eax_340 = CONVERT(Mem334[ebp_327 + 1<32>:byte], byte, word32)
	Mem342[esp_323 + 0x18<32>:word32] = ebp_327
	word32 esp_345 = esp_323 - 4<i32>
	Mem346[esp_345:word32] = eax_340
	Mem347[esp_345 + 0x28<32>:word32] = 0<32>
	Mem348[esp_345 + 0x2C<32>:word32] = 0<32>
	ebp_327 = ebp_327 + 1<32>
	word32 edi_344 = 0<32>
	branch isdigit(Mem348[esp_345:int32]) == 0<32> l006F1CA0
l006F1C7E:
	edi_344 = 0<32>
l006F1C80:
	word32 edx_357 = CONVERT(Mem356[ebp_327:byte], byte, int32)
	word32 esp_363 = esp_323 - 4<i32>
	Mem364[esp_363:word32] = CONVERT(Mem356[ebp_327 + 1<32>:byte], byte, word32)
	ebp_327 = ebp_327 + 1<32>
	edi_344 = edx_357 - 0x30<32> + edi_344 * 0xA<32>
	branch isdigit(Mem364[esp_363:int32]) != 0<32> l006F1C80
l006F1CA0:
	branch Mem372[ebp_327:byte] != 0x2E<8> l006F1CE0
l006F1CA6:
	word32 esp_378 = esp_323 - 4<i32>
	Mem379[esp_378:word32] = CONVERT(Mem372[ebp_327 + 1<32>:byte], byte, word32)
	ebp_327 = ebp_327 + 1<32>
	edi_344 = 0<32>
	branch isdigit(Mem379[esp_378:int32]) == 0<32> l006F1CE0
l006F1CBD:
l006F1CC0:
	word32 eax_389 = CONVERT(Mem388[ebp_327:byte], byte, int32)
	word32 esp_395 = esp_323 - 4<i32>
	Mem396[esp_395:word32] = CONVERT(Mem388[ebp_327 + 1<32>:byte], byte, word32)
	ebp_327 = ebp_327 + 1<32>
	edi_344 = eax_389 - 0x30<32> + edi_344 * 0xA<32>
	branch isdigit(Mem396[esp_395:int32]) != 0<32> l006F1CC0
l006F1CE0:
	byte al_405 = Mem404[ebp_327:byte]
	branch al_405 == 0<8> l006F1D06
l006F1CE7:
	branch al_405 == 0x25<8> l006F1D06
l006F1CEB:
	word32 esp_414 = esp_323 - 4<i32>
	Mem415[esp_414:word32] = CONVERT(al_405, byte, word32)
	branch isalpha(Mem415[esp_414:int32]) != 0<32> l006F1D06
l006F1CFC:
	al_405 = Mem415[ebp_327 + 1<32>:byte]
	ebp_327 = ebp_327 + 1<32>
	branch al_405 != 0<8> l006F1CE7
l006F1D06:
	word32 edx_441
	branch Mem428[ebp_327:byte] != 0x6C<8> l006F1D21
l006F1D0C:
	byte al_432 = Mem428[ebp_327 + 1<32>:byte]
	branch al_432 == 0x64<8> l006F1D17
l006F1D13:
	branch al_432 != 0x75<8> l006F1D21
l006F1D21:
	edx_441 = Mem428[esp_323 + 0x24<32>:word32]
l006F1D17:
	edx_441 = 1<32>
	ebp_327 = ebp_327 + 1<32>
l006F1D25:
	word32 ecx_461
	branch Mem428[ebp_327:byte] != 0x7A<8> l006F1D40
l006F1D2B:
	byte al_452 = Mem428[ebp_327 + 1<32>:byte]
	branch al_452 == 0x64<8> l006F1D36
l006F1D32:
	branch al_452 != 0x75<8> l006F1D40
l006F1D40:
	ecx_461 = Mem428[esp_323 + 0x28<32>:word32]
l006F1D36:
	ecx_461 = 1<32>
	ebp_327 = ebp_327 + 1<32>
l006F1D44:
	word32 eax_470 = CONVERT(Mem428[ebp_327:byte], byte, int32)
	branch eax_470 >u 0x78<32> l006F1F38
l006F1D54:
	switch (CONVERT(Mem428[eax_470 + 0x6F1FEF<32>:byte], byte, word32)) { l006F1F1F l006F1F38 l006F1F38 l006F1F38 l006F1F38 l006F1F38 l006F1F38 l006F1F38 l006F1F38 l006F1F38 l006F1F38 l006F1F38 l006F1F38 l006F1F38 l006F1F38 l006F1F38 l006F1F38 l006F1F38 l006F1F38 l006F1F38 l006F1F38 l006F1F38 l006F1F38 l006F1F38 l006F1F38 l006F1F38 l006F1F38 l006F1F38 l006F1F38 l006F1F38 l006F1F38 l006F1F38 l006F1F38 l006F1F38 l006F1F38 l006F1F38 l006F1F38 l006F1F38 l006F1F38 l006F1F38 l006F1F38 l006F1F38 l006F1F38 l006F1F38 l006F1F38 l006F1F38 l006F1F38 l006F1F38 l006F1F38 l006F1F38 l006F1F38 l006F1F38 l006F1F38 l006F1F38 l006F1F38 l006F1F38 l006F1F38 l006F1F38 l006F1F38 l006F1F38 l006F1F38 l006F1F38 l006F1D62 l006F1D6F l006F1F38 l006F1F38 l006F1F38 l006F1F38 l006F1DF5 l006F1F38 l006F1F38 l006F1F38 l006F1F38 l006F1F38 l006F1F38 l006F1EB8 l006F1F38 l006F1F38 l006F1E52 l006F1F38 l006F1DB2 l006F1F38 l006F1F38 l006F1E22 }
l006F1E22:
	word32 esp_492 = esp_323 - 4<i32>
	Mem493[esp_492:word32] = Mem428[ebx_331 + 4<32>:word32]
	Mem495[esp_492 - 4<i32>:word32] = 0x8A8538<32>
	Mem509[esp_492 - 8<i32>:word32] = esi_291
	sprintf(Mem509[esp_492 - 8<i32>:(ptr32 charconst )], Mem509[esp_492 - 4<i32>:(ptr32 charconst )], Mem509[esp_492:uint32])
	ebx_331 = ebx_331 + 4<32>
	word32 eax_511 = esi_291
	esp_323 = esp_492 + 4<32>
	word32 edx_514 = esi_291 + 1<32>
l006F1E40:
	eax_511 = eax_1524 + 1<32>
	eax_1524 = eax_511
	branch Mem509[eax_1524:byte] != 0<8> l006F1E40
l006F1E49:
	esi_291 = esi_291 + (eax_511 - edx_514)
l006F1DB2:
	word32 esp_547
	ebx_331 = ebx_331 + 4<32>
	branch edx_441 == 0<32> l006F1DC3
l006F1DC3:
	word32 esp_541
	branch ecx_461 == 0<32> l006F1DCC
l006F1DCC:
	esp_541 = esp_323 - 4<i32>
	Mem542[esp_541:word32] = Mem428[ebx_331:word32]
l006F1DC7:
	esp_541 = esp_323 - 4<i32>
	Mem545[esp_541:word32] = Mem428[ebx_331:word32]
l006F1DCF:
	esp_547 = esp_541 - 4<i32>
	Mem548[esp_547:word32] = 0x8D4FAC<32>
l006F1DB9:
	word32 esp_550 = esp_323 - 4<i32>
	Mem551[esp_550:word32] = Mem428[ebx_331:word32]
	Mem553[esp_550 - 4<i32>:word32] = 0x8D4FB0<32>
	esp_547 = esp_550 - 4<i32>
l006F1DD4:
	word32 esp_555 = esp_547 - 4<i32>
	Mem558[esp_555:word32] = esi_291
	sprintf(Mem558[esp_555:(ptr32 charconst )], Mem558[esp_555 + 4<i32>:(ptr32 charconst )], Mem558[esp_555 + 8<i32>:uint32])
	word32 eax_560 = esi_291
	esp_323 = esp_555 + 0xC<32>
	word32 edx_563 = esi_291 + 1<32>
l006F1DE3:
	eax_560 = eax_1525 + 1<32>
	eax_1525 = eax_560
	branch Mem558[eax_1525:byte] != 0<8> l006F1DE3
l006F1DEC:
	esi_291 = esi_291 + (eax_560 - edx_563)
l006F1E52:
	word32 ecx_576 = Mem428[ebx_331 + 4<32>:word32]
	Mem580[esp_323 + 0x24<32>:word32] = ebx_331 + 4<32>
	word32 eax_579 = ecx_576
l006F1E61:
	eax_579 = eax_1526 + 1<32>
	eax_1526 = eax_579
	branch Mem580[eax_1526:byte] != 0<8> l006F1E61
l006F1E6A:
	word32 eax_590 = eax_579 - (ecx_576 + 1<32>)
	word32 ebx_604 = eax_590
	branch edi_344 <= 0<32> l006F1E78
l006F1E72:
	branch eax_590 <= edi_344 l006F1E78
l006F1E76:
	ebx_604 = edi_344
l006F1E78:
	branch ebx_604 <u 0x10<32> l006F1E93
l006F1E93:
	branch ebx_604 <=u 0<32> l006F1EAD
l006F1E97:
	word32 eax_617 = esi_291
	word32 ecx_620 = ecx_576 - esi_291
	word32 edi_622 = ebx_604
l006F1EA0:
	Mem628[eax_617:byte] = Mem626[ecx_620 + eax_617:byte]
	eax_617 = eax_617 + 1<32>
	edi_622 = edi_622 - 1<32>
	branch edi_622 != 0<32> l006F1EA0
l006F1EAD:
	esi_291 = esi_291 + ebx_604
	ebx_331 = Mem644[esp_323 + 0x24<32>:word32]
l006F1E7D:
	word32 esp_647 = esp_323 - 4<i32>
	Mem648[esp_647:word32] = ebx_604
	Mem650[esp_647 - 4<i32>:word32] = ecx_576
	Mem652[esp_647 - 8<i32>:word32] = esi_291
	memcpy(Mem652[esp_647 - 8<i32>:(ptr32 void)], Mem652[esp_647 - 4<i32>:(ptr32 void)], Mem652[esp_647:size_t])
	esp_323 = esp_647 + 4<32>
	esi_291 = esi_291 + ebx_604
	ebx_331 = Mem652[esp_647 + 0x28<32>:word32]
l006F1EB8:
	word32 esp_660 = esp_323 - 4<i32>
	Mem661[esp_660:word32] = Mem428[ebx_331 + 4<32>:word32]
	Mem663[esp_660 - 4<i32>:word32] = 0x8D4FA4<32>
	Mem665[esp_660 - 8<i32>:word32] = esi_291
	sprintf(Mem665[esp_660 - 8<i32>:(ptr32 charconst )], Mem665[esp_660 - 4<i32>:(ptr32 charconst )], Mem665[esp_660:ptr32])
	ebx_331 = ebx_331 + 4<32>
	byte al_667 = Mem665[esi_291 + 1<32>:byte]
	branch al_667 == 0x58<8> l006F1F00
l006F1ED5:
	branch al_667 == 0x78<8> l006F1F04
l006F1ED9:
	word32 eax_673 = esi_291
	word32 edx_674 = esi_291 + 1<32>
l006F1EE0:
	eax_673 = eax_1527 + 1<32>
	eax_1527 = eax_673
	branch Mem665[eax_1527:byte] != 0<8> l006F1EE0
l006F1EE9:
	Mem688[esp_660:word32] = eax_673 - edx_674 + 1<32>
	Mem692[esp_660 - 4<i32>:word32] = esi_291
	Mem694[esp_660 - 8<i32>:word32] = esi_291 + 2<32>
	memmove(Mem694[esp_660 - 8<i32>:(ptr32 void)], Mem694[esp_660 - 4<i32>:(ptr32 void)], Mem694[esp_660:size_t])
	Mem698[esi_291:byte] = 0x30<8>
l006F1F00:
	Mem700[esi_291 + 1<32>:byte] = 0x78<8>
l006F1F04:
	word32 eax_702 = esi_291
	word32 edx_703 = esi_291 + 1<32>
l006F1F10:
	eax_702 = eax_1528 + 1<32>
	eax_1528 = eax_702
	branch Mem1024[eax_1528:byte] != 0<8> l006F1F10
l006F1F19:
	esi_291 = esi_291 + (eax_702 - edx_703)
l006F1DF5:
	word32 esp_721 = esp_323 - 4<i32>
	Mem722[esp_721:word32] = Mem428[ebx_331 + 4<32>:word32]
	Mem724[esp_721 - 4<i32>:word32] = 0x8D4FA8<32>
	Mem726[esp_721 - 8<i32>:word32] = esi_291
	sprintf(Mem726[esp_721 - 8<i32>:(ptr32 charconst )], Mem726[esp_721 - 4<i32>:(ptr32 charconst )], Mem726[esp_721:int32])
	ebx_331 = ebx_331 + 4<32>
	word32 eax_728 = esi_291
	esp_323 = esp_721 + 4<32>
	word32 edx_731 = esi_291 + 1<32>
l006F1E10:
	eax_728 = eax_1529 + 1<32>
	eax_1529 = eax_728
	branch Mem726[eax_1529:byte] != 0<8> l006F1E10
l006F1E19:
	esi_291 = esi_291 + (eax_728 - edx_731)
l006F1D6F:
	word32 esp_758
	ebx_331 = ebx_331 + 4<32>
	branch edx_441 == 0<32> l006F1D80
l006F1D80:
	word32 esp_752
	branch ecx_461 == 0<32> l006F1D89
l006F1D89:
	esp_752 = esp_323 - 4<i32>
	Mem753[esp_752:word32] = Mem428[ebx_331:word32]
l006F1D84:
	esp_752 = esp_323 - 4<i32>
	Mem756[esp_752:word32] = Mem428[ebx_331:word32]
l006F1D8C:
	esp_758 = esp_752 - 4<i32>
	Mem759[esp_758:word32] = 0x8A8F48<32>
l006F1D76:
	word32 esp_761 = esp_323 - 4<i32>
	Mem762[esp_761:word32] = Mem428[ebx_331:word32]
	Mem764[esp_761 - 4<i32>:word32] = 0x8D4FB4<32>
	esp_758 = esp_761 - 4<i32>
l006F1D91:
	word32 esp_766 = esp_758 - 4<i32>
	Mem769[esp_766:word32] = esi_291
	sprintf(Mem769[esp_766:(ptr32 charconst )], Mem769[esp_766 + 4<i32>:(ptr32 charconst )], Mem769[esp_766 + 8<i32>:int32])
	word32 eax_771 = esi_291
	esp_323 = esp_766 + 0xC<32>
	word32 edx_774 = esi_291 + 1<32>
l006F1DA0:
	eax_771 = eax_1530 + 1<32>
	eax_1530 = eax_771
	branch Mem769[eax_1530:byte] != 0<8> l006F1DA0
l006F1DA9:
	esi_291 = esi_291 + (eax_771 - edx_774)
l006F1D62:
	Mem790[esi_291:byte] = Mem428[ebx_331 + 4<32>:byte]
	ebx_331 = ebx_331 + 4<32>
l006F1F38:
	word32 eax_793 = Mem428[esp_323 + 0x18<32>:word32]
	word32 edx_796 = esi_291 - eax_793
l006F1F40:
	byte cl_800 = Mem799[eax_793:byte]
	Mem802[edx_796 + eax_793:byte] = cl_800
	eax_793 = eax_793 + 1<32>
	branch cl_800 != 0<8> l006F1F40
l006F1F4C:
	word32 eax_808 = esi_291
	word32 edx_809 = esi_291 + 1<32>
l006F1F51:
	eax_808 = eax_1531 + 1<32>
	eax_1531 = eax_808
	branch Mem802[eax_1531:byte] != 0<8> l006F1F51
l006F1F5A:
	esi_291 = esi_291 + (eax_808 - edx_809)
l006F1F1F:
	Mem822[esi_291:byte] = 0x25<8>
l006F1F26:
	esi_291 = esi_291 + 1<32>
l006F1F29:
	ebp_327 = ebp_327 + 1<32>
	branch Mem845[ebp_327:byte] != 0<8> l006F1C50
l006F1F36:
l006F1F5E:
	edi_860 = Mem859[esp_323 + 0x10<32>:word32]
l006F1F62:
	word32 esp_872 = esp_323 - 4<i32>
	Mem873[esp_872:word32] = esi_291 - edi_860 - 0x14<32>
	Mem875[esp_872 - 4<i32>:word32] = esp_323 + 0x14<32>
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 edx_1521
	word32 ecx_1520
	fn006EC4F0(stackArg4, dwArg04, out ecx_1520, out edx_1521)
	return edi_250
l006F1BE8:
	return 0<32>
fn006F1AA0_exit:


word32 fn006F2070()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006DDEB0
//      fn00708C10
//      fn0072A520
//      fn007483C0
// MayUse: 
// LiveOut: eax
// Trashed: SCZO eax ecx Top
// Preserved: esp
fn006F2070_entry:
l006F2070:
	return fn006F1AA0(dwArg04, fp + 8<32>)
fn006F2070_exit:


word32 fn006F2090(word32 dwArg04, word32 dwArg08, word32 dwArg14, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073D450
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +0014:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn006F2090_entry:
l006F2090:
	word32 dwLoc0C_771
	branch dwArg14 == 0<32> l006F20AD
l006F20AD:
	dwLoc0C_771 = dwArg08
l006F20A0:
	dwLoc0C_771 = dwArg08 * 4<32>
l006F20B1:
	word32 eax_24
	word32 edi_20 = dwLoc0C_771
	branch dwLoc0C_771 != 0<32> l006F20C2
l006F20B9:
	eax_24 = Mem19[0x00A6C63C<p32>:word32]
	branch eax_24 != 0<32> l006F211A
l006F20C2:
	word32 ecx_1135
	eax_24 = fn00723860(dwLoc0C_771 + 0x18<32>, out ecx_1135, out edx)
	branch eax_24 != 0<32> l006F20D9
l006F20D9:
	Mem46[eax_24 + 8<32>:word32] = dwLoc0C_771
	Mem47[eax_24 + 4<32>:word32] = 0xA1B450<32>
	Mem48[eax_24:word32] = 1<32>
	Mem49[eax_24 + 0xC<32>:word32] = 0xFFFFFFFF<32>
	Mem50[eax_24 + 0x10<32>:word32] = 0<32>
	Mem51[eax_24 + 0x14<32> + dwLoc0C_771:byte] = 0<8>
	branch dwLoc0C_771 != 0<32> l006F211D
l006F2100:
	fn006EC890(fp - 0x10<32>, out edx)
	Mem70[0x00A6C63C<p32>:word32] = eax_24
l006F211A:
	Mem74[eax_24:word32] = Mem72[eax_24:word32] + 1<32>
l006F20D2:
	word32 ecx_1136
	eax_24 = fn006E1210(out ecx_1136, out edx)
l006F211D:
	branch eax_24 != 0<32> l006F212F
l006F212F:
	word32 esi_1138
	word32 ecx_1137
	word32 edx_115
	word32 eax_113 = fn006ECC50(eax_24, out ecx_1137, out edx_115, out esi_1138)
	word32 ebp_118 = dwArg04
	word32 esi_119 = dwArg08 + dwArg04
	word32 esp_120 = fp - 0x28<32>
	word32 ebx_123 = eax_113
	branch dwArg04 >=u esi_119 l006F2448
l006F2152:
	word32 esp_234
	word32 edx_131
	branch Mem127[ebp_118:byte] != 0x5C<8> l006F236C
l006F236C:
	edx_131 = Mem127[esp_120 + 0x34<32>:word32]
l006F215C:
	word32 ebp_132 = ebp_118 + 1<32>
	branch ebp_132 == esi_119 l006F2468
l006F2468:
	word32 eax_136 = Mem127[0x00A17E2C<p32>:word32]
	word32 esp_137 = esp_120 - 4<i32>
	Mem138[esp_137:word32] = 0x8D4FCC<32>
	Mem140[esp_137 - 4<i32>:word32] = eax_136
l006F2167:
	word32 eax_141 = CONVERT(Mem127[ebp_132:byte], byte, int32)
	ebp_118 = ebp_132 + 1<32>
	branch eax_141 >u 0x78<32> l006F235D
l006F217A:
	switch (CONVERT(Mem127[eax_141 + 0x6F24D6<32>:byte], byte, word32)) { l006F2438 l006F235D l006F235D l006F235D l006F235D l006F235D l006F235D l006F235D l006F235D l006F235D l006F235D l006F235D l006F235D l006F235D l006F235D l006F235D l006F235D l006F235D l006F235D l006F235D l006F235D l006F235D l006F235D l006F235D l006F219E l006F235D l006F235D l006F235D l006F235D l006F2193 l006F235D l006F235D l006F235D l006F235D l006F235D l006F235D l006F235D l006F235D l006F21F6 l006F21F6 l006F21F6 l006F21F6 l006F21F6 l006F21F6 l006F21F6 l006F21F6 l006F235D l006F235D l006F235D l006F235D l006F235D l006F235D l006F235D l006F235D l006F235D l006F235D l006F235D l006F235D l006F235D l006F235D l006F235D l006F235D l006F235D l006F235D l006F235D l006F235D l006F235D l006F235D l006F235D l006F235D l006F235D l006F235D l006F235D l006F235D l006F235D l006F235D l006F235D l006F235D l006F235D l006F235D l006F235D l006F235D l006F2188 l006F235D l006F235D l006F235D l006F235D l006F21EB l006F21A9 l006F235D l006F235D l006F235D l006F21B4 l006F235D l006F235D l006F235D l006F235D l006F235D l006F235D l006F235D l006F21CA l006F235D l006F235D l006F235D l006F21D5 l006F235D l006F21BF l006F235D l006F21E0 l006F235D l006F223D }
l006F223D:
	branch ebp_132 + 2<32> >=u esi_119 l006F22E8
l006F2248:
	word32 esp_152 = esp_120 - 4<i32>
	Mem153[esp_152:word32] = CONVERT(Mem127[ebp_132 + 1<32>:byte], byte, word32)
	branch isxdigit(Mem153[esp_152:int32]) == 0<32> l006F22E8
l006F2260:
	Mem161[esp_152:word32] = CONVERT(Mem153[ebp_132 + 2<32>:byte], byte, word32)
	branch isxdigit(Mem161[esp_152:int32]) == 0<32> l006F22E8
l006F22E8:
	edx_131 = Mem168[esp_120 + 0x34<32>:word32]
	branch edx_131 == 0<32> l006F2475
l006F22F4:
	word32 edi_173 = 0x8D1DC8<32>
	word32 esi_174 = edx_131
	word32 ecx_175 = 7<32>
	bool v26_755 = true
l006F2302:
	branch ecx_175 == 0<32> l006F2304
l006F2302_1:
	v26_755 = Mem168[esi_1147:byte] == Mem168[edi_1148:byte]
	esi_174 = esi_1147 + 1<i32>
	edi_173 = edi_1148 + 1<i32>
	ecx_175 = ecx_175 - 1<32>
	esi_1147 = esi_174
	edi_1148 = edi_173
	branch Mem168[esi_1147:byte] != Mem168[edi_1148:byte] l006F2302
l006F2304:
	branch v26_755 l006F2475
l006F2475:
	word32 edx_193 = Mem168[0x00A17E2C<p32>:word32]
	word32 esp_197 = esp_120 - 4<i32>
	Mem198[esp_197:word32] = 0x8D4FB8<32>
	Mem200[esp_197 - 4<i32>:word32] = edx_193
l006F2481:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_1144
	fn006E0F80(stackArg4, dwArg04, out ecx_1144, out edx_115)
	esp_234 = esp_120
l006F230A:
	word32 edi_236 = 0x8D46D8<32>
	word32 esi_239 = edx_131
	word32 ecx_240 = 8<32>
	bool v30_759 = false
l006F2318:
	branch ecx_240 == 0<32> l006F231A
l006F2318_2:
	v30_759 = Mem168[esi_1149:byte] != Mem168[edi_1150:byte]
	esi_239 = esi_1149 + 1<i32>
	edi_236 = edi_1150 + 1<i32>
	ecx_240 = ecx_240 - 1<32>
	esi_1149 = esi_239
	edi_1150 = edi_236
	branch Mem168[esi_1149:byte] != Mem168[edi_1150:byte] l006F2318
l006F231A:
	branch v30_759 l006F2331
l006F2331:
	word32 edi_256 = 0x8B056C<32>
	word32 esi_259 = edx_131
	word32 ecx_260 = 7<32>
	bool v34_763 = true
l006F233F:
	branch ecx_260 == 0<32> l006F2341
l006F233F_1:
	v34_763 = Mem168[esi_1151:byte] == Mem168[edi_1152:byte]
	esi_259 = esi_1151 + 1<i32>
	edi_256 = edi_1152 + 1<i32>
	ecx_260 = ecx_260 - 1<32>
	esi_1151 = esi_259
	edi_1152 = edi_256
	branch Mem168[esi_1151:byte] != Mem168[edi_1152:byte] l006F233F
l006F2341:
	branch v34_763 l006F2322
l006F2343:
	word32 ecx_277 = Mem168[0x00A17E2C<p32>:word32]
	word32 esp_282 = esp_120 - 4<i32>
	Mem285[esp_282:word32] = edx_131
	Mem287[esp_282 - 4<i32>:word32] = 0x8D4FE4<32>
	Mem289[esp_282 - 8<i32>:word32] = ecx_277
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_1140
	fn006E15D0(stackArg4, dwArg04, out ecx_1140, out edx_115)
	esp_234 = esp_282 + 4<32>
l006F231C:
	Mem312[ebx_123:byte] = 0x3F<8>
	ebx_123 = ebx_123 + 1<32>
l006F2322:
	esi_119 = Mem316[esp_120 + 0x10<32>:word32]
	Mem319[ebx_123:byte] = 0x5C<8>
	ebx_123 = ebx_123 + 1<32>
	ebp_118 = ebp_132
l006F226D:
	word32 edi_339
	word32 esi_324 = CONVERT(Mem161[ebp_132 + 1<32>:byte], byte, word32)
	Mem326[esp_152:word32] = esi_324
	branch isdigit(Mem326[esp_152:int32]) == 0<32> l006F2286
l006F2286:
	Mem334[esp_152:word32] = esi_324
	edi_339 = esi_324 - 0x57<32>
	branch islower(Mem334[esp_152:int32]) != 0<32> l006F229A
l006F2297:
	edi_339 = esi_324 - 0x37<32>
l006F2281:
	edi_339 = esi_324 - 0x30<32>
l006F229A:
	word32 esi_345 = CONVERT(Mem344[ebp_132 + 2<32>:byte], byte, word32)
	word32 esp_347 = esp_120 - 4<i32>
	Mem348[esp_347:word32] = esi_345
	word32 edi_350 = edi_339 << 4<32>
	ebp_118 = ebp_132 + 3<32>
	esp_120 = esp_347 + 4<32>
	branch isdigit(Mem348[esp_347:int32]) == 0<32> l006F22C4
l006F22C4:
	Mem358[esp_347:word32] = esi_345
	esp_120 = esp_347 + 4<32>
	byte al_369 = SLICE(edi_350 - 0x57<32> + esi_345, byte, 0)
	branch islower(Mem358[esp_347:int32]) != 0<32> l006F22DA
l006F22D6:
	al_369 = SLICE(edi_350 - 0x37<32> + esi_345, byte, 0) (alias)
l006F22DA:
	esi_119 = Mem358[esp_347 + 0x14<32>:word32]
	Mem374[ebx_123:byte] = al_369
	ebx_123 = ebx_123 + 1<32>
l006F22B2:
	esi_119 = Mem348[esp_347 + 0x14<32>:word32]
	Mem380[ebx_123:byte] = SLICE(edi_350 - 0x30<32> + esi_345, byte, 0)
	ebx_123 = ebx_123 + 1<32>
l006F21E0:
	Mem383[ebx_123:byte] = 0xB<8>
	ebx_123 = ebx_123 + 1<32>
l006F21BF:
	Mem386[ebx_123:byte] = 9<8>
	ebx_123 = ebx_123 + 1<32>
l006F21D5:
	Mem389[ebx_123:byte] = 0xD<8>
	ebx_123 = ebx_123 + 1<32>
l006F21CA:
	Mem392[ebx_123:byte] = 0xA<8>
	ebx_123 = ebx_123 + 1<32>
l006F21B4:
	Mem395[ebx_123:byte] = 0xC<8>
	ebx_123 = ebx_123 + 1<32>
l006F21A9:
	Mem398[ebx_123:byte] = 8<8>
	ebx_123 = ebx_123 + 1<32>
l006F21EB:
	Mem401[ebx_123:byte] = 7<8>
	ebx_123 = ebx_123 + 1<32>
l006F2188:
	Mem404[ebx_123:byte] = 0x5C<8>
	ebx_123 = ebx_123 + 1<32>
l006F21F6:
	word32 eax_409 = CONVERT(Mem127[ebp_132:byte], byte, int32)
	byte al_433 = SLICE(eax_409 - 0x30<32>, byte, 0)
	branch ebp_132 + 1<32> >=u esi_119 l006F2233
l006F2201:
	byte cl_414 = Mem127[ebp_132 + 1<32>:byte]
	branch cl_414 < 0x30<8> l006F2233
l006F2209:
	branch cl_414 > 0x37<8> l006F2233
l006F220E:
	word32 eax_422 = CONVERT(cl_414, byte, int32) - 0x30<32> + (eax_409 - 0x30<32>) * 8<32>
	ebp_118 = ebp_132 + 2<32>
	al_433 = SLICE(eax_422, byte, 0) (alias)
	branch ebp_132 + 2<32> >=u esi_119 l006F2233
l006F221C:
	byte cl_424 = Mem127[ebp_132 + 2<32>:byte]
	branch cl_424 < 0x30<8> l006F2233
l006F2224:
	branch cl_424 > 0x37<8> l006F2233
l006F2229:
	edx_115 = CONVERT(cl_424, byte, int32)
	al_433 = SLICE(edx_115 - 0x30<32> + eax_422 * 8<32>, byte, 0) (alias)
	ebp_118 = ebp_132 + 3<32>
l006F2233:
	Mem439[ebx_123:byte] = al_433
	ebx_123 = ebx_123 + 1<32>
l006F2193:
	Mem442[ebx_123:byte] = 0x27<8>
	ebx_123 = ebx_123 + 1<32>
l006F219E:
	Mem445[ebx_123:byte] = 0x22<8>
	ebx_123 = ebx_123 + 1<32>
l006F235D:
	edx_131 = Mem127[esp_120 + 0x34<32>:word32]
	Mem452[ebx_123:byte] = 0x5C<8>
	ebx_123 = ebx_123 + 1<32>
	ebp_118 = ebp_132
l006F2370:
	word24 edx_24_8_895 = SLICE(edx_131, word24, 8)
	word32 edi_459 = Mem458[esp_120 + 0x3C<32>:word32]
	branch edi_459 == 0<32> l006F242D
l006F237C:
	branch (Mem458[ebp_118:byte] & 0x80<8>) == 0<8> l006F242D
l006F242D:
	byte dl_469 = Mem458[ebp_118:byte]
	Mem472[ebx_123:byte] = dl_469
	ebx_123 = ebx_123 + 1<32>
	ebp_118 = ebp_118 + 1<32>
	edx_115 = SEQ(edx_24_8_895, dl_469) (alias)
l006F2386:
	Mem480[esp_120 + 0x18<32>:word32] = ebp_118
	word32 eax_479 = ebp_118
	branch ebp_118 >=u esi_119 l006F23A0
l006F2390:
	branch (Mem480[eax_479:byte] & 0x80<8>) == 0<8> l006F239C
l006F2395:
	eax_479 = eax_479 + 1<32>
	branch eax_479 <u esi_119 l006F2390
l006F239C:
	Mem494[esp_120 + 0x18<32>:word32] = eax_479
l006F23A0:
	word32 esp_496 = esp_120 - 4<i32>
	Mem502[esp_496:word32] = edx_131
	Mem510[esp_496 - 4<i32>:word32] = eax_479 - ebp_118
	Mem512[esp_496 - 8<i32>:word32] = ebp_118
	word32 eax_528 = fn0071FC80(out edx_115)
	esp_234 = esp_496 + 4<32>
	branch eax_528 == 0<32> l006F2489
l006F23B7:
	Mem540[esp_496:word32] = Mem512[esp_496 + 0x38<32>:word32]
	Mem542[esp_496 - 4<32>:word32] = edi_459
	Mem544[esp_496 - 8<i32>:word32] = eax_528
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_1142
	word32 eax_546 = fn0071FB20(stackArg4, dwArg04, dwArg08, out ecx_1142, out edx_115)
	word32 v18_552 = Mem544[eax_528:word32] + 0xFFFFFFFF<32>
	Mem553[eax_528:word32] = v18_552
	esp_234 = esp_496 + 4<32>
	branch v18_552 != 0<32> l006F23D9
l006F23CD:
	word32 edx_557 = Mem553[eax_528 + 4<32>:word32]
	word32 eax_558 = Mem553[edx_557 + 0x18<32>:word32]
	Mem560[esp_496:word32] = eax_528
	word32 esp_561
	word32 ecx_563
	call eax_558 (retsize: 4;)
		uses: ecx:ecx_563,edx:edx_557,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0018:dwArg14
		defs: ecx:ecx_563,edx:edx_564,esp:esp_561
	esp_234 = esp_561 + 4<32>
l006F23D9:
	word24 edx_24_8_900 = SLICE(edx_115, word24, 8)
	branch eax_546 == 0<32> l006F2489
l006F2489:
	word32 eax_578 = Mem575[esp_234 + 0x14<32>:word32]
	word32 v17_579 = Mem575[eax_578:word32] + 0xFFFFFFFF<32>
	Mem580[eax_578:word32] = v17_579
	branch v17_579 != 0<32> l006F249E
l006F2492:
	word32 ecx_583 = Mem580[eax_578 + 4<32>:word32]
	word32 edx_584 = Mem580[ecx_583 + 0x18<32>:word32]
	Mem586[esp_234 - 4<i32>:word32] = eax_578
	call edx_584 (retsize: 4;)
		uses: ecx:ecx_583,edx:edx_599,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0018:dwArg14
		defs: edx:edx_599
l006F249E:
	edxOut = edx_115
	return 0<32>
l006F23E1:
	word32 ebp_617 = Mem576[eax_546 + 8<32>:word32]
	branch ebp_617 <u 0x10<32> l006F23F9
l006F23F9:
	branch ebp_617 <=u 0<32> l006F2410
l006F23FD:
	word32 eax_625 = ebx_123
	word32 esi_626 = eax_546 + 0x14<32> - ebx_123
	word32 ecx_628 = ebp_617
l006F2403:
	byte dl_632 = Mem631[esi_626 + eax_625:byte]
	Mem633[eax_625:byte] = dl_632
	eax_625 = eax_625 + 1<32>
	ecx_628 = ecx_628 - 1<32>
	edx_115 = SEQ(edx_24_8_900, dl_632) (alias)
	branch ecx_628 != 0<32> l006F2403
l006F23EC:
	word32 esp_639 = esp_234 - 4<i32>
	Mem640[esp_639:word32] = ebp_617
	Mem642[esp_639 - 4<i32>:word32] = eax_546 + 0x14<32>
	Mem644[esp_639 - 8<i32>:word32] = ebx_123
	memcpy(Mem644[esp_639 - 8<i32>:(ptr32 void)], Mem644[esp_639 - 4<i32>:(ptr32 void)], Mem644[esp_639:size_t])
l006F2410:
	word32 edx_672
	word32 v22_656 = Mem655[eax_546:word32] + 0xFFFFFFFF<32>
	Mem657[eax_546:word32] = v22_656
	esp_120 = esp_234
	ebx_123 = ebx_123 + ebp_617
	branch v22_656 != 0<32> l006F2423
l006F2417:
	word32 eax_660 = Mem657[eax_546 + 4<32>:word32]
	word32 ecx_661 = Mem657[eax_660 + 0x18<32>:word32]
	Mem665[esp_234 - 4<i32>:word32] = eax_546
	word32 esp_669
	word32 ecx_671
	call ecx_661 (retsize: 4;)
		uses: eax:eax_660,ecx:ecx_671,edx:edx_672,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0018:dwArg14
		defs: ecx:ecx_671,edx:edx_672,esp:esp_669
	esp_120 = esp_669 + 4<32>
	edx_115 = edx_672
l006F2423:
	ebp_118 = Mem678[esp_120 + 0x18<32>:word32]
	esi_119 = Mem678[esp_120 + 0x10<32>:word32]
l006F2438:
	branch ebp_118 <u esi_119 l006F2152
l006F2440:
	edi_20 = Mem693[esp_120 + 0x1C<32>:word32]
	eax_113 = Mem693[esp_120 + 0x24<32>:word32]
l006F2448:
	word32 ebx_700 = ebx_123 - eax_113
	branch ebx_700 >= edi_20 l006F245C
l006F244E:
	word32 esp_706 = esp_120 - 4<i32>
	Mem707[esp_706:word32] = ebx_700
	Mem709[esp_706 - 4<i32>:word32] = esp_120 + 0x20<32>
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_1146
	fn006EC4F0(stackArg4, dwArg04, out ecx_1146, out edx_115)
l006F245C:
	edxOut = edx_115
	return eax_24
l006F2129:
	edxOut = edx
	return eax_24
fn006F2090_exit:


word32 fn006F2590(word32 ebx, word32 esi, ptr32 & ecxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006F29C0
//      fn006F31C0
//      fn006F3930
// MayUse:  ebx:[0..31] esi:[0..31]
// LiveOut: eax ecx
// Trashed: SCZO eax ecx edi edx Top
// Preserved: esp
fn006F2590_entry:
l006F2590:
	word32 eax_6 = Mem0[ebx + 0x10<32>:word32]
	branch eax_6 < esi l006F25A3
l006F2597:
	branch esi < eax_6 >> 1<32> l006F25A3
l006F25A3:
	word32 eax_34 = (CONVERT(CONVERT(esi >= 9<32>, bool, int8), int8, uint32) - 1<32> & 0xFFFFFFFD<32>) + 6<32> + (esi >> 3<32>)
	branch eax_34 >u 0xFFFFFFFF<32> - esi l006F25F9
l006F25C7:
	word32 edi_38 = eax_34 + esi
	branch esi != 0<32> l006F25CF
l006F25CD:
	edi_38 = 0<32>
l006F25CF:
	word32 ecx_50 = Mem27[ebx + 0xC<32>:word32]
	branch edi_38 >u 0x3FFFFFFF<32> l006F25F9
l006F25DA:
	word32 eax_52 = edi_38 * 4<32>
	branch eax_52 != 0<32> l006F25EA
l006F25E5:
	eax_52 = 1<32>
l006F25EA:
	word32 eax_65 = realloc(ecx_50, eax_52)
	branch eax_65 != 0<32> l006F2603
l006F2603:
	Mem71[ebx + 0xC<32>:word32] = eax_65
	Mem73[ebx + 0x10<32>:word32] = edi_38
	Mem76[ebx + 8<32>:word32] = esi
	ecxOut = ecx_50
	return 0<32>
l006F25F9:
	word32 ecx_95
	word32 edx_138
	fn006E1210(out ecx_95, out edx_138)
	ecxOut = ecx_95
	return 0xFFFFFFFF<32>
l006F259D:
	Mem105[ebx + 8<32>:word32] = esi
	ecxOut = ecx
	return 0<32>
fn006F2590_exit:


void fn006F2610()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E8910
// MayUse: 
// LiveOut: esp
// Trashed: SCZO eax ecx edx esp Top
// Preserved:
fn006F2610_entry:
l006F2610:
	word32 eax_10 = Mem0[0x00A6CB80<p32>:word32]
	branch eax_10 == 0<32> l006F2641
l006F2619:
	word32 esp_15 = fp
l006F2620:
	word32 eax_11 = eax_10 - 1<32>
	Mem13[0x00A6CB80<p32>:word32] = eax_11
	word32 esp_16 = esp_15 - 4<i32>
	Mem17[esp_16:word32] = Mem13[eax_11 * 4<32> + 0xA6CA40<32>:word32]
	fn006FEFD0(Mem17[esp_16:word32])
	eax_10 = Mem17[0x00A6CB80<p32>:word32]
	esp_15 = esp_16
	branch eax_10 != 0<32> l006F2620
l006F2641:
	return
fn006F2610_exit:


word32 fn006F2650(word32 dwArg04, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E54A0
//      fn006E9B00
//      fn006F2EA0
//      fn006FE2A0
//      fn007035C0
//      fn00708DC0
//      fn0072E790
//      fn007367D0
//      fn007373A0
//      fn00737410
//      fn00740CC0
//      fn00747330
//      fn00748670
//      fn0074E980
// MayUse:  Stack +0004:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ebx ecx edi edx esi Top
// Preserved: esp
fn006F2650_entry:
l006F2650:
	branch dwArg04 >= 0<32> l006F266C
l006F266C:
	branch dwArg04 <=u 0x3FFFFFFF<32> l006F2683
l006F2683:
	word32 esi_32
	word32 eax_17 = Mem14[0x00A6CB80<p32>:word32]
	branch eax_17 == 0<32> l006F26AF
l006F26AF:
	word32 edx_28
	word32 ecx_254
	word32 eax_27 = fn006FEF30(0xA1BAF0<32>, out ecx_254, out edx_28)
	esi_32 = eax_27
	branch eax_27 != 0<32> l006F26A2
l006F26C2:
	edxOut = edx_28
	return eax_27
l006F268D:
	esi_32 = Mem22[eax_17 * 4<32> + 0xA6CA3C<32>:word32]
	Mem46[0x00A6CB80<p32>:word32] = eax_17 - 1<32>
	Mem47[esi_32:word32] = 1<32>
l006F26A2:
	branch dwArg04 > 0<32> l006F26C6
l006F26C6:
	word32 eax_54 = dwArg04 * 4<32>
	branch dwArg04 * 4<32> != 0<32> l006F26D1
l006F26CC:
	eax_54 = 1<32>
l006F26D1:
	word32 eax_62 = malloc(eax_54)
	Mem68[esi_32 + 0xC<32>:word32] = eax_62
	branch eax_62 != 0<32> l006F26FB
l006F26FB:
	memset(eax_62, 0<32>, dwArg04 * 4<32>)
l006F26E2:
	word32 v15_80 = Mem68[esi_32:word32] + 0xFFFFFFFF<32>
	Mem81[esi_32:word32] = v15_80
	branch v15_80 != 0<32> l006F26F3
l006F26E7:
	word32 eax_84 = Mem81[esi_32 + 4<32>:word32]
	call Mem81[eax_84 + 0x18<32>:word32] (retsize: 4;)
		uses: eax:eax_84,Stack +0004:esi_67,Stack +0008:dwArg04,Stack +0018:dwArg04
l006F26F3:
l006F26F6_thunk_fn006E1210:
	word32 edx_110
	word32 ecx_255
	word32 eax_109 = fn006E1210(out ecx_255, out edx_110)
	edxOut = edx_110
	return eax_109
l006F26A6:
	Mem114[esi_32 + 0xC<32>:word32] = 0<32>
l006F2707:
	Mem117[esi_32 + 8<32>:word32] = dwArg04
	Mem118[esi_32 + 0x10<32>:word32] = dwArg04
	word32 edi_120 = esi_32 - 0x10<32>
	branch Mem118[esi_32 - 8<32>:word32] == 0xFFFFFFFE<32> l006F2723
l006F2716:
	fn006E86F0(0x8D0E04<32>)
l006F2723:
	Mem133[edi_120 + 8<32>:word32] = 0xFFFFFFFD<32>
	word32 edx_134 = Mem133[0x00A1D558<p32>:word32]
	Mem135[edi_120:word32] = edx_134
	word32 eax_137 = Mem135[Mem135[0x00A1D558<p32>:word32] + 4<32>:word32]
	Mem138[edi_120 + 4<32>:word32] = eax_137
	Mem139[eax_137:word32] = edi_120
	Mem148[Mem139[0x00A1D558<p32>:word32] + 4<32>:word32] = edi_120
	edxOut = edx_134
	return esi_32
l006F267C:
l006F267E_thunk_fn006E1210:
	word32 edx_157
	word32 ecx_253
	word32 eax_156 = fn006E1210(out ecx_253, out edx_157)
	edxOut = edx_157
	return eax_156
l006F2659:
	word32 edx_167
	fn006E1DC0(out edx_167)
	edxOut = edx_167
	return 0<32>
fn006F2650_exit:


word32 fn006F2750(word32 dwArg04, ptr32 & ecxOut, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006F6AF0
//      fn006F7890
//      fn00726260
//      fn0072F830
//      fn0074EB10
// MayUse:  Stack +0004:[0..31]
// LiveOut: eax ecx edx
// Trashed: SCZO eax ecx edx Top
// Preserved: esi esp
fn006F2750_entry:
l006F2750:
	word32 eax_8 = Mem6[dwArg04 + 4<32>:word32]
	branch eax_8 == 0xA1BAF0<32> l006F2788
l006F275F:
	branch fn006D5670(eax_8, 0xA1BAF0<32>, out ecx, out edx) != 0<32> l006F2788
l006F2788:
	word32 eax_28 = Mem27[dwArg04 + 8<32>:word32]
	ecxOut = ecx
	edxOut = edx
	return eax_28
l006F2771:
	word32 edx_40
	ecxOut = fn006E1DC0(out edx_40)
	edxOut = edx_40
	return 0xFFFFFFFF<32>
fn006F2750_exit:


word32 fn006F2790(word32 dwArg04, word32 dwArg08, ptr32 & ecxOut, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006F6AF0
//      fn006F7890
//      fn0072F830
//      fn0074EB10
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax ecx edx
// Trashed: SCZO eax ecx edx esi Top
// Preserved: esp
fn006F2790_entry:
l006F2790:
	word32 eax_8 = Mem6[dwArg04 + 4<32>:word32]
	branch eax_8 == 0xA1BAF0<32> l006F27C7
l006F279F:
	word32 ecx_142
	branch fn006D5670(eax_8, 0xA1BAF0<32>, out ecx_142, out edx) != 0<32> l006F27C7
l006F27C7:
	branch dwArg08 < 0<32> l006F27DC
l006F27CF:
	branch dwArg08 >= Mem27[dwArg04 + 8<32>:word32] l006F27DC
l006F27DC:
	word32 eax_36 = Mem27[0x00A6CB84<p32>:word32]
	branch eax_36 != 0<32> l006F27F7
l006F27E5:
	word32 ecx_143
	word32 edx_144
	eax_36 = fn006ECAC0(0x8D5090<32>, out ecx_143, out edx_144)
	Mem54[0x00A6CB84<p32>:word32] = eax_36
l006F27F7:
	word32 ecx_64
	word32 edx_65
	fn006E0E90(Mem55[0x00A17CA4<p32>:word32], eax_36, out ecx_64, out edx_65)
	ecxOut = ecx_64
	edxOut = edx_65
	return 0<32>
l006F27D4:
	word32 ecx_76 = Mem27[dwArg04 + 0xC<32>:word32]
	word32 eax_77 = Mem27[ecx_76 + dwArg08 * 4<32>:word32]
	ecxOut = ecx_76
	edxOut = edx
	return eax_77
l006F27B1:
	word32 edx_87
	ecxOut = fn006E1DC0(out edx_87)
	edxOut = edx_87
	return 0<32>
fn006F2790_exit:


word32 fn006F29C0(word32 eax, word32 dwArg04, ptr32 & ecxOut, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006F2A10
//      fn006F3930
// MayUse:  eax:[0..31] Stack +0004:[0..31]
// LiveOut: eax ecx edx
// Trashed: SCZO eax ebp ebx ecx edi Top
// Preserved: esi esp
fn006F29C0_entry:
l006F29C0:
	word32 ecx_25
	word32 edi_16 = Mem15[eax + 8<32>:word32]
	branch edi_16 != 0x7FFFFFFF<32> l006F29EE
l006F29EE:
	branch fn006F2590(eax, edi_16 + 1<32>, out ecx_25) == 0xFFFFFFFF<32> l006F29E7
l006F29FD:
	Mem33[dwArg04:word32] = Mem21[dwArg04:word32] + 1<32>
	word32 ecx_34 = Mem33[eax + 0xC<32>:word32]
	Mem35[ecx_34 + edi_16 * 4<32>:word32] = dwArg04
	ecxOut = ecx_34
	edxOut = <invalid>
	return 0<32>
l006F29D4:
	word32 edx_106
	fn006E0F80(Mem15[0x00A18598<p32>:word32], 0x8D50CC<32>, out ecx_25, out edx_106)
l006F29E7:
	ecxOut = ecx_25
	edxOut = <invalid>
	return 0xFFFFFFFF<32>
fn006F29C0_exit:


word32 fn006F2A10(word32 dwArg04, word32 dwArg08, ptr32 & ecxOut, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E54A0
//      fn006FE2A0
//      fn006FE380
//      fn00708DC0
//      fn007264A0
//      fn00726570
//      fn00726760
//      fn00726930
//      fn00728E40
//      fn007367D0
//      fn00740DF0
//      fn00748090
//      fn00748190
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax ecx edx
// Trashed: SCZO eax ecx edx esi Top
// Preserved: esp
fn006F2A10_entry:
l006F2A10:
	word32 eax_8 = Mem6[dwArg04 + 4<32>:word32]
	branch eax_8 == 0xA1BAF0<32> l006F2A31
l006F2A1F:
	word32 ecx_103
	word32 edx_104
	branch fn006D5670(eax_8, 0xA1BAF0<32>, out ecx_103, out edx_104) == 0<32> l006F2A46
l006F2A31:
	branch dwArg08 == 0<32> l006F2A46
l006F2A46:
	word32 edx_45
	ecxOut = fn006E1DC0(out edx_45)
	edxOut = edx_45
	return 0xFFFFFFFF<32>
l006F2A39:
	word32 ecx_59
	word32 edx_60
	word32 eax_57 = fn006F29C0(dwArg04, dwArg08, out ecx_59, out edx_60)
	ecxOut = ecx_59
	edxOut = edx_60
	return eax_57
fn006F2A10_exit:


word32 fn006F2EA0(word32 dwArg04, word32 dwArg08, word32 dwArg0C)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006F31C0
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ebx ecx edi edx esi Top
// Preserved: esp
fn006F2EA0_entry:
l006F2EA0:
	word32 esi_11 = dwArg08
	branch dwArg08 >= 0<32> l006F2EB3
l006F2EB3:
	word32 eax_18 = Mem16[dwArg04 + 8<32>:word32]
	branch dwArg08 <= eax_18 l006F2EBC
l006F2EBA:
	esi_11 = eax_18
l006F2EAF:
	esi_11 = 0<32>
l006F2EBC:
	word32 eax_27 = dwArg0C
	branch dwArg0C >= esi_11 l006F2EC8
l006F2EC8:
	word32 ecx_32 = Mem16[dwArg04 + 8<32>:word32]
	branch dwArg0C <= ecx_32 l006F2ED1
l006F2ECF:
	eax_27 = ecx_32
l006F2EC4:
	eax_27 = esi_11
l006F2ED1:
	word32 eax_39 = eax_27 - esi_11
	word32 edi_41 = eax_39
	word32 edx_149
	word32 eax_49 = fn006F2650(eax_39, out edx_149)
	branch eax_49 != 0<32> l006F2EE6
l006F2EE6:
	word32 edx_61 = Mem44[eax_49 + 0xC<32>:word32]
	word32 esi_62 = Mem44[dwArg04 + 0xC<32>:word32] + esi_11 * 4<32>
	branch eax_39 <= 0<32> l006F2F05
l006F2EF3:
	word32 esi_63 = esi_62 - edx_61
l006F2EF5:
	word32 ecx_68 = Mem67[esi_63 + edx_61:word32]
	Mem70[ecx_68:word32] = Mem67[ecx_68:word32] + 1<32>
	Mem71[edx_61:word32] = ecx_68
	edx_61 = edx_61 + 4<32>
	edi_41 = edi_41 - 1<32>
	branch edi_41 != 0<32> l006F2EF5
l006F2F05:
	return
l006F2EE2:
	return
fn006F2EA0_exit:


void fn006F3150(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006F31C0
// MayUse:  Stack +0004:[0..31]
// LiveOut:
// Trashed: SCZO eax ecx edx esi Top
// Preserved: ebx edi esp
fn006F3150_entry:
l006F3150:
	word32 edi_9 = Mem8[dwArg04 + 0xC<32>:word32]
	branch edi_9 == 0<32> l006F31B0
l006F315C:
	word32 esi_16 = Mem15[dwArg04 + 8<32>:word32]
	Mem19[dwArg04 + 8<32>:word32] = 0<32>
	Mem20[dwArg04 + 0xC<32>:word32] = 0<32>
	Mem21[dwArg04 + 0x10<32>:word32] = 0<32>
	word32 esp_13 = fp - 8<i32>
	word32 esi_17 = esi_16 - 1<32>
	branch esi_16 < 1<32> l006F31A5
l006F317A:
l006F3180:
	branch Mem27[edi_9 + esi_17 * 4<32>:word32] == 0<32> l006F31A0
l006F3186:
	word32 eax_30 = Mem27[edi_9 + esi_17 * 4<32>:word32]
	Mem32[eax_30:word32] = Mem27[eax_30:word32] + 0xFFFFFFFF<32>
	word32 eax_33 = Mem32[edi_9 + esi_17 * 4<32>:word32]
	branch Mem32[eax_33:word32] != 0<32> l006F31A0
l006F3194:
	word32 ecx_36 = Mem32[eax_33 + 4<32>:word32]
	word32 edx_37 = Mem32[ecx_36 + 0x18<32>:word32]
	Mem40[esp_13 - 4<i32>:word32] = eax_33
	word32 esp_43
	word32 edx_46
	call edx_37 (retsize: 4;)
		uses: ecx:ecx_36,edx:edx_46,Stack +0008:dwArg04
		defs: edx:edx_46,esp:esp_43
	esp_13 = esp_43 + 4<32>
l006F31A0:
	esi_17 = esi_17 - 1<32>
	branch esi_17 >= 0<32> l006F3180
l006F31A5:
	word32 esp_57 = esp_13 - 4<i32>
	Mem60[esp_57:word32] = edi_9
	free(Mem60[esp_57:(ptr32 void)])
l006F31B0:
	return
fn006F3150_exit:


void fn006F31C0(word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006F31C0
//      fn006F34B0
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31] Stack +0010:[0..31]
// LiveOut:
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn006F31C0_entry:
l006F31C0:
	word32 dwLoc38_540 = fp - 0x20<32>
	word32 edx_19 = 0<32>
	word32 dwLoc30_543 = 0<32>
	branch dwArg10 != 0<32> l006F31F8
l006F31F8:
	branch dwArg04 != dwArg10 l006F324C
l006F324C:
	word32 eax_35 = fn00704DA0(dwArg10)
	branch eax_35 == 0<32> l006F3391
l006F3268:
	word32 eax_45 = Mem43[eax_35 + 4<32>:word32]
	branch eax_45 == 0xA1BAF0<32> l006F328D
l006F3272:
	word32 ecx_844
	word32 edx_845
	branch fn006D5670(eax_45, 0xA1BAF0<32>, out ecx_844, out edx_845) != 0<32> l006F328D
l006F328D:
l006F3284:
l006F3294:
	word32 eax_72 = Mem71[eax_35 + 4<32>:word32]
	branch eax_72 == 0xA1BAF0<32> l006F32BD
l006F329E:
	word32 ecx_848
	word32 edx_849
	branch fn006D5670(eax_72, 0xA1BAF0<32>, out ecx_848, out edx_849) != 0<32> l006F32BD
l006F32BD:
	dwLoc30_543 = Mem92[eax_35 + 0xC<32>:word32]
	edx_19 = eax_35
l006F32B0:
	edx_19 = eax_35
	dwLoc30_543 = eax_35 + 0xC<32>
l006F31FC:
	word32 eax_109 = fn006F2EA0(dwArg10, 0<32>, Mem26[dwArg10 + 8<32>:word32])
	branch eax_109 != 0<32> l006F321B
l006F321B:
	fn006F31C0(dwArg04, dwArg04, dwArg0C, eax_109)
	word32 v15_135 = Mem127[eax_109:word32] + 0xFFFFFFFF<32>
	Mem136[eax_109:word32] = v15_135
	branch v15_135 != 0<32> l006F3242
l006F3236:
	word32 ecx_140 = Mem136[eax_109 + 4<32>:word32]
	call Mem136[ecx_140 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_140,Stack +0004:eax_109,Stack +0008:dwArg04,Stack +0014:dwArg10,Stack +0054:dwArg04,Stack +0058:dwArg08,Stack +005C:dwArg0C,Stack +0060:dwArg10
l006F3242:
	return
l006F3210:
	return
l006F31EF:
	dwArg10 = 0<32>
l006F32C6:
	word32 ecx_180 = dwArg08
	branch dwArg08 >= 0<32> l006F32D6
l006F32D6:
	word32 eax_191 = Mem179[dwArg04 + 8<32>:word32]
	branch dwArg08 <= eax_191 l006F32E3
l006F32DD:
	dwArg08 = eax_191
	ecx_180 = eax_191
l006F32CE:
	dwArg08 = 0<32>
	ecx_180 = 0<32>
l006F32E3:
	word32 ebp_200 = dwArg0C
	branch dwArg0C >= ecx_180 l006F32EF
l006F32EF:
	word32 eax_205 = Mem199[dwArg04 + 8<32>:word32]
	branch dwArg0C <= eax_205 l006F32F8
l006F32F6:
	ebp_200 = eax_205
l006F32EB:
	ebp_200 = ecx_180
l006F32F8:
	word32 eax_218 = ebp_200 - ecx_180
	word32 edi_219 = dwArg10 - eax_218
	branch Mem199[dwArg04 + 8<32>:word32] + edi_219 != 0<32> l006F3333
l006F3333:
	word32 edi_370
	word32 esp_332
	word32 esi_224 = Mem222[dwArg04 + 0xC<32>:word32]
	word32 edx_225 = eax_218 * 4<32>
	branch eax_218 * 4<32> <=u 0x20<32> l006F33A5
l006F3342:
	branch eax_218 * 4<32> != 0<32> l006F334B
l006F3346:
	edx_225 = 1<32>
l006F334B:
	word32 eax_236 = malloc(edx_225)
	dwLoc38_540 = eax_236
	branch eax_236 != 0<32> l006F339D
l006F339D:
	ecx_180 = dwArg08
l006F33A5:
	memcpy(dwLoc38_540, esi_224 + ecx_180 * 4<32>, eax_218 * 4<32>)
	branch edi_219 >= 0<32> l006F33EC
l006F33EC:
	branch edi_219 <= 0<32> l006F3426
l006F33EE:
	word32 eax_268 = Mem258[dwArg04 + 8<32>:word32]
	word32 ecx_851
	branch fn006F2590(dwArg04, eax_268 + edi_219, out ecx_851) < 0<32> l006F3362
l006F3405:
	esi_224 = Mem270[dwArg04 + 0xC<32>:word32]
	memmove(esi_224 + (edi_219 + ebp_200) * 4<32>, esi_224 + ebp_200 * 4<32>, (eax_268 - ebp_200) * 4<32>)
l006F33BF:
	memmove(esi_224 + (edi_219 + ebp_200) * 4<32>, esi_224 + ebp_200 * 4<32>, (Mem258[dwArg04 + 8<32>:word32] - ebp_200) * 4<32>)
	word32 ecx_850
	fn006F2590(dwArg04, Mem319[dwArg04 + 8<32>:word32] + edi_219, out ecx_850)
	esi_224 = Mem319[dwArg04 + 0xC<32>:word32]
l006F3426:
	esp_332 = fp - 0x48<32>
	word32 ecx_335 = 0<32>
	branch dwArg10 <= 0<32> l006F3451
l006F3430:
	word32 esi_340 = esi_224 + dwArg08 * 4<32>
l006F3437:
	word32 eax_345 = Mem342[dwLoc30_543 + ecx_335 * 4<32>:word32]
	branch eax_345 == 0<32> l006F3445
l006F3442:
	Mem350[eax_345:word32] = Mem342[eax_345:word32] + 1<32>
l006F3445:
	Mem355[esi_340:word32] = eax_345
	ecx_335 = ecx_335 + 1<32>
	esi_340 = esi_340 + 4<32>
	branch ecx_335 < dwArg10 l006F3437
l006F3451:
	word32 esi_367 = eax_218 + 0xFFFFFFFF<32>
	branch eax_218 < 0xFFFFFFFF<32> l006F3494
l006F3494:
	edi_370 = dwLoc38_540
l006F345A:
l006F3460:
	edi_370 = Mem378[esp_332 + 0x10<32>:word32]
	word32 eax_381 = Mem378[edi_370 + esi_367 * 4<32>:word32]
	branch eax_381 == 0<32> l006F3482
l006F346B:
	Mem386[eax_381:word32] = Mem378[eax_381:word32] + 0xFFFFFFFF<32>
	word32 eax_387 = Mem386[edi_370 + esi_367 * 4<32>:word32]
	branch Mem386[eax_387:word32] != 0<32> l006F3482
l006F3476:
	word32 ecx_390 = Mem386[eax_387 + 4<32>:word32]
	word32 edx_391 = Mem386[ecx_390 + 0x18<32>:word32]
	Mem393[esp_332 - 4<i32>:word32] = eax_387
	word32 esp_397
	call edx_391 (retsize: 4;)
		uses: ecx:ecx_390,Stack +0008:dwArg04,Stack +000C:dwArg08_679,Stack +0010:dwArg0C,Stack +0014:dwArg10_563
		defs: esp:esp_397
	esp_332 = esp_397 + 4<32>
l006F3482:
	esi_367 = esi_367 - 1<32>
	branch esi_367 >= 0<32> l006F3460
l006F3487:
	Mem410[esp_332 + 0x20<32>:word32] = 0<32>
l006F335D:
	word32 ecx_846
	word32 edx_847
	fn006E1210(out ecx_846, out edx_847)
l006F3362:
	esp_332 = fp - 0x48<32>
	edi_370 = dwLoc38_540
l006F3366:
	branch edi_370 == esp_332 + 0x28<32> l006F3378
l006F336E:
	word32 esp_426 = esp_332 - 4<i32>
	Mem427[esp_426:word32] = edi_370
	free(Mem427[esp_426:(ptr32 void)])
l006F3378:
	word32 eax_433 = Mem431[esp_332 + 0x14<32>:word32]
	branch eax_433 == 0<32> l006F3391
l006F3380:
	word32 v18_437 = Mem431[eax_433:word32] + 0xFFFFFFFF<32>
	Mem438[eax_433:word32] = v18_437
	branch v18_437 != 0<32> l006F3391
l006F3385:
	word32 ecx_441 = Mem438[eax_433 + 4<32>:word32]
	word32 edx_442 = Mem438[ecx_441 + 0x18<32>:word32]
	Mem444[esp_332 - 4<i32>:word32] = eax_433
	call edx_442 (retsize: 4;)
		uses: ecx:ecx_441,Stack +0008:dwArg04,Stack +000C:dwArg08_679,Stack +0010:dwArg0C,Stack +0014:dwArg10_563
l006F3391:
	return
l006F330D:
	branch edx_19 == 0<32> l006F3322
l006F3311:
	word32 v16_496 = Mem222[edx_19:word32] + 0xFFFFFFFF<32>
	Mem497[edx_19:word32] = v16_496
	branch v16_496 != 0<32> l006F3322
l006F3316:
	word32 eax_500 = Mem497[edx_19 + 4<32>:word32]
	call Mem497[eax_500 + 0x18<32>:word32] (retsize: 4;)
		uses: eax:eax_500,Stack +0004:edx_492,Stack +0008:dwArg04,Stack +0014:dwArg10_563,Stack +0054:dwArg04,Stack +0058:dwArg08_679,Stack +005C:dwArg0C,Stack +0060:dwArg10_563
l006F3322:
	fn006F3150(dwArg04)
	return
fn006F31C0_exit:


void fn006F34B0(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00740D60
// MayUse:  Stack +0004:[0..31]
// LiveOut:
// Trashed: SCZO eax ecx edx esi Top
// Preserved: esp
fn006F34B0_entry:
l006F34B0:
	word32 eax_8 = Mem6[dwArg04 + 4<32>:word32]
	branch eax_8 == 0xA1BAF0<32> l006F34E8
l006F34BF:
	word32 ecx_106
	word32 edx_107
	branch fn006D5670(eax_8, 0xA1BAF0<32>, out ecx_106, out edx_107) != 0<32> l006F34E8
l006F34E8:
	fn006F31C0(dwArg04, dwArg08, dwArg0C, dwArg10)
	return
l006F34D1:
	word32 edx_108
	fn006E1DC0(out edx_108)
	return
fn006F34B0_exit:


word32 fn006F3930(word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn007035C0
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn006F3930_entry:
l006F3930:
l006F36D0:
	word32 eax_15 = Mem13[dwArg08 + 4<32>:word32]
	branch eax_15 == 0xA1BAF0<32> l006F3840
l006F36EA:
	branch eax_15 == 0xA16588<32> l006F3840
l006F36F5:
	branch dwArg04 == dwArg08 l006F3840
l006F3840:
	word32 eax_36 = fn00704DA0(dwArg08)
	branch eax_36 == 0<32> l006F38BD
l006F3854:
	word32 eax_46 = Mem30[eax_36 + 4<32>:word32]
	branch eax_46 == 0xA1BAF0<32> l006F386C
l006F385E:
	word32 ecx_745
	word32 edx_746
	fn006D5670(eax_46, 0xA1BAF0<32>, out ecx_745, out edx_746)
l006F386C:
	word32 ebp_64 = Mem63[eax_36 + 8<32>:word32]
	branch ebp_64 != 0<32> l006F3899
l006F3899:
	word32 ecx_747
	word32 eax_75 = fn006F2590(dwArg04, Mem63[dwArg04 + 8<32>:word32] + ebp_64, out ecx_747)
	branch eax_75 != 0xFFFFFFFF<32> l006F38C4
l006F38C4:
	word32 edx_103
	word32 eax_82 = Mem72[eax_36 + 4<32>:word32]
	branch eax_82 == 0xA1BAF0<32> l006F38E3
l006F38CE:
	edx_103 = eax_36 + 0xC<32>
	word32 ecx_752
	word32 edx_753
	branch fn006D5670(eax_82, 0xA1BAF0<32>, out ecx_752, out edx_753) == 0<32> l006F38E6
l006F38E3:
	edx_103 = Mem102[eax_36 + 0xC<32>:word32]
l006F38E6:
	word32 ecx_115 = Mem110[dwArg04 + 0xC<32>:word32] + dwArg08 * 4<32>
	branch ebp_64 <= 0<32> l006F3908
l006F38F4:
	word32 edx_117 = edx_103 - ecx_115
	word32 esi_119 = ebp_64
l006F38F8:
	word32 eax_123 = Mem122[edx_117 + ecx_115:word32]
	Mem125[eax_123:word32] = Mem122[eax_123:word32] + 1<32>
	Mem126[ecx_115:word32] = eax_123
	ecx_115 = ecx_115 + 4<32>
	esi_119 = esi_119 - 1<32>
	branch esi_119 != 0<32> l006F38F8
l006F3908:
	word32 v22_136 = Mem135[eax_36:word32] + 0xFFFFFFFF<32>
	Mem137[eax_36:word32] = v22_136
	branch v22_136 != 0<32> l006F3919
l006F390D:
	word32 ecx_140 = Mem137[eax_36 + 4<32>:word32]
	call Mem137[ecx_140 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_140,Stack +0004:eax_36,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +001C:dwArg04,Stack +0020:dwArg08
l006F38AD:
	word32 v19_165 = Mem72[eax_36:word32] + eax_75
	Mem166[eax_36:word32] = v19_165
	branch v19_165 != 0<32> l006F38BD
l006F38B1:
	word32 edx_169 = Mem166[eax_36 + 4<32>:word32]
	call Mem166[edx_169 + 0x18<32>:word32] (retsize: 4;)
		uses: edx:edx_169,Stack +0004:eax_36,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +001C:dwArg04,Stack +0020:dwArg08
l006F3873:
	word32 v16_181 = Mem63[eax_36:word32] + 0xFFFFFFFF<32>
	Mem182[eax_36:word32] = v16_181
	branch v16_181 != 0<32> l006F3919
l006F387C:
	word32 eax_185 = Mem182[eax_36 + 4<32>:word32]
	call Mem182[eax_185 + 0x18<32>:word32] (retsize: 4;)
		uses: eax:eax_185,Stack +0004:eax_36,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +001C:dwArg04,Stack +0020:dwArg08
	Mem198[0x00A163B8<p32>:word32] = Mem188[0x00A163B8<p32>:word32] + 1<32>
	return 0xA163B8<32>
l006F36FD:
	word32 ecx_737
	word32 edx_738
	word32 eax_212 = fn00704B00(dwArg08, out ecx_737, out edx_738)
	branch eax_212 == 0<32> l006F38BD
l006F3710:
	word32 esp_263
	word32 eax_228 = fn007040D0(eax_212, dwArg08)
	branch eax_228 >= 0<32> l006F377B
l006F3727:
	branch fn006E0FC0() == 0<32> l006F3771
l006F3730:
	word32 ecx_741
	word32 edx_742
	branch fn006E1110(out ecx_741, out edx_742) != 0<32> l006F3771
l006F3743:
	esp_263 = fp - 0x10<32>
	word32 ecx_743
	word32 edx_744
	branch fn006E1110(out ecx_743, out edx_744) != 0<32> l006F3771
l006F3771:
	word32 ecx_739
	word32 edx_740
	fn006E1160(out ecx_739, out edx_740)
	eax_228 = 8<32>
l006F377B:
	word32 ebp_279 = Mem277[dwArg04 + 8<32>:word32]
	word32 esi_281 = eax_228 + ebp_279
	branch esi_281 < ebp_279 l006F3792
l006F3785:
	esp_263 = fp - 0x10<32>
	word32 ecx_748
	branch fn006F2590(dwArg04, esi_281, out ecx_748) == 0xFFFFFFFF<32> l006F3755
l006F378F:
	Mem298[dwArg04 + 8<32>:word32] = ebp_279
l006F3792:
	word32 esp_307
	word32 eax_308
	call fn00000000 (retsize: 4;)
		uses: Stack +0004:eax_212,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +001C:dwArg04,Stack +0020:dwArg08
		defs: eax:eax_308,esp:esp_307
	word32 esi_313 = eax_308
	esp_263 = esp_307 + 4<32>
	branch eax_308 == 0<32> l006F37E8
l006F37A0:
	word32 eax_320 = Mem319[dwArg04 + 8<32>:word32]
	branch eax_320 >= Mem319[dwArg04 + 0x10<32>:word32] l006F37B4
l006F37B4:
	word32 esp_324 = esp_263 - 4<i32>
	Mem326[esp_324:word32] = esi_313
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_750
	word32 edx_751
	word32 eax_332 = fn006F29C0(dwArg04, stackArg4, out ecx_750, out edx_751)
	word32 v25_338 = Mem326[esi_313:word32] + 0xFFFFFFFF<32>
	Mem339[esi_313:word32] = v25_338
	esp_263 = esp_324 + 4<32>
	branch v25_338 != 0<32> l006F37D2
l006F37C6:
	word32 edx_343 = Mem339[esi_313 + 4<32>:word32]
	word32 eax_344 = Mem339[edx_343 + 0x18<32>:word32]
	Mem346[esp_324:word32] = esi_313
	word32 esp_347
	call eax_344 (retsize: 4;)
		uses: edx:edx_343,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: esp:esp_347
	esp_263 = esp_347 + 4<32>
l006F37D2:
	branch eax_332 < 0<32> l006F3755
l006F37A8:
	Mem360[Mem319[dwArg04 + 0xC<32>:word32] + eax_320 * 4<32>:word32] = esi_313
	Mem362[dwArg04 + 8<32>:word32] = Mem360[dwArg04 + 8<32>:word32] + 1<32>
l006F37DA:
	word32 esp_366 = esp_263 - 4<i32>
	Mem369[esp_366:word32] = eax_212
	word32 esp_377
	word32 eax_378
	call Mem369[esp_366 + 0x1C<32>:word32] (retsize: 4;)
		uses: Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: eax:eax_378,esp:esp_377
	esi_313 = eax_378
	esp_263 = esp_377 + 4<32>
	branch eax_378 != 0<32> l006F37A0
l006F37E8:
	branch fn006E0FC0() == 0<32> l006F380D
l006F37F1:
	word32 esp_395 = esp_263 - 4<i32>
	Mem396[esp_395:word32] = Mem392[0x00A16D00<p32>:word32]
	esp_263 = esp_395 + 4<32>
	word32 edx_755
	word32 ecx_754
	branch fn006E1110(out ecx_754, out edx_755) == 0<32> l006F3755
l006F3808:
	word32 edx_757
	word32 ecx_756
	fn006E1160(out ecx_756, out edx_757)
l006F380D:
	word32 esi_421 = Mem420[dwArg04 + 8<32>:word32]
	branch esi_421 >= Mem420[dwArg04 + 0x10<32>:word32] l006F381A
l006F3815:
	word32 ecx_758
	fn006F2590(dwArg04, esi_421, out ecx_758)
l006F381A:
	word32 v23_436 = Mem420[eax_212:word32] + 0xFFFFFFFF<32>
	Mem437[eax_212:word32] = v23_436
	branch v23_436 != 0<32> l006F3919
l006F3919:
	Mem442[0x00A163B8<p32>:word32] = Mem440[0x00A163B8<p32>:word32] + 1<32>
	return 0xA163B8<32>
l006F3823:
	word32 edx_455 = Mem437[eax_212 + 4<32>:word32]
	word32 eax_456 = Mem437[edx_455 + 0x18<32>:word32]
	Mem458[esp_263 - 4<i32>:word32] = eax_212
	call eax_456 (retsize: 4;)
		uses: edx:edx_455,Stack +0008:dwArg04,Stack +000C:dwArg08
	Mem471[0x00A163B8<p32>:word32] = Mem458[0x00A163B8<p32>:word32] + 1<32>
	return 0xA163B8<32>
l006F3755:
	word32 v15_485 = Mem483[eax_212:word32] + 0xFFFFFFFF<32>
	Mem486[eax_212:word32] = v15_485
	branch v15_485 != 0<32> l006F38BD
l006F38BD:
	return 0<32>
l006F375E:
	word32 ecx_503 = Mem486[eax_212 + 4<32>:word32]
	word32 edx_504 = Mem486[ecx_503 + 0x18<32>:word32]
	Mem506[esp_263 - 4<i32>:word32] = eax_212
	call edx_504 (retsize: 4;)
		uses: ecx:ecx_503,Stack +0008:dwArg04,Stack +000C:dwArg08
	return 0<32>
fn006F3930_exit:


word32 fn006F4F00(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00704BA0
//      fn00728BE0
// MayUse:  Stack +0004:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ebx ecx edx esi Top
// Preserved: ebp edi esp
fn006F4F00_entry:
l006F4F00:
	branch dwArg04 == 0<32> l006F4F74
l006F4F09:
	word32 eax_11 = Mem6[dwArg04 + 4<32>:word32]
	branch eax_11 == 0xA1BAF0<32> l006F4F25
l006F4F13:
	word32 ecx_190
	word32 edx_191
	branch fn006D5670(eax_11, 0xA1BAF0<32>, out ecx_190, out edx_191) == 0<32> l006F4F74
l006F4F74:
	word32 edx_187
	fn006E1DC0(out edx_187)
	return 0<32>
l006F4F25:
	word32 edi_58 = Mem56[dwArg04 + 8<32>:word32]
	word32 edx_189
	word32 ecx_188
	word32 eax_63 = fn006DFD20(edi_58, out ecx_188, out edx_189)
	branch eax_63 != 0<32> l006F4F3D
l006F4F3D:
	memcpy(eax_63 + 0xC<32>, Mem60[dwArg04 + 0xC<32>:word32], edi_58 * 4<32>)
	word32 esi_83 = eax_63 + 0xC<32>
	word32 edi_88 = edi_58 - 1<32>
	branch edi_58 < 1<32> l006F4F6D
l006F4F5B:
l006F4F60:
	word32 eax_93 = Mem92[esi_83:word32]
	Mem95[eax_93:word32] = Mem92[eax_93:word32] + 1<32>
	esi_83 = esi_83 + 4<32>
	edi_88 = edi_88 - 1<32>
	branch edi_88 >= 0<32> l006F4F60
l006F4F6D:
	return eax_63
l006F4F39:
	return eax_63
fn006F4F00_exit:


void fn006F5C20()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E8910
// MayUse: 
// LiveOut:
// Trashed: SCZO eax ecx edx Top
// Preserved: esp
fn006F5C20_entry:
l006F5C20:
	word32 eax_5 = Mem0[0x00A6CB88<p32>:word32]
	branch eax_5 == 0<32> l006F5C3A
l006F5C29:
	word32 v7_9 = Mem0[eax_5:word32] + 0xFFFFFFFF<32>
	Mem10[eax_5:word32] = v7_9
	branch v7_9 != 0<32> l006F5C3A
l006F5C2E:
	word32 ecx_13 = Mem10[eax_5 + 4<32>:word32]
	word32 edx_20
	call Mem10[ecx_13 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_13,edx:edx_20,Stack +0004:eax_5
		defs: edx:edx_20
l006F5C3A:
	word32 eax_26 = Mem25[0x00A6CB8C<p32>:word32]
	Mem30[0x00A6CB88<p32>:word32] = 0<32>
	free(eax_26)
	Mem33[0x00A6CB8C<p32>:word32] = 0<32>
	return
fn006F5C20_exit:


void fn006F5C60()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006F9090
// MayUse: 
// LiveOut:
// Trashed: SCZO eax ecx Top
// Preserved: edi esi esp
fn006F5C60_entry:
l006F5C60:
	word32 eax_7 = fn0074F680()
	branch eax_7 == 0xFFFFFFFF<32> l006F5CDA
l006F5C6D:
	word32 eax_15 = Mem6[0x00A6CB90<p32>:word32]
	branch eax_15 != 0<32> l006F5C84
l006F5C76:
	eax_15 = fn0074F6A0()
	Mem27[0x00A6CB90<p32>:word32] = eax_15
	branch eax_15 == 0<32> l006F5CDA
l006F5C84:
	word32 ecx_30 = Mem29[0x00A1BDB8<p32>:word32]
	branch ecx_30 != eax_7 l006F5C97
l006F5C97:
	branch ecx_30 != 0xFFFFFFFF<32> l006F5CAB
l006F5C9C:
	word32 ecx_158
	eax_15 = fn0074F540(eax_15, 0<32>, out ecx_158)
	branch eax_15 != 0<32> l006F5CCA
l006F5CAB:
	fn00706BE0()
	word32 ecx_157
	fn0074F540(Mem57[0x00A6CB90<p32>:word32], 1<32>, out ecx_157)
	fn00706C20(eax_15)
l006F5CCA:
	Mem90[0x00A1BDB8<p32>:word32] = eax_7
	Mem91[0x00A6CB94<p32>:word32] = 1<32>
l006F5CDA:
	return
l006F5C8E:
	Mem98[0x00A6CB94<p32>:word32] = Mem29[0x00A6CB94<p32>:word32] + 1<32>
	return
fn006F5C60_exit:


word32 fn006F5DA0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006F6EA0
//      fn006F82C0
//      fn0074F9E0
// MayUse: 
// LiveOut: eax
// Trashed: SCZO eax Top
// Preserved: esi esp
fn006F5DA0_entry:
l006F5DA0:
	word32 esi_9 = Mem8[Mem0[0x00A6D67C<p32>:word32] + 4<32>:word32]
	branch Mem8[esi_9 + 8<32>:word32] != 0<32> l006F5DBC
l006F5DAF:
	fn006E86F0(0x8D5538<32>)
l006F5DBC:
	return Mem22[esi_9 + 8<32>:word32]
fn006F5DA0_exit:


word32 fn006F5DD0(ptr32 & esiOut, ptr32 & ediOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E8910
// MayUse: 
// LiveOut: ebx edi esi
// Trashed: SCZO eax ebx ecx edi edx esi Top
// Preserved: ebp esp
fn006F5DD0_entry:
l006F5DD0:
	word32 eax_7 = Mem0[Mem0[0x00A6D67C<p32>:word32] + 4<32>:word32]
	word32 ebp_11 = Mem10[eax_7 + 8<32>:word32]
	branch ebp_11 == 0<32> l006F62AC
l006F5DEB:
	word32 edi_1403
	word32 esi_1402
	word32 edx_1401
	word32 ecx_1400
	word32 eax_32 = fn006FD8B0(ebp_11, 0x8D144C<32>, out ecx_1400, out edx_1401, out esi_1402, out edi_1403)
	branch eax_32 == 0<32> l006F5E57
l006F5E09:
	branch Mem41[eax_32 + 4<32>:word32] == 0xA215C0<32> l006F5E23
l006F5E0E:
	word32 ecx_1410
	word32 edx_1411
	branch fn006D5670(Mem41[eax_32 + 4<32>:word32], 0xA215C0<32>, out ecx_1410, out edx_1411) == 0<32> l006F5E57
l006F5E1F:
l006F5E23:
	word32 ecx_1408
	word32 edx_1409
	word32 eax_67 = fn00717230(eax_32, out ecx_1408, out edx_1409)
	branch Mem66[0x00A74AF0<p32>:word32] == 0<32> l006F5E44
l006F5E37:
	word32 edx_1415
	fn00716B20(out edx_1415)
l006F5E44:
	word32 ecx_1412
	word32 esi_1414
	word32 edx_1413
	fn006FD8F0(eax_67, 0x8B460C<32>, 0xA163B8<32>, out ecx_1412, out edx_1413, out esi_1414)
l006F5E57:
	word32 esi_1406
	word32 edx_1405
	word32 ecx_1404
	word32 edi_1407
	word32 eax_119 = fn006FD8B0(ebp_11, 0x8AC594<32>, out ecx_1404, out edx_1405, out esi_1406, out edi_1407)
	branch eax_119 == 0<32> l006F5F34
l006F5E71:
	branch Mem128[eax_119 + 4<32>:word32] == 0xA215C0<32> l006F5E8F
l006F5E76:
	word32 edx_1423
	word32 ecx_1422
	branch fn006D5670(Mem128[eax_119 + 4<32>:word32], 0xA215C0<32>, out ecx_1422, out edx_1423) == 0<32> l006F5F34
l006F5E8B:
l006F5E8F:
	word32 ecx_1420
	word32 edx_1421
	word32 eax_156 = fn00717230(eax_119, out ecx_1420, out edx_1421)
	word32 edi_166 = eax_156
	word32 esi_167 = 0xA1BDBC<32>
	branch Mem155[0x00A1BDBC<p32>:word32] == 0<32> l006F5EE2
l006F5EA8:
l006F5EB0:
	branch Mem169[0x00A74AF0<p32>:word32] == 0<32> l006F5EC9
l006F5EB9:
	word32 edx_1432
	fn00716B20(out edx_1432)
l006F5EC9:
	word32 esi_202
	word32 edx_1431
	word32 ecx_1430
	fn006FD8F0(eax_156, Mem189[esi_167:word32], 0xA163B8<32>, out ecx_1430, out edx_1431, out esi_202)
	esi_167 = esi_202 + 4<32>
	branch Mem199[esi_202 + 4<32>:word32] != 0<32> l006F5EB0
l006F5EE2:
	word32 esi_214 = 0xA1BDF8<32>
	branch Mem212[0x00A1BDF8<p32>:word32] == 0<32> l006F5F34
l006F5EF0:
	branch Mem216[0x00A74AF0<p32>:word32] == 0<32> l006F5F09
l006F5EF9:
	word32 edx_1429
	fn00716B20(out edx_1429)
l006F5F09:
	word32 esi_249
	word32 ecx_1427
	word32 edx_1428
	word32 eax_248 = fn006FD8B0(edi_166, Mem236[esi_214 + 4<32>:word32], out ecx_1427, out edx_1428, out esi_249, out edi_166)
	branch eax_248 != 0<32> l006F5F1F
l006F5F1A:
	eax_248 = 0xA163B8<32>
l006F5F1F:
	word32 esi_273
	word32 edx_1472
	word32 ecx_1471
	fn006FD8F0(edi_166, Mem244[esi_249:word32], eax_248, out ecx_1471, out edx_1472, out esi_273)
	esi_214 = esi_273 + 8<32>
	branch Mem270[esi_273 + 8<32>:word32] != 0<32> l006F5EF0
l006F5F34:
	word32 ecx_1416
	word32 edi_1419
	word32 esi_1418
	word32 edx_1417
	word32 eax_300 = fn006FD8B0(ebp_11, 0x8CA56C<32>, out ecx_1416, out edx_1417, out esi_1418, out edi_1419)
	branch eax_300 == 0<32> l006F5F97
l006F5F4A:
	branch Mem309[eax_300 + 4<32>:word32] == 0xA215C0<32> l006F5F64
l006F5F4F:
	word32 ecx_1425
	word32 edx_1426
	branch fn006D5670(Mem309[eax_300 + 4<32>:word32], 0xA215C0<32>, out ecx_1425, out edx_1426) == 0<32> l006F5F97
l006F5F60:
l006F5F64:
	branch Mem338[0x00A74AF0<p32>:word32] == 0<32> l006F5F7E
l006F5F6D:
	word32 edx_1476
	fn00716B20(out edx_1476)
l006F5F7E:
	fn007173A0(eax_300)
	word32 ecx_1473
	word32 edx_1474
	word32 esi_1475
	fn006FD8F0(ebp_11, 0x8CA56C<32>, 0xA163B8<32>, out ecx_1473, out edx_1474, out esi_1475)
l006F5F97:
	word32 ebx_395 = 0<32>
	word32 edx_1424
	branch fn006FC050(ebp_11, fp - 8<32>, fp - 0xC<32>, fp - 0x10<32>, out edx_1424) == 0<32> l006F609E
l006F5FBD:
l006F5FC0:
	branch Mem415[eax_300:word32] != 1<32> l006F6076
l006F5FCD:
	branch Mem415[dwLoc0C + 4<32>:word32] == 0xA1B450<32> l006F5FF7
l006F5FDA:
	word32 ecx_1435
	word32 edx_1436
	branch fn006D5670(Mem415[dwLoc0C + 4<32>:word32], 0xA1B450<32>, out ecx_1435, out edx_1436) == 0<32> l006F6076
l006F5FF3:
l006F5FF7:
	branch Mem440[eax_300 + 4<32>:word32] == 0xA215C0<32> l006F6015
l006F6000:
	word32 ecx_1437
	word32 edx_1438
	branch fn006D5670(Mem440[eax_300 + 4<32>:word32], 0xA215C0<32>, out ecx_1437, out edx_1438) == 0<32> l006F6076
l006F6015:
	word32 edi_464 = 0x8D144C<32>
	word32 esi_465 = dwLoc0C + 0x14<32>
	word32 ecx_466 = 0xC<32>
	bool v19_1109 = true
l006F602A:
	branch ecx_466 == 0<32> l006F602C
l006F602A_1:
	v19_1109 = Mem461[esi_1477:byte] == Mem461[edi_1478:byte]
	esi_465 = esi_1477 + 1<i32>
	edi_464 = edi_1478 + 1<i32>
	ecx_466 = ecx_466 - 1<32>
	esi_1477 = esi_465
	edi_1478 = edi_464
	branch Mem461[esi_1477:byte] != Mem461[edi_1478:byte] l006F602A
l006F602C:
	branch v19_1109 l006F6076
l006F602E:
	word32 edi_482 = 0x8AC594<32>
	word32 esi_485 = dwLoc0C + 0x14<32>
	word32 ecx_486 = 4<32>
	bool v23_1113 = true
l006F603C:
	branch ecx_486 == 0<32> l006F603E
l006F603C_2:
	v23_1113 = Mem461[esi_1479:byte] == Mem461[edi_1480:byte]
	esi_485 = esi_1479 + 1<i32>
	edi_482 = edi_1480 + 1<i32>
	ecx_486 = ecx_486 - 1<32>
	esi_1479 = esi_485
	edi_1480 = edi_482
	branch Mem461[esi_1479:byte] != Mem461[edi_1480:byte] l006F603C
l006F603E:
	branch v23_1113 l006F6076
l006F6040:
	branch Mem461[0x00A74AF0<p32>:word32] == 0<32> l006F6056
l006F6048:
	word32 edx_1442
	fn00716B20(out edx_1442)
l006F6056:
	fn007173A0(eax_300)
	word32 ebx_555
	word32 ecx_1439
	word32 edx_1440
	word32 edi_1441
	fn006FBD90(ebp_11, dwLoc0C, 0xA163B8<32>, out ecx_1439, out edx_1440, out ebx_555, out edi_1441)
	ebx_395 = ebx_555 + 1<32>
l006F6076:
	word32 edx_1434
	branch fn006FC050(ebp_11, fp - 8<32>, fp - 0xC<32>, fp - 0x10<32>, out edx_1434) != 0<32> l006F5FC0
l006F6096:
	branch ebx_395 > 0<32> l006F5F97
l006F609E:
	word32 edx_1433
	branch fn006FC050(ebp_11, fp - 8<32>, fp - 0xC<32>, fp - 0x10<32>, out edx_1433) == 0<32> l006F6198
l006F60C4:
l006F60D0:
	branch Mem630[dwLoc0C + 4<32>:word32] == 0xA1B450<32> l006F60F6
l006F60DD:
	word32 ecx_1446
	word32 edx_1447
	branch fn006D5670(Mem630[dwLoc0C + 4<32>:word32], 0xA1B450<32>, out ecx_1446, out edx_1447) == 0<32> l006F6176
l006F60F6:
	branch Mem651[eax_300 + 4<32>:word32] == 0xA215C0<32> l006F6118
l006F6103:
	word32 ecx_1449
	word32 edx_1450
	branch fn006D5670(Mem651[eax_300 + 4<32>:word32], 0xA215C0<32>, out ecx_1449, out edx_1450) == 0<32> l006F6176
l006F6118:
	word32 edi_675 = 0x8D144C<32>
	word32 esi_676 = dwLoc0C + 0x14<32>
	word32 ecx_677 = 0xC<32>
	bool v27_1117 = true
l006F612D:
	branch ecx_677 == 0<32> l006F612F
l006F612D_1:
	v27_1117 = Mem672[esi_1481:byte] == Mem672[edi_1482:byte]
	esi_676 = esi_1481 + 1<i32>
	edi_675 = edi_1482 + 1<i32>
	ecx_677 = ecx_677 - 1<32>
	esi_1481 = esi_676
	edi_1482 = edi_675
	branch Mem672[esi_1481:byte] != Mem672[edi_1482:byte] l006F612D
l006F612F:
	branch v27_1117 l006F6176
l006F6131:
	word32 edi_693 = 0x8AC594<32>
	word32 esi_696 = dwLoc0C + 0x14<32>
	word32 ecx_697 = 4<32>
	bool v31_1121 = true
l006F613F:
	branch ecx_697 == 0<32> l006F6141
l006F613F_2:
	v31_1121 = Mem672[esi_1483:byte] == Mem672[edi_1484:byte]
	esi_696 = esi_1483 + 1<i32>
	edi_693 = edi_1484 + 1<i32>
	ecx_697 = ecx_697 - 1<32>
	esi_1483 = esi_696
	edi_1484 = edi_693
	branch Mem672[esi_1483:byte] != Mem672[edi_1484:byte] l006F613F
l006F6141:
	branch v31_1121 l006F6176
l006F6143:
	branch Mem672[0x00A74AF0<p32>:word32] == 0<32> l006F6159
l006F614B:
	word32 edx_1455
	fn00716B20(out edx_1455)
l006F6159:
	fn007173A0(eax_300)
	word32 ecx_1451
	word32 edx_1452
	word32 ebx_1453
	word32 edi_1454
	fn006FBD90(ebp_11, dwLoc0C, 0xA163B8<32>, out ecx_1451, out edx_1452, out ebx_1453, out edi_1454)
l006F6176:
	word32 edx_1448
	branch fn006FC050(ebp_11, fp - 8<32>, fp - 0xC<32>, fp - 0x10<32>, out edx_1448) != 0<32> l006F60D0
l006F6196:
l006F6198:
	word32 edi_811
	word32 edx_1444
	word32 ecx_1443
	word32 esi_1445
	word32 eax_813 = fn006FD8B0(ebp_11, 0x8AC594<32>, out ecx_1443, out edx_1444, out esi_1445, out edi_811)
	branch eax_813 == edi_811 l006F6202
l006F61AE:
	branch Mem821[eax_813 + 4<32>:word32] == 0xA215C0<32> l006F61D0
l006F61B7:
	word32 ecx_1459
	word32 edx_1460
	branch fn006D5670(Mem821[eax_813 + 4<32>:word32], 0xA215C0<32>, out ecx_1459, out edx_1460) == 0<32> l006F6202
l006F61CC:
l006F61D0:
	branch Mem842[0x00A74AF0<p32>:word32] == edi_811 l006F61E9
l006F61D8:
	word32 edx_1464
	fn00716B20(out edx_1464)
l006F61E9:
	fn007173A0(eax_813)
	word32 esi_1463
	word32 ecx_1461
	word32 edx_1462
	fn006FD8F0(ebp_11, 0x8AC594<32>, 0xA163B8<32>, out ecx_1461, out edx_1462, out esi_1463)
l006F6202:
	word32 esi_1458
	word32 ecx_1456
	word32 edx_1457
	word32 edi_897
	word32 eax_899 = fn006FD8B0(ebp_11, 0x8D144C<32>, out ecx_1456, out edx_1457, out esi_1458, out edi_897)
	branch eax_899 == edi_897 l006F626C
l006F6218:
	branch Mem907[eax_899 + 4<32>:word32] == 0xA215C0<32> l006F623A
l006F6221:
	word32 edx_1466
	word32 ecx_1465
	branch fn006D5670(Mem907[eax_899 + 4<32>:word32], 0xA215C0<32>, out ecx_1465, out edx_1466) == 0<32> l006F626C
l006F6236:
l006F623A:
	branch Mem928[0x00A74AF0<p32>:word32] == edi_897 l006F6253
l006F6242:
	word32 edx_1470
	fn00716B20(out edx_1470)
l006F6253:
	edi_897 = fn007173A0(eax_899)
	word32 ecx_1467
	word32 edx_1468
	word32 esi_1469
	fn006FD8F0(ebp_11, 0x8D144C<32>, 0xA163B8<32>, out ecx_1467, out edx_1468, out esi_1469)
l006F626C:
	word32 ebp_981 = fn006FBF30(ebp_11)
	Mem992[eax_7 + 8<32>:word32] = edi_897
	word32 v14_993 = Mem992[ebp_981:word32] + 0xFFFFFFFF<32>
	Mem994[ebp_981:word32] = v14_993
	word32 esp_1063 = fp - 0x20<32>
	branch v14_993 != 0<32> l006F628E
l006F6282:
	word32 ecx_997 = Mem994[ebp_981 + 4<32>:word32]
	word32 esp_1057
	word32 edx_1060
	call Mem994[ecx_997 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_997,edx:edx_1060,Stack +0004:ebp_981,Stack +001C:dwLoc0C
		defs: edx:edx_1060,esp:esp_1057
	esp_1063 = esp_1057 + 4<32>
l006F628E:
	word32 eax_1067 = Mem1066[eax_7 + 0x14<32>:word32]
	branch eax_1067 == edi_897 l006F62A9
l006F6295:
	Mem1071[eax_7 + 0x14<32>:word32] = edi_897
	word32 v15_1072 = Mem1071[eax_1067:word32] + 0xFFFFFFFF<32>
	Mem1073[eax_1067:word32] = v15_1072
	branch v15_1072 != 0<32> l006F62A9
l006F629D:
	word32 ecx_1076 = Mem1073[eax_1067 + 4<32>:word32]
	word32 edx_1077 = Mem1073[ecx_1076 + 0x18<32>:word32]
	Mem1080[esp_1063 - 4<i32>:word32] = eax_1067
	word32 esp_1084
	word32 edx_1087
	call edx_1077 (retsize: 4;)
		uses: ecx:ecx_1076,edx:edx_1087,Stack +FFFFFFF8:dwLoc0C
		defs: edx:edx_1087,esp:esp_1084
	esp_1063 = esp_1084 + 4<32>
l006F62A9:
	word32 esp_1095 = esp_1063 + 4<i32>
	edi = Mem1093[esp_1063:word32]
	esi = Mem1093[esp_1095:word32]
	ebx = Mem1093[esp_1095 + 4<i32>:word32]
l006F62AC:
	esiOut = esi
	ediOut = edi
	return ebx
fn006F5DD0_exit:


word32 fn006F62D0(word32 dwArg04, word32 dwArg08, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006F8050
//      fn0074F9E0
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ecx edi edx esi Top
// Preserved: esp
fn006F62D0_entry:
l006F62D0:
	branch Mem0[0x00A6CB88<p32>:word32] != 0<32> l006F62E8
l006F62D9:
	word32 edx_10
	word32 ecx_259
	word32 eax_8 = fn006FDCC0(out ecx_259, out edx_10)
	Mem15[0x00A6CB88<p32>:word32] = eax_8
	branch eax_8 != 0<32> l006F62E8
l006F62E8:
	word32 esi_24 = Mem23[Mem17[0x00A6D67C<p32>:word32] + 4<32>:word32]
	branch Mem23[esi_24 + 8<32>:word32] != 0<32> l006F6304
l006F62F7:
	fn006E86F0(0x8D5538<32>)
l006F6304:
	word32 edx_110
	word32 edi_263
	word32 ecx_260
	word32 edx_261
	word32 esi_262
	word32 eax_53 = fn006FD8B0(Mem37[esi_24 + 8<32>:word32], dwArg04, out ecx_260, out edx_261, out esi_262, out edi_263)
	branch eax_53 == 0<32> l006F637F
l006F631C:
	word32 eax_63 = Mem49[eax_53 + 4<32>:word32]
	branch eax_63 == 0xA215C0<32> l006F6338
l006F6326:
	word32 edx_267
	word32 ecx_266
	branch fn006D5670(eax_63, 0xA215C0<32>, out ecx_266, out edx_267) == 0<32> l006F637F
l006F637F:
	word32 ecx_264
	fn006E15D0(Mem81[0x00A18720<p32>:word32], 0x8D5608<32>, out ecx_264, out edx_110)
l006F6338:
	word32 ecx_265
	word32 eax_108 = fn00717230(eax_53, out ecx_265, out edx_110)
	branch eax_108 == 0<32> l006F6394
l006F6345:
	word32 eax_120 = fn006FDE60(eax_108, out edx_110)
	branch eax_120 == 0<32> l006F6394
l006F6394:
	edxOut = edx_110
	return 0<32>
l006F6354:
	word32 esi_269
	word32 ecx_268
	word32 edx_150
	fn006FD8F0(Mem118[0x00A6CB88<p32>:word32], dwArg08, eax_120, out ecx_268, out edx_150, out esi_269)
	word32 v12_154 = Mem146[eax_120:word32] + 0xFFFFFFFF<32>
	Mem155[eax_120:word32] = v12_154
	branch v12_154 != 0<32> l006F637A
l006F636E:
	word32 eax_158 = Mem155[eax_120 + 4<32>:word32]
	call Mem155[eax_158 + 0x18<32>:word32] (retsize: 4;)
		uses: eax:eax_158,Stack +0004:eax_120,Stack +0014:dwArg04,Stack +0018:dwArg08
		defs: edx:edx_165
l006F637A:
	edxOut = edx_150
	return eax_120
l006F62E7:
	edxOut = edx_10
	return eax_8
fn006F62D0_exit:


word32 fn006F63A0(word32 dwArg04, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006F6490
//      fn006F6D50
//      fn006F7810
//      fn006F8960
// MayUse:  Stack +0004:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ebx ecx edi edx esi Top
// Preserved: esp
fn006F63A0_entry:
l006F63A0:
	word32 esi_12 = Mem11[Mem0[0x00A6D67C<p32>:word32] + 4<32>:word32]
	branch Mem11[esi_12 + 8<32>:word32] != 0<32> l006F63BE
l006F63B1:
	fn006E86F0(0x8D5538<32>)
l006F63BE:
	word32 edi_31 = Mem28[esi_12 + 8<32>:word32]
	word32 edi_230
	word32 esi_229
	word32 ecx_228
	word32 edx_111
	word32 eax_38 = fn006FD8B0(edi_31, dwArg04, out ecx_228, out edx_111, out esi_229, out edi_230)
	word32 esi_120 = eax_38
	branch eax_38 == 0<32> l006F63F1
l006F63D5:
	word32 eax_48 = Mem35[eax_38 + 4<32>:word32]
	branch eax_48 == 0xA215C0<32> l006F6437
l006F63DF:
	word32 ecx_231
	branch fn006D5670(eax_48, 0xA215C0<32>, out ecx_231, out edx_111) != 0<32> l006F6437
l006F63F1:
	word32 eax_74 = fn00717180(dwArg04, out edx_111)
	esi_120 = eax_74
	branch eax_74 == 0<32> l006F6420
l006F6400:
	word32 esi_233
	word32 ecx_232
	branch fn006FD8F0(edi_31, dwArg04, eax_74, out ecx_232, out edx_111, out esi_233) == 0<32> l006F6426
l006F6426:
	word32 v14_100 = Mem89[eax_74:word32] + 0xFFFFFFFF<32>
	Mem101[eax_74:word32] = v14_100
	branch v14_100 != 0<32> l006F6437
l006F642B:
	word32 eax_104 = Mem101[eax_74 + 4<32>:word32]
	call Mem101[eax_104 + 0x18<32>:word32] (retsize: 4;)
		uses: eax:eax_104,Stack +0004:eax_74,Stack +0008:dwArg04,Stack +0018:dwArg04
		defs: edx:edx_111
l006F6437:
	edxOut = edx_111
	return esi_120
l006F640F:
	word32 v11_126 = Mem89[eax_74:word32] + 0xFFFFFFFF<32>
	Mem127[eax_74:word32] = v11_126
	branch v11_126 != 0<32> l006F6420
l006F6414:
	word32 ecx_130 = Mem127[eax_74 + 4<32>:word32]
	call Mem127[ecx_130 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_130,Stack +0004:eax_74,Stack +0008:dwArg04,Stack +0018:dwArg04
		defs: edx:edx_137
l006F6420:
	edxOut = edx_111
	return 0<32>
fn006F63A0_exit:


word32 fn006F6440()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006F6490
// MayUse: 
// LiveOut: edx
// Trashed: SCZO eax esi Top
// Preserved: esp
fn006F6440_entry:
l006F6440:
	word32 esi_9 = Mem8[Mem0[0x00A6D67C<p32>:word32] + 4<32>:word32]
	branch Mem8[esi_9 + 8<32>:word32] != 0<32> l006F645C
l006F644F:
	fn006E86F0(0x8D5538<32>)
l006F645C:
	word32 esi_23 = Mem22[esi_9 + 8<32>:word32]
	word32 ecx_93
	word32 edx_94
	word32 esi_95
	word32 edi_96
	branch fn006FD8B0(esi_23, edi, out ecx_93, out edx_94, out esi_95, out edi_96) == 0<32> l006F6488
l006F646D:
	branch fn006FD950(esi_23, edi) >= 0<32> l006F6488
l006F647B:
	fn006E86F0(0x8D563C<32>)
l006F6488:
	return <invalid>
fn006F6440_exit:


word32 fn006F6490(word32 dwArg04, word32 dwArg08, word32 dwArg0C, ptr32 & ecxOut, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006F6730
//      fn006F68F0
//      fn006F6D50
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut: eax ecx edx
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn006F6490_entry:
l006F6490:
	branch Mem10[Mem10[Mem6[0x00A6D67C<p32>:word32] + 4<32>:word32] + 8<32>:word32] != 0<32> l006F64AE
l006F64A1:
	fn006E86F0(0x8D5538<32>)
l006F64AE:
	word32 edx_38
	word32 eax_37 = fn006F63A0(dwArg04, out edx_38)
	branch eax_37 != 0<32> l006F64CA
l006F64CA:
	word32 edx_456
	word32 ecx_455
	word32 eax_53 = fn00717230(eax_37, out ecx_455, out edx_456)
	word32 esi_459
	word32 edi_460
	word32 edx_458
	word32 ecx_457
	branch fn006FD8B0(eax_53, dwArg04, out ecx_457, out edx_458, out esi_459, out edi_460) != 0<32> l006F64FD
l006F64E5:
	word32 ecx_461
	word32 edx_462
	word32 esi_463
	branch fn006FD8F0(eax_53, dwArg04, fn00708800(), out ecx_461, out edx_462, out esi_463) != 0<32> l006F655D
l006F64FD:
	word32 esi_119
	branch dwArg0C == 0<32> l006F651E
l006F650A:
	word32 edx_465
	word32 ecx_464
	word32 eax_115 = fn006ECAC0(dwArg0C, out ecx_464, out edx_465)
	esi_119 = eax_115
	branch eax_115 != 0<32> l006F6524
l006F6519:
	word32 ecx_468
	word32 edx_469
	fn006E1160(out ecx_468, out edx_469)
l006F651E:
	esi_119 = Mem132[dwArg08 + 0x30<32>:word32]
	Mem135[esi_119:word32] = Mem132[esi_119:word32] + 1<32>
l006F6524:
	word32 esp_161 = fp - 0x14<32>
	word32 edx_466
	word32 esi_467
	word32 ecx_156
	branch fn006FD8F0(eax_53, dwArg04, esi_119, out ecx_156, out edx_466, out esi_467) == 0<32> l006F653C
l006F6537:
	word32 edx_470
	fn006E1160(out ecx_156, out edx_470)
l006F653C:
	word32 v14_174 = Mem147[esi_119:word32] + 0xFFFFFFFF<32>
	Mem175[esi_119:word32] = v14_174
	branch v14_174 != 0<32> l006F654D
l006F6541:
	word32 edx_178 = Mem175[esi_119 + 4<32>:word32]
	word32 esp_188
	call Mem175[edx_178 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_183,edx:edx_178,Stack +0004:esi_140,Stack +0008:dwArg04,Stack +0020:dwArg04,Stack +0024:dwArg08,Stack +0028:dwArg0C
		defs: esp:esp_188
	esp_161 = esp_188 + 4<32>
l006F654D:
	word32 esp_197 = esp_161 - 4<i32>
	Mem199[esp_197:word32] = eax_53
	Mem201[esp_197 - 4<i32>:word32] = eax_53
	Mem204[esp_197 - 8<i32>:word32] = dwArg08
	word32 edx_471
	word32 eax_211 = fn0070BC90(out edx_471)
	word32 esp_219 = esp_197 + 8<32>
	branch eax_211 != 0<32> l006F6569
l006F6569:
	word32 v16_221 = Mem204[eax_211:word32] + 0xFFFFFFFF<32>
	Mem222[eax_211:word32] = v16_221
	branch v16_221 != 0<32> l006F657A
l006F656E:
	word32 ecx_225 = Mem222[eax_211 + 4<32>:word32]
	word32 edx_226 = Mem222[ecx_225 + 0x18<32>:word32]
	Mem228[esp_197 + 4<32>:word32] = eax_211
	word32 esp_229
	call edx_226 (retsize: 4;)
		uses: ecx:ecx_225,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C
		defs: esp:esp_229
	esp_219 = esp_229 + 4<32>
l006F657A:
	word32 eax_239 = Mem238[esp_219 + 0xC<32>:word32]
	word32 esp_240 = esp_219 - 4<i32>
	Mem242[esp_240:word32] = dwArg04
	Mem244[esp_240 - 4<i32>:word32] = eax_239
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 edx_253
	word32 ecx_473
	word32 esi_474
	word32 edi_475
	word32 eax_252 = fn006FD8B0(stackArg4, dwArg04, out ecx_473, out edx_253, out esi_474, out edi_475)
	branch eax_252 != 0<32> l006F65A8
l006F65A8:
	Mem261[eax_252:word32] = Mem244[eax_252:word32] + 1<32>
	ecxOut = <invalid>
	edxOut = edx_253
	return eax_252
l006F658C:
	word32 edx_281
	word32 ecx_476
	fn006E15D0(Mem244[0x00A16F8C<p32>:word32], dwArg04, out ecx_476, out edx_281)
	ecxOut = <invalid>
	edxOut = edx_281
	return 0<32>
l006F655D:
	word32 edx_306 = fn006F6440()
	ecxOut = <invalid>
	edxOut = edx_306
	return 0<32>
l006F64C6:
	ecxOut = <invalid>
	edxOut = edx_38
	return eax_37
fn006F6490_exit:


word32 fn006F65B0(word32 edx, word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006F68F0
// MayUse:  edx:[0..31] Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx Top
// Preserved: ebp ebx edi esi esp
fn006F65B0_entry:
l006F65B0:
	word32 eax_12 = edx
l006F65C0:
	eax_12 = eax_165 + 1<32>
	eax_165 = eax_12
	branch Mem15[eax_165:byte] != 0<8> l006F65C0
l006F65C9:
	word32 eax_26 = eax_12 - (edx + 1<32>)
	word32 ebx_27 = eax_26
	branch eax_26 + 2<32> <=u dwArg08 l006F65DC
l006F65DC:
	branch eax_26 <u 4<32> l006F65FA
l006F65E1:
	word32 edi_38 = 0x8D54C0<32>
	word32 esi_40 = eax_26 - 4<32> + edx
	word32 ecx_41 = 5<32>
	bool v17_108 = false
l006F65F2:
	branch ecx_41 == 0<32> l006F65F4
l006F65F2_1:
	v17_108 = Mem37[esi_166:byte] != Mem37[edi_167:byte]
	esi_40 = esi_166 + 1<i32>
	edi_38 = edi_167 + 1<i32>
	ecx_41 = ecx_41 - 1<32>
	esi_166 = esi_40
	edi_167 = edi_38
	branch Mem37[esi_166:byte] != Mem37[edi_167:byte] l006F65F2
l006F65F4:
	branch v17_108 l006F65FA
l006F65F7:
	ebx_27 = eax_26 - 1<32>
l006F65FA:
	memcpy(dwArg04, edx, ebx_27)
	Mem92[ebx_27 + dwArg04:byte] = (0<8> - (Mem80[0x00A6DBF4<p32>:word32] == 0<32>) & 0xC<8>) + 0x63<8>
	Mem93[ebx_27 + 1<32> + dwArg04:byte] = 0<8>
	return dwArg04
l006F65D6:
	return 0<32>
fn006F65B0_exit:


word32 fn006F6630(word32 ebx, word32 ebp, word32 esi, word32 edi, selector es, selector ds, word32 dwArg08, word32 dwArg0C)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006F68F0
// MayUse:  cs:[0..15] ds:[0..15] ebp:[0..31] ebx:[0..31] edi:[0..31] es:[0..15] esi:[0..31] fs:[0..15] gs:[0..15] ss:[0..15] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut: eax
// Trashed: SCZDOP eax ebp ebx ecx edx Top
// Preserved: esi esp
fn006F6630_entry:
l006F6630:
	word32 edx_254
	word32 ebx_255
	word32 ebp_256
	word32 eax_20 = fn00659040(ebx, ebp, esi, edi, es, ds, edi, 0x8A7744<32>, out edx_254, out ebx_255, out ebp_256)
	branch eax_20 == 0<32> l006F6677
l006F6645:
	branch fn00737370() == Mem37[0x00A1BDB0<p32>:word32] l006F667B
l006F667B:
	int64 edx_eax_57 = CONVERT(fn00737370(), word32, int64)
	word32 edx_62 = SLICE(edx_eax_57, word32, 32)
	branch SLICE(edx_eax_57, word32, 0) != dwArg08 l006F6691
l006F668B:
	branch edx_62 == dwArg0C l006F66B6
l006F66B6:
	branch Mem49[0x00A74AF0<p32>:word32] == 0<32> l006F66D2
l006F66BF:
	word32 edx_259
	fn00716B20(out edx_259)
l006F66D2:
	return eax_20
l006F6691:
	branch Mem49[0x00A74AF0<p32>:word32] == 0<32> l006F66A8
l006F669A:
	word32 edx_258
	fn00716B20(out edx_258)
l006F66A8:
	fclose(eax_20)
	return 0<32>
l006F6656:
	branch Mem37[0x00A74AF0<p32>:word32] == 0<32> l006F666D
l006F665F:
	word32 edx_257
	fn00716B20(out edx_257)
l006F666D:
	fclose(eax_20)
l006F6677:
	return 0<32>
fn006F6630_exit:


word32 fn006F66E0(word32 dwArg04, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006F6730
//      fn006F68F0
// MayUse:  Stack +0004:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ecx edx esi Top
// Preserved: esp
fn006F66E0_entry:
l006F66E0:
	word32 edx_13
	word32 eax_11 = fn00737880(ebx, ebp, esi, edi, es, ds, out edx_13)
	branch eax_11 == 0<32> l006F6723
l006F66F0:
	branch Mem9[eax_11 + 4<32>:word32] == 0xA27458<32> l006F6725
l006F66F9:
	word32 ecx_100
	fn006E15D0(Mem9[0x00A16F8C<p32>:word32], 0x8D56DC<32>, out ecx_100, out edx_13)
	word32 v11_38 = Mem30[eax_11:word32] + 0xFFFFFFFF<32>
	Mem39[eax_11:word32] = v11_38
	branch v11_38 != 0<32> l006F6723
l006F6717:
	word32 eax_42 = Mem39[eax_11 + 4<32>:word32]
	call Mem39[eax_42 + 0x18<32>:word32] (retsize: 4;)
		uses: eax:eax_42,Stack +0004:eax_11,Stack +0010:dwArg04
		defs: edx:edx_49
l006F6723:
	eax_11 = 0<32>
l006F6725:
	edxOut = edx_13
	return eax_11
fn006F66E0_exit:


word32 fn006F6730(ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006F82C0
// MayUse: 
// LiveOut: eax edx
// Trashed: SCZO eax ecx edi edx esi Top
// Preserved: esp
fn006F6730_entry:
l006F6730:
	word32 edx_121
	branch fn00737370() == Mem13[0x00A1BDB0<p32>:word32] l006F6760
l006F6760:
	fn00737370()
	word32 eax_39 = fn006F66E0(ecx, out edx_121)
	branch eax_39 == 0<32> l006F675B
l006F6777:
	branch Mem36[0x00A74AF0<p32>:word32] == 0<32> l006F678F
l006F6780:
	word32 edx_199
	fn00716B20(out edx_199)
l006F678F:
	word32 ecx_198
	word32 edx_154
	word32 eax_80 = fn006F6490(ebx, eax_39, ecx, out ecx_198, out edx_154)
	word32 v12_86 = Mem75[eax_39:word32] + 0xFFFFFFFF<32>
	Mem87[eax_39:word32] = v12_86
	branch v12_86 != 0<32> l006F67AD
l006F67A1:
	word32 ecx_91 = Mem87[eax_39 + 4<32>:word32]
	call Mem87[ecx_91 + 0x18<32>:word32] (retsize: 4;)
		uses: eax:eax_80,ecx:ecx_91,Stack +0004:eax_39
		defs: edx:edx_98
l006F67AD:
	edxOut = edx_154
	return eax_80
l006F6747:
	word32 ecx_197
	fn006E15D0(Mem13[0x00A16F8C<p32>:word32], 0x8D571C<32>, out ecx_197, out edx_121)
l006F675B:
	edxOut = edx_121
	return 0<32>
fn006F6730_exit:


word32 fn006F67C0(ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006F68F0
// MayUse: 
// LiveOut: eax edx
// Trashed: SCZO eax ebx esi Top
// Preserved: esp
fn006F67C0_entry:
l006F67C0:
	word32 ebx_10 = 0<32>
	word32 eax_14 = fn00740CC0()
	branch eax_14 != 0<32> l006F67D2
l006F67D2:
	word32 eax_41 = fn006E8B50(0<32>, 0<32>)
	branch eax_41 == 0<32> l006F6801
l006F67F2:
	ebx_10 = fn0072E790(eax_41, edi, 0<32>, eax_14)
l006F6801:
	fn00740D60(eax_14)
	edxOut = <invalid>
	return ebx_10
l006F67CF:
	edxOut = <invalid>
	return eax_14
fn006F67C0_exit:


void fn006F6810(word32 ebx, word32 ebp, word32 esi, word32 edi, selector es, selector ds, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006F68F0
// MayUse:  cs:[0..15] ds:[0..15] ebp:[0..31] ebx:[0..31] edi:[0..31] es:[0..15] esi:[0..31] fs:[0..15] gs:[0..15] ss:[0..15] Stack +0004:[0..31]
// LiveOut:
// Trashed: SCZDOP eax ebp ebx ecx edi edx Top
// Preserved: esi esp
fn006F6810_entry:
l006F6810:
	word32 ebx_22
	word32 edx_334
	word32 ebp_335
	word32 eax_20 = fn00659040(ebx, ebp, esi, edi, es, ds, ebx, 0x8A7F88<32>, out edx_334, out ebx_22, out ebp_335)
	branch eax_20 != 0<32> l006F6841
l006F6841:
	fn00736560()
	fn00736560()
	fn00736590(dwArg04, eax_20, 2<32>)
	word32 esp_79
	word32 eax_80
	call MSVCR80.dll!fflush (retsize: 4;)
		uses: Stack +0004:eax_20,Stack +0038:dwArg04
		defs: eax:eax_80,esp:esp_79
	word32 esp_104 = esp_79 + 0x28<32>
	branch eax_80 != 0<32> l006F68C3
l006F6877:
	Mem90[esp_79 + 0x24<32>:word32] = eax_20
	word32 esp_91
	word32 eax_92
	call MSVCR80.dll!ferror (retsize: 4;)
		uses: Stack +0008:dwArg04
		defs: eax:eax_92,esp:esp_91
	esp_104 = esp_91 + 4<32>
	branch eax_92 != 0<32> l006F68C3
l006F68C3:
	branch Mem101[0x00A74AF0<p32>:word32] == 0<32> l006F68DA
l006F68CC:
	word32 esp_105 = esp_104 - 4<i32>
	Mem107[esp_105:word32] = ebx_22
	Mem109[esp_105 - 4<i32>:word32] = 0x8D5738<32>
	word32 edx_338
	fn00716B20(out edx_338)
l006F68DA:
	word32 esp_129 = esp_104 - 4<i32>
	Mem131[esp_129:word32] = eax_20
	word32 eax_132 = fclose(Mem131[esp_129:(ptr32 FILE)])
	Mem135[esp_129 - 4<i32>:word32] = ebx_22
	call unlink (retsize: 4;)
		uses: eax:eax_132,Stack +0008:dwArg04
l006F6885:
	Mem154[esp_91:word32] = eax_92
	Mem156[esp_91 - 4<i32>:word32] = 4<32>
	Mem158[esp_91 - 8<i32>:word32] = eax_20
	fseek(Mem158[esp_91 - 8<i32>:(ptr32 FILE)], Mem158[esp_91 - 4<i32>:int32], Mem158[esp_91:int32])
	word32 edx_160 = Mem158[esp_91 + 0x14<32>:word32]
	Mem162[esp_91 - 12<i32>:word32] = 2<32>
	Mem164[esp_91 - 16<i32>:word32] = eax_20
	Mem166[esp_91 - 20<i32>:word32] = edx_160
	fn00736560()
	Mem174[esp_91 - 24<i32>:word32] = eax_20
	word32 esp_175
	call MSVCR80.dll!fflush (retsize: 4;)
		uses: Stack +0008:dwArg04
		defs: esp:esp_175
	Mem182[esp_175 - 4<i32>:word32] = eax_20
	fclose(Mem182[esp_175 - 4<i32>:(ptr32 FILE)])
	branch Mem182[0x00A74AF0<p32>:word32] == 0<32> l006F68EB
l006F68EB:
l006F68B2:
	Mem192[esp_175 + 0x18<32>:word32] = ebx_22
	Mem194[esp_175 + 0x14<32>:word32] = 0x8D574C<32>
	word32 edx_337
	fn00716B20(out edx_337)
	return
l006F6825:
	branch Mem11[0x00A74AF0<p32>:word32] == eax_20 l006F68EC
l006F68EC:
	return
l006F6831:
	word32 edx_336
	fn00716B20(out edx_336)
	return
fn006F6810_exit:


word32 fn006F68F0(word32 ecx, word32 ebx, word32 ebp, word32 esi, word32 edi, selector es, selector ds, word32 dwArg04, word32 dwArg08, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006F82C0
// MayUse:  cs:[0..15] ds:[0..15] ebp:[0..31] ebx:[0..31] ecx:[0..31] edi:[0..31] es:[0..15] esi:[0..31] fs:[0..15] gs:[0..15] ss:[0..15] Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax edx
// Trashed: SCZDOP eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn006F68F0_entry:
l006F68F0:
	word32 eax_7 = Mem0[0x00A14188<p32>:word32] ^ fp - 0x11C<32>
	word32 edx_32
	word32 eax_30 = fn0074F9A0(dwArg08, out edx_32)
	branch (eax_30 & edx_32) != 0xFFFFFFFF<32> l006F6969
l006F6969:
	branch edx_32 == 0<32> l006F699C
l006F699C:
	word32 edx_101
	word32 eax_170
	word32 edi_104
	word32 eax_59 = fn006F65B0(ecx, fp - 0x108<32>, 0x101<32>)
	branch eax_59 == 0<32> l006F6A06
l006F69B7:
	word32 eax_78 = fn006F6630(edx_32, eax_59, ecx, eax_59, es, ds, eax_30, edx_32)
	branch eax_78 == 0<32> l006F6A06
l006F6A06:
	word32 eax_99 = fn006F67C0(out edx_101)
	edi_104 = eax_99
	branch eax_99 != 0<32> l006F6A1F
l006F6A1F:
	branch Mem92[0x00A74AF0<p32>:word32] == 0<32> l006F6A3B
l006F6A28:
	word32 edx_539
	fn00716B20(out edx_539)
l006F6A3B:
	branch eax_59 == 0<32> l006F6A50
l006F6A3F:
	fn006F6810(eax_59, eax_59, ecx, eax_99, es, ds, eax_99)
l006F69CC:
	word32 edx_536
	word32 eax_156 = fn006F66E0(eax_59, out edx_536)
	fclose(eax_78)
	edx_101 = eax_78
	edi_104 = eax_156
	branch eax_156 == 0<32> l006F6A1B
l006F6A1B:
	eax_170 = 0<32>
l006F69E6:
	branch Mem163[0x00A74AF0<p32>:word32] == 0<32> l006F6A02
l006F69EF:
	word32 edx_537
	fn00716B20(out edx_537)
l006F6A02:
l006F6A50:
	word32 ecx_213
	word32 eax_212 = fn006F6490(dwArg04, dwArg04, dwArg08, out ecx_213, out edx_101)
	word32 v14_218 = Mem205[edi_104:word32] + 0xFFFFFFFF<32>
	Mem219[edi_104:word32] = v14_218
	branch v14_218 != 0<32> l006F6A72
l006F6A66:
	word32 edx_223 = Mem219[edi_104 + 4<32>:word32]
	call Mem219[edx_223 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_213,edx:edx_223,Stack +0004:edi_201,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0138:dwArg04,Stack +013C:dwArg08
		defs: edx:edx_230
l006F6A72:
	eax_170 = eax_212
l006F6A74:
	word32 ecx_538
	word32 eax_307 = fn00694B8E(eax_170, eax_7 ^ fp - 284<i32>, edx_101, ebx, ebp, esi, edi, es, ds, ebx, out ecx_538)
	edxOut = edx_101
	return eax_307
l006F696F:
	word32 edx_325
	word32 ecx_534
	fn006E0F80(Mem43[0x00A18598<p32>:word32], 0x8D5784<32>, out ecx_534, out edx_325)
	word32 ecx_535
	word32 eax_340 = fn00694B8E(0<32>, eax_7 ^ fp - 0x11C<32>, edx_325, ebx, ebp, esi, edi, es, ds, ebx, out ecx_535)
	edxOut = edx_325
	return eax_340
l006F693A:
	word32 edx_360
	word32 ecx_532
	fn006E15D0(Mem43[0x00A175E0<p32>:word32], 0x8D57B0<32>, out ecx_532, out edx_360)
	word32 ecx_533
	word32 eax_375 = fn00694B8E(0<32>, eax_7 ^ fp - 0x11C<32>, edx_360, ebx, ebp, esi, edi, es, ds, ebx, out ecx_533)
	edxOut = edx_360
	return eax_375
fn006F68F0_exit:


word32 fn006F6A90(word32 ebx)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006F7890
// MayUse:  ebx:[0..31]
// LiveOut: eax
// Trashed: SCZO dl eax ecx Top
// Preserved: edi esi esp
fn006F6A90_entry:
l006F6A90:
	word32 edi_10 = Mem9[0x00A1BDB4<p32>:word32]
	word32 esi_11 = 0<32>
	branch Mem9[edi_10:word32] == 0<32> l006F6AD6
l006F6A9E:
	word32 ecx_14 = Mem9[edi_10:word32]
l006F6AA0:
	word32 eax_16 = ebx
l006F6AA2:
	word32 eax_35
	byte dl_19 = Mem9[eax_16:byte]
	branch dl_19 != Mem9[ecx_14:byte] l006F6AC2
l006F6AA8:
	branch dl_19 == 0<8> l006F6ABE
l006F6AAC:
	byte dl_26 = Mem9[eax_16 + 1<32>:byte]
	branch dl_26 != Mem9[ecx_14 + 1<32>:byte] l006F6AC2
l006F6AC2:
	word32 eax_32 = 0<32> - (dl_19 <u Mem9[ecx_14:byte])
	eax_35 = eax_32 - 0xFFFFFFFF<32> - (eax_32 <u 0<32>)
l006F6AB4:
	eax_16 = eax_16 + 2<32>
	ecx_14 = ecx_14 + 2<32>
	branch dl_26 != 0<8> l006F6AA2
l006F6ABE:
	eax_35 = 0<32>
l006F6AC7:
	branch eax_35 == 0<32> l006F6ADB
l006F6ADB:
	word32 eax_76 = CONVERT(CONVERT(Mem9[edi_10 + 4<32> + esi_11 * 8<32>:word32] != 0<32>, bool, int8), int8, uint32)
	return eax_76 - 1<32> + eax_76
l006F6ACB:
	ecx_14 = Mem9[edi_10 + 8<32> + esi_11 * 8<32>:word32]
	esi_11 = esi_11 + 1<32>
	branch ecx_14 != 0<32> l006F6AA0
l006F6AD6:
	return 0<32>
fn006F6A90_exit:


word32 fn006F6AF0(word32 dwArg04, word32 dwArg08, ptr32 & ecxOut, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006F7890
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax ecx edx
// Trashed: SCZO eax ebp ecx edi edx esi Top
// Preserved: esp
fn006F6AF0_entry:
l006F6AF0:
	word32 ecx_13
	word32 edx_14
	word32 eax_12 = fn006F2750(dwArg08, out ecx_13, out edx_14)
	branch eax_12 >= 0<32> l006F6B08
l006F6B08:
	word32 ecx_108
	word32 edx_109
	word32 eax_219 = fn006FBCC0(dwArg04, ebx, out ecx_108, out edx_109)
	branch eax_219 != 0<32> l006F6BEC
l006F6B1F:
	word32 ecx_49
	word32 edx_50
	word32 ebx_376
	word32 edi_377
	branch fn006FBD90(dwArg04, ebx, dwArg08, out ecx_49, out edx_50, out ebx_376, out edi_377) == 0<32> l006F6B37
l006F6B37:
	word32 esi_144
	branch eax_12 <= 0<32> l006F6B87
l006F6B3E:
	word32 edi_123 = 0<32>
l006F6B40:
	word32 eax_77 = fn006F2790(dwArg08, edi_123, out ecx_108, out edx_109)
	branch eax_77 == 0<32> l006F6BE3
l006F6B56:
	word32 edx_381
	word32 ecx_380
	word32 eax_93 = fn00703AF0(eax_77, out ecx_380, out edx_381)
	esi_144 = eax_93
	branch eax_93 != 0<32> l006F6BBD
l006F6B68:
	branch fn006E1110(out ecx_108, out edx_109) == 0<32> l006F6BE3
l006F6B7B:
	word32 edx_385
	word32 ecx_384
	fn006E1160(out ecx_384, out edx_385)
	edi_123 = edi_123 + 1<32>
	branch edi_123 < eax_12 l006F6B40
l006F6B87:
	word32 edx_379
	word32 ecx_378
	word32 eax_139 = fn00703AF0(0xA1C560<32>, out ecx_378, out edx_379)
	esi_144 = eax_139
	branch eax_139 != 0<32> l006F6BBD
l006F6BBD:
	word32 ebx_382
	word32 edi_383
	word32 eax_164 = fn006FBD90(dwArg04, ebx, dwArg08, out ecx_108, out edx_109, out ebx_382, out edi_383)
	word32 v15_170 = Mem159[esi_144:word32] + 0xFFFFFFFF<32>
	Mem171[esi_144:word32] = v15_170
	branch v15_170 != 0<32> l006F6BDF
l006F6BD3:
	word32 edx_175 = Mem171[esi_144 + 4<32>:word32]
	call Mem171[edx_175 + 0x18<32>:word32] (retsize: 4;)
		uses: edx:edx_175,Stack +0004:esi_153,Stack +000C:dwArg08,Stack +0018:dwArg04,Stack +001C:dwArg08
		defs: ecx:ecx_181,edx:edx_182
l006F6BDF:
	branch eax_164 == 0<32> l006F6BE9
l006F6BE3:
	ecxOut = ecx_108
	edxOut = edx_109
	return 0<32>
l006F6B9D:
	branch fn006E1110(out ecx_108, out edx_109) == 0<32> l006F6BE9
l006F6BE9:
	eax_219 = esi_144
l006F6BEC:
	ecxOut = ecx_108
	edxOut = edx_109
	return eax_219
l006F6BAF:
	word32 ecx_231
	word32 edx_232
	fn006E1160(out ecx_231, out edx_232)
	ecxOut = ecx_231
	edxOut = edx_232
	return 0xA163B8<32>
l006F6B32:
	ecxOut = ecx_49
	edxOut = edx_50
	return 0<32>
l006F6B04:
	ecxOut = ecx_13
	edxOut = edx_14
	return 0<32>
fn006F6AF0_exit:


word32 fn006F6BF0(word32 ebx, ptr32 & ecxOut, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006F7890
// MayUse:  ebx:[0..31]
// LiveOut: eax ecx edx
// Trashed: SCZO eax ecx edx Top
// Preserved: ebp edi esi esp
fn006F6BF0_entry:
l006F6BF0:
	word32 eax_10 = ebx
l006F6BF5:
	byte cl_9 = Mem0[eax_10:byte]
	eax_10 = eax_10 + 1<32>
	word32 ecx_162 = SEQ(ecx_24_8, cl_9)
	branch cl_9 != 0<8> l006F6BF5
l006F6BFE:
	word32 eax_15 = eax_10 - (ebx + 1<32>)
	branch eax_15 <u 0xF3<32> l006F6C11
l006F6C11:
	Mem30[ebx + eax_15:byte] = 0x5C<8>
	word32 esi_37 = eax_15 + 1<32> + ebx
	Mem38[esi_37:word32] = Mem30[0x008D57E0<p32>:word32]
	Mem40[esi_37 + 4<32>:word32] = Mem38[0x008D57E4<p32>:word32]
	Mem44[esi_37 + 8<32>:word32] = Mem40[0x008D57E8<p32>:word32]
	word32 ecx_163
	word32 edx_166
	branch fn00656460(ebx, out ecx_163, out edx_166) < 0<32> l006F6C50
l006F6C50:
	word32 eax_56 = esi_37
l006F6C55:
	eax_56 = eax_195 + 1<32>
	eax_195 = eax_56
	branch Mem44[eax_195:byte] != 0<8> l006F6C55
l006F6C5E:
	word32 edi_68 = eax_15 + 1<32> + (eax_56 - (esi_37 + 1<32>))
	word32 edx_136 = 0x8D57DC<32>
	branch Mem44[0x00A6DBF4<p32>:word32] != 0<32> l006F6C75
l006F6C70:
	edx_136 = 0x8C4880<32>
l006F6C75:
	word32 ecx_76 = edi_68 + ebx
l006F6C78:
	byte al_79 = Mem78[edx_136:byte]
	Mem81[ecx_76:byte] = al_79
	edx_136 = edx_136 + 1<32>
	ecx_76 = ecx_76 + 1<32>
	branch al_79 != 0<8> l006F6C78
l006F6C86:
	branch fn00656460(ebx, out ecx_163, out edx_166) >= 0<32> l006F6C43
l006F6C93:
	Mem115[ebx + eax_15:byte] = 0<8>
	ecxOut = ecx_163
	edxOut = edx_166
	return 0<32>
l006F6C43:
	Mem126[ebx + eax_15:byte] = 0<8>
	ecxOut = ecx_163
	edxOut = edx_166
	return 1<32>
l006F6C0D:
	ecxOut = ecx_162
	edxOut = ebx + 1<32>
	return 0<32>
fn006F6BF0_exit:


word32 fn006F6CA0(word32 esi, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006F6D50
//      fn006F7890
// MayUse:  esi:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ecx edx Top
// Preserved: ebx esp
fn006F6CA0_entry:
l006F6CA0:
	word32 eax_5 = Mem0[0x00A2EC98<p32>:word32]
	word32 ecx_16 = Mem0[eax_5:word32]
	branch ecx_16 == 0<32> l006F6CE5
l006F6CAC:
l006F6CB0:
	edx = esi
l006F6CB2:
	word32 ecx_34
	byte bl_18 = Mem11[ecx_16:byte]
	branch bl_18 != Mem11[edx:byte] l006F6CD2
l006F6CB8:
	branch bl_18 == 0<8> l006F6CCE
l006F6CBC:
	byte bl_25 = Mem11[ecx_16 + 1<32>:byte]
	branch bl_25 != Mem11[edx + 1<32>:byte] l006F6CD2
l006F6CD2:
	word32 ecx_31 = 0<32> - (bl_18 <u Mem11[edx:byte])
	ecx_34 = ecx_31 - 0xFFFFFFFF<32> - (ecx_31 <u 0<32>)
l006F6CC4:
	ecx_16 = ecx_16 + 2<32>
	edx = edx + 2<32>
	branch bl_25 != 0<8> l006F6CB2
l006F6CCE:
	ecx_34 = 0<32>
l006F6CD7:
	branch ecx_34 == 0<32> l006F6CE7
l006F6CDB:
	ecx_16 = Mem11[eax_5 + 0xC<32>:word32]
	eax_5 = eax_5 + 0xC<32>
	branch ecx_16 != 0<32> l006F6CB0
l006F6CE5:
	eax_5 = 0<32>
l006F6CE7:
	edxOut = edx
	return eax_5
fn006F6CA0_exit:


word32 fn006F6D50(word32 dwArg04, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006F82C0
// MayUse:  Stack +0004:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn006F6D50_entry:
l006F6D50:
	word32 edx_13
	word32 eax_11 = fn006F6CA0(dwArg04, out edx_13)
	branch eax_11 != 0<32> l006F6D64
l006F6D64:
	branch Mem10[eax_11 + 4<32>:word32] != 0<32> l006F6D84
l006F6D84:
	word32 ecx_36 = CONVERT(CONVERT(Mem26[eax_11 + 8<32>:word32] < 0<32>, bool, int8), int8, uint32)
	branch ecx_36 == 0<32> l006F6D98
l006F6D96:
l006F6D98:
	branch Mem34[0x00A74AF0<p32>:word32] == 0<32> l006F6DBE
l006F6DA1:
	branch ecx_36 != 0<32> l006F6DAF
l006F6DAA:
l006F6DAF:
	word32 edx_467
	fn00716B20(out edx_467)
l006F6DBE:
	word32 edx_112
	word32 eax_92 = fn00737410(Mem80[eax_11 + 4<32>:word32], dwArg04, out edx_112)
	word32 esp_115 = fp - 0x10<32>
	branch eax_92 == 0<32> l006F6E68
l006F6DD5:
	branch Mem87[eax_92 + 4<32>:word32] == 0xA27458<32> l006F6DF4
l006F6DF4:
	branch ecx_36 == 0<32> l006F6E42
l006F6DF8:
	word32 eax_110 = fn006F63A0(dwArg04, out edx_112)
	esp_115 = fp - 0x10<32>
	branch eax_110 == 0<32> l006F6E57
l006F6E05:
	word32 edx_473
	word32 ecx_472
	word32 eax_122 = fn00717230(eax_110, out ecx_472, out edx_473)
	word32 ecx_474
	word32 eax_131 = fn006F1A70(out ecx_474, out edx_112)
	esp_115 = fp - 0x10<32>
	branch eax_131 == 0<32> l006F6E57
l006F6E1C:
	word32 ecx_475
	word32 esi_476
	word32 eax_148 = fn006FD8F0(eax_122, dwArg04, eax_131, out ecx_475, out edx_112, out esi_476)
	word32 v17_154 = Mem146[eax_131:word32] + 0xFFFFFFFF<32>
	Mem155[eax_131:word32] = v17_154
	esp_115 = fp - 0x10<32>
	branch v17_154 != 0<32> l006F6E3E
l006F6E32:
	word32 ecx_159 = Mem155[eax_131 + 4<32>:word32]
	word32 esp_163
	call Mem155[ecx_159 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_159,Stack +0004:eax_131,Stack +0008:dwArg04,Stack +001C:dwArg04
		defs: edx:edx_166,esp:esp_163
	esp_115 = esp_163 + 4<32>
l006F6E3E:
	branch eax_148 != 0<32> l006F6E57
l006F6E42:
	word32 esp_177 = esp_115 - 4<i32>
	Mem178[esp_177:word32] = 0x8D5834<32>
	Mem182[esp_177 - 4<i32>:word32] = eax_92
	Mem186[esp_177 - 8<i32>:word32] = dwArg04
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 stackArg12 = <invalid>
	word32 ecx_471
	word32 eax_193 = fn006F6490(stackArg4, dwArg04, stackArg12, out ecx_471, out edx_112)
	esp_115 = esp_177 + 4<32>
	branch eax_193 != 0<32> l006F6E70
l006F6E70:
	word32 v18_203 = Mem186[eax_92:word32] + 0xFFFFFFFF<32>
	Mem204[eax_92:word32] = v18_203
	branch v18_203 != 0<32> l006F6E81
l006F6E75:
	word32 edx_207 = Mem204[eax_92 + 4<32>:word32]
	word32 eax_208 = Mem204[edx_207 + 0x18<32>:word32]
	Mem210[esp_177:word32] = eax_92
	word32 esp_211
	call eax_208 (retsize: 4;)
		uses: edx:edx_207,Stack +0008:dwArg04
		defs: edx:edx_214,esp:esp_211
	esp_115 = esp_211 + 4<32>
l006F6E81:
	word32 v19_221 = Mem220[eax_193:word32] + 0xFFFFFFFF<32>
	Mem222[eax_193:word32] = v19_221
	branch v19_221 != 0<32> l006F6E92
l006F6E86:
	word32 ecx_225 = Mem222[eax_193 + 4<32>:word32]
	word32 edx_226 = Mem222[ecx_225 + 0x18<32>:word32]
	Mem229[esp_115 - 4<i32>:word32] = eax_193
	call edx_226 (retsize: 4;)
		uses: ecx:ecx_225,Stack +0008:dwArg04
		defs: edx:edx_237
l006F6E92:
	edxOut = edx_112
	return 1<32>
l006F6DDE:
	word32 ecx_468
	fn006E15D0(Mem87[0x00A16B7C<p32>:word32], dwArg04, out ecx_468, out edx_112)
	esp_115 = fp - 0x10<32>
l006F6E57:
	word32 v16_271 = Mem269[eax_92:word32] + 0xFFFFFFFF<32>
	Mem272[eax_92:word32] = v16_271
	branch v16_271 != 0<32> l006F6E68
l006F6E5C:
	word32 eax_275 = Mem272[eax_92 + 4<32>:word32]
	word32 ecx_276 = Mem272[eax_275 + 0x18<32>:word32]
	Mem279[esp_115 - 4<i32>:word32] = eax_92
	call ecx_276 (retsize: 4;)
		uses: eax:eax_275,Stack +0008:dwArg04
		defs: edx:edx_287
l006F6E68:
	edxOut = edx_112
	return 0xFFFFFFFF<32>
l006F6D6A:
	word32 edx_318
	word32 ecx_466
	fn006E15D0(Mem10[0x00A16F8C<p32>:word32], 0x8D57EC<32>, out ecx_466, out edx_318)
	edxOut = edx_318
	return 0xFFFFFFFF<32>
l006F6D61:
	edxOut = edx_13
	return eax_11
fn006F6D50_exit:


word32 fn006F6EA0(word32 eax, word32 ebx, word32 dwArg04, word32 dwArg08, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006F8EC0
// MayUse:  eax:[0..31] ebx:[0..31] Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ebp ecx edi edx esi Top
// Preserved: ebx esp
fn006F6EA0_entry:
l006F6EA0:
	branch eax == 0<32> l006F70B2
l006F6EAB:
	word32 eax_12 = Mem6[eax + 4<32>:word32]
	branch eax_12 == 0xA1D1B8<32> l006F6ECB
l006F6EB5:
	word32 ecx_607
	branch fn006D5670(eax_12, 0xA1D1B8<32>, out ecx_607, out edx) == 0<32> l006F70B2
l006F6ECB:
	branch dwArg08 == 0<32> l006F70B2
l006F70B2:
	edxOut = edx
	return 0xA163B8<32>
l006F6ED6:
	word32 edx_462
	word32 eax_39 = Mem31[0x00A6CB98<p32>:word32]
	branch eax_39 != 0<32> l006F6EF9
l006F6EDF:
	word32 ecx_608
	eax_39 = fn006F1A70(out ecx_608, out edx_462)
	Mem56[0x00A6CB98<p32>:word32] = eax_39
	branch eax_39 != 0<32> l006F6EF9
l006F6EF9:
	branch Mem58[0x00A6CB9C<p32>:word32] != 0<32> l006F6F1D
l006F6F02:
	word32 ecx_610
	word32 eax_68 = fn006F1A70(out ecx_610, out edx_462)
	Mem76[0x00A6CB9C<p32>:word32] = eax_68
	branch eax_68 == 0<32> l006F6EF5
l006F6F18:
	eax_39 = Mem76[0x00A6CB98<p32>:word32]
l006F6F1D:
	Mem95[ebx:byte] = 0<8>
	Mem99[dwArg04:word32] = 0<32>
	word32 ecx_609
	word32 edx_104
	word32 eax_102 = fn006FBCC0(eax, eax_39, out ecx_609, out edx_104)
	branch eax_102 == 0<32> l006F70AA
l006F6F3F:
	word32 eax_112 = Mem99[eax_102 + 4<32>:word32]
	branch eax_112 == 0xA1B450<32> l006F6F5F
l006F6F49:
	word32 ecx_612
	branch fn006D5670(eax_112, 0xA1B450<32>, out ecx_612, out edx_104) == 0<32> l006F70AA
l006F70AA:
	edxOut = edx_104
	return 0xA163B8<32>
l006F6F5F:
	word32 edx_159
	word32 ecx_611
	branch fn006FBCC0(eax, Mem137[0x00A6CB9C<p32>:word32], out ecx_611, out edx_159) == 0<32> l006F6FB1
l006F6FB1:
	word32 eax_172 = strrchr(eax_102 + 0x14<32>, 0x2E<32>)
	branch eax_172 != 0<32> l006F6FE9
l006F6FE9:
	word32 eax_177 = eax_172 - (eax_102 + 0x14<32>)
	branch eax_177 <u 0x100<32> l006F700F
l006F700F:
	strncpy(ebx, eax_102 + 0x14<32>, eax_177)
	Mem190[eax_177 + ebx:byte] = 0<8>
l006F6FF5:
	word32 edx_199
	word32 ecx_620
	fn006E0F80(Mem171[0x00A17E2C<p32>:word32], 0x8D5920<32>, out ecx_620, out edx_199)
	edxOut = edx_199
	return 0<32>
l006F6FC0:
	branch dwArg08 <= eax_172 l006F6FE0
l006F6FE0:
	edxOut = edx_159
	return 0xA163B8<32>
l006F6FC6:
	word32 edx_229
	word32 ecx_614
	fn006E0F80(Mem171[0x00A17E2C<p32>:word32], 0x8D58F4<32>, out ecx_614, out edx_229)
	edxOut = edx_229
	return 0<32>
l006F6F7A:
	branch Mem151[eax_102 + 8<32>:word32] <= 0x100<32> l006F6F9C
l006F6F9C:
	word32 eax_244 = eax_102 + 0x14<32>
	word32 edx_246 = ebx - (eax_102 + 0x14<32>)
l006F6FA3:
	byte cl_250 = Mem249[eax_244:byte]
	Mem252[edx_246 + eax_244:byte] = cl_250
	eax_244 = eax_244 + 1<32>
	branch cl_250 != 0<8> l006F6FA3
l006F6FAF:
l006F701F:
	word32 esi_261 = dwArg08 - 1<32>
	branch dwArg08 <= 1<32> l006F7046
l006F702A:
l006F7030:
	word32 eax_279 = strrchr(ebx, 0x2E<32>)
	branch eax_279 == 0<32> l006F7091
l006F7091:
	word32 edx_296
	word32 ecx_615
	fn006E0F80(Mem272[0x00A17E2C<p32>:word32], 0x8D589C<32>, out ecx_615, out edx_296)
	edxOut = edx_296
	return 0<32>
l006F703C:
	Mem312[eax_279:byte] = 0<8>
	esi_261 = esi_261 - 1<32>
	branch esi_261 > 0<32> l006F7030
l006F7046:
	word32 eax_314 = ebx
l006F7050:
	eax_314 = eax_621 + 1<32>
	eax_621 = eax_314
	branch Mem419[eax_621:byte] != 0<8> l006F7050
l006F7059:
	Mem329[dwArg04:word32] = eax_314 - (ebx + 1<32>)
	word32 ecx_616
	word32 esi_617
	word32 edi_618
	word32 edx_357
	word32 eax_355 = fn006FD8B0(fn006F5DA0(), ebx, out ecx_616, out edx_357, out esi_617, out edi_618)
	branch eax_355 != 0<32> l006F708B
l006F7076:
	word32 ecx_619
	fn006E15D0(Mem339[0x00A18720<p32>:word32], 0x8D58D0<32>, out ecx_619, out edx_357)
l006F708B:
	edxOut = edx_357
	return eax_355
l006F6F83:
	word32 edx_398
	word32 ecx_613
	fn006E0F80(Mem151[0x00A17E2C<p32>:word32], 0x8D5920<32>, out ecx_613, out edx_398)
	edxOut = edx_398
	return 0<32>
l006F6EF5:
	edxOut = edx_462
	return 0<32>
fn006F6EA0_exit:


word32 fn006F70C0(ptr32 & ecxOut, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006F8AD0
// MayUse: 
// LiveOut: eax ecx edx
// Trashed: SCZO eax ecx esi Top
// Preserved: esp
fn006F70C0_entry:
l006F70C0:
	word32 esi_9 = Mem8[Mem0[0x00A6D67C<p32>:word32] + 4<32>:word32]
	branch Mem8[esi_9 + 8<32>:word32] != 0<32> l006F70DC
l006F70CF:
	fn006E86F0(0x8D5538<32>)
l006F70DC:
	word32 ecx_35
	word32 edx_58
	word32 esi_59
	word32 eax_34 = fn006FD8F0(Mem22[esi_9 + 8<32>:word32], dwArg04, 0xA163B8<32>, out ecx_35, out edx_58, out esi_59)
	ecxOut = ecx_35
	edxOut = <invalid>
	return eax_34
fn006F70C0_exit:


word32 fn006F7100(word32 eax, word32 edi, ptr32 & ecxOut, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006F8440
// MayUse:  eax:[0..31] edi:[0..31]
// LiveOut: eax ecx edx
// Trashed: SCZO eax ecx edx esi Top
// Preserved: esp
fn006F7100_entry:
l006F7100:
	word32 esi_10 = eax
	branch edi == 0xA163B8<32> l006F716E
l006F710B:
	branch eax != 0<32> l006F7123
l006F710F:
	word32 edi_186
	word32 esi_185
	word32 eax_22 = fn006FD8B0(ecx, dwArg04, out ecx, out edx, out esi_185, out edi_186)
	esi_10 = eax_22
	branch eax_22 == 0<32> l006F716E
l006F7123:
	word32 eax_33 = Mem32[edi + 4<32>:word32]
	branch eax_33 == 0xA215C0<32> l006F7152
l006F712D:
	word32 ecx_187
	word32 edx_188
	branch fn006D5670(eax_33, 0xA215C0<32>, out ecx_187, out edx_188) != 0<32> l006F7152
l006F7152:
	word32 eax_64 = fn00717230(edi, out ecx, out edx)
	branch eax_64 == 0<32> l006F714E
l006F715F:
	word32 esi_189
	branch fn006FD8F0(eax_64, dwArg04, esi_10, out ecx, out edx, out esi_189) < 0<32> l006F714E
l006F713F:
	branch fn006DF800(edi, dwArg04, esi_10, out ecx, out edx) >= 0<32> l006F716E
l006F716E:
	ecxOut = ecx
	edxOut = edx
	return 1<32>
l006F714E:
	ecxOut = ecx
	edxOut = edx
	return 0<32>
fn006F7100_exit:


word32 fn006F7810(ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006F8050
//      fn0074F9E0
// MayUse: 
// LiveOut: eax edx
// Trashed: SCZO eax ebp edi Top
// Preserved: ebx esi esp
fn006F7810_entry:
l006F7810:
	word32 eax_5 = Mem0[0x00A6CB88<p32>:word32]
	branch eax_5 != 0<32> l006F781A
l006F781A:
	word32 edi_180
	word32 esi_179
	word32 edx_178
	word32 ecx_177
	word32 eax_21 = fn006FD8B0(eax_5, dwArg08, out ecx_177, out edx_178, out esi_179, out edi_180)
	branch eax_21 != 0<32> l006F7833
l006F7833:
	word32 edx_181
	word32 eax_39 = fn006F63A0(dwArg04, out edx_181)
	branch eax_39 == 0<32> l006F7863
l006F7848:
	word32 edx_183
	word32 ecx_182
	branch fn00717230(eax_39, out ecx_182, out edx_183) == 0<32> l006F7863
l006F7855:
	branch fn006FDE40() == 0<32> l006F786A
l006F786A:
	branch Mem60[0x00A74AF0<p32>:word32] == 0<32> l006F7882
l006F7873:
	word32 edx_184
	fn00716B20(out edx_184)
l006F7882:
	edxOut = <invalid>
	return eax_39
l006F7863:
	edxOut = <invalid>
	return 0<32>
l006F7830:
	edxOut = <invalid>
	return eax_21
l006F7819:
	edxOut = <invalid>
	return eax_5
fn006F7810_exit:


word32 fn006F7890(word32 ebx, word32 ebp, word32 esi, word32 edi, selector es, selector ds, word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg14, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006F8440
//      fn006F8960
// MayUse:  cs:[0..15] ds:[0..15] ebp:[0..31] ebx:[0..31] edi:[0..31] es:[0..15] esi:[0..31] fs:[0..15] gs:[0..15] ss:[0..15] Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31] Stack +0014:[0..31]
// LiveOut: eax edx
// Trashed: SCZDOP eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn006F7890_entry:
l006F7890:
	word32 eax_7 = Mem0[0x00A14188<p32>:word32] ^ fp - 0x284<32>
	word32 eax_58 = dwArg04
	word32 ebx_1182 = dwArg08
	word32 ebp_1157 = dwArg0C
	branch dwArg14 == 0<32> l006F78E4
l006F78E2:
	Mem36[dwArg14:word32] = 0<32>
l006F78E4:
	word32 ecx_38 = dwArg04
	word32 esp_142 = fp - 0x294<32>
l006F78F0:
	ecx_38 = ecx_2486 + 1<32>
	ecx_2486 = ecx_38
	branch Mem1819[ecx_2486:byte] != 0<8> l006F78F0
l006F78F9:
	word32 edx_1028
	word32 eax_1062
	word32 eax_1385
	word32 esp_119
	branch ecx_38 - (dwArg04 + 1<32>) <=u 0x100<32> l006F7912
l006F7912:
	word32 edx_56 = fp - 0x258<32> - dwArg04
l006F7918:
	byte cl_60 = Mem59[eax_58:byte]
	Mem62[edx_56 + eax_58:byte] = cl_60
	eax_58 = eax_58 + 1<32>
	branch cl_60 != 0<8> l006F7918
l006F7924:
	branch dwArg14 == 0<32> l006F79EA
l006F792C:
	word32 ecx_2432
	word32 edx_2433
	word32 eax_90 = fn00715DD0(out ecx_2432, out edx_2433)
	branch eax_90 == 0<32> l006F7A8F
l006F7943:
	word32 eax_100 = Mem75[eax_90 + 4<32>:word32]
	branch eax_100 == 0xA1BAF0<32> l006F7963
l006F794D:
	word32 ecx_2436
	word32 edx_2437
	branch fn006D5670(eax_100, 0xA1BAF0<32>, out ecx_2436, out edx_2437) == 0<32> l006F7A8F
l006F7A8F:
	esp_119 = fp - 0x298<32>
l006F7963:
	Mem124[eax_90:word32] = Mem122[eax_90:word32] + 1<32>
	word32 ecx_2434
	word32 edx_2435
	word32 eax_136 = fn006F2750(eax_90, out ecx_2434, out edx_2435)
	esp_142 = fp - 0x294<32>
	word32 edi_143 = 0<32>
	branch eax_136 <= 0<32> l006F79D5
l006F7977:
	word32 esp_147 = esp_142 - 4<i32>
	Mem149[esp_147:word32] = edi_143
	Mem152[esp_147 - 4<i32>:word32] = eax_90
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_2439
	word32 edx_2440
	word32 eax_159 = fn006F2790(stackArg4, dwArg04, out ecx_2439, out edx_2440)
	word32 ecx_164 = Mem152[esp_147 + 0x14<32>:word32]
	branch Mem152[esp_147 + 0x14<32>:word32] != 0<32> l006F7991
l006F798C:
	ecx_164 = 0xA163B8<32>
l006F7991:
	Mem172[esp_147:word32] = ecx_164
	Mem175[esp_147 - 4<i32>:word32] = Mem172[esp_147 + 0x2C<32>:word32]
	Mem177[esp_147 - 8<i32>:word32] = 0x8CBC38<32>
	Mem179[esp_147 - 12<i32>:word32] = 0x8D542C<32>
	Mem182[esp_147 - 16<i32>:word32] = eax_159
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_191
	word32 eax_190 = fn007038E0(stackArg4, dwArg04, dwArg08, out ecx_191, out edx_1028)
	esp_142 = esp_147 + 4<32>
	branch eax_190 == 0<32> l006F7A54
l006F7A54:
	word32 v22_199 = Mem182[eax_90:word32] + 0xFFFFFFFF<32>
	Mem200[eax_90:word32] = v22_199
	branch v22_199 != 0<32> l006F8029
l006F7A5D:
	word32 ecx_203 = Mem200[eax_90 + 4<32>:word32]
	word32 edx_204 = Mem200[ecx_203 + 0x18<32>:word32]
	Mem206[esp_147:word32] = eax_90
	call edx_204 (retsize: 4;)
		uses: ecx:ecx_203,edx:edx_204,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C,Stack +0018:dwArg14
		defs: edx:edx_210
l006F79B2:
	branch eax_190 != 0xA163B8<32> l006F7A6E
l006F7A6E:
	word32 ecx_217 = Mem182[esp_147 + 0x24<32>:word32]
	Mem218[ecx_217:word32] = eax_190
	word32 v21_219 = Mem218[eax_90:word32] + 0xFFFFFFFF<32>
	Mem220[eax_90:word32] = v21_219
	branch v21_219 != 0<32> l006F7A85
l006F7A79:
	word32 edx_223 = Mem220[eax_90 + 4<32>:word32]
	word32 eax_224 = Mem220[edx_223 + 0x18<32>:word32]
	Mem226[esp_147:word32] = eax_90
	call eax_224 (retsize: 4;)
		uses: ecx:ecx_217,edx:edx_223,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C,Stack +0018:dwArg14
		defs: edx:edx_230
l006F7A85:
	eax_1062 = 0xA1BE14<32>
l006F79BD:
	word32 v18_236 = Mem182[eax_190:word32] + 0xFFFFFFFF<32>
	Mem237[eax_190:word32] = v18_236
	branch v18_236 != 0<32> l006F79CE
l006F79C2:
	word32 edx_240 = Mem237[eax_190 + 4<32>:word32]
	Mem242[esp_147:word32] = eax_190
	word32 esp_244
	call Mem242[edx_240 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_191,edx:edx_240,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C,Stack +0018:dwArg14
		defs: esp:esp_244
	esp_142 = esp_244 + 4<32>
l006F79CE:
	edi_143 = edi_143 + 1<32>
	branch edi_143 < eax_136 l006F7977
l006F79D5:
	word32 v19_261 = Mem259[eax_90:word32] + 0xFFFFFFFF<32>
	Mem262[eax_90:word32] = v19_261
	branch v19_261 != 0<32> l006F79E6
l006F79DA:
	word32 ecx_265 = Mem262[eax_90 + 4<32>:word32]
	word32 edx_266 = Mem262[ecx_265 + 0x18<32>:word32]
	Mem270[esp_142 - 4<i32>:word32] = eax_90
	word32 esp_277
	call edx_266 (retsize: 4;)
		uses: ecx:ecx_265,edx:edx_266,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C,Stack +0018:dwArg14
		defs: esp:esp_277
	esp_142 = esp_277 + 4<32>
l006F79E6:
	ebx_1182 = Mem286[esp_142 + 0x10<32>:word32]
l006F79EA:
	branch ebx_1182 == 0<32> l006F7B56
l006F7B56:
	word32 ebx_293 = esp_142 + 0x3C<32>
	branch fn006F6A90(ebx_293) == 0<32> l006F7B86
l006F7B86:
	word32 esi_304 = esp_142 + 0x3C<32>
	word32 edx_2483
	branch fn006F6CA0(esi_304, out edx_2483) == 0<32> l006F7BB6
l006F7BB6:
	word32 esp_315 = esp_142 - 4<i32>
	Mem316[esp_315:word32] = 0x8CA548<32>
	word32 edx_2485
	word32 ecx_2484
	word32 eax_324 = fn00715DD0(out ecx_2484, out edx_2485)
	Mem332[esp_315 + 0x14<32>:word32] = eax_324
	branch eax_324 == 0<32> l006F8016
l006F7B93:
	word32 eax_336 = esi_304
	edx_1028 = dwArg0C - esi_304
l006F7BA0:
	byte cl_341 = Mem340[eax_336:byte]
	Mem343[eax_336 + edx_1028:byte] = cl_341
	eax_336 = eax_336 + 1<32>
	branch cl_341 != 0<8> l006F7BA0
l006F7BAC:
	eax_1062 = 0xA1BE20<32>
l006F7B63:
	word32 eax_351 = ebx_293
	edx_1028 = dwArg0C - ebx_293
l006F7B70:
	byte cl_356 = Mem355[eax_351:byte]
	Mem358[eax_351 + edx_1028:byte] = cl_356
	eax_351 = eax_351 + 1<32>
	branch cl_356 != 0<8> l006F7B70
l006F7B7C:
	eax_1062 = 0xA1BE2C<32>
l006F79F2:
	word32 eax_365 = Mem364[ebx_1182 + 4<32>:word32]
	branch eax_365 == 0xA1B450<32> l006F7A16
l006F79FC:
	word32 esp_368 = esp_142 - 4<i32>
	Mem369[esp_368:word32] = 0xA1B450<32>
	Mem371[esp_368 - 4<i32>:word32] = eax_365
	word32 edx_2444
	word32 ecx_2443
	branch fn006D5670(Mem371[esp_368 - 4<i32>:word32], Mem371[esp_368:word32], out ecx_2443, out edx_2444) == 0<32> l006F7BCF
l006F7BCF:
	word32 esi_385 = Mem384[esp_142 + 0x10<32>:word32]
	word32 eax_386 = Mem384[esi_385 + 4<32>:word32]
	branch eax_386 == 0xA1BAF0<32> l006F7BF3
l006F7BDD:
	word32 esp_389 = esp_142 - 4<i32>
	Mem390[esp_389:word32] = 0xA1BAF0<32>
	Mem392[esp_389 - 4<i32>:word32] = eax_386
	word32 ecx_2447
	word32 edx_2448
	branch fn006D5670(Mem392[esp_389 - 4<i32>:word32], Mem392[esp_389:word32], out ecx_2447, out edx_2448) == 0<32> l006F8016
l006F8016:
	esp_119 = esp_142 - 4<i32>
	Mem406[esp_119:word32] = 0x8D5AE4<32>
l006F801B:
	eax_1385 = Mem407[0x00A16F8C<p32>:word32]
l006F7BF3:
	word32 esp_410 = esp_142 - 4<i32>
	Mem411[esp_410:word32] = 0x8D5484<32>
	word32 ecx_2445
	word32 edx_2446
	word32 eax_426 = fn00715DD0(out ecx_2445, out edx_2446)
	Mem434[esp_410 + 0x3C<32>:word32] = eax_426
	branch eax_426 == 0<32> l006F8008
l006F7C0C:
	word32 eax_436 = Mem434[eax_426 + 4<32>:word32]
	branch eax_436 == 0xA1BAF0<32> l006F7C2C
l006F7C16:
	Mem440[esp_410:word32] = 0xA1BAF0<32>
	Mem442[esp_410 - 4<i32>:word32] = eax_436
	word32 ecx_2451
	word32 edx_2452
	branch fn006D5670(Mem442[esp_410 - 4<i32>:word32], Mem442[esp_410:word32], out ecx_2451, out edx_2452) == 0<32> l006F8008
l006F8008:
	word32 edx_455 = Mem454[0x00A16F8C<p32>:word32]
	Mem458[esp_410:word32] = 0x8D5B10<32>
	Mem460[esp_410 - 4<i32>:word32] = edx_455
l006F7C2C:
	Mem463[esp_410:word32] = 0x8D5470<32>
	word32 ecx_2449
	word32 edx_2450
	word32 eax_472 = fn00715DD0(out ecx_2449, out edx_2450)
	Mem480[esp_410 + 0x38<32>:word32] = eax_472
	branch eax_472 == 0<32> l006F7FFA
l006F7C45:
	word32 eax_482 = Mem480[eax_472 + 4<32>:word32]
	branch eax_482 == 0xA1D1B8<32> l006F7C65
l006F7C4F:
	Mem486[esp_410:word32] = 0xA1D1B8<32>
	Mem488[esp_410 - 4<i32>:word32] = eax_482
	word32 ecx_2456
	word32 edx_2457
	branch fn006D5670(Mem488[esp_410 - 4<i32>:word32], Mem488[esp_410:word32], out ecx_2456, out edx_2457) == 0<32> l006F7FFA
l006F7FFA:
	word32 ecx_501 = Mem500[0x00A16F8C<p32>:word32]
	Mem504[esp_410:word32] = 0x8D5B40<32>
	Mem506[esp_410 - 4<i32>:word32] = ecx_501
l006F7C65:
	Mem510[esp_410:word32] = esi_385
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_2454
	word32 edx_2455
	word32 eax_518 = fn006F2750(stackArg4, out ecx_2454, out edx_2455)
	Mem527[esp_410 + 0x30<32>:word32] = eax_518
	word32 eax_524 = esp_410 + 0x40<32>
	word32 esp_1010 = esp_410 + 4<32>
l006F7C80:
	eax_524 = eax_2487 + 1<32>
	eax_2487 = eax_524
	branch Mem527[eax_2487:byte] != 0<8> l006F7C80
l006F7C89:
	Mem542[esp_410 + 0x28<32>:word32] = eax_524 - (esp_410 + 0x41<32>)
	Mem543[esp_410 + 0x20<32>:word32] = 0<32>
	branch eax_518 <= 0<32> l006F7F6D
l006F7C9F:
l006F7CA0:
	word32 eax_547 = Mem545[esp_1010 + 0x10<32>:word32]
	word32 esp_548 = esp_1010 - 4<i32>
	Mem549[esp_548:word32] = Mem545[esp_1010 + 0x1C<32>:word32]
	Mem551[esp_548 - 4<i32>:word32] = eax_547
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_2473
	word32 eax_561 = fn006F2790(stackArg4, dwArg04, out ecx_2473, out edx_1028)
	word32 edi_552 = 0<32>
	word32 ebx_566 = eax_561
	branch eax_561 == 0<32> l006F8029
l006F7CBE:
	word32 eax_571 = Mem551[eax_561 + 4<32>:word32]
	branch eax_571 == 0xA23B20<32> l006F7CFB
l006F7CC8:
	Mem575[esp_548:word32] = 0xA23B20<32>
	Mem577[esp_548 - 4<i32>:word32] = eax_571
	word32 ecx_2468
	word32 edx_2469
	branch fn006D5670(Mem577[esp_548 - 4<i32>:word32], Mem577[esp_548:word32], out ecx_2468, out edx_2469) != 0<32> l006F7CFB
l006F7CFB:
	word32 ecx_590 = Mem589[0x00A2BD68<p32>:word32]
	word32 edx_592 = Mem589[eax_561 + 8<32>:word32]
	word32 eax_593 = Mem589[eax_561 + 0xC<32>:word32]
	Mem596[esp_548:word32] = 0<32>
	Mem598[esp_548 - 4<i32>:word32] = ecx_590
	Mem600[esp_548 - 8<32>:word32] = edx_592
	Mem602[esp_548 - 0xC<32>:word32] = eax_593
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 eax_608 = fn00720020(stackArg4, dwArg04, dwArg08, dwArg0C, out edx_1028)
	edi_552 = eax_608
	branch eax_608 == 0<32> l006F8029
l006F7D1E:
	ebx_566 = eax_608
l006F7CDA:
	word32 eax_619 = Mem577[eax_561 + 4<32>:word32]
	branch eax_619 == 0xA1B450<32> l006F7D20
l006F7CE4:
	Mem623[esp_548:word32] = 0xA1B450<32>
	Mem625[esp_548 - 4<i32>:word32] = eax_619
	esp_1010 = esp_548 + 4<32>
	word32 ecx_2470
	word32 edx_2471
	branch fn006D5670(Mem625[esp_548 - 4<i32>:word32], Mem625[esp_548:word32], out ecx_2470, out edx_2471) != 0<32> l006F7D20
l006F7D20:
	word32 esi_639 = Mem638[ebx_566 + 8<32>:word32]
	word32 ecx_641 = Mem638[esp_1010 + 0x24<32>:word32]
	word32 edx_642 = esi_639 + 0xE<32> + ecx_641
	branch edx_642 <u Mem638[esp_1010 + 0x2A4<32>:word32] l006F7D56
l006F7D56:
	word32 eax_645 = ebx_566 + 0x14<32>
	word32 edx_648 = ebp_1157 - eax_645
	word24 ecx_24_8_1096 = SLICE(ecx_641, word24, 8)
l006F7D60:
	byte cl_653 = Mem652[eax_645:byte]
	Mem655[eax_645 + edx_648:byte] = cl_653
	eax_645 = eax_645 + 1<32>
	branch cl_653 != 0<8> l006F7D60
l006F7D6C:
	word32 eax_661 = ebp_1157
	word32 edx_662 = ebp_1157 + 1<32>
l006F7D71:
	byte cl_665 = Mem655[eax_661:byte]
	eax_661 = eax_661 + 1<32>
	word32 ecx_1097 = SEQ(ecx_24_8_1096, cl_665)
	branch cl_665 != 0<8> l006F7D71
l006F7D7A:
	branch eax_661 - edx_662 == esi_639 l006F7DA2
l006F7DA2:
	branch Mem655[esp_1010 + 0x20<32>:word32] == 0<32> l006F7E27
l006F7DA9:
	word32 edx_681 = Mem655[esp_1010 + 0x34<32>:word32]
	word32 esp_682 = esp_1010 - 4<i32>
	Mem683[esp_682:word32] = Mem655[esp_1010 + 0x38<32>:word32]
	Mem685[esp_682 - 4<i32>:word32] = edx_681
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_697
	word32 eax_696 = fn006F6AF0(stackArg4, dwArg04, out ecx_697, out edx_1028)
	branch eax_696 == 0<32> l006F7F8B
l006F7F8B:
	branch edi_552 == 0<32> l006F8029
l006F7F93:
	word32 v31_708 = Mem685[edi_552:word32] + 0xFFFFFFFF<32>
	Mem709[edi_552:word32] = v31_708
	branch v31_708 != 0<32> l006F8029
l006F7F9C:
	word32 edx_712 = Mem709[edi_552 + 4<32>:word32]
	word32 eax_713 = Mem709[edx_712 + 0x18<32>:word32]
	Mem715[esp_682:word32] = edi_552
	call eax_713 (retsize: 4;)
		uses: ecx:ecx_697,edx:edx_712,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C,Stack +0018:dwArg14
		defs: edx:edx_719
l006F7DC3:
	branch eax_696 == 0xA163B8<32> l006F7E27
l006F7E27:
	branch esi_639 <=u 0<32> l006F7E3E
l006F7E2B:
	byte al_733 = Mem732[esi_639 - 1<32> + ebp_1157:byte]
	branch al_733 == 0x5C<8> l006F7E3E
l006F7E33:
	branch al_733 == 0x2F<8> l006F7E3E
l006F7E37:
	Mem738[esi_639 + ebp_1157:byte] = 0x5C<8>
	esi_639 = esi_639 + 1<32>
l006F7E3E:
	word32 eax_743 = esp_1010 + 0x3C<32>
	word32 edx_750 = ebp_1157 - eax_743 + esi_639
l006F7E50:
	byte cl_753 = Mem752[eax_743:byte]
	Mem755[eax_743 + edx_750:byte] = cl_753
	eax_743 = eax_743 + 1<32>
	branch cl_753 != 0<8> l006F7E50
l006F7E5C:
	word32 esi_762 = esi_639 + Mem755[esp_1010 + 0x24<32>:word32]
	word32 esp_764 = esp_1010 - 4<i32>
	Mem766[esp_764:word32] = ebp_1157
	word32 ecx_2479
	branch fn00656460(Mem766[esp_764:word32], out ecx_2479, out edx_1028) != 1<32> l006F7EB7
l006F7E6E:
	word32 ecx_779
	branch fn006F6BF0(ebp_1157, out ecx_779, out edx_1028) != 0<32> l006F7FB7
l006F7FB7:
	branch edi_552 == 0<32> l006F7FCC
l006F7FBB:
	word32 v34_794 = Mem766[edi_552:word32] + 0xFFFFFFFF<32>
	Mem795[edi_552:word32] = v34_794
	branch v34_794 != 0<32> l006F7FCC
l006F7FC0:
	word32 edx_798 = Mem795[edi_552 + 4<32>:word32]
	word32 eax_799 = Mem795[edx_798 + 0x18<32>:word32]
	Mem801[esp_764:word32] = edi_552
	call eax_799 (retsize: 4;)
		uses: ecx:ecx_779,edx:edx_798,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C,Stack +0018:dwArg14
		defs: edx:edx_808
l006F7FCC:
	eax_1062 = 0xA1BE38<32>
l006F7E7D:
	Mem815[esp_764:word32] = ebp_1157
	Mem817[esp_764 - 4<i32>:word32] = 0x100<32>
	Mem820[esp_764 - 8<i32>:word32] = 0x8D5B90<32>
	Mem822[esp_764 - 12<i32>:word32] = esp_764 + 0x144<32>
	sprintf(Mem822[esp_764 - 12<i32>:(ptr32 charconst )], Mem822[esp_764 - 8<i32>:(ptr32 charconst )], Mem822[esp_764 - 4<i32>:<unknown>])
	word32 edx_824 = Mem822[0x00A18EC8<p32>:word32]
	Mem826[esp_764 - 16<i32>:word32] = 1<32>
	Mem829[esp_764 - 20<i32>:word32] = esp_764 + 0x144<32>
	Mem831[esp_764 - 24<i32>:word32] = edx_824
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	branch fn006E1970(stackArg4, dwArg04, dwArg08, out edx_1028) != 0<32> l006F7FD3
l006F7FD3:
	branch edi_552 == 0<32> l006F8029
l006F7FD7:
	word32 v33_845 = Mem831[edi_552:word32] + 0xFFFFFFFF<32>
	Mem846[edi_552:word32] = v33_845
	branch v33_845 != 0<32> l006F8029
l006F7FDC:
	word32 ecx_849 = Mem846[edi_552 + 4<32>:word32]
	word32 edx_850 = Mem846[ecx_849 + 0x18<32>:word32]
	Mem852[esp_764:word32] = edi_552
	call edx_850 (retsize: 4;)
		uses: ecx:ecx_849,edx:edx_850,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C,Stack +0018:dwArg14
		defs: edx:edx_856
l006F7EB7:
	word32 ebx_869
	word32 ebx_862 = Mem861[0x00A6CB8C<p32>:word32]
	word32 ecx_1829 = Mem861[ebx_862:word32]
	Mem867[esp_1010 + 0x14<32>:word32] = ebx_862
	branch ecx_1829 == 0<32> l006F7F30
l006F7F30:
	ebx_869 = Mem867[esp_1010 + 0x18<32>:word32]
l006F7EC7:
	word32 esi_872 = esi_762 + ebp_1157
l006F7ED4:
	word32 edx_875 = esi_872
l006F7ED6:
	byte al_878 = Mem877[ecx_1829:byte]
	Mem880[edx_875:byte] = al_878
	ecx_1829 = ecx_1829 + 1<32>
	edx_875 = edx_875 + 1<32>
	branch al_878 != 0<8> l006F7ED6
l006F7EE4:
	branch Mem880[0x00A74AF0<p32>:word32] <= 1<32> l006F7EFB
l006F7EED:
	word32 esp_890 = esp_1010 - 4<i32>
	Mem893[esp_890:word32] = ebp_1157
	Mem895[esp_890 - 4<i32>:word32] = 0x8D5B80<32>
	word32 edx_2481
	fn00716B20(out edx_2481)
l006F7EFB:
	word32 eax_913 = Mem912[ebx_862 + 4<32>:word32]
	branch Mem912[eax_913:byte] != 0x55<8> l006F7F08
l006F7F03:
	eax_913 = 0x8A7744<32>
l006F7F08:
	word32 esp_919 = esp_1010 - 4<i32>
	Mem921[esp_919:word32] = eax_913
	Mem925[esp_919 - 4<i32>:word32] = ebp_1157
	word32 ebx_2482
	word32 eax_955 = fn00659040(ebx_862, ebp_1157, esi_872, edi_552, es, ds, Mem925[esp_919 - 4<i32>:word32], Mem925[esp_919:word32], out edx_1028, out ebx_2482, out ebp_1157)
	Mem970[esp_919 + 0x1C<32>:word32] = eax_955
	ebx_869 = eax_955
	branch eax_955 != 0<32> l006F7F34
l006F7F1C:
	word32 eax_972 = Mem970[esp_919 + 0x18<32>:word32]
	ecx_1829 = Mem970[eax_972 + 0xC<32>:word32]
	Mem977[esp_919 + 0x18<32>:word32] = eax_972 + 0xC<32>
	branch ecx_1829 != 0<32> l006F7ED0
l006F7ED0:
	ebx_862 = Mem977[esp_919 + 0x18<32>:word32]
l006F7F2E:
l006F7F34:
	branch edi_552 == 0<32> l006F7F49
l006F7F38:
	word32 v32_986 = Mem985[edi_552:word32] + 0xFFFFFFFF<32>
	Mem987[edi_552:word32] = v32_986
	branch v32_986 != 0<32> l006F7F49
l006F7F3D:
	word32 eax_990 = Mem987[edi_552 + 4<32>:word32]
	word32 ecx_991 = Mem987[eax_990 + 0x18<32>:word32]
	Mem994[esp_1010 - 4<i32>:word32] = edi_552
	word32 esp_1004
	call ecx_991 (retsize: 4;)
		uses: eax:eax_990,ecx:ecx_991,edx:edx_998,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C,Stack +0018:dwArg14
		defs: esp:esp_1004
	esp_1010 = esp_1004 + 4<32>
l006F7F49:
	branch ebx_869 != 0<32> l006F7FEA
l006F7DCA:
	Mem1018[esp_682:word32] = Mem685[esp_682 + 0x2C<32>:word32]
	Mem1020[esp_682 - 4<i32>:word32] = 0x8B22AC<32>
	Mem1022[esp_682 - 8<i32>:word32] = 0x8D542C<32>
	Mem1024[esp_682 - 12<i32>:word32] = eax_696
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_1027
	word32 eax_1026 = fn007038E0(stackArg4, dwArg04, dwArg08, out ecx_1027, out edx_1028)
	esp_1010 = esp_682 + 4<32>
	branch edi_552 == 0<32> l006F7DF9
l006F7DE8:
	word32 v29_1036 = Mem1024[edi_552:word32] + 0xFFFFFFFF<32>
	Mem1037[edi_552:word32] = v29_1036
	branch v29_1036 != 0<32> l006F7DF9
l006F7DED:
	word32 edx_1040 = Mem1037[edi_552 + 4<32>:word32]
	word32 eax_1041 = Mem1037[edx_1040 + 0x18<32>:word32]
	Mem1043[esp_682:word32] = edi_552
	word32 esp_1044
	call eax_1041 (retsize: 4;)
		uses: ecx:ecx_1027,edx:edx_1040,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C,Stack +0018:dwArg14
		defs: edx:edx_1047,esp:esp_1044
	esp_1010 = esp_1044 + 4<32>
l006F7DF9:
	branch eax_1026 == 0<32> l006F8029
l006F7E01:
	branch eax_1026 != 0xA163B8<32> l006F7FAA
l006F7FAA:
	Mem1061[Mem1059[esp_1010 + 0x20<32>:word32]:word32] = eax_1026
	eax_1062 = 0xA1BE14<32>
l006F7E0D:
	word32 v30_1063 = Mem1059[eax_1026:word32] + 0xFFFFFFFF<32>
	Mem1064[eax_1026:word32] = v30_1063
	branch v30_1063 != 0<32> l006F7F51
l006F7E16:
	word32 ecx_1067 = Mem1064[eax_1026 + 4<32>:word32]
	word32 edx_1068 = Mem1064[ecx_1067 + 0x18<32>:word32]
	Mem1070[esp_1010 - 4<i32>:word32] = eax_1026
	word32 esp_1075
	call edx_1068 (retsize: 4;)
		uses: ecx:ecx_1067,edx:edx_1068,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C,Stack +0018:dwArg14
		defs: esp:esp_1075
	esp_1010 = esp_1075 + 4<32>
l006F7D80:
	branch edi_552 == 0<32> l006F7F51
l006F7D88:
	word32 v28_1086 = Mem655[edi_552:word32] + 0xFFFFFFFF<32>
	Mem1087[edi_552:word32] = v28_1086
	branch v28_1086 != 0<32> l006F7F51
l006F7D91:
	word32 edx_1090 = Mem1087[edi_552 + 4<32>:word32]
	word32 eax_1091 = Mem1087[edx_1090 + 0x18<32>:word32]
	Mem1093[esp_1010 - 4<i32>:word32] = edi_552
	word32 esp_1098
	call eax_1091 (retsize: 4;)
		uses: ecx:ecx_1097,edx:edx_1090,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C,Stack +0018:dwArg14
		defs: esp:esp_1098
	esp_1010 = esp_1098 + 4<32>
l006F7D34:
	branch edi_552 == 0<32> l006F7F51
l006F7D3C:
	word32 v27_1109 = Mem638[edi_552:word32] + 0xFFFFFFFF<32>
	Mem1110[edi_552:word32] = v27_1109
	branch v27_1109 != 0<32> l006F7F51
l006F7D45:
	word32 eax_1113 = Mem1110[edi_552 + 4<32>:word32]
	word32 ecx_1114 = Mem1110[eax_1113 + 0x18<32>:word32]
	Mem1116[esp_1010 - 4<i32>:word32] = edi_552
	word32 esp_1117
	call ecx_1114 (retsize: 4;)
		uses: eax:eax_1113,ecx:ecx_1114,edx:edx_642,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C,Stack +0018:dwArg14
		defs: esp:esp_1117
	esp_1010 = esp_1117 + 4<32>
l006F7CF6:
l006F7F51:
	word32 eax_1129 = Mem1127[esp_1010 + 0x1C<32>:word32]
	Mem1132[esp_1010 + 0x1C<32>:word32] = eax_1129 + 1<32>
	branch eax_1129 + 1<32> < Mem1127[esp_1010 + 0x2C<32>:word32] l006F7CA0
l006F7F66:
	branch Mem1132[esp_1010 + 0x18<32>:word32] != 0<32> l006F7FEA
l006F7FEA:
	edx_1028 = Mem1137[esp_1010 + 0x30<32>:word32]
	Mem1140[edx_1028:word32] = Mem1137[esp_1010 + 0x18<32>:word32]
	eax_1062 = Mem1140[esp_1010 + 0x14<32>:word32]
l006F7F6D:
	word32 ecx_1143 = Mem1142[0x00A16F8C<p32>:word32]
	word32 esp_1146 = esp_1010 - 4<i32>
	Mem1147[esp_1146:word32] = esp_1010 + 0x3C<32>
	Mem1149[esp_1146 - 4<i32>:word32] = 0x8D5B68<32>
	Mem1151[esp_1146 - 8<i32>:word32] = ecx_1143
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_2466
	fn006E15D0(stackArg4, dwArg04, out ecx_2466, out edx_1028)
l006F7A12:
	ebx_1182 = Mem371[esp_368 + 0x14<32>:word32]
l006F7A16:
	word32 eax_1184 = esp_142 + 0x3C<32>
	eax_1192 = eax_1184
l006F7A20:
	word32 eax_1192
	eax_1192 = eax_2488 + 1<32>
	eax_2488 = eax_1192
	branch Mem1831[eax_2488:byte] != 0<8> l006F7A20
l006F7A29:
	word32 esp_1203 = esp_142 - 4<i32>
	Mem1206[esp_1203:word32] = ebx_1182
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	branch fn006ECC00(stackArg4) + 1<32> + (eax_1192 - (eax_1184 + 1<32>)) <u Mem1206[esp_1203 + 0x2A8<32>:word32] l006F7A99
l006F7A99:
	Mem1228[esp_1203:word32] = ebx_1182
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 edx_2461
	word32 ecx_2460
	word32 esi_2462
	word32 eax_1230 = fn006ECC50(stackArg4, out ecx_2460, out edx_2461, out esi_2462)
	word32 edx_1237 = dwArg0C
l006F7AA4:
	byte cl_1240 = Mem1239[eax_1230:byte]
	Mem1242[edx_1237:byte] = cl_1240
	eax_1230 = eax_1230 + 1<32>
	edx_1237 = edx_1237 + 1<32>
	branch cl_1240 != 0<8> l006F7AA4
l006F7AB2:
	word32 edi_1250 = dwArg0C + 0xFFFFFFFF<32> + 1<32>
l006F7AB7:
	edi_1250 = edi_2489 + 1<32>
	edi_2489 = edi_1250
	branch Mem1242[edi_2489 + 0<32>:byte] != 0<8> l006F7AB7
l006F7AC1:
	Mem1260[edi_1250:word16] = Mem1242[0x008A6990<p32>:word16]
	word32 eax_1263 = esp_1203 + 0x40<32>
l006F7AD0:
	eax_1263 = eax_2490 + 1<32>
	eax_2490 = eax_1263
	branch Mem1260[eax_2490:byte] != 0<8> l006F7AD0
l006F7AD9:
	word32 eax_1276 = eax_1263 - (esp_1203 + 0x40<32>)
	word32 esi_1277 = esp_1203 + 0x40<32>
	word32 edi_1278 = dwArg0C + 0xFFFFFFFF<32> + 1<32>
l006F7AE2:
	edi_1278 = edi_2491 + 1<32>
	edi_2491 = edi_1278
	branch Mem1260[edi_2491 + 0<32>:byte] != 0<8> l006F7AE2
l006F7AEC:
	word32 ecx_1289 = eax_1276 >>u 2<32>
l006F7AF1:
	branch ecx_1289 == 0<32> l006F7AF3
l006F7AF3:
	word32 ecx_1294 = eax_1276 & 3<32>
l006F7AFC:
	branch ecx_1294 == 0<32> l006F7AFE
l006F7AFE:
	word32 eax_1301 = dwArg0C
	word32 edx_1303 = esp_1203 + 0x40<32> - dwArg0C
l006F7B02:
	byte cl_1307 = Mem1306[eax_1301:byte]
	Mem1309[edx_1303 + eax_1301:byte] = cl_1307
	eax_1301 = eax_1301 + 1<32>
	branch cl_1307 != 0<8> l006F7B02
l006F7B0E:
	word32 edx_2474
	branch fn006F6CA0(esp_1203 + 0x40<32>, out edx_2474) == 0<32> l006F7B39
l006F7B39:
	word32 eax_1327 = Mem1309[0x00A16F8C<p32>:word32]
	Mem1330[esp_1203:word32] = esp_1203 + 0x40<32>
	Mem1332[esp_1203 - 4<i32>:word32] = 0x8D5BC4<32>
	Mem1334[esp_1203 - 8<i32>:word32] = eax_1327
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_2476
	fn006E15D0(stackArg4, dwArg04, out ecx_2476, out edx_1028)
l006F7B1B:
	word32 eax_1352 = esp_1203 + 0x40<32>
	edx_1028 = dwArg0C - (esp_1203 + 0x40<32>)
l006F7B23:
	byte cl_1357 = Mem1356[eax_1352:byte]
	Mem1359[eax_1352 + edx_1028:byte] = cl_1357
	eax_1352 = eax_1352 + 1<32>
	branch cl_1357 != 0<8> l006F7B23
l006F7B2F:
	eax_1062 = 0xA1BE20<32>
l006F7AFC_1:
	Mem1368[edi_1278:byte] = Mem1366[esi_1277:byte]
	esi_1277 = esi_1277 + 1<i32>
	edi_1278 = edi_1278 + 1<i32>
	ecx_1294 = ecx_1294 - 1<32>
l006F7AF1_1:
	Mem1376[edi_1278:word32] = Mem1373[esi_1277:word32]
	esi_1277 = esi_1277 + 4<i32>
	edi_1278 = edi_1278 + 4<i32>
	ecx_1289 = ecx_1289 - 1<32>
l006F7A43:
	word32 edx_1380 = Mem1206[0x00A16F8C<p32>:word32]
	Mem1382[esp_1203:word32] = 0x8D5C18<32>
	Mem1384[esp_1203 - 4<i32>:word32] = edx_1380
l006F7903:
	eax_1385 = Mem1819[0x00A18598<p32>:word32]
	esp_119 = fp - 0x298<32>
l006F8020:
	Mem1392[esp_119 - 4<i32>:word32] = eax_1385
l006F8021:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_2464
	fn006E0F80(stackArg4, dwArg04, out ecx_2464, out edx_1028)
l006F8029:
	eax_1062 = 0<32>
l006F802B:
	word32 ecx_2442
	word32 eax_1809 = fn00694B8E(eax_1062, eax_7 ^ fp - 644<i32>, edx_1028, ebx, ebp, esi, edi, es, ds, ebx, out ecx_2442)
	edxOut = edx_1028
	return eax_1809
fn006F7890_exit:


word32 fn006F8050(word32 edi, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006F82C0
// MayUse:  edi:[0..31]
// LiveOut: eax edx
// Trashed: SCZO dl eax ecx esi Top
// Preserved: esp
fn006F8050_entry:
l006F8050:
	word32 edx_229
	branch fn006F7810(out edx_229) == 0<32> l006F8064
l006F8064:
	word32 esi_158 = Mem21[0x00A1BDB4<p32>:word32]
	word32 ecx_157 = Mem21[esi_158:word32]
	branch ecx_157 == 0<32> l006F80A6
l006F8071:
	word32 eax_28 = edi
l006F8073:
	word32 eax_47
	byte dl_31 = Mem21[eax_28:byte]
	branch dl_31 != Mem21[ecx_157:byte] l006F8093
l006F8079:
	branch dl_31 == 0<8> l006F808F
l006F807D:
	byte dl_38 = Mem21[eax_28 + 1<32>:byte]
	branch dl_38 != Mem21[ecx_157 + 1<32>:byte] l006F8093
l006F8093:
	word32 eax_44 = 0<32> - (dl_31 <u Mem21[ecx_157:byte])
	eax_47 = eax_44 - 0xFFFFFFFF<32> - (eax_44 <u 0<32>)
l006F8085:
	eax_28 = eax_28 + 2<32>
	ecx_157 = ecx_157 + 2<32>
	branch dl_38 != 0<8> l006F8073
l006F808F:
	eax_47 = 0<32>
l006F8098:
	branch eax_47 == 0<32> l006F80AA
l006F80AA:
	branch Mem21[esi_158 + 4<32>:word32] != 0<32> l006F80C9
l006F80C9:
	branch Mem21[0x00A74AF0<p32>:word32] == 0<32> l006F80E0
l006F80D2:
	word32 edx_232
	fn00716B20(out edx_232)
l006F80E0:
	word32 esp_105
	call Mem100[esi_158 + 4<32>:word32] (retsize: 4;)
		defs: esp:esp_105
	branch fn006E0FC0() != 0<32> l006F80C4
l006F80EE:
	Mem116[esp_105 - 4<i32>:word32] = edi
	Mem118[esp_105 - 8<i32>:word32] = edi
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 stackArg8 = <invalid>
	word32 edx_235
	word32 eax_130 = (0<32> - (fn006F62D0(stackArg4, stackArg8, out edx_235) == 0<32>) & 2<32>) + 0xFFFFFFFF<32>
	edxOut = <invalid>
	return eax_130
l006F80B0:
	word32 edx_231
	word32 ecx_230
	fn006E15D0(Mem21[0x00A16F8C<p32>:word32], 0x8D5C6C<32>, out ecx_230, out edx_231)
l006F80C4:
	edxOut = <invalid>
	return 0xFFFFFFFF<32>
l006F809C:
	ecx_157 = Mem21[esi_158 + 8<32>:word32]
	esi_158 = esi_158 + 8<32>
	branch ecx_157 != 0<32> l006F8071
l006F80A6:
	edxOut = <invalid>
	return 0<32>
l006F805E:
	edxOut = <invalid>
	return 1<32>
fn006F8050_exit:


word32 fn006F82C0(word32 eax, word32 ecx, word32 edx, word32 esi, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006F8440
//      fn006F8960
// MayUse:  eax:[0..31] ecx:[0..31] edx:[0..31] esi:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ebx ecx edi edx Top
// Preserved: esp
fn006F82C0_entry:
l006F82C0:
	word32 edi_13 = dwArg04
	branch esi <= 0<32> l006F82EE
l006F82CC:
	branch esi > 2<32> l006F82EE
l006F82D1:
	branch eax != 0<32> l006F82EE
l006F82EE:
	word32 edx_104
	branch esi >u 9<32> l006F83FD
l006F82FA:
	switch (esi - 1<32>) { l006F8301 l006F830E l006F8318 l006F83FD l006F8326 l006F8333 l006F8333 l006F83FD l006F83CA }
l006F83CA:
	branch edx != 0<32> l006F83E6
l006F83E6:
	word32 edx_43
	word32 ecx_485
	word32 eax_44 = fn007038E0(edx, 0x8D5404<32>, 0x8B22AC<32>, out ecx_485, out edx_43)
	edxOut = edx_43
	return eax_44
l006F83CE:
	word32 edx_61
	word32 ecx_486
	fn006E0F80(Mem12[0x00A16F8C<p32>:word32], 0x8D5CEC<32>, out ecx_486, out edx_61)
	edxOut = edx_61
	return 0<32>
l006F8333:
	branch ecx == 0<32> l006F833E
l006F8337:
	branch Mem12[ecx:byte] == 0<8> l006F833E
l006F833C:
	edi_13 = ecx
l006F833E:
	word32 eax_105
	branch esi != 6<32> l006F834A
l006F834A:
	eax_105 = fn006F6D50(edi_13, out edx_104)
l006F8343:
	eax_105 = fn006F8050(edi_13, out edx_104)
l006F8353:
	branch eax_105 < 0<32> l006F8413
l006F835B:
	branch eax_105 != 0<32> l006F8387
l006F8387:
	word32 edx_139
	word32 ecx_487
	word32 esi_488
	word32 edi_489
	word32 eax_140 = fn006FD8B0(fn006F5DA0(), dwArg04, out ecx_487, out edx_139, out esi_488, out edi_489)
	branch eax_140 != 0<32> l006F83C4
l006F83C4:
	Mem149[eax_140:word32] = Mem132[eax_140:word32] + 1<32>
	edxOut = edx_139
	return eax_140
l006F839A:
	branch esi == 6<32> l006F83A9
l006F83A4:
l006F83A9:
	word32 edx_177
	word32 ecx_491
	fn006E15D0(Mem132[0x00A16F8C<p32>:word32], dwArg04, out ecx_491, out edx_177)
	edxOut = edx_177
	return 0<32>
l006F835D:
	branch esi == 6<32> l006F836C
l006F8367:
l006F836C:
	word32 edx_214
	word32 ecx_490
	fn006E15D0(Mem195[0x00A16F8C<p32>:word32], dwArg04, out ecx_490, out edx_214)
	edxOut = edx_214
	return 0<32>
l006F8326:
	word32 edx_232
	word32 eax_233 = fn006F8960(edx, ebp, esi, dwArg04, es, ds, dwArg04, ecx, out edx_232)
	edxOut = edx_232
	return eax_233
l006F83FD:
	word32 ecx_481
	fn006E15D0(Mem12[0x00A16F8C<p32>:word32], 0x8D5CBC<32>, out ecx_481, out edx_104)
l006F8413:
	edxOut = edx_104
	return 0<32>
l006F8318:
	word32 edx_284
	word32 eax_285 = fn0074F9E0(dwArg04, ecx, eax, out edx_284)
	edxOut = edx_284
	return eax_285
l006F830E:
	word32 edx_297
	word32 eax_298 = fn006F6730(out edx_297)
	edxOut = edx_297
	return eax_298
l006F8301:
	word32 edx_311
	word32 eax_312 = fn006F68F0(ecx, edx, ebp, esi, dwArg04, es, ds, dwArg04, eax, out edx_311)
	edxOut = edx_311
	return eax_312
l006F82D5:
	word32 edx_330
	word32 ecx_480
	fn006E15D0(Mem12[0x00A17E2C<p32>:word32], 0x8D5D6C<32>, out ecx_480, out edx_330)
	edxOut = edx_330
	return 0<32>
fn006F82C0_exit:


word32 fn006F8440(word32 ecx, word32 ebx, word32 ebp, word32 esi, word32 edi, selector es, selector ds, word32 dwArg04, ptr32 & ecxOut, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006F8AD0
//      fn006F8C70
// MayUse:  cs:[0..15] ds:[0..15] ebp:[0..31] ebx:[0..31] ecx:[0..31] edi:[0..31] es:[0..15] esi:[0..31] fs:[0..15] gs:[0..15] ss:[0..15] Stack +0004:[0..31]
// LiveOut: eax ecx edx
// Trashed: SCZDOP eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn006F8440_entry:
l006F8440:
	word32 eax_7 = Mem0[0x00A14188<p32>:word32] ^ fp - 0x11C<32>
	word32 esi_20 = Mem19[Mem8[0x00A6D67C<p32>:word32] + 4<32>:word32]
	branch Mem19[esi_20 + 8<32>:word32] != 0<32> l006F8486
l006F8479:
	fn006E86F0(0x8D5538<32>)
l006F8486:
	word32 eax_246
	word32 ecx_472
	word32 edi_474
	word32 esi_473
	word32 edx_210
	word32 eax_57 = fn006FD8B0(Mem42[esi_20 + 8<32>:word32], dwArg04, out ecx_472, out edx_210, out esi_473, out edi_474)
	word32 esi_162 = eax_57
	branch eax_57 == 0<32> l006F84A7
l006F84A7:
	word32 esi_81
	branch ecx != 0xA163B8<32> l006F8510
l006F8510:
	word32 edx_475
	word32 edi_476
	word32 eax_76 = fn006DF760(ecx, dwArg04, out edx_475, out edi_476)
	esi_81 = eax_76
	branch eax_76 != 0<32> l006F84B9
l006F84B7:
	esi_81 = 0<32>
l006F84B9:
	word32 edx_113
	word32 eax_111 = fn006F7890(edx, dwArg04, esi_81, ecx, es, ds, edx, dwArg04, fp - 0x108<32>, fp - 0x11C<32>, out edx_113)
	word32 esp_116 = fp - 0x12C<32>
	branch esi_81 == 0<32> l006F84F4
l006F84E3:
	word32 v15_121 = Mem107[esi_81:word32] + 0xFFFFFFFF<32>
	Mem122[esi_81:word32] = v15_121
	branch v15_121 != 0<32> l006F84F4
l006F84E8:
	word32 eax_125 = Mem122[esi_81 + 4<32>:word32]
	word32 ecx_126 = Mem122[eax_125 + 0x18<32>:word32]
	word32 esp_129
	call ecx_126 (retsize: 4;)
		uses: eax:eax_125,ecx:ecx_126,edx:edx_113,Stack +0004:esi_99,Stack +0008:dwArg04,Stack +0138:dwArg04
		defs: esp:esp_129
	esp_116 = esp_129 + 4<32>
l006F84F4:
	branch eax_111 != 0<32> l006F8537
l006F8537:
	word32 esi_142 = Mem141[eax_111 + 8<32>:word32]
	word32 ebx_144 = Mem141[esp_116 + 0x10<32>:word32]
	word32 edi_145 = Mem141[esp_116 + 0x14<32>:word32]
	word32 esp_146 = esp_116 - 4<i32>
	Mem148[esp_146:word32] = dwArg04
	word32 edx_156
	word32 eax_154 = fn006F82C0(edi_145, esp_146 + 0x28<32>, ebx_144, esi_142, out edx_156)
	word32 esp_159 = esp_146 + 4<32>
	esi_162 = eax_154
	branch ebx_144 == 0<32> l006F856A
l006F8559:
	word32 v17_164 = Mem148[ebx_144:word32] + 0xFFFFFFFF<32>
	Mem165[ebx_144:word32] = v17_164
	branch v17_164 != 0<32> l006F856A
l006F855E:
	word32 eax_168 = Mem165[ebx_144 + 4<32>:word32]
	word32 ecx_169 = Mem165[eax_168 + 0x18<32>:word32]
	Mem171[esp_146:word32] = ebx_144
	word32 esp_172
	call ecx_169 (retsize: 4;)
		uses: eax:eax_168,ecx:ecx_169,edx:edx_156,Stack +0008:dwArg04
		defs: esp:esp_172
	esp_159 = esp_172 + 4<32>
l006F856A:
	branch edi_145 == 0<32> l006F8578
l006F856E:
	word32 esp_185 = esp_159 - 4<i32>
	Mem186[esp_185:word32] = edi_145
	fclose(Mem186[esp_185:(ptr32 FILE)])
l006F8578:
	word32 edi_195 = Mem191[esp_159 + 0x1C<32>:word32]
	word32 esp_196 = esp_159 - 4<i32>
	Mem199[esp_196:word32] = dwArg04
	word32 ecx_209
	branch fn006F7100(eax_154, edi_195, out ecx_209, out edx_210) != 0<32> l006F85AA
l006F8593:
	branch eax_154 == 0<32> l006F85A8
l006F8597:
	word32 v18_220 = Mem199[eax_154:word32] + 0xFFFFFFFF<32>
	Mem221[eax_154:word32] = v18_220
	branch v18_220 != 0<32> l006F85A8
l006F859C:
	word32 edx_224 = Mem221[eax_154 + 4<32>:word32]
	word32 eax_225 = Mem221[edx_224 + 0x18<32>:word32]
	Mem227[esp_196:word32] = eax_154
	call eax_225 (retsize: 4;)
		uses: ecx:ecx_209,edx:edx_224,Stack +0008:dwArg04
		defs: edx:edx_231
l006F85A8:
	esi_162 = 0<32>
l006F84F8:
	Mem241[esp_116 - 4<i32>:word32] = Mem141[0x00A16F8C<p32>:word32]
	word32 ecx_477
	eax_246 = fn006E1110(out ecx_477, out edx_210)
	branch eax_246 != 0<32> l006F8524
l006F8524:
	word32 ecx_478
	fn006E1160(out ecx_478, out edx_210)
	Mem264[0x00A163B8<p32>:word32] = Mem262[0x00A163B8<p32>:word32] + 1<32>
	eax_246 = 0xA163B8<32>
l006F850B:
l006F849F:
	Mem268[eax_57:word32] = Mem50[eax_57:word32] + 1<32>
l006F85AA:
	eax_246 = esi_162
l006F85AC:
	word32 ecx_356
	word32 eax_355 = fn00694B8E(eax_246, eax_7 ^ fp - 284<i32>, edx_210, ebx, ebp, esi, edi, es, ds, ebx, out ecx_356)
	ecxOut = ecx_356
	edxOut = edx_210
	return eax_355
fn006F8440_exit:


word32 fn006F8960(word32 ebx, word32 ebp, word32 esi, word32 edi, selector es, selector ds, word32 dwArg04, word32 dwArg08, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006F82C0
// MayUse:  cs:[0..15] ds:[0..15] ebp:[0..31] ebx:[0..31] edi:[0..31] es:[0..15] esi:[0..31] fs:[0..15] gs:[0..15] ss:[0..15] Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax edx
// Trashed: SCZDOP eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn006F8960_entry:
l006F8960:
	word32 eax_266
	word32 eax_7 = Mem0[0x00A14188<p32>:word32] ^ fp - 0x110<32>
	word32 edx_108
	word32 eax_30 = fn006F63A0(dwArg04, out edx_108)
	word32 edi_207 = 0<32>
	word32 ebx_170 = eax_30
	branch eax_30 != 0<32> l006F89A2
l006F89A2:
	branch Mem28[0x00A74AF0<p32>:word32] == 0<32> l006F89B9
l006F89AA:
	word32 edx_461
	fn00716B20(out edx_461)
l006F89B9:
	word32 ecx_458
	word32 edx_459
	word32 eax_64 = fn00717230(eax_30, out ecx_458, out edx_459)
	word32 ecx_460
	word32 eax_73 = fn006ECAC0(dwArg08, out ecx_460, out edx_108)
	branch eax_73 == 0<32> l006F8A14
l006F89D2:
	word32 esi_462
	word32 eax_88 = fn006EA200(out edx_108, out esi_462)
	edi_207 = eax_88
	branch eax_88 == 0<32> l006F8A14
l006F89E6:
	word32 ecx_463
	word32 esi_464
	branch fn006FD8F0(eax_64, dwArg04, dwArg08, out ecx_463, out edx_108, out esi_464) != 0<32> l006F8A14
l006F89FD:
	word32 ecx_465
	word32 esi_466
	branch fn006FD8F0(eax_64, dwArg04, dwArg08, out ecx_465, out edx_108, out esi_466) == 0<32> l006F8A18
l006F8A18:
	word32 edx_467
	word32 eax_147 = fn006F7890(eax_30, eax_73, dwArg04, eax_88, es, ds, 0x8B2D3C<32>, dwArg04, dwArg08, 0<32>, out edx_467)
	branch eax_147 != 0<32> l006F8A5D
l006F8A5D:
	ebx_170 = fn006F82C0(0<32>, fp - 0x108<32>, 0<32>, Mem157[eax_147 + 8<32>:word32], out edx_108)
	branch true l006F8A87
l006F8A7D:
	fclose(0<32>)
l006F8A41:
	word32 ecx_468
	branch fn006E1110(out ecx_468, out edx_108) == 0<32> l006F8A14
l006F8A53:
	word32 ecx_469
	fn006E1160(out ecx_469, out edx_108)
	Mem202[eax_30:word32] = Mem183[eax_30:word32] + 1<32>
l006F8A14:
	ebx_170 = 0<32>
l006F8A87:
	word32 esp_220 = fp - 0x120<32>
	branch edi_207 == 0<32> l006F8A9C
l006F8A8B:
	word32 v13_214 = Mem212[edi_207:word32] + 0xFFFFFFFF<32>
	Mem215[edi_207:word32] = v13_214
	branch v13_214 != 0<32> l006F8A9C
l006F8A90:
	word32 ecx_218 = Mem215[edi_207 + 4<32>:word32]
	word32 esp_231
	call Mem215[ecx_218 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_218,Stack +0004:edi_207,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +012C:dwArg04,Stack +0130:dwArg08
		defs: edx:edx_234,esp:esp_231
	esp_220 = esp_231 + 4<32>
l006F8A9C:
	branch eax_73 == 0<32> l006F8AB2
l006F8AA0:
	word32 v16_244 = Mem243[eax_73:word32] + 0xFFFFFFFF<32>
	Mem245[eax_73:word32] = v16_244
	branch v16_244 != 0<32> l006F8AB2
l006F8AA6:
	word32 eax_248 = Mem245[eax_73 + 4<32>:word32]
	word32 ecx_249 = Mem245[eax_248 + 0x18<32>:word32]
	Mem252[esp_220 - 4<i32>:word32] = eax_73
	call ecx_249 (retsize: 4;)
		uses: eax:eax_248,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: edx:edx_260
l006F8AB2:
	eax_266 = ebx_170
l006F899B:
	eax_266 = 0<32>
l006F8AB4:
	word32 ecx_457
	word32 eax_334 = fn00694B8E(eax_266, eax_7 ^ fp - 272<i32>, edx_108, ebx, ebp, esi, edi, es, ds, ebx, out ecx_457)
	edxOut = edx_108
	return eax_334
fn006F8960_exit:


word32 fn006F8AD0(word32 eax, word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10, ptr32 & ecxOut, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006F8EC0
// MayUse:  eax:[0..31] Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31] Stack +0010:[0..31]
// LiveOut: eax ecx edx
// Trashed: SCZO eax ebx edx Top
// Preserved: ebp ecx edi esi esp
fn006F8AD0_entry:
l006F8AD0:
	word32 ebp_18 = Mem15[eax:word32]
	word32 eax_23 = strchr(ebp_18, 0x2E<32>)
	word32 ecx_24 = ebp_18
l006F8AF0:
	byte dl_31 = Mem22[ecx_24:byte]
	ecx_24 = ecx_24 + 1<32>
	word32 edx_419 = SEQ(edx_24_8, dl_31)
	branch dl_31 != 0<8> l006F8AF0
l006F8AF9:
	branch ecx_24 - (ebp_18 + 1<32>) != 0<32> l006F8B0F
l006F8B0F:
	word32 ebx_55
	branch eax_23 != 0<32> l006F8B2D
l006F8B2D:
	Mem54[eax:word32] = eax_23 + 1<32>
	ebx_55 = eax_23 - ebp_18
l006F8B14:
	Mem57[eax:word32] = eax_23
	word32 ebx_56 = ebp_18
l006F8B20:
	ebx_56 = ebx_526 + 1<32>
	ebx_526 = ebx_56
	branch Mem57[ebx_526:byte] != 0<8> l006F8B20
l006F8B29:
	ebx_55 = ebx_56 - (ebp_18 + 1<32>)
l006F8B36:
	branch ebx_55 != 0<32> l006F8B41
l006F8B41:
	word32 esi_79 = Mem75[dwArg10:word32] + dwArg0C
	branch esi_79 == dwArg0C l006F8B57
l006F8B51:
	Mem82[esi_79:byte] = 0x2E<8>
	esi_79 = esi_79 + 1<32>
l006F8B57:
	word32 edi_90 = esi_79 - dwArg0C + ebx_55
	branch edi_90 < 0x100<32> l006F8B82
l006F8B82:
	strncpy(esi_79, ebp_18, ebx_55)
	Mem109[esi_79 + ebx_55:byte] = 0<8>
	Mem111[dwArg10:word32] = edi_90
	word32 edx_119
	word32 ecx_117
	word32 eax_118 = fn006F8440(dwArg04, ebx_55, ebp_18, esi_79, edi_90, es, ds, dwArg0C, out ecx_117, out edx_119)
	word32 edi_122 = eax_118
	word32 esp_123 = fp - 0x14<32>
	branch eax_118 != 0xA163B8<32> l006F8C2A
l006F8BB2:
	edx_119 = dwArg08
	branch dwArg08 == dwArg04 l006F8C2A
l006F8BBC:
	word32 v18_129 = Mem111[eax_118:word32] + 0xFFFFFFFF<32>
	Mem130[eax_118:word32] = v18_129
	branch v18_129 != 0<32> l006F8BCD
l006F8BC1:
	word32 eax_133 = Mem130[eax_118 + 4<32>:word32]
	word32 ecx_134 = Mem130[eax_133 + 0x18<32>:word32]
	word32 esp_137
	word32 edx_140
	call ecx_134 (retsize: 4;)
		uses: eax:eax_133,ecx:ecx_134,edx_24_8:edx_24_8_453,Stack +0004:eax_118,Stack +0008:dwArg04,Stack +0010:dwArg0C,Stack +0014:dwArg10,Stack +0020:dwArg04,Stack +0024:dwArg08,Stack +0028:dwArg0C,Stack +002C:dwArg10
		defs: edx:edx_140,esp:esp_137
	word24 edx_24_8_453 = SLICE(edx_140, word24, 8)
	esp_123 = esp_137 + 4<32>
l006F8BCD:
	word32 ecx_147 = Mem146[esp_123 + 0x1C<32>:word32]
	word32 esp_148 = esp_123 - 4<i32>
	Mem150[esp_148:word32] = esi_79
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 eax_159 = fn006F8440(ecx_147, ebx_55, ebp_18, esi_79, eax_118, es, ds, stackArg4, out ecx_117, out edx_119)
	edi_122 = eax_159
	branch eax_159 == 0<32> l006F8C5C
l006F8BE2:
	branch eax_159 == 0xA163B8<32> l006F8C2A
l006F8BEA:
	word32 esi_170 = Mem150[esp_148 + 0x24<32>:word32]
	Mem172[esp_148:word32] = esi_170
	word32 ecx_174
	branch fn006F70C0(out ecx_174, out edx_119) == 0<32> l006F8C14
l006F8C14:
	Mem184[esp_148:word32] = ebx_55
	Mem186[esp_148 - 4<i32>:word32] = ebp_18
	Mem188[esp_148 - 8<i32>:word32] = esi_170
	strncpy(Mem188[esp_148 - 8<i32>:(ptr32 charconst )], Mem188[esp_148 - 4<i32>:(ptr32 charconst )], Mem188[esp_148:size_t])
	ecx_117 = Mem188[esp_148 + 0x28<32>:word32]
	Mem191[ebx_55 + esi_170:byte] = 0<8>
	Mem194[ecx_117:word32] = ebx_55
l006F8C2A:
	word32 esp_201 = fp - 20<i32>
	branch edi_122 == 0<32> l006F8C5C
l006F8C2E:
	branch edi_122 != 0xA163B8<32> l006F8C64
l006F8C64:
	ecxOut = <invalid>
	edxOut = edx_119
	return edi_122
l006F8C36:
	word32 v19_214 = Mem202[edi_122:word32] + 0xFFFFFFFF<32>
	Mem215[edi_122:word32] = v19_214
	branch v19_214 != 0<32> l006F8C47
l006F8C3B:
	word32 edx_218 = Mem215[edi_122 + 4<32>:word32]
	word32 eax_219 = Mem215[edx_218 + 0x18<32>:word32]
	word32 esp_227
	call eax_219 (retsize: 4;)
		uses: eax:eax_219,ecx:ecx_222,edx:edx_218,Stack +0004:edi_195,Stack +0008:dwArg04,Stack +0010:dwArg0C,Stack +0014:dwArg10,Stack +0020:dwArg04,Stack +0024:dwArg08,Stack +0028:dwArg0C,Stack +002C:dwArg10
		defs: esp:esp_227
	esp_201 = esp_227 + 4<32>
l006F8C47:
	word32 ecx_236 = Mem235[0x00A16F8C<p32>:word32]
	word32 esp_238 = esp_201 - 4<i32>
	Mem240[esp_238:word32] = ebp_18
	Mem242[esp_238 - 4<i32>:word32] = 0x8D5B68<32>
	Mem244[esp_238 - 8<i32>:word32] = ecx_236
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_525
	fn006E15D0(stackArg4, dwArg04, out ecx_525, out edx_119)
l006F8C5C:
	ecxOut = <invalid>
	edxOut = edx_119
	return 0<32>
l006F8BFB:
	word32 v20_274 = Mem172[eax_159:word32] + 0xFFFFFFFF<32>
	Mem275[eax_159:word32] = v20_274
	branch v20_274 != 0<32> l006F8C0C
l006F8C00:
	word32 edx_278 = Mem275[eax_159 + 4<32>:word32]
	word32 eax_279 = Mem275[edx_278 + 0x18<32>:word32]
	Mem281[esp_148:word32] = eax_159
	call eax_279 (retsize: 4;)
		uses: eax:eax_279,ecx:ecx_174,edx:edx_278,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C,Stack +0014:dwArg10
		defs: edx:edx_285
l006F8C0C:
	ecxOut = <invalid>
	edxOut = edx_119
	return 0<32>
l006F8B66:
l006F8B3A:
l006F8B6B:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg8 = <invalid>
	word32 edx_333
	word32 ecx_520
	fn006E0F80(Mem309[0x00A17E2C<p32>:word32], stackArg8, out ecx_520, out edx_333)
	ecxOut = <invalid>
	edxOut = edx_333
	return 0<32>
l006F8AFD:
	Mem352[dwArg04:word32] = Mem22[dwArg04:word32] + 1<32>
	Mem356[eax:word32] = 0<32>
	ecxOut = <invalid>
	edxOut = edx_419
	return dwArg04
fn006F8AD0_exit:


word32 fn006F8C70(word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10, ptr32 & ecxOut, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006F8C70
//      fn006F8EC0
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31] Stack +0010:[0..31]
// LiveOut: eax ecx edx
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn006F8C70_entry:
l006F8C70:
	word32 edx_15
	branch fn006DF7C0(dwArg04, 0x8D5840<32>, out edx_15) != 0<32> l006F8C8E
l006F8C8E:
	word32 edx_143
	word32 edx_605
	word32 ecx_378
	word32 eax_42 = fn00703180(dwArg08, dwArg04, out ecx_378, out edx_605)
	word32 esi_383 = eax_42
	word32 esp_384 = fp - 0x14<32>
	branch eax_42 == 0<32> l006F8DFD
l006F8CB3:
l006F8CC0:
	word32 ecx_122
	word32 esp_124
	word32 eax_55 = Mem54[esi_383 + 4<32>:word32]
	branch eax_55 == 0xA1B450<32> l006F8CE0
l006F8CCA:
	word32 esp_59 = esp_384 - 4<i32>
	Mem60[esp_59:word32] = 0xA1B450<32>
	Mem62[esp_59 - 4<i32>:word32] = eax_55
	word32 edx_608
	branch fn006D5670(Mem62[esp_59 - 4<i32>:word32], Mem62[esp_59:word32], out ecx_378, out edx_608) == 0<32> l006F8E1F
l006F8E1F:
	ecx_122 = Mem62[0x00A16B7C<p32>:word32]
	Mem76[esp_59:word32] = 0x8D5EE4<32>
	esp_124 = esp_59
l006F8CE0:
	word32 esp_102 = esp_384
	word32 edi_80 = esi_383 + 0x14<32>
	branch Mem78[esi_383 + 0x14<32>:byte] != 0x2A<8> l006F8D55
l006F8D55:
	word32 eax_83 = Mem78[esp_384 + 0x18<32>:word32]
	word32 esp_84 = esp_384 - 4<i32>
	Mem85[esp_84:word32] = esi_383
	Mem87[esp_84 - 4<i32>:word32] = eax_83
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	esp_102 = esp_84 + 4<32>
	branch fn006DE3F0(stackArg4, dwArg04) != 0<32> l006F8DC9
l006F8D67:
	word32 eax_106 = edi_80
l006F8D70:
	eax_106 = eax_624 + 1<32>
	eax_624 = eax_106
	branch Mem87[eax_624:byte] != 0<8> l006F8D70
l006F8D79:
	branch eax_106 - (edi_80 + 1<32>) + dwArg10 >=u 0x100<32> l006F8E4C
l006F8E4C:
	ecx_122 = Mem87[0x00A17E2C<p32>:word32]
	Mem125[esp_84:word32] = 0x8D5920<32>
	esp_124 = esp_84
l006F8E2A:
	word32 esp_127 = esp_124 - 4<i32>
	Mem129[esp_127:word32] = ecx_122
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_141
	fn006E0F80(stackArg4, dwArg04, out ecx_141, out edx_143)
	word32 v17_147 = Mem129[esi_383:word32] + 0xFFFFFFFF<32>
	Mem148[esi_383:word32] = v17_147
	branch v17_147 != 0<32> l006F8E6A
l006F8E38:
	word32 edx_151 = Mem148[esi_383 + 4<32>:word32]
	word32 eax_152 = Mem148[edx_151 + 0x18<32>:word32]
	Mem154[esp_127 + 4<32>:word32] = esi_383
	word32 edx_158
	call eax_152 (retsize: 4;)
		uses: ecx:ecx_141,edx:edx_151,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C,Stack +0014:dwArg10
		defs: edx:edx_158
	ecxOut = 0<32>
	edxOut = edx_158
	return 0<32>
l006F8D88:
	word32 ecx_175 = dwArg10 + dwArg0C
	Mem176[ecx_175:byte] = 0x2E<8>
	word32 ecx_177 = ecx_175 - edi_80
	word32 eax_179 = edi_80
l006F8D95:
	byte cl_183 = Mem182[eax_179:byte]
	Mem185[ecx_177 + 1<32> + eax_179:byte] = cl_183
	eax_179 = eax_179 + 1<32>
	branch cl_183 != 0<8> l006F8D95
l006F8DA1:
	word32 ecx_191 = Mem185[esp_84 + 0x1C<32>:word32]
	Mem194[esp_84:word32] = dwArg0C
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_622
	word32 eax_202 = fn006F8440(ecx_191, dwArg10, dwArg0C, esi_383, edi_80, es, ds, stackArg4, out ecx_622, out edx_143)
	esp_102 = esp_84 + 4<32>
	branch eax_202 == 0<32> l006F8E59
l006F8E59:
	word32 v19_210 = Mem194[esi_383:word32] + 0xFFFFFFFF<32>
	Mem211[esi_383:word32] = v19_210
	branch v19_210 != 0<32> l006F8E6A
l006F8E5E:
	word32 ecx_214 = Mem211[esi_383 + 4<32>:word32]
	word32 edx_215 = Mem211[ecx_214 + 0x18<32>:word32]
	Mem217[esp_84:word32] = esi_383
	call edx_215 (retsize: 4;)
		uses: ecx:ecx_214,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C,Stack +0014:dwArg10
		defs: edx:edx_221
l006F8DB8:
	word32 v16_226 = Mem194[eax_202:word32] + 0xFFFFFFFF<32>
	Mem227[eax_202:word32] = v16_226
	branch v16_226 != 0<32> l006F8DC9
l006F8DBD:
	word32 ecx_230 = Mem227[eax_202 + 4<32>:word32]
	word32 edx_231 = Mem227[ecx_230 + 0x18<32>:word32]
	Mem233[esp_84:word32] = eax_202
	word32 esp_234
	call edx_231 (retsize: 4;)
		uses: ecx:ecx_230,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C,Stack +0014:dwArg10
		defs: esp:esp_234
	esp_102 = esp_234 + 4<32>
l006F8DC9:
	word32 v18_244 = Mem243[esi_383:word32] + 0xFFFFFFFF<32>
	Mem245[esi_383:word32] = v18_244
	branch v18_244 != 0<32> l006F8DDA
l006F8DCE:
	word32 eax_248 = Mem245[esi_383 + 4<32>:word32]
	word32 ecx_249 = Mem245[eax_248 + 0x18<32>:word32]
	Mem252[esp_102 - 4<i32>:word32] = esi_383
	word32 esp_257
	call ecx_249 (retsize: 4;)
		uses: eax:eax_248,ecx:ecx_249,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C,Stack +0014:dwArg10
		defs: esp:esp_257
	esp_102 = esp_257 + 4<32>
l006F8CE9:
	word32 v13_265 = Mem78[esi_383:word32] + 0xFFFFFFFF<32>
	Mem266[esi_383:word32] = v13_265
	branch v13_265 != 0<32> l006F8CFA
l006F8CEE:
	word32 edx_269 = Mem266[esi_383 + 4<32>:word32]
	word32 eax_270 = Mem266[edx_269 + 0x18<32>:word32]
	Mem272[esp_384 - 4<i32>:word32] = esi_383
	word32 esp_273
	call eax_270 (retsize: 4;)
		uses: ecx:ecx_88,edx:edx_269,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C,Stack +0014:dwArg10
		defs: esp:esp_273
	esp_102 = esp_273 + 4<32>
l006F8CFA:
	branch Mem282[esp_102 + 0x28<32>:word32] != 0<32> l006F8DDA
l006F8D05:
	word32 edi_285 = Mem282[esp_102 + 0x18<32>:word32]
	word32 esp_286 = esp_102 - 4<i32>
	Mem287[esp_286:word32] = 0x8D5F08<32>
	Mem289[esp_286 - 4<i32>:word32] = edi_285
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 edi_614
	word32 edx_613
	word32 eax_297 = fn006DF760(stackArg4, dwArg04, out edx_613, out edi_614)
	esp_102 = esp_286 + 4<32>
	branch eax_297 != 0<32> l006F8D27
l006F8D27:
	Mem307[esp_286:word32] = 1<32>
	Mem309[esp_286 - 4<i32>:word32] = dwArg10
	Mem311[esp_286 - 8<i32>:word32] = dwArg0C
	Mem313[esp_286 - 12<i32>:word32] = eax_297
	Mem315[esp_286 - 16<i32>:word32] = edi_285
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_616
	word32 eax_318 = fn006F8C70(stackArg4, dwArg04, dwArg08, dwArg0C, out ecx_616, out edx_143)
	word32 v20_323 = Mem315[eax_297:word32] + 0xFFFFFFFF<32>
	Mem324[eax_297:word32] = v20_323
	esp_102 = esp_286 + 4<32>
	branch v20_323 != 0<32> l006F8D48
l006F8D3C:
	word32 ecx_328 = Mem324[eax_297 + 4<32>:word32]
	word32 edx_329 = Mem324[ecx_328 + 0x18<32>:word32]
	Mem331[esp_286:word32] = eax_297
	word32 esp_332
	call edx_329 (retsize: 4;)
		uses: ecx:ecx_328,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C,Stack +0014:dwArg10
		defs: edx:edx_335,esp:esp_332
	esp_102 = esp_332 + 4<32>
l006F8D48:
	branch eax_318 == 0<32> l006F8E6A
l006F8D50:
l006F8D1D:
	word32 edx_618
	word32 ecx_617
	fn006E1160(out ecx_617, out edx_618)
l006F8DDA:
	word32 eax_355 = Mem353[esp_102 + 0x10<32>:word32]
	word32 edx_356 = Mem353[esp_102 + 0x1C<32>:word32]
	word32 esp_359 = esp_102 - 4<i32>
	Mem360[esp_359:word32] = eax_355 + 1<32>
	Mem362[esp_359 - 4<i32>:word32] = edx_356
	Mem363[esp_359 + 0x14<32>:word32] = eax_355 + 1<32>
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 edx_611
	word32 eax_379 = fn00703180(stackArg4, dwArg04, out ecx_378, out edx_611)
	esi_383 = eax_379
	esp_384 = esp_359 + 4<32>
	branch eax_379 != 0<32> l006F8CC0
l006F8DFD:
	Mem392[esp_384 - 4<i32>:word32] = Mem388[0x00A17CA4<p32>:word32]
	word32 ecx_606
	branch fn006E1110(out ecx_606, out edx_143) == 0<32> l006F8E6A
l006F8E6A:
	ecxOut = 0<32>
	edxOut = edx_143
	return 0<32>
l006F8E0F:
	word32 edx_426
	word32 ecx_607
	fn006E1160(out ecx_607, out edx_426)
	ecxOut = 0<32>
	edxOut = edx_426
	return 1<32>
l006F8C87:
	ecxOut = ecx
	edxOut = edx_15
	return 1<32>
fn006F8C70_exit:


word32 fn006F8EC0(word32 ebx, word32 ebp, word32 esi, word32 edi, selector es, selector ds, word32 dwArg04, word32 dwArg08, word32 dwArg0C, ptr32 & ecxOut, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006F9090
// MayUse:  cs:[0..15] ds:[0..15] ebp:[0..31] ebx:[0..31] edi:[0..31] es:[0..15] esi:[0..31] fs:[0..15] gs:[0..15] ss:[0..15] Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut: eax ecx edx
// Trashed: SCZDOP eax ecx edi edx esi Top
// Preserved: ebp ebx esp
fn006F8EC0_entry:
l006F8EC0:
	word32 eax_7 = Mem0[0x00A14188<p32>:word32] ^ fp - 0x110<32>
	word32 edx_32
	word32 eax_30 = fn006F6EA0(dwArg08, fp - 0x108<32>, fp - 0x110<32>, ecx, out edx_32)
	branch eax_30 != 0<32> l006F8F24
l006F8F24:
	word32 ecx_108
	word32 edx_109
	word32 eax_54 = fn006F8AD0(fp - 0x10C<32>, eax_30, dwArg04, dwArg08, dwArg0C, out ecx_108, out edx_109)
	branch eax_54 != 0<32> l006F8F5F
l006F8F5F:
	word32 eax_139
	Mem65[eax_54:word32] = Mem51[eax_54:word32] + 1<32>
	word32 esp_112 = fp - 0x120<32>
	word32 esi_143 = eax_54
	branch dwArg04 == 0<32> l006F8FA8
l006F8F6C:
	esp_112 = fp - 0x120<32>
l006F8F70:
	word32 esp_75 = esp_112 - 4<i32>
	Mem76[esp_75:word32] = esp_112 + 0x10<32>
	Mem79[esp_75 - 4<i32>:word32] = esp_75 + 0x1C<32>
	Mem82[esp_75 - 8<i32>:word32] = esi_143
	Mem84[esp_75 - 12<i32>:word32] = esi_143
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 eax_91 = fn006F8AD0(esp_75 + 0x18<32>, stackArg4, dwArg04, dwArg08, dwArg0C, out ecx_108, out edx_109)
	word32 v15_97 = Mem84[esi_143:word32] + 0xFFFFFFFF<32>
	Mem98[esi_143:word32] = v15_97
	esp_112 = esp_75 + 4<32>
	branch v15_97 != 0<32> l006F8F9B
l006F8F8F:
	word32 edx_102 = Mem98[esi_143 + 4<32>:word32]
	word32 eax_103 = Mem98[edx_102 + 0x18<32>:word32]
	Mem105[esp_75:word32] = esi_143
	word32 esp_106
	call eax_103 (retsize: 4;)
		uses: ecx:ecx_92,edx:edx_102,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C
		defs: ecx:ecx_108,edx:edx_109,esp:esp_106
	esp_112 = esp_106 + 4<32>
l006F8F9B:
	branch eax_91 == 0<32> l006F8FED
l006F8FED:
	word32 v20_120 = Mem119[eax_54:word32] + 0xFFFFFFFF<32>
	Mem121[eax_54:word32] = v20_120
	branch v20_120 != 0<32> l006F906C
l006F8FF2:
	word32 ecx_124 = Mem121[eax_54 + 4<32>:word32]
	word32 edx_125 = Mem121[ecx_124 + 0x18<32>:word32]
	Mem128[esp_112 - 4<i32>:word32] = eax_54
	call edx_125 (retsize: 4;)
		uses: ecx:ecx_124,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C
		defs: edx:edx_135
	eax_139 = 0<32>
l006F8F9F:
	esi_143 = eax_91
	branch Mem119[esp_112 + 0x14<32>:word32] != 0<32> l006F8F70
l006F8FA8:
	branch esi_143 != 0xA163B8<32> l006F9002
l006F9002:
	branch dwArg0C == 0<32> l006F901B
l006F9006:
	branch dwArg0C == 0xA163B8<32> l006F901B
l006F900E:
	word32 esp_155 = esp_112 - 4<i32>
	Mem156[esp_155:word32] = dwArg0C
	word32 esp_164 = esp_155 + 4<32>
	branch fn006DEA90(Mem156[esp_155:word32], out ecx_108, out edx_109) != 0<32> l006F9030
l006F9030:
	word32 v18_169 = Mem156[eax_54:word32] + 0xFFFFFFFF<32>
	Mem170[eax_54:word32] = v18_169
	branch v18_169 != 0<32> l006F9041
l006F9035:
	word32 ecx_173 = Mem170[eax_54 + 4<32>:word32]
	word32 edx_174 = Mem170[ecx_173 + 0x18<32>:word32]
	Mem176[esp_155:word32] = eax_54
	word32 esp_179
	call edx_174 (retsize: 4;)
		uses: ecx:ecx_173,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C
		defs: esp:esp_179
	esp_164 = esp_179 + 4<32>
l006F9041:
	word32 eax_189 = Mem188[esp_164 + 0x10<32>:word32]
	word32 esp_190 = esp_164 - 4<i32>
	Mem191[esp_190:word32] = 0<32>
	Mem193[esp_190 - 4<i32>:word32] = eax_189
	Mem196[esp_190 - 8<i32>:word32] = esp_190 + 0x1C<32>
	Mem199[esp_190 - 12<i32>:word32] = dwArg0C
	Mem202[esp_190 - 16<i32>:word32] = esi_143
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_208
	branch fn006F8C70(stackArg4, dwArg04, dwArg08, dwArg0C, out ecx_208, out edx_109) != 0<32> l006F9070
l006F9070:
	eax_139 = esi_143
l006F905B:
	word32 v19_217 = Mem202[esi_143:word32] + 0xFFFFFFFF<32>
	Mem218[esi_143:word32] = v19_217
	branch v19_217 != 0<32> l006F906C
l006F9060:
	word32 edx_221 = Mem218[esi_143 + 4<32>:word32]
	word32 eax_222 = Mem218[edx_221 + 0x18<32>:word32]
	Mem224[esp_190:word32] = esi_143
	call eax_222 (retsize: 4;)
		uses: ecx:ecx_208,edx:edx_221,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C
		defs: edx:edx_228
l006F906C:
	eax_139 = 0<32>
l006F901B:
	word32 v17_239 = Mem237[esi_143:word32] + 0xFFFFFFFF<32>
	Mem240[esi_143:word32] = v17_239
	branch v17_239 != 0<32> l006F902C
l006F9020:
	word32 edx_243 = Mem240[esi_143 + 4<32>:word32]
	word32 eax_244 = Mem240[edx_243 + 0x18<32>:word32]
	Mem247[esp_112 - 4<i32>:word32] = esi_143
	call eax_244 (retsize: 4;)
		uses: ecx:ecx_250,edx:edx_243,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C
		defs: edx:edx_258
l006F902C:
	eax_139 = eax_54
l006F8FB0:
	word32 v16_265 = Mem238[esi_143:word32] + 0xFFFFFFFF<32>
	Mem266[esi_143:word32] = v16_265
	branch v16_265 != 0<32> l006F8FC1
l006F8FB5:
	word32 eax_269 = Mem266[esi_143 + 4<32>:word32]
	word32 ecx_270 = Mem266[eax_269 + 0x18<32>:word32]
	Mem272[esp_112 - 4<i32>:word32] = esi_143
	word32 esp_273
	call ecx_270 (retsize: 4;)
		uses: eax:eax_269,ecx:ecx_270,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C
		defs: ecx:ecx_275,esp:esp_273
	esp_112 = esp_273 + 4<32>
l006F8FC1:
	word32 v21_283 = Mem282[eax_54:word32] + 0xFFFFFFFF<32>
	Mem284[eax_54:word32] = v21_283
	branch v21_283 != 0<32> l006F8FD2
l006F8FC6:
	word32 edx_287 = Mem284[eax_54 + 4<32>:word32]
	word32 eax_288 = Mem284[edx_287 + 0x18<32>:word32]
	Mem291[esp_112 - 4<i32>:word32] = eax_54
	word32 esp_297
	call eax_288 (retsize: 4;)
		uses: ecx:ecx_294,edx:edx_287,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C
		defs: esp:esp_297
	esp_112 = esp_297 + 4<32>
l006F8FD2:
	word32 ecx_306 = Mem305[0x00A17E2C<p32>:word32]
	word32 esp_308 = esp_112 - 4<i32>
	Mem309[esp_308:word32] = 0x8D5ED0<32>
	Mem311[esp_308 - 4<i32>:word32] = ecx_306
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_617
	fn006E0F80(stackArg4, dwArg04, out ecx_617, out edx_109)
	eax_139 = 0<32>
l006F9072:
	word32 ecx_419
	word32 eax_418 = fn00694B8E(eax_139, eax_7 ^ fp - 272<i32>, edx_109, ebx, ebp, esi, edi, es, ds, ebx, out ecx_419)
	ecxOut = ecx_419
	edxOut = edx_109
	return eax_418
l006F8F47:
	word32 ecx_439
	word32 eax_438 = fn00694B8E(eax_54, eax_7 ^ fp - 0x110<32>, edx_109, ebx, ebp, esi, edi, es, ds, ebx, out ecx_439)
	ecxOut = ecx_439
	edxOut = edx_109
	return eax_438
l006F8F0D:
	word32 ecx_457
	word32 eax_456 = fn00694B8E(eax_30, eax_7 ^ fp - 0x110<32>, edx_32, ebx, ebp, esi, edi, es, ds, ebx, out ecx_457)
	ecxOut = ecx_457
	edxOut = edx_32
	return eax_456
fn006F8EC0_exit:


word32 fn006F9090(word32 dwArg04, word32 dwArg08, word32 dwArg10, word32 dwArg14, ptr32 & ecxOut, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006F9120
//      fn0074E980
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +0010:[0..31] Stack +0014:[0..31]
// LiveOut: eax ecx edx
// Trashed: SCZO eax ecx edx Top
// Preserved: esi esp
fn006F9090_entry:
l006F9090:
	fn006F5C60()
	word32 edx_26
	word32 ecx_124
	word32 eax_24 = fn006F8EC0(ebx, ebp, esi, edi, es, ds, dwArg04, dwArg08, dwArg10, out ecx_124, out edx_26)
	word32 esp_29 = fp - 4<32>
	word32 eax_32 = fn0074F680()
	branch eax_32 == 0xFFFFFFFF<32> l006F90EB
l006F90BD:
	ecx_124 = Mem22[0x00A6CB90<p32>:word32]
	branch ecx_124 == 0<32> l006F90EB
l006F90C7:
	branch Mem22[0x00A1BDB8<p32>:word32] != eax_32 l006F90EF
l006F90EF:
	branch eax_24 == 0<32> l006F9104
l006F90F3:
	word32 v12_48 = Mem22[eax_24:word32] + 0xFFFFFFFF<32>
	Mem49[eax_24:word32] = v12_48
	branch v12_48 != 0<32> l006F9104
l006F90F8:
	word32 eax_52 = Mem49[eax_24 + 4<32>:word32]
	word32 esp_56
	call Mem49[eax_52 + 0x18<32>:word32] (retsize: 4;)
		uses: eax:eax_52,Stack +0004:eax_24,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg04,Stack +0014:dwArg10,Stack +0018:dwArg14,Stack +001C:dwArg10,Stack +0020:dwArg14
		defs: esp:esp_56
	esp_29 = esp_56 + 4<32>
l006F9104:
	word32 edx_65 = Mem64[0x00A175E0<p32>:word32]
	word32 esp_67 = esp_29 - 4<i32>
	Mem68[esp_67:word32] = 0x8D551C<32>
	Mem70[esp_67 - 4<i32>:word32] = edx_65
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_75
	word32 edx_76
	fn006E0F80(stackArg4, dwArg04, out ecx_75, out edx_76)
	ecxOut = ecx_75
	edxOut = edx_76
	return 0<32>
l006F90CF:
	word32 v11_85 = Mem22[0x00A6CB94<p32>:word32] - 1<32>
	Mem86[0x00A6CB94<p32>:word32] = v11_85
	branch v11_85 != 0<32> l006F90EB
l006F90D8:
	Mem91[0x00A1BDB8<p32>:word32] = 0xFFFFFFFF<32>
	fn0074F570(ecx_124)
l006F90EB:
	ecxOut = ecx_124
	edxOut = edx_26
	return eax_24
fn006F9090_exit:


word32 fn006F9120(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006F92B0
// MayUse:  Stack +0004:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn006F9120_entry:
l006F9120:
	word32 ebx_10 = 0<32>
	word32 ebp_11 = 0<32>
	branch Mem9[0x00A6CBA0<p32>:word32] != 0<32> l006F917A
l006F912E:
	word32 edx_509
	word32 ecx_508
	word32 eax_17 = fn006F1A70(out ecx_508, out edx_509)
	Mem25[0x00A6CBA8<p32>:word32] = eax_17
	branch eax_17 != 0<32> l006F9149
l006F9149:
	word32 ecx_510
	word32 edx_511
	word32 eax_30 = fn006F1A70(out ecx_510, out edx_511)
	Mem38[0x00A6CBA4<p32>:word32] = eax_30
	branch eax_30 == 0<32> l006F9144
l006F915F:
	word32 esi_531
	word32 edx_530
	word32 eax_45 = fn006EA200(out edx_530, out esi_531)
	Mem53[0x00A6CBA0<p32>:word32] = eax_45
	branch eax_45 == 0<32> l006F9144
l006F917A:
	word32 esp_118
	word32 edi_144
	word32 eax_64 = fn00708860()
	word32 esi_117 = eax_64
	branch eax_64 == 0<32> l006F91A5
l006F91A5:
	word32 ecx_512
	word32 edx_513
	fn006E1160(out ecx_512, out edx_513)
	word32 edx_515
	word32 ecx_514
	word32 eax_94 = fn006F9090(0x8D144C<32>, 0<32>, 0<32>, 0<32>, out ecx_514, out edx_515)
	edi_144 = eax_94
	branch eax_94 != 0<32> l006F91CA
l006F91CA:
	word32 edx_518
	word32 esi_519
	word32 eax_112 = fn006EA200(out edx_518, out esi_519)
	esi_117 = eax_112
	esp_118 = fp - 0x10<32>
	branch eax_112 == 0<32> l006F9274
l006F91C5:
	return eax_94
l006F9187:
	word32 eax_130 = Mem63[0x00A6CBA4<p32>:word32]
	Mem132[eax_64:word32] = Mem63[eax_64:word32] + 1<32>
	word32 edx_517
	word32 ecx_516
	word32 eax_139 = fn00704220(eax_64, eax_130, out ecx_516, out edx_517)
	edi_144 = eax_139
	branch eax_139 == 0<32> l006F925F
l006F91A3:
l006F91E9:
	word32 eax_151 = Mem150[edi_144 + 4<32>:word32]
	branch eax_151 == 0xA1D1B8<32> l006F9216
l006F91F3:
	word32 edx_523
	word32 ecx_522
	branch fn006D5670(eax_151, 0xA1D1B8<32>, out ecx_522, out edx_523) != 0<32> l006F9216
l006F9216:
	word32 ecx_520
	word32 edx_521
	word32 eax_187 = fn00704220(edi_144, Mem170[0x00A6CBA8<p32>:word32], out ecx_520, out edx_521)
	ebx_10 = eax_187
	branch eax_187 != 0<32> l006F9245
l006F922B:
	word32 ecx_528
	word32 edx_529
	fn006E0E90(Mem177[0x00A17E28<p32>:word32], Mem177[0x00A6CBA8<p32>:word32], out ecx_528, out edx_529)
l006F9205:
	word32 edx_525
	word32 ecx_524
	ebx_10 = fn006DE330(edi_144, Mem158[0x00A6CBA8<p32>:word32], out ecx_524, out edx_525)
l006F923E:
	branch ebx_10 == 0<32> l006F925F
l006F9245:
	word32 ecx_526
	word32 edx_527
	ebp_11 = fn00703AF0(ebx_10, out ecx_526, out edx_527)
l006F925F:
	esp_118 = fp - 0x10<32>
	branch esi_117 == 0<32> l006F9274
l006F9263:
	word32 v14_268 = Mem267[esi_117:word32] + 0xFFFFFFFF<32>
	Mem269[esi_117:word32] = v14_268
	branch v14_268 != 0<32> l006F9274
l006F9268:
	word32 edx_272 = Mem269[esi_117 + 4<32>:word32]
	word32 esp_281
	call Mem269[edx_272 + 0x18<32>:word32] (retsize: 4;)
		uses: edx:edx_272,Stack +0004:esi_263,Stack +001C:dwArg04
		defs: esp:esp_281
	esp_118 = esp_281 + 4<32>
l006F9274:
	branch edi_144 == 0<32> l006F9289
l006F9278:
	word32 v16_294 = Mem293[edi_144:word32] + 0xFFFFFFFF<32>
	Mem295[edi_144:word32] = v16_294
	branch v16_294 != 0<32> l006F9289
l006F927D:
	word32 ecx_298 = Mem295[edi_144 + 4<32>:word32]
	word32 edx_299 = Mem295[ecx_298 + 0x18<32>:word32]
	Mem302[esp_118 - 4<i32>:word32] = edi_144
	word32 esp_307
	call edx_299 (retsize: 4;)
		uses: ecx:ecx_298,Stack +0008:dwArg04
		defs: esp:esp_307
	esp_118 = esp_307 + 4<32>
l006F9289:
	branch ebx_10 == 0<32> l006F929E
l006F928D:
	word32 v17_320 = Mem319[ebx_10:word32] + 0xFFFFFFFF<32>
	Mem321[ebx_10:word32] = v17_320
	branch v17_320 != 0<32> l006F929E
l006F9292:
	word32 eax_324 = Mem321[ebx_10 + 4<32>:word32]
	word32 ecx_325 = Mem321[eax_324 + 0x18<32>:word32]
	Mem328[esp_118 - 4<i32>:word32] = ebx_10
	call ecx_325 (retsize: 4;)
		uses: eax:eax_324,Stack +0008:dwArg04
l006F929E:
	return ebp_11
l006F9144:
	return 0<32>
fn006F9120_exit:


word32 fn006F92B0(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E19F0
//      fn00718F10
// MayUse:  Stack +0004:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx edi edx esi Top
// Preserved: esp
fn006F92B0_entry:
l006F92B0:
	word32 edx_102
	word32 ecx_101
	word32 eax_12 = fn006ECAC0(dwArg04, out ecx_101, out edx_102)
	branch eax_12 != 0<32> l006F92C6
l006F92C6:
	word32 eax_28 = fn006F9120(eax_12)
	word32 v10_34 = Mem26[eax_12:word32] + 0xFFFFFFFF<32>
	Mem35[eax_12:word32] = v10_34
	branch v10_34 != 0<32> l006F92E3
l006F92D7:
	word32 ecx_39 = Mem35[eax_12 + 4<32>:word32]
	call Mem35[ecx_39 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_39,Stack +0004:eax_12,Stack +0008:dwArg04,Stack +0014:dwArg04
l006F92E3:
	return eax_28
l006F92C4:
	return eax_12
fn006F92B0_exit:


word32 fn006F94A0(word32 dwArg04, word32 dwArg08, word32 dwArg0C)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0074E980
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx edi edx Top
// Preserved: esi esp
fn006F94A0_entry:
l006F94A0:
	word32 esi_19 = Mem6[0x00A6CBB0<p32>:word32]
	branch esi_19 == 0<32> l006F9524
l006F9524:
	word32 ecx_138
	word32 edx_139
	word32 eax_14 = fn006FEF30(0xA1C698<32>, out ecx_138, out edx_139)
	esi_19 = eax_14
	branch eax_14 != 0<32> l006F94C0
l006F9537:
	return eax_14
l006F94AB:
	Mem27[0x00A6CBB0<p32>:word32] = Mem6[esi_19 + 0xC<32>:word32]
	Mem28[esi_19 + 4<32>:word32] = 0xA1C698<32>
	Mem29[esi_19:word32] = 1<32>
l006F94C0:
	Mem37[esi_19 + 8<32>:word32] = dwArg04
	branch dwArg08 == 0<32> l006F94D2
l006F94CF:
	Mem40[dwArg08:word32] = Mem37[dwArg08:word32] + 1<32>
l006F94D2:
	Mem44[esi_19 + 0xC<32>:word32] = dwArg08
	branch dwArg0C == 0<32> l006F94E0
l006F94DD:
	Mem51[dwArg0C:word32] = Mem44[dwArg0C:word32] + 1<32>
l006F94E0:
	Mem63[esi_19 + 0x10<32>:word32] = dwArg0C
	word32 edi_61 = esi_19 - 0x10<32>
	branch Mem63[edi_61 + 8<32>:word32] == 0xFFFFFFFE<32> l006F94FA
l006F94ED:
	fn006E86F0(0x8D0E04<32>)
l006F94FA:
	Mem76[edi_61 + 8<32>:word32] = 0xFFFFFFFD<32>
	Mem78[edi_61:word32] = Mem76[0x00A1D558<p32>:word32]
	word32 eax_80 = Mem78[Mem78[0x00A1D558<p32>:word32] + 4<32>:word32]
	Mem81[edi_61 + 4<32>:word32] = eax_80
	Mem82[eax_80:word32] = edi_61
	Mem84[Mem82[0x00A1D558<p32>:word32] + 4<32>:word32] = edi_61
	return esi_19
fn006F94A0_exit:


word32 fn006F9540(word32 dwArg04, word32 dwArg08, word32 dwArg0C)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00708880
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ebx ecx edi edx esi Top
// Preserved: esp
fn006F9540_entry:
l006F9540:
	word32 eax_11 = Mem9[dwArg04 + 8<32>:word32]
	word32 ebx_12 = Mem9[dwArg04 + 0xC<32>:word32]
	word32 edi_16 = Mem15[eax_11 + 4<32>:word32]
	word32 eax_17 = Mem15[eax_11 + 8<32>:word32]
	branch (eax_17 & 0xFFFFFF8F<32>) >u 8<32> l006F96A1
l006F955F:
	switch (eax_17 & 0xFFFFFF8F<32>) { l006F9641 l006F9566 l006F958E l006F958E l006F95A2 l006F96A1 l006F96A1 l006F96A1 l006F95F1 }
l006F95F1:
	branch dwArg0C == 0<32> l006F9606
l006F95F9:
	branch fn006FCF20(dwArg0C) != 0<32> l006F9656
l006F9606:
	branch Mem38[dwArg08 + 8<32>:word32] != 1<32> l006F9620
l006F9620:
	word32 ecx_528
	word32 edx_529
	fn006E15D0(Mem38[0x00A16B7C<p32>:word32], dwArg04, out ecx_528, out edx_529)
	return 0<32>
l006F9612:
	word32 eax_80
	call edi_16 (retsize: 4;)
		uses: ecx:Mem38[dwArg08 + 0xC<32>:word32],Stack +0004:ebx_12,Stack +0008:dwArg04,Stack +0010:dwArg0C,Stack +001C:dwArg04,Stack +0020:dwArg08,Stack +0024:dwArg0C
		defs: eax:eax_80
	return eax_80
l006F96A1:
	word32 edx_525
	fn006E1DC0(out edx_525)
	return 0<32>
l006F95A2:
	branch dwArg0C == 0<32> l006F95BB
l006F95AA:
	branch fn006FCF20(dwArg0C) != 0<32> l006F9656
l006F95BB:
	branch Mem135[dwArg08 + 8<32>:word32] != 0<32> l006F95D1
l006F95D1:
	word32 ecx_530
	word32 edx_531
	fn006E15D0(Mem145[0x00A16B7C<p32>:word32], dwArg04, out ecx_530, out edx_531)
	return 0<32>
l006F95C6:
	word32 eax_177
	call edi_16 (retsize: 4;)
		uses: Stack +0004:ebx_12,Stack +0008:dwArg04,Stack +0010:dwArg0C,Stack +001C:dwArg04,Stack +0020:dwArg08,Stack +0024:dwArg0C
		defs: eax:eax_177
	return eax_177
l006F958E:
	word32 eax_205
	call edi_16 (retsize: 4;)
		uses: ecx:dwArg0C,edx:dwArg08,Stack +0004:ebx_12,Stack +0008:dwArg08,Stack +000C:dwArg0C,Stack +0020:dwArg04,Stack +0024:dwArg08,Stack +0028:dwArg0C
		defs: eax:eax_205
	return eax_205
l006F9566:
	branch dwArg0C == 0<32> l006F957F
l006F956E:
	branch fn006FCF20(dwArg0C) != 0<32> l006F9656
l006F957F:
	word32 eax_246
	call edi_16 (retsize: 4;)
		uses: eax:dwArg08,Stack +0004:ebx_12,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C,Stack +001C:dwArg04,Stack +0020:dwArg08,Stack +0024:dwArg0C
		defs: eax:eax_246
	return eax_246
l006F9641:
	branch dwArg0C == 0<32> l006F9676
l006F9649:
	branch fn006FCF20(dwArg0C) == 0<32> l006F9676
l006F9676:
	word32 ecx_278 = Mem276[dwArg08 + 8<32>:word32]
	branch ecx_278 != 1<32> l006F9690
l006F9690:
	branch ecx_278 != 0<32> l006F9696
l006F9694:
l006F9696:
	word32 eax_302
	call edi_16 (retsize: 4;)
		uses: Stack +0004:ebx_12,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C,Stack +001C:dwArg04,Stack +0020:dwArg08,Stack +0024:dwArg0C
		defs: eax:eax_302
	return eax_302
l006F9682:
	word32 eax_321
	call edi_16 (retsize: 4;)
		uses: eax:Mem276[dwArg08 + 0xC<32>:word32],Stack +0004:ebx_12,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C,Stack +001C:dwArg04,Stack +0020:dwArg08,Stack +0024:dwArg0C
		defs: eax:eax_321
	return eax_321
l006F9656:
	word32 edx_527
	word32 ecx_526
	fn006E15D0(Mem335[0x00A16B7C<p32>:word32], dwArg04, out ecx_526, out edx_527)
	return 0<32>
fn006F9540_exit:


void fn006F9B70()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E8910
// MayUse: 
// LiveOut:
// Trashed: SCZO eax ecx edx esp Top
// Preserved:
fn006F9B70_entry:
l006F9B70:
	word32 eax_10 = Mem0[0x00A6CBB0<p32>:word32]
	branch eax_10 == 0<32> l006F9B9B
l006F9B79:
	word32 esp_13 = fp
l006F9B80:
	word32 ecx_12 = Mem11[eax_10 + 0xC<32>:word32]
	word32 esp_14 = esp_13 - 4<i32>
	Mem15[esp_14:word32] = eax_10
	Mem16[0x00A6CBB0<p32>:word32] = ecx_12
	fn006FEFD0(Mem16[esp_14:word32])
	eax_10 = Mem16[0x00A6CBB0<p32>:word32]
	esp_13 = esp_14
	branch eax_10 != 0<32> l006F9B80
l006F9B9B:
	return
fn006F9B70_exit:


void fn006F9C00(word32 esi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006F9C70
// MayUse:  esi:[0..31]
// LiveOut:
// Trashed: SCZO eax ecx edx Top
// Preserved: esp
fn006F9C00_entry:
l006F9C00:
	word32 eax_6 = Mem0[esi + 8<32>:word32]
	word32 edx_8 = Mem0[esi + 0xC<32>:word32]
	branch eax_6 == 0xA163B8<32> l006F9C4D
l006F9C0D:
	word32 ecx_12 = Mem0[Mem0[eax_6 + 4<32>:word32] + 0x68<32>:word32] + eax_6
	branch Mem0[ecx_12:word32] != esi l006F9C1E
l006F9C19:
	Mem16[ecx_12:word32] = Mem0[esi + 0x18<32>:word32]
l006F9C1E:
	word32 eax_19 = Mem18[esi + 0x14<32>:word32]
	Mem22[esi + 8<32>:word32] = 0xA163B8<32>
	branch eax_19 == 0<32> l006F9C32
l006F9C2C:
	Mem25[eax_19 + 0x18<32>:word32] = Mem22[esi + 0x18<32>:word32]
l006F9C32:
	word32 eax_28 = Mem27[esi + 0x18<32>:word32]
	branch eax_28 == 0<32> l006F9C3F
l006F9C39:
	Mem33[eax_28 + 0x14<32>:word32] = Mem27[esi + 0x14<32>:word32]
l006F9C3F:
	Mem35[esi + 0x14<32>:word32] = 0<32>
	Mem36[esi + 0x18<32>:word32] = 0<32>
l006F9C4D:
	branch edx_8 == 0<32> l006F9C69
l006F9C51:
	word32 v11_45 = Mem44[edx_8:word32] + 0xFFFFFFFF<32>
	Mem46[edx_8:word32] = v11_45
	branch v11_45 != 0<32> l006F9C62
l006F9C56:
	word32 eax_49 = Mem46[edx_8 + 4<32>:word32]
	word32 ecx_65
	call Mem46[eax_49 + 0x18<32>:word32] (retsize: 4;)
		uses: eax:eax_49,ecx:ecx_65,Stack +0004:edx_8
		defs: ecx:ecx_65
l006F9C62:
	Mem71[esi + 0xC<32>:word32] = 0<32>
l006F9C69:
	return
fn006F9C00_exit:


void fn006F9C70(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006FE160
// MayUse:  Stack +0004:[0..31]
// LiveOut:
// Trashed: SCZO eax ecx edx Top
// Preserved: edi esi esp
fn006F9C70_entry:
l006F9C70:
	word32 edi_11 = Mem10[dwArg04 + 0xC<32>:word32]
	Mem12[dwArg04 + 0xC<32>:word32] = 0<32>
	fn006F9C00(dwArg04)
	Mem20[dwArg04 + 0xC<32>:word32] = edi_11
	return
fn006F9C70_exit:


void fn006FB760()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006FBE60
// MayUse: 
// LiveOut:
// Trashed: SCZO eax ecx edx Top
// Preserved: esi esp
fn006FB760_entry:
l006FB760:
	word32 ecx_83
	word32 edx_84
	word32 esi_85
	word32 eax_13 = fn006DFF80(1<32>, out ecx_83, out edx_84, out esi_85)
	branch eax_13 == 0<32> l006FB793
l006FB772:
	word32 ecx_86
	word32 edx_87
	fn006E0E90(Mem11[0x00A17E28<p32>:word32], eax_13, out ecx_86, out edx_87)
	word32 v10_36 = Mem27[eax_13:word32] + 0xFFFFFFFF<32>
	Mem37[eax_13:word32] = v10_36
	branch v10_36 != 0<32> l006FB793
l006FB787:
	word32 edx_40 = Mem37[eax_13 + 4<32>:word32]
	word32 eax_41 = Mem37[edx_40 + 0x18<32>:word32]
	call eax_41 (retsize: 4;)
		uses: eax:eax_41,edx:edx_40,Stack +0004:eax_13
l006FB793:
	return
fn006FB760_exit:


word32 fn006FBA70(word32 ebx, word32 edi, word32 dwArg04, word32 dwArg08, ptr32 & ecxOut, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006FBD90
//      fn006FCC90
// MayUse:  ebx:[0..31] edi:[0..31] Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax ecx edx
// Trashed: SCZO eax ecx edx Top
// Preserved: ebp esi esp
fn006FBA70_entry:
l006FBA70:
	word32 eax_23
	word32 ecx_149
	word32 edx_150
	call Mem0[edi + 0x18<32>:word32] (retsize: 4;)
		uses: eax:dwArg04,Stack +000C:dwArg04,Stack +001C:dwArg04,Stack +0020:dwArg08
		defs: eax:eax_23,ecx:ecx_24,edx:edx_25
	word32 esp_108 = fp - 8<32>
	branch eax_23 != 0<32> l006FBAB4
l006FBAB4:
	word32 eax_33 = Mem21[eax_23 + 8<32>:word32]
	branch eax_33 == 0<32> l006FBAE5
l006FBAE5:
	branch Mem21[eax_23 + 4<32>:word32] != 0<32> l006FBB04
l006FBB04:
	word32 eax_39 = Mem21[0x00A6CCF8<p32>:word32]
	word32 v19_40 = Mem21[eax_39:word32] + 0xFFFFFFFF<32>
	Mem41[eax_39:word32] = v19_40
	branch v19_40 != 0<32> l006FBB1A
l006FBB0E:
	word32 edx_44 = Mem41[eax_39 + 4<32>:word32]
	word32 esp_48
	call Mem46[edx_44 + 0x18<32>:word32] (retsize: 4;)
		uses: edx:edx_44,Stack +0004:eax_39,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0014:dwArg04,Stack +0018:dwArg08
		defs: edx:edx_51,esp:esp_48
	esp_108 = esp_48 + 4<32>
l006FBB1A:
	ecx_149 = Mem57[esp_108 + 0xC<32>:word32]
	Mem61[eax_23 + 4<32>:word32] = ebx
	Mem62[eax_23:word32] = ecx_149
	Mem64[eax_23 + 8<32>:word32] = dwArg08
	Mem67[edi + 0xC<32>:word32] = Mem64[edi + 0xC<32>:word32] + 1<32>
l006FBAEB:
	Mem70[edi + 8<32>:word32] = Mem21[edi + 8<32>:word32] + 1<32>
	Mem72[eax_23 + 8<32>:word32] = dwArg08
	Mem73[eax_23 + 4<32>:word32] = ebx
	Mem74[eax_23:word32] = dwArg04
	Mem76[edi + 0xC<32>:word32] = Mem74[edi + 0xC<32>:word32] + 1<32>
	ecxOut = dwArg04
	edxOut = edx_150
	return 0<32>
l006FBABB:
	Mem84[eax_23 + 8<32>:word32] = dwArg08
	word32 v15_85 = Mem84[eax_33:word32] + 0xFFFFFFFF<32>
	Mem86[eax_33:word32] = v15_85
	branch v15_85 != 0<32> l006FBACF
l006FBAC3:
	word32 ecx_89 = Mem86[eax_33 + 4<32>:word32]
	word32 esp_93
	call Mem86[ecx_89 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_89,Stack +0004:eax_33,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0014:dwArg04,Stack +0018:dwArg08
		defs: ecx:ecx_95,edx:edx_96,esp:esp_93
	esp_108 = esp_93 + 4<32>
l006FBACF:
	word32 v18_103 = Mem102[ebx:word32] + 0xFFFFFFFF<32>
	Mem104[ebx:word32] = v18_103
	branch v18_103 != 0<32> l006FBB2A
l006FBB2A:
	ecxOut = ecx_149
	edxOut = edx_150
	return 0<32>
l006FBAD4:
	word32 eax_117 = Mem104[ebx + 4<32>:word32]
	word32 ecx_118 = Mem104[eax_117 + 0x18<32>:word32]
	Mem120[esp_108 - 4<i32>:word32] = ebx
	word32 ecx_127
	word32 edx_128
	call ecx_118 (retsize: 4;)
		uses: eax:eax_117,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: ecx:ecx_127,edx:edx_128
	ecxOut = ecx_127
	edxOut = edx_128
	return 0<32>
l006FBA8B:
	word32 v13_139 = Mem21[ebx:word32] + 0xFFFFFFFF<32>
	Mem140[ebx:word32] = v13_139
	branch v13_139 != 0<32> l006FBA9C
l006FBA90:
	word32 edx_143 = Mem140[ebx + 4<32>:word32]
	word32 esp_147
	call Mem140[edx_143 + 0x18<32>:word32] (retsize: 4;)
		uses: edx:edx_143,Stack +0004:ebx,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0014:dwArg04,Stack +0018:dwArg08
		defs: ecx:ecx_149,edx:edx_150,esp:esp_147
	esp_108 = esp_147 + 4<32>
l006FBA9C:
	word32 v21_157 = Mem156[dwArg08:word32] + 0xFFFFFFFF<32>
	Mem158[dwArg08:word32] = v21_157
	branch v21_157 != 0<32> l006FBAAE
l006FBAA2:
	word32 ecx_161 = Mem158[dwArg08 + 4<32>:word32]
	word32 edx_162 = Mem158[ecx_161 + 0x18<32>:word32]
	Mem165[esp_108 - 4<i32>:word32] = dwArg08
	call edx_162 (retsize: 4;)
		uses: ecx:ecx_161,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: ecx:ecx_172,edx:edx_173
l006FBAAE:
	ecxOut = ecx_149
	edxOut = edx_150
	return 0xFFFFFFFF<32>
fn006FBA70_exit:


word32 fn006FBB30(word32 esi, word32 dwArg04, word32 dwArg08, word32 dwArg0C, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006FBB90
// MayUse:  esi:[0..31] Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut: ecx edx
// Trashed: SCZO eax ecx edx Top
// Preserved: ebp ebx edi esp
fn006FBB30_entry:
l006FBB30:
	word32 edi_16 = Mem15[esi + 0x10<32>:word32]
	word32 ebx_8 = Mem6[esi + 0x14<32>:word32]
	word32 eax_18 = edi_16 & dwArg08
	word32 ecx_21 = ebx_8 + eax_18 * 0xC<32>
	word32 edx_22 = dwArg08
	branch Mem15[ebx_8 + 4<32> + eax_18 * 0xC<32>:word32] == 0<32> l006FBB6A
l006FBB50:
	eax_18 = eax_18 + 1<32> + (edx_22 + eax_18 * 4<32>)
	ecx_21 = ebx_8 + (eax_18 & edi_16) * 0xC<32>
	edx_22 = edx_22 >>u 5<32>
	branch Mem15[ecx_21 + 4<32>:word32] != 0<32> l006FBB50
l006FBB6A:
	Mem46[esi + 8<32>:word32] = Mem15[esi + 8<32>:word32] + 1<32>
	Mem48[ecx_21 + 4<32>:word32] = dwArg04
	Mem54[ecx_21:word32] = dwArg08
	Mem57[ecx_21 + 8<32>:word32] = dwArg0C
	Mem59[esi + 0xC<32>:word32] = Mem57[esi + 0xC<32>:word32] + 1<32>
	edxOut = dwArg0C
	return ecx_21
fn006FBB30_exit:


word32 fn006FBB90(word32 eax, word32 dwArg04, ptr32 & ecxOut, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006FBD90
//      fn006FCC90
// MayUse:  eax:[0..31] Stack +0004:[0..31]
// LiveOut: eax ecx edx
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn006FBB90_entry:
l006FBB90:
	word32 ebx_16 = 8<32>
	branch eax < 8<32> l006FBBBE
l006FBBA2:
	branch ebx_16 <= 0<32> l006FBBB0
l006FBBA6:
	ebx_16 = ebx_16 * 2<32>
	branch ebx_16 <= eax l006FBBA2
l006FBBAC:
	branch ebx_16 > 0<32> l006FBBBE
l006FBBBE:
	word32 edx_112
	word32 esi_102 = Mem31[dwArg04 + 0x14<32>:word32]
	word32 eax_116 = dwArg04 + 0x1C<32>
	word32 ecx_107 = CONVERT(CONVERT(esi_102 != dwArg04 + 0x1C<32>, bool, int8), int8, uint32)
	branch ebx_16 != 8<32> l006FBC52
l006FBC52:
	word32 eax_52 = ebx_16 * 3<32>
	word32 eax_54 = eax_52 * 4<32>
	branch eax_52 * 4<32> != 0<32> l006FBC60
l006FBC5B:
	eax_54 = 1<32>
l006FBC60:
	eax_116 = malloc(eax_54)
	branch eax_116 != 0<32> l006FBBFF
l006FBC6E:
	word32 ecx_76
	word32 edx_77
	fn006E1210(out ecx_76, out edx_77)
	ecxOut = ecx_76
	edxOut = edx_77
	return 0xFFFFFFFF<32>
l006FBBDA:
	branch dwArg04 + 0x1C<32> != esi_102 l006FBBFF
l006FBBDE:
	edx_112 = Mem50[dwArg04 + 8<32>:word32]
	branch edx_112 == Mem50[dwArg04 + 0xC<32>:word32] l006FBCB5
l006FBBEA:
	word32 ecx_224 = 0x18<32>
	word32 edi_220 = fp - 0x60<32>
l006FBBF3:
	branch ecx_224 == 0<32> l006FBBF5
l006FBBF5:
	esi_102 = fp - 0x60<32>
l006FBBFF:
	word32 ecx_105 = ebx_16 * 3<32>
	Mem121[dwArg04 + 0x14<32>:word32] = eax_116
	edx_112 = ebx_16 - 1<32>
	Mem122[dwArg04 + 0x10<32>:word32] = edx_112
	memset(eax_116, 0<32>, ecx_105 * 4<32>)
	word32 ebx_124 = Mem122[dwArg04 + 8<32>:word32]
	Mem127[dwArg04 + 0xC<32>:word32] = 0<32>
	Mem128[dwArg04 + 8<32>:word32] = 0<32>
	ecx_107 = ecx_105 * 4<32>
	word32 esp_125 = fp - 0x78<32>
	branch ebx_124 <= 0<32> l006FBCA4
l006FBC29:
	word32 edi_131 = esi_102 + 4<32>
	esp_125 = fp - 0x78<32>
l006FBC30:
	word32 eax_135 = Mem134[edi_131 + 4<32>:word32]
	branch eax_135 == 0<32> l006FBC7E
l006FBC7E:
	word32 eax_139 = Mem134[edi_131:word32]
	branch eax_139 == 0<32> l006FBC9D
l006FBC84:
	Mem144[eax_139:word32] = Mem134[eax_139:word32] + 0xFFFFFFFF<32>
	word32 eax_145 = Mem144[edi_131:word32]
	ebx_124 = ebx_124 - 1<32>
	branch Mem144[eax_145:word32] != 0<32> l006FBC9D
l006FBC91:
	word32 ecx_150 = Mem144[eax_145 + 4<32>:word32]
	word32 edx_151 = Mem144[ecx_150 + 0x18<32>:word32]
	Mem154[esp_125 - 4<i32>:word32] = eax_145
	word32 esp_158
	call edx_151 (retsize: 4;)
		uses: eax:eax_145,ecx:ecx_150,Stack +0008:dwArg04
		defs: ecx:ecx_160,edx:edx_161,esp:esp_158
	esp_125 = esp_158 + 4<32>
l006FBC37:
	word32 edx_166 = Mem134[edi_131 - 4<32>:word32]
	word32 esp_167 = esp_125 - 4<i32>
	Mem168[esp_167:word32] = eax_135
	word32 eax_169 = Mem168[edi_131:word32]
	Mem171[esp_167 - 4<i32>:word32] = edx_166
	Mem173[esp_167 - 8<i32>:word32] = eax_169
	ecx_107 = fn006FBB30(dwArg04, Mem173[esp_167 - 8<i32>:word32], Mem173[esp_167 - 4<i32>:word32], Mem173[esp_167:word32], out edx_112)
	ebx_124 = ebx_124 - 1<32>
	esi_102 = Mem173[esp_167 + 0x14<32>:word32]
	esp_125 = esp_167 + 4<32>
l006FBC9D:
	edi_131 = edi_131 + 0xC<32>
	branch ebx_124 > 0<32> l006FBC30
l006FBCA4:
	branch Mem194[esp_125 + 0x14<32>:word32] == 0<32> l006FBCB5
l006FBCAB:
	word32 esp_198 = esp_125 - 4<i32>
	Mem201[esp_198:word32] = esi_102
	free(Mem201[esp_198:(ptr32 void)])
l006FBCB5:
	ecxOut = ecx_107
	edxOut = edx_112
	return 0<32>
l006FBBF3_1:
	Mem221[edi_220:word32] = Mem218[esi_102:word32]
	esi_102 = esi_102 + 4<i32>
	edi_220 = edi_220 + 4<i32>
	ecx_224 = ecx_224 - 1<32>
l006FBBB0:
	word32 ecx_234
	word32 edx_235
	fn006E1210(out ecx_234, out edx_235)
	ecxOut = ecx_234
	edxOut = edx_235
	return 0xFFFFFFFF<32>
fn006FBB90_exit:


word32 fn006FBCC0(word32 dwArg04, word32 dwArg08, ptr32 & ecxOut, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006D6060
//      fn006EC890
//      fn006F6AF0
//      fn006F6EA0
//      fn006FCC90
//      fn006FD8B0
//      fn00707950
//      fn00708410
//      fn00708DC0
//      fn0070C1A0
//      fn0070C9E0
//      fn00725010
//      fn007276E0
//      fn00729040
//      fn00735890
//      fn0073AFB0
//      fn00747580
//      fn007475E0
//      fn00747610
//      fn00747890
//      fn00747A80
//      fn00748140
//      fn00748190
//      fn0074EB10
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax ecx edx
// Trashed: SCZO eax ebx ecx edi edx esi Top
// Preserved: esp
fn006FBCC0_entry:
l006FBCC0:
	word32 eax_9 = Mem7[dwArg04 + 4<32>:word32]
	branch eax_9 == 0xA1D1B8<32> l006FBCE9
l006FBCD2:
	word32 ecx_17
	word32 edx_18
	word32 eax_16 = fn006D5670(eax_9, 0xA1D1B8<32>, out ecx_17, out edx_18)
	branch eax_16 != 0<32> l006FBCE9
l006FBCE9:
	branch Mem35[dwArg08 + 4<32>:word32] != 0xA1B450<32> l006FBD00
l006FBCF8:
	branch Mem35[dwArg08 + 0xC<32>:word32] != 0xFFFFFFFF<32> l006FBD10
l006FBD00:
	word32 edx_282
	word32 ecx_281
	branch fn006DE2E0(dwArg08, out ecx_281, out edx_282) == 0xFFFFFFFF<32> l006FBD72
l006FBD10:
	word32 edx_156
	word32 ecx_155
	word32 esi_148
	word32 eax_62 = Mem61[0x00A6D67C<p32>:word32]
	branch eax_62 == 0<32> l006FBD61
l006FBD19:
	branch Mem61[eax_62 + 0x28<32>:word32] == 0<32> l006FBD61
l006FBD61:
	word32 eax_87
	call Mem61[dwArg04 + 0x18<32>:word32] (retsize: 4;)
		uses: Stack +0004:dwArg04,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0028:dwArg04,Stack +002C:dwArg08
		defs: eax:eax_87,ecx:ecx_88,edx:edx_89
	esi_148 = eax_87
	branch eax_87 != 0<32> l006FBD80
l006FBD72:
	word32 ecx_98
	word32 edx_99
	fn006E1160(out ecx_98, out edx_99)
	ecxOut = ecx_98
	edxOut = edx_99
	return 0<32>
l006FBD1F:
	fn006E1130(fp - 4<32>, fp - 8<32>, fp + 4<32>)
	word32 eax_139
	call Mem123[dwArg04 + 0x18<32>:word32] (retsize: 4;)
		uses: Stack +0004:dwArg04,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0034:dwArg04,Stack +0038:dwArg08
		defs: eax:eax_139
	fn006E0E00(dwArg04, out ecx_155, out edx_156)
	esi_148 = eax_139
	branch eax_139 != 0<32> l006FBD80
l006FBD80:
	word32 eax_167 = Mem166[esi_148 + 8<32>:word32]
	ecxOut = ecx_155
	edxOut = edx_156
	return eax_167
l006FBD58:
	ecxOut = ecx_155
	edxOut = edx_156
	return 0<32>
l006FBCE4:
	ecxOut = ecx_17
	edxOut = edx_18
	return eax_16
fn006FBCC0_exit:


word32 fn006FBD90(word32 dwArg04, word32 dwArg08, word32 dwArg0C, ptr32 & ecxOut, ptr32 & edxOut, ptr32 & ebxOut, ptr32 & ediOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E99A0
//      fn006EC890
//      fn006F5DD0
//      fn006F6AF0
//      fn006FCC90
//      fn006FD8F0
//      fn00707950
//      fn00708210
//      fn00708DC0
//      fn0070B600
//      fn007173A0
//      fn00726260
//      fn00726340
//      fn007276E0
//      fn00735890
//      fn007367D0
//      fn00747330
//      fn00747610
//      fn00747890
//      fn00747A80
//      fn00748190
//      fn0074EB10
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut: eax ebx ecx edi edx
// Trashed: SCZO eax ebx ecx edi edx esi Top
// Preserved: esp
fn006FBD90_entry:
l006FBD90:
	word32 eax_8 = Mem6[dwArg04 + 4<32>:word32]
	branch eax_8 == 0xA1D1B8<32> l006FBDC8
l006FBD9F:
	word32 edx_242
	word32 ecx_241
	branch fn006D5670(eax_8, 0xA1D1B8<32>, out ecx_241, out edx_242) != 0<32> l006FBDC8
l006FBDC8:
	word32 eax_39
	branch Mem30[dwArg08 + 4<32>:word32] != 0xA1B450<32> l006FBE0A
l006FBE0A:
	word32 ecx_40
	word32 edx_41
	eax_39 = fn006DE2E0(dwArg08, out ecx_40, out edx_41)
	branch eax_39 != 0xFFFFFFFF<32> l006FBDE7
l006FBE18:
	ecxOut = ecx_40
	edxOut = edx_41
	ebxOut = <invalid>
	ediOut = <invalid>
	return eax_39
l006FBDD6:
	eax_39 = Mem30[dwArg08 + 0xC<32>:word32]
	branch eax_39 != 0xFFFFFFFF<32> l006FBDE7
l006FBDDE:
	word32 edx_244
	word32 ecx_243
	eax_39 = fn006DE2E0(dwArg08, out ecx_243, out edx_244)
l006FBDE7:
	word32 esi_76 = Mem74[dwArg04 + 0xC<32>:word32]
	Mem78[dwArg0C:word32] = Mem74[dwArg0C:word32] + 1<32>
	Mem81[dwArg08:word32] = Mem78[dwArg08:word32] + 1<32>
	word32 ecx_105
	word32 edx_103
	branch fn006FBA70(dwArg08, dwArg04, eax_39, dwArg0C, out ecx_105, out edx_103) == 0<32> l006FBE1D
l006FBE1D:
	word32 eax_99 = Mem87[dwArg04 + 0xC<32>:word32]
	branch eax_99 <= esi_76 l006FBE55
l006FBE24:
	word32 ecx_102 = Mem87[dwArg04 + 0x10<32>:word32]
	word32 ecx_104 = Mem87[dwArg04 + 8<32>:word32]
	edx_103 = ecx_102 + 2<32> + ecx_102
	ecx_105 = ecx_104 * 3<32>
	branch ecx_104 * 3<32> < edx_103 l006FBE55
l006FBE55:
	ecxOut = ecx_105
	edxOut = edx_103
	ebxOut = <invalid>
	ediOut = <invalid>
	return 0<32>
l006FBE35:
	word32 edx_126 = CONVERT(CONVERT(eax_99 <= 0xC350<32>, bool, int8), int8, uint32)
	word32 ecx_134
	word32 edx_135
	word32 eax_133 = fn006FBB90((edx_126 + 2<32> + edx_126) *s eax_99, dwArg04, out ecx_134, out edx_135)
	ecxOut = ecx_134
	edxOut = edx_135
	ebxOut = <invalid>
	ediOut = <invalid>
	return eax_133
l006FBE03:
	ecxOut = ecx_105
	edxOut = edx_103
	ebxOut = <invalid>
	ediOut = <invalid>
	return 0xFFFFFFFF<32>
l006FBDB1:
	word32 edx_162
	ecxOut = fn006E1DC0(out edx_162)
	edxOut = edx_162
	ebxOut = <invalid>
	ediOut = <invalid>
	return 0xFFFFFFFF<32>
fn006FBD90_exit:


word32 fn006FBE60(word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006FD950
//      fn00708410
//      fn00708DC0
//      fn00747610
//      fn00747890
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx edi edx esi Top
// Preserved: esp
fn006FBE60_entry:
l006FBE60:
	word32 eax_8 = Mem6[dwArg04 + 4<32>:word32]
	branch eax_8 == 0xA1D1B8<32> l006FBE98
l006FBE6F:
	word32 edx_235
	word32 ecx_234
	branch fn006D5670(eax_8, 0xA1D1B8<32>, out ecx_234, out edx_235) != 0<32> l006FBE98
l006FBE98:
	branch Mem30[dwArg08 + 4<32>:word32] != 0xA1B450<32> l006FBEAE
l006FBEA6:
	branch Mem30[dwArg08 + 0xC<32>:word32] != 0xFFFFFFFF<32> l006FBEBC
l006FBEAE:
	word32 ecx_237
	word32 edx_238
	branch fn006DE2E0(dwArg08, out ecx_237, out edx_238) == 0xFFFFFFFF<32> l006FBED8
l006FBEBC:
	word32 esp_66
	word32 eax_67
	call Mem57[dwArg04 + 0x18<32>:word32] (retsize: 4;)
		uses: Stack +0004:dwArg04,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +001C:dwArg04,Stack +0020:dwArg08
		defs: eax:eax_67,esp:esp_66
	word32 esp_101 = esp_66 + 0xC<32>
	branch eax_67 == 0<32> l006FBED8
l006FBECB:
	branch Mem64[eax_67 + 8<32>:word32] != 0<32> l006FBEDE
l006FBEDE:
	word32 ecx_79 = Mem64[0x00A6CCF8<p32>:word32]
	word32 edi_78 = Mem64[eax_67 + 4<32>:word32]
	Mem81[ecx_79:word32] = Mem64[ecx_79:word32] + 1<32>
	Mem82[eax_67 + 4<32>:word32] = ecx_79
	word32 ecx_83 = Mem82[eax_67 + 8<32>:word32]
	Mem84[eax_67 + 8<32>:word32] = 0<32>
	Mem86[dwArg04 + 0xC<32>:word32] = Mem84[dwArg04 + 0xC<32>:word32] + 0xFFFFFFFF<32>
	word32 v13_87 = Mem86[ecx_83:word32] + 0xFFFFFFFF<32>
	Mem88[ecx_83:word32] = v13_87
	branch v13_87 != 0<32> l006FBF0C
l006FBF00:
	word32 edx_91 = Mem88[ecx_83 + 4<32>:word32]
	word32 eax_92 = Mem88[edx_91 + 0x18<32>:word32]
	Mem94[esp_66 + 8<32>:word32] = ecx_83
	word32 esp_95
	call eax_92 (retsize: 4;)
		uses: edx:edx_91,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: esp:esp_95
	esp_101 = esp_95 + 4<32>
l006FBF0C:
	word32 v15_105 = Mem104[edi_78:word32] + 0xFFFFFFFF<32>
	Mem106[edi_78:word32] = v15_105
	branch v15_105 != 0<32> l006FBF1D
l006FBF11:
	word32 ecx_109 = Mem106[edi_78 + 4<32>:word32]
	word32 edx_110 = Mem106[ecx_109 + 0x18<32>:word32]
	Mem113[esp_101 - 4<i32>:word32] = edi_78
	call edx_110 (retsize: 4;)
		uses: ecx:ecx_109,Stack +0008:dwArg04,Stack +000C:dwArg08
l006FBF1D:
	return 0<32>
l006FBED1:
	fn006FB760()
l006FBED8:
	return 0xFFFFFFFF<32>
l006FBE81:
	word32 edx_236
	fn006E1DC0(out edx_236)
	return 0xFFFFFFFF<32>
fn006FBE60_exit:


word32 fn006FBF30(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006F5DD0
// MayUse:  Stack +0004:[0..31]
// LiveOut: ebp
// Trashed: SCZO eax ebp ecx edx esi Top
// Preserved: ebx edi esp
fn006FBF30_entry:
l006FBF30:
	word32 eax_9 = Mem7[dwArg04 + 4<32>:word32]
	branch eax_9 == 0xA1D1B8<32> l006FBF58
l006FBF42:
	word32 ecx_274
	word32 edx_275
	branch fn006D5670(eax_9, 0xA1D1B8<32>, out ecx_274, out edx_275) == 0<32> l006FC03E
l006FBF58:
	word32 edi_109 = Mem42[dwArg04 + 0x14<32>:word32]
	word32 esi_37 = Mem35[dwArg04 + 8<32>:word32]
	word32 esp_127 = fp - 0x78<32>
	word32 dwArg04_214 = edi_109
	branch CONVERT(CONVERT(edi_109 != dwArg04 + 0x1C<32>, bool, int8), int8, uint32) == 0<32> l006FBF92
l006FBF92:
	branch esi_37 <= 0<32> l006FC02A
l006FBF9A:
	word32 esi_58 = edi_109
	word32 ecx_59 = 0x18<32>
	word32 edi_60 = fp - 0x60<32>
l006FBFA5:
	branch ecx_59 == 0<32> l006FBFA7
l006FBFA7:
	memset(dwArg04 + 0x1C<32>, 0<32>, 0x60<32>)
	Mem76[dwArg04 + 8<32>:word32] = 0<32>
	Mem77[dwArg04 + 0xC<32>:word32] = 0<32>
	dwArg04_214 = fp - 0x60<32>
	edi_109 = fp - 0x60<32>
l006FBFA5_1:
	Mem85[edi_60:word32] = Mem82[esi_58:word32]
	esi_58 = esi_58 + 4<i32>
	edi_60 = edi_60 + 4<i32>
	ecx_59 = ecx_59 - 1<32>
l006FBF7B:
	memset(dwArg04 + 0x1C<32>, 0<32>, 0x60<32>)
	Mem100[dwArg04 + 8<32>:word32] = 0<32>
	Mem101[dwArg04 + 0xC<32>:word32] = 0<32>
l006FBFD1:
	Mem106[dwArg04 + 0x10<32>:word32] = 7<32>
	Mem108[dwArg04 + 0x14<32>:word32] = dwArg04 + 0x1C<32>
	esp_127 = fp - 0x78<32>
	word32 esi_102 = esi_37
	branch esi_37 <= 0<32> l006FC02A
l006FBFDF:
	word32 edi_110 = edi_109 + 8<32>
l006FBFE2:
	word32 eax_114 = Mem113[edi_110 - 4<32>:word32]
	branch eax_114 == 0<32> l006FC01F
l006FBFE9:
	Mem119[eax_114:word32] = Mem113[eax_114:word32] + 0xFFFFFFFF<32>
	word32 eax_120 = Mem119[edi_110 - 4<32>:word32]
	esi_102 = esi_102 - 1<32>
	branch Mem119[eax_120:word32] != 0<32> l006FC003
l006FBFF7:
	word32 ecx_125 = Mem119[eax_120 + 4<32>:word32]
	word32 edx_126 = Mem119[ecx_125 + 0x18<32>:word32]
	Mem129[esp_127 - 4<i32>:word32] = eax_120
	word32 esp_133
	word32 edx_136
	call edx_126 (retsize: 4;)
		uses: ecx:ecx_125,edx:edx_136,Stack +0008:dwArg04_227
		defs: edx:edx_136,esp:esp_133
	esp_127 = esp_133 + 4<32>
l006FC003:
	word32 eax_143 = Mem142[edi_110:word32]
	branch eax_143 == 0<32> l006FC01F
l006FC009:
	Mem148[eax_143:word32] = Mem142[eax_143:word32] + 0xFFFFFFFF<32>
	word32 eax_149 = Mem148[edi_110:word32]
	branch Mem148[eax_149:word32] != 0<32> l006FC01F
l006FC013:
	word32 ecx_152 = Mem148[eax_149 + 4<32>:word32]
	word32 edx_153 = Mem148[ecx_152 + 0x18<32>:word32]
	Mem156[esp_127 - 4<i32>:word32] = eax_149
	word32 esp_161
	word32 edx_164
	call edx_153 (retsize: 4;)
		uses: ecx:ecx_152,edx:edx_164,Stack +0008:dwArg04_227
		defs: edx:edx_164,esp:esp_161
	esp_127 = esp_161 + 4<32>
l006FC01F:
	edi_110 = edi_110 + 0xC<32>
	branch esi_102 > 0<32> l006FBFE2
l006FC026:
	edi_109 = Mem175[esp_127 + 0x7C<32>:word32]
l006FC02A:
	branch Mem179[esp_127 + 0x14<32>:word32] == 0<32> l006FC03B
l006FC031:
	word32 esp_182 = esp_127 - 4<i32>
	Mem184[esp_182:word32] = edi_109
	free(Mem184[esp_182:(ptr32 void)])
l006FC03B:
	ebp = Mem188[esp_127 + 8<i32>:word32]
l006FC03E:
	return ebp
fn006FBF30_exit:


word32 fn006FC050(word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006F5DD0
//      fn007173A0
//      fn00726340
//      fn00728AC0
//      fn00735890
//      fn00747890
//      fn00747A80
//      fn00747CA0
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31] Stack +0010:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ecx edx Top
// Preserved: ebx edi esi esp
fn006FC050_entry:
l006FC050:
	word32 eax_8 = Mem6[dwArg04 + 4<32>:word32]
	branch eax_8 == 0xA1D1B8<32> l006FC073
l006FC05F:
	word32 ecx_183
	word32 eax_15 = fn006D5670(eax_8, 0xA1D1B8<32>, out ecx_183, out edx)
	branch eax_15 != 0<32> l006FC073
l006FC073:
	word32 eax_32 = Mem30[dwArg08:word32]
	branch eax_32 >= 0<32> l006FC083
l006FC083:
	word32 ecx_37 = Mem30[dwArg04 + 0x10<32>:word32]
	word32 edi_43 = Mem42[dwArg04 + 0x14<32>:word32]
	branch eax_32 > ecx_37 l006FC0A4
l006FC08E:
	word32 edx_46 = edi_43 + 8<32> + eax_32 * 0xC<32>
l006FC095:
	branch Mem42[edx_46:word32] != 0<32> l006FC0A4
l006FC09A:
	eax_32 = eax_32 + 1<32>
	edx_46 = edx_46 + 0xC<32>
	branch eax_32 <= ecx_37 l006FC095
l006FC0A4:
	word32 edx_156 = eax_32 + 1<32>
	Mem63[dwArg08:word32] = edx_156
	branch eax_32 <= ecx_37 l006FC0B3
l006FC0B3:
	branch dwArg0C == 0<32> l006FC0C4
l006FC0BB:
	edx_156 = Mem63[edi_43 + 4<32> + eax_32 * 0xC<32>:word32]
	Mem75[dwArg0C:word32] = edx_156
l006FC0C4:
	branch dwArg10 == 0<32> l006FC0D5
l006FC0CC:
	edx_156 = Mem77[edi_43 + 8<32> + eax_32 * 0xC<32>:word32]
	Mem86[dwArg10:word32] = edx_156
l006FC0D5:
	edxOut = edx_156
	return 1<32>
l006FC0AD:
	edxOut = edx_156
	return 0<32>
l006FC07E:
	edxOut = edx
	return 0<32>
l006FC071:
	edxOut = edx
	return eax_15
fn006FC050_exit:


word32 fn006FC0E0(word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10, word32 dwArg14, ptr32 & ecxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn007389B0
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31] Stack +0010:[0..31] Stack +0014:[0..31]
// LiveOut: eax ecx
// Trashed: SCZO eax ecx edx Top
// Preserved: ebx edi esi esp
fn006FC0E0_entry:
l006FC0E0:
	word32 eax_8 = Mem6[dwArg04 + 4<32>:word32]
	branch eax_8 == 0xA1D1B8<32> l006FC103
l006FC0EF:
	word32 edx_189
	word32 eax_15 = fn006D5670(eax_8, 0xA1D1B8<32>, out ecx, out edx_189)
	branch eax_15 != 0<32> l006FC103
l006FC103:
	word32 eax_32 = Mem30[dwArg08:word32]
	branch eax_32 >= 0<32> l006FC113
l006FC113:
	word32 ecx_37 = Mem30[dwArg04 + 0x10<32>:word32]
	word32 edi_43 = Mem42[dwArg04 + 0x14<32>:word32]
	branch eax_32 > ecx_37 l006FC134
l006FC11E:
	word32 edx_46 = edi_43 + 8<32> + eax_32 * 0xC<32>
l006FC125:
	branch Mem42[edx_46:word32] != 0<32> l006FC134
l006FC12A:
	eax_32 = eax_32 + 1<32>
	edx_46 = edx_46 + 0xC<32>
	branch eax_32 <= ecx_37 l006FC125
l006FC134:
	Mem63[dwArg08:word32] = eax_32 + 1<32>
	branch eax_32 <= ecx_37 l006FC143
l006FC143:
	word32 eax_68 = eax_32 * 3<32>
	Mem73[dwArg14:word32] = Mem63[edi_43 + eax_68 * 4<32>:word32]
	word32 eax_72 = edi_43 + eax_68 * 4<32>
	branch dwArg0C == 0<32> l006FC15F
l006FC15A:
	Mem79[dwArg0C:word32] = Mem73[eax_72 + 4<32>:word32]
l006FC15F:
	branch dwArg10 == 0<32> l006FC16C
l006FC167:
	Mem88[dwArg10:word32] = Mem81[eax_72 + 8<32>:word32]
l006FC16C:
	ecxOut = dwArg10
	return 1<32>
l006FC13D:
	ecxOut = ecx_37
	return 0<32>
l006FC10E:
	ecxOut = ecx
	return 0<32>
l006FC101:
	ecxOut = ecx
	return eax_15
fn006FC0E0_exit:


word32 fn006FCC90(word32 dwArg04, word32 dwArg08, word32 dwArg0C, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006FDE40
//      fn006FDE60
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn006FCC90_entry:
l006FCC90:
	word32 ebp_13 = dwArg04
	branch dwArg04 == 0<32> l006FCF00
l006FCC9F:
	word32 eax_17 = Mem12[dwArg04 + 4<32>:word32]
	branch eax_17 == 0xA1D1B8<32> l006FCCBF
l006FCCA9:
	word32 ecx_821
	branch fn006D5670(eax_17, 0xA1D1B8<32>, out ecx_821, out edx) == 0<32> l006FCF00
l006FCCBF:
	word32 ebx_153 = dwArg08
	branch dwArg08 == 0<32> l006FCF00
l006FCF00:
	word32 edx_56
	fn006E1DC0(out edx_56)
	edxOut = edx_56
	return 0xFFFFFFFF<32>
l006FCCCB:
	word32 eax_69 = Mem36[dwArg08 + 4<32>:word32]
	branch eax_69 == 0xA1D1B8<32> l006FCE37
l006FCCDB:
	word32 ecx_822
	word32 eax_84 = fn006D5670(eax_69, 0xA1D1B8<32>, out ecx_822, out edx)
	branch eax_84 != 0<32> l006FCE37
l006FCE37:
	branch dwArg08 == dwArg04 l006FCEF8
l006FCE3F:
	word32 ecx_100 = Mem99[dwArg08 + 0xC<32>:word32]
	branch ecx_100 == 0<32> l006FCEF8
l006FCE4A:
	edx = Mem99[dwArg04 + 0xC<32>:word32]
	branch edx != 0<32> l006FCE59
l006FCE51:
	dwArg0C = 1<32>
l006FCE59:
	word32 esi_113 = Mem111[dwArg04 + 0x10<32>:word32]
	branch (Mem111[dwArg04 + 8<32>:word32] + ecx_100) * 3<32> < (esi_113 + 2<32>) + esi_113 l006FCE7E
l006FCE6C:
	word32 ecx_835
	branch fn006FBB90((edx + ecx_100) * 2<32>, dwArg04, out ecx_835, out edx) != 0<32> l006FCE14
l006FCE7E:
	word32 dwLoc04_695 = 1<32>
	branch Mem143[dwArg08 + 0x10<32>:word32] < 0<32> l006FCEF8
l006FCE8C:
	word32 ebp_148 = 0<32>
l006FCE90:
	word32 esi_157 = Mem154[ebx_153 + 0x14<32>:word32] + ebp_148
	branch Mem154[esi_157 + 8<32>:word32] == 0<32> l006FCEE5
l006FCE9B:
	branch dwArg0C != 0<32> l006FCEB7
l006FCEA2:
	word32 ecx_837
	branch fn006FBCC0(dwArg04, dwArg04, out ecx_837, out edx) != 0<32> l006FCEE5
l006FCEB7:
	word32 eax_183 = Mem182[esi_157 + 4<32>:word32]
	Mem185[eax_183:word32] = Mem182[eax_183:word32] + 1<32>
	word32 eax_186 = Mem185[esi_157 + 8<32>:word32]
	Mem188[eax_186:word32] = Mem185[eax_186:word32] + 1<32>
	word32 ecx_836
	branch fn006FBA70(Mem188[esi_157 + 4<32>:word32], dwArg04, Mem188[esi_157:word32], Mem188[esi_157 + 8<32>:word32], out ecx_836, out edx) != 0<32> l006FCE14
l006FCEE1:
	ebx_153 = dwArg08
l006FCEE5:
	ebp_148 = ebp_148 + 0xC<32>
	dwLoc04_695 = dwLoc04_838 + 1<32>
	dwLoc04_838 = dwLoc04_695
	branch dwLoc04_838 + 0<32> <= Mem212[ebx_153 + 0x10<32>:word32] l006FCE90
l006FCCF1:
	word32 ecx_823
	word32 eax_230 = fn007038E0(dwArg08, 0x8B0A10<32>, eax_84, out ecx_823, out edx)
	branch eax_230 == 0<32> l006FCE14
l006FCD0A:
	word32 ecx_824
	word32 eax_243 = fn00704B00(eax_230, out ecx_824, out edx)
	word32 v13_248 = Mem240[eax_230:word32] + 0xFFFFFFFF<32>
	Mem249[eax_230:word32] = v13_248
	word32 esp_247 = fp - 0x14<32>
	branch v13_248 != 0<32> l006FCD26
l006FCD1A:
	word32 eax_253 = Mem249[eax_230 + 4<32>:word32]
	word32 ecx_254 = Mem249[eax_253 + 0x18<32>:word32]
	word32 esp_257
	call ecx_254 (retsize: 4;)
		uses: eax:eax_253,ecx:ecx_254,edx:edx_260,Stack +0004:eax_230,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0020:dwArg04,Stack +0024:dwArg08
		defs: edx:edx_260,esp:esp_257
	esp_247 = esp_257 + 4<32>
l006FCD26:
	branch eax_243 == 0<32> l006FCE14
l006FCD2E:
	word32 esp_270 = esp_247 - 4<i32>
	Mem271[esp_270:word32] = eax_243
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_826
	word32 eax_279 = fn00704040(stackArg4, out ecx_826, out edx)
	word32 esi_283 = eax_279
	word32 esp_284 = esp_270 + 4<32>
	branch eax_279 == 0<32> l006FCDCB
l006FCD41:
	word32 esp_308
	branch Mem289[esp_284 + 0x20<32>:word32] != 0<32> l006FCD69
l006FCD48:
	word32 esp_292 = esp_284 - 4<i32>
	Mem294[esp_292:word32] = esi_283
	Mem297[esp_292 - 4<i32>:word32] = ebp_13
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	esp_308 = esp_292 + 4<32>
	word32 ecx_303
	word32 edx_829
	branch fn006FBCC0(stackArg4, dwArg04, out ecx_303, out edx_829) == 0<32> l006FCD69
l006FCD69:
	word32 esp_313 = esp_284 - 4<i32>
	Mem315[esp_313:word32] = esi_283
	Mem318[esp_313 - 4<i32>:word32] = ebx_153
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_324
	word32 eax_325 = fn00704220(stackArg4, dwArg04, out ecx_324, out edx)
	word32 esp_330 = esp_313 + 4<32>
	branch eax_325 == 0<32> l006FCDF2
l006FCDF2:
	word32 v18_334 = Mem318[eax_243:word32] + 0xFFFFFFFF<32>
	Mem335[eax_243:word32] = v18_334
	branch v18_334 != 0<32> l006FCE03
l006FCDF7:
	word32 eax_338 = Mem335[eax_243 + 4<32>:word32]
	word32 ecx_339 = Mem335[eax_338 + 0x18<32>:word32]
	Mem341[esp_313:word32] = eax_243
	word32 esp_342
	call ecx_339 (retsize: 4;)
		uses: eax:eax_338,ecx:ecx_339,edx:edx_345,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: ecx:ecx_343,edx:edx_345,esp:esp_342
	esp_330 = esp_342 + 4<32>
l006FCE03:
	word32 v20_352 = Mem351[esi_283:word32] + 0xFFFFFFFF<32>
	Mem353[esi_283:word32] = v20_352
	branch v20_352 != 0<32> l006FCE14
l006FCE08:
	word32 edx_356 = Mem353[esi_283 + 4<32>:word32]
	word32 eax_357 = Mem353[edx_356 + 0x18<32>:word32]
	Mem360[esp_330 - 4<i32>:word32] = esi_283
	call eax_357 (retsize: 4;)
		uses: ecx:ecx_361,edx:edx_356,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: edx:edx_369
l006FCD79:
	word32 ecx_374 = Mem318[esp_313 + 0x1C<32>:word32]
	Mem376[esp_313:word32] = eax_325
	Mem378[esp_313 - 4<i32>:word32] = esi_283
	Mem380[esp_313 - 8<i32>:word32] = ecx_374
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_382
	word32 edi_834
	word32 ebx_833
	word32 eax_383 = fn006FBD90(stackArg4, dwArg04, dwArg08, out ecx_382, out edx, out ebx_833, out edi_834)
	word32 v17_388 = Mem380[esi_283:word32] + 0xFFFFFFFF<32>
	Mem389[esi_283:word32] = v17_388
	esp_308 = esp_313 + 4<32>
	branch v17_388 != 0<32> l006FCD9B
l006FCD8F:
	word32 edx_393 = Mem389[esi_283 + 4<32>:word32]
	word32 eax_394 = Mem389[edx_393 + 0x18<32>:word32]
	Mem396[esp_313:word32] = esi_283
	word32 esp_397
	call eax_394 (retsize: 4;)
		uses: ecx:ecx_382,edx:edx_393,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: edx:edx_400,esp:esp_397
	esp_308 = esp_397 + 4<32>
l006FCD9B:
	word32 edx_423
	word32 v19_407 = Mem406[eax_325:word32] + 0xFFFFFFFF<32>
	Mem408[eax_325:word32] = v19_407
	branch v19_407 != 0<32> l006FCDAC
l006FCDA0:
	word32 ecx_411 = Mem408[eax_325 + 4<32>:word32]
	word32 edx_412 = Mem408[ecx_411 + 0x18<32>:word32]
	Mem415[esp_308 - 4<i32>:word32] = eax_325
	word32 esp_420
	call edx_412 (retsize: 4;)
		uses: ecx:ecx_411,edx:edx_423,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: edx:edx_423,esp:esp_420
	esp_308 = esp_420 + 4<32>
	edx = edx_423
l006FCDAC:
	branch eax_383 < 0<32> l006FCE1D
l006FCE1D:
	word32 v22_434 = Mem433[eax_243:word32] + 0xFFFFFFFF<32>
	Mem435[eax_243:word32] = v22_434
	branch v22_434 != 0<32> l006FCE14
l006FCE14:
	edxOut = edx
	return 0xFFFFFFFF<32>
l006FCE22:
	word32 ecx_460 = Mem435[eax_243 + 4<32>:word32]
	word32 edx_461 = Mem435[ecx_460 + 0x18<32>:word32]
	Mem463[esp_308 - 4<i32>:word32] = eax_243
	word32 edx_470
	call edx_461 (retsize: 4;)
		uses: ecx:ecx_460,edx:edx_470,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: edx:edx_470
	edxOut = edx_470
	return 0xFFFFFFFF<32>
l006FCDB0:
	ebx_153 = Mem433[esp_308 + 0x1C<32>:word32]
	ebp_13 = Mem433[esp_308 + 0x18<32>:word32]
l006FCD56:
	word32 v14_489 = Mem297[esi_283:word32] + 0xFFFFFFFF<32>
	Mem490[esi_283:word32] = v14_489
	branch v14_489 != 0<32> l006FCDB8
l006FCD5B:
	word32 edx_493 = Mem490[esi_283 + 4<32>:word32]
	word32 eax_494 = Mem490[edx_493 + 0x18<32>:word32]
	Mem496[esp_292:word32] = esi_283
	word32 esp_497
	call eax_494 (retsize: 4;)
		uses: ecx:ecx_303,edx:edx_493,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: esp:esp_497
	esp_308 = esp_497 + 4<32>
l006FCDB8:
	word32 esp_506 = esp_308 - 4<i32>
	Mem508[esp_506:word32] = eax_243
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_831
	word32 eax_518 = fn00704040(stackArg4, out ecx_831, out edx)
	esi_283 = eax_518
	esp_284 = esp_506 + 4<32>
	branch eax_518 != 0<32> l006FCD41
l006FCDCB:
	word32 v16_529 = Mem528[eax_243:word32] + 0xFFFFFFFF<32>
	Mem530[eax_243:word32] = v16_529
	branch v16_529 != 0<32> l006FCDDC
l006FCDD0:
	word32 eax_533 = Mem530[eax_243 + 4<32>:word32]
	word32 ecx_534 = Mem530[eax_533 + 0x18<32>:word32]
	Mem537[esp_284 - 4<i32>:word32] = eax_243
	call ecx_534 (retsize: 4;)
		uses: eax:eax_533,ecx:ecx_534,edx:edx_545,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: edx:edx_545
l006FCDDC:
	branch fn006E0FC0() == 0<32> l006FCEF8
l006FCEF8:
	edxOut = edx
	return 0<32>
l006FCDE9:
	edxOut = edx
	return 0xFFFFFFFF<32>
fn006FCC90_exit:


word32 fn006FCF20(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E5C00
//      fn006F9540
//      fn007276E0
//      fn00728AC0
//      fn00728B50
//      fn00728BE0
//      fn00728E40
//      fn00735890
//      fn007389B0
// MayUse:  Stack +0004:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx edx Top
// Preserved: esi esp
fn006FCF20_entry:
l006FCF20:
	branch dwArg04 == 0<32> l006FCF4A
l006FCF29:
	word32 eax_11 = Mem6[dwArg04 + 4<32>:word32]
	branch eax_11 == 0xA1D1B8<32> l006FCF45
l006FCF33:
	word32 ecx_93
	word32 edx_94
	branch fn006D5670(eax_11, 0xA1D1B8<32>, out ecx_93, out edx_94) == 0<32> l006FCF4A
l006FCF4A:
	word32 edx_92
	fn006E1DC0(out edx_92)
	return 0xFFFFFFFF<32>
l006FCF45:
	return Mem49[dwArg04 + 0xC<32>:word32]
fn006FCF20_exit:


word32 fn006FD8B0(word32 dwArg04, word32 dwArg08, ptr32 & ecxOut, ptr32 & edxOut, ptr32 & esiOut, ptr32 & ediOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E1970
//      fn006E19F0
//      fn006E7CE0
//      fn006F5DD0
//      fn006F62D0
//      fn006F63A0
//      fn006F6440
//      fn006F6490
//      fn006F6EA0
//      fn006F7100
//      fn006F7810
//      fn006F82C0
//      fn006F8440
//      fn00708C10
//      fn00708DC0
//      fn0070BCC0
//      fn00715DD0
//      fn00715DF0
//      fn00715E50
//      fn00716A00
//      fn00717280
//      fn0074EFB0
//      fn0074F9E0
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax ecx edi edx esi
// Trashed: SCZO eax ecx edi edx esi Top
// Preserved: esp
fn006FD8B0_entry:
l006FD8B0:
	word32 ecx_13
	word32 edx_14
	word32 eax_12 = fn006ECAC0(dwArg08, out ecx_13, out edx_14)
	branch eax_12 != 0<32> l006FD8C6
l006FD8C6:
	word32 ecx_32
	word32 edx_33
	word32 eax_31 = fn006FBCC0(dwArg04, eax_12, out ecx_32, out edx_33)
	word32 v11_37 = Mem29[eax_12:word32] + 0xFFFFFFFF<32>
	Mem38[eax_12:word32] = v11_37
	branch v11_37 != 0<32> l006FD8E8
l006FD8DC:
	word32 edx_42 = Mem38[eax_12 + 4<32>:word32]
	call Mem38[edx_42 + 0x18<32>:word32] (retsize: 4;)
		uses: edx:edx_42,Stack +0004:eax_12,Stack +000C:dwArg08,Stack +0014:dwArg04,Stack +0018:dwArg08
		defs: ecx:ecx_48,edx:edx_49
l006FD8E8:
	ecxOut = ecx_32
	edxOut = edx_33
	esiOut = <invalid>
	ediOut = <invalid>
	return eax_31
l006FD8C4:
	ecxOut = ecx_13
	edxOut = edx_14
	esiOut = <invalid>
	ediOut = <invalid>
	return eax_12
fn006FD8B0_exit:


word32 fn006FD8F0(word32 dwArg04, word32 dwArg08, word32 dwArg0C, ptr32 & ecxOut, ptr32 & edxOut, ptr32 & esiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E9FA0
//      fn006F5DD0
//      fn006F62D0
//      fn006F63A0
//      fn006F6490
//      fn006F6D50
//      fn006F70C0
//      fn006F7100
//      fn006F8960
//      fn0070BCC0
//      fn00715E50
//      fn00717180
//      fn0073AFB0
//      fn0074E190
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut: eax ecx edx esi
// Trashed: SCZO eax ecx edx esi Top
// Preserved: esp
fn006FD8F0_entry:
l006FD8F0:
	word32 edx_13
	word32 ecx_131
	word32 eax_12 = fn006ECAC0(dwArg08, out ecx_131, out edx_13)
	branch eax_12 != 0<32> l006FD90A
l006FD90A:
	word32 edx_132
	fn006EC890(fp - 4<32>, out edx_132)
	word32 ecx_43
	word32 ebx_133
	word32 edi_134
	word32 edx_45
	word32 eax_44 = fn006FBD90(dwArg04, eax_12, dwArg08, out ecx_43, out edx_45, out ebx_133, out edi_134)
	Mem51[eax_12:word32] = Mem41[eax_12:word32] + 0xFFFFFFFF<32>
	branch Mem51[eax_12:word32] != 0<32> l006FD949
l006FD93D:
	word32 edx_56 = Mem51[eax_12 + 4<32>:word32]
	call Mem58[edx_56 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_43,edx:edx_56,Stack +0004:eax_12,Stack +000C:dwArg08,Stack +0014:dwArg04,Stack +0018:dwArg08,Stack +001C:dwArg0C
		defs: edx:edx_63
l006FD949:
	ecxOut = <invalid>
	edxOut = edx_45
	esiOut = <invalid>
	return eax_44
l006FD905:
	ecxOut = <invalid>
	edxOut = edx_13
	esiOut = <invalid>
	return 0xFFFFFFFF<32>
fn006FD8F0_exit:


word32 fn006FD950(word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006F6440
//      fn00715E50
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx edi edx esi Top
// Preserved: esp
fn006FD950_entry:
l006FD950:
	word32 edx_111
	word32 ecx_110
	word32 eax_12 = fn006ECAC0(dwArg08, out ecx_110, out edx_111)
	branch eax_12 != 0<32> l006FD969
l006FD969:
	word32 eax_31 = fn006FBE60(dwArg04, eax_12)
	word32 v11_37 = Mem29[eax_12:word32] + 0xFFFFFFFF<32>
	Mem38[eax_12:word32] = v11_37
	branch v11_37 != 0<32> l006FD98B
l006FD97F:
	word32 edx_42 = Mem38[eax_12 + 4<32>:word32]
	call Mem38[edx_42 + 0x18<32>:word32] (retsize: 4;)
		uses: edx:edx_42,Stack +0004:eax_12,Stack +000C:dwArg08,Stack +0014:dwArg04,Stack +0018:dwArg08
l006FD98B:
	return eax_31
l006FD964:
	return 0xFFFFFFFF<32>
fn006FD950_exit:


word32 fn006FDCC0(ptr32 & ecxOut, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E99A0
//      fn006EC890
//      fn006F62D0
//      fn006FDE60
//      fn00707950
//      fn00708DC0
//      fn0070B600
//      fn00717180
//      fn00717230
//      fn00726260
//      fn00726340
//      fn00728E40
//      fn00736590
//      fn007367D0
//      fn0073AFB0
//      fn0073B3D0
//      fn00747330
//      fn00747CA0
//      fn00747F60
//      fn00748670
//      fn0074E980
// MayUse: 
// LiveOut: eax ecx edx
// Trashed: SCZO eax ebx ecx edx esi Top
// Preserved: edi esp
fn006FDCC0_entry:
l006FDCC0:
	branch Mem6[0x00A6CCF8<p32>:word32] != 0<32> l006FDCE5
l006FDCCB:
	word32 ecx_14
	word32 edx_15
	word32 eax_13 = fn006ECAC0(0x8D646C<32>, out ecx_14, out edx_15)
	Mem20[0x00A6CCF8<p32>:word32] = eax_13
	branch eax_13 != 0<32> l006FDCE5
l006FDCE5:
	word32 esi_45
	word32 eax_23 = Mem22[0x00A6CCFC<p32>:word32]
	branch eax_23 == 0<32> l006FDD75
l006FDD75:
	word32 ecx_41
	word32 edx_42
	word32 eax_40 = fn006FEF30(0xA1D1B8<32>, out ecx_41, out edx_42)
	esi_45 = eax_40
	branch eax_40 != 0<32> l006FDD0E
l006FDD88:
	ecxOut = ecx_41
	edxOut = edx_42
	return 0<32>
l006FDCF4:
	esi_45 = Mem34[eax_23 * 4<32> + 0xA6CBB4<32>:word32]
	Mem61[0x00A6CCFC<p32>:word32] = eax_23 - 1<32>
	Mem62[esi_45:word32] = 1<32>
	branch Mem34[esi_45 + 8<32>:word32] == 0<32> l006FDD2D
l006FDD0E:
	word32 edi_71 = esi_45 + 0x1C<32>
	memset(edi_71, 0<32>, 0x60<32>)
	Mem75[esi_45 + 0x10<32>:word32] = 7<32>
	Mem76[esi_45 + 0x14<32>:word32] = edi_71
	Mem77[esi_45 + 0xC<32>:word32] = 0<32>
	Mem78[esi_45 + 8<32>:word32] = 0<32>
l006FDD2D:
	Mem83[esi_45 + 0x18<32>:word32] = 0x6FB960<32>
	word32 edi_82 = esi_45 - 0x10<32>
	branch Mem83[edi_82 + 8<32>:word32] == 0xFFFFFFFE<32> l006FDD4A
l006FDD3D:
	fn006E86F0(0x8D0E04<32>)
l006FDD4A:
	Mem97[edi_82 + 8<32>:word32] = 0xFFFFFFFD<32>
	Mem99[edi_82:word32] = Mem97[0x00A1D558<p32>:word32]
	word32 ecx_100 = Mem99[0x00A1D558<p32>:word32]
	word32 eax_101 = Mem99[ecx_100 + 4<32>:word32]
	Mem102[edi_82 + 4<32>:word32] = eax_101
	Mem103[eax_101:word32] = edi_82
	word32 edx_104 = Mem103[0x00A1D558<p32>:word32]
	Mem105[edx_104 + 4<32>:word32] = edi_82
	ecxOut = ecx_100
	edxOut = edx_104
	return esi_45
l006FDCE1:
	ecxOut = ecx_14
	edxOut = edx_15
	return 0<32>
fn006FDCC0_exit:


word32 fn006FDE40()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006F7810
//      fn00747CA0
// MayUse: 
// LiveOut: eax
// Trashed: SCZO eax ecx Top
// Preserved: esp
fn006FDE40_entry:
l006FDE40:
	word32 edx_31
	return fn006FCC90(dwArg04, dwArg08, 1<32>, out edx_31)
fn006FDE40_exit:


word32 fn006FDE60(word32 dwArg04, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006F62D0
//      fn00707950
// MayUse:  Stack +0004:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ecx edi edx esi Top
// Preserved: esp
fn006FDE60_entry:
l006FDE60:
	branch dwArg04 == 0<32> l006FDEBC
l006FDE69:
	word32 eax_11 = Mem6[dwArg04 + 4<32>:word32]
	branch eax_11 == 0xA1D1B8<32> l006FDE85
l006FDE73:
	word32 edx_161
	word32 ecx_160
	branch fn006D5670(eax_11, 0xA1D1B8<32>, out ecx_160, out edx_161) == 0<32> l006FDEBC
l006FDEBC:
	word32 edx_40
	fn006E1DC0(out edx_40)
	edxOut = edx_40
	return 0<32>
l006FDE85:
	word32 ecx_159
	word32 edx_127
	word32 eax_56 = fn006FDCC0(out ecx_159, out edx_127)
	branch eax_56 == 0<32> l006FDEB7
l006FDE91:
	branch fn006FCC90(eax_56, dwArg04, 1<32>, out edx_127) != 0<32> l006FDEA6
l006FDEA6:
	word32 v10_81 = Mem70[eax_56:word32] + 0xFFFFFFFF<32>
	Mem82[eax_56:word32] = v10_81
	branch v10_81 != 0<32> l006FDEB7
l006FDEAB:
	word32 eax_85 = Mem82[eax_56 + 4<32>:word32]
	call Mem82[eax_85 + 0x18<32>:word32] (retsize: 4;)
		uses: eax:eax_85,Stack +0004:eax_56,Stack +0008:dwArg04,Stack +0014:dwArg04
		defs: edx:edx_93
l006FDEB7:
	edxOut = edx_127
	return 0<32>
l006FDEA1:
	edxOut = edx_127
	return eax_56
fn006FDE60_exit:


void fn006FE010(word32 ebx, word32 edi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006FE400
// MayUse:  ebx:[0..31] edi:[0..31]
// LiveOut:
// Trashed: SCZO eax ecx Top
// Preserved: esi esp
fn006FE010_entry:
l006FE010:
	word32 esp_29 = fp - 4<i32>
	word32 esi_11 = Mem6[ebx:word32]
	branch esi_11 == ebx l006FE061
l006FE017:
	word32 eax_16
	branch Mem12[esi_11 + 8<32>:word32] == 0<32> l006FE03D
l006FE03D:
	word32 ecx_15 = Mem12[esi_11 + 4<32>:word32]
	eax_16 = Mem12[esi_11:word32]
	Mem17[ecx_15:word32] = eax_16
	Mem18[eax_16 + 4<32>:word32] = ecx_15
	word32 ecx_20 = Mem18[edi + 4<32>:word32]
	Mem21[esi_11 + 4<32>:word32] = ecx_20
	Mem22[edi + 4<32>:word32] = esi_11
	Mem23[ecx_20:word32] = esi_11
	Mem24[esi_11:word32] = edi
	Mem25[esi_11 + 8<32>:word32] = 0xFFFFFFFC<32>
l006FE01D:
	word32 ecx_27 = Mem12[Mem12[esi_11 + 0x14<32>:word32] + 0x5C<32>:word32]
	word32 esp_30 = esp_29 - 4<i32>
	Mem32[esp_30:word32] = ebx
	Mem34[esp_30 - 4<i32>:word32] = 0x6FDFB0<32>
	word32 eax_28 = esi_11 + 0x10<32>
	Mem36[esp_30 - 8<i32>:word32] = eax_28
	Mem37[esi_11 + 8<32>:word32] = 0xFFFFFFFD<32>
	word32 esp_39
	call ecx_27 (retsize: 4;)
		uses: eax:eax_28,ecx:ecx_27
		defs: esp:esp_39
	eax_16 = Mem37[esi_11:word32]
	esp_29 = esp_39 + 0xC<32>
l006FE05B:
	esi_11 = eax_16
	branch eax_16 != ebx l006FE017
l006FE061:
	return
fn006FE010_exit:


void fn006FE070(word32 edi, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006FE400
// MayUse:  edi:[0..31] Stack +0004:[0..31]
// LiveOut:
// Trashed: SCZO eax ebx ecx edx Top
// Preserved: ebp edi esi esp
fn006FE070_entry:
l006FE070:
	word32 esi_11 = Mem10[dwArg04:word32]
	branch esi_11 == dwArg04 l006FE0F7
l006FE07D:
l006FE080:
	word32 eax_34
	word32 eax_21 = Mem20[esi_11 + 0x14<32>:word32]
	word32 ebx_23 = Mem20[esi_11:word32]
	word32 ecx_24 = esi_11 + 0x10<32>
	branch eax_21 != 0xA1EB98<32> l006FE0A6
l006FE0A6:
	branch (Mem20[eax_21 + 0x54<32>:word32] & 0x200<32>) == 0<32> l006FE0BE
l006FE0BE:
	branch eax_21 != 0xA2EE18<32> l006FE0F0
l006FE0C5:
	eax_34 = fn00750160(ecx_24)
l006FE0AF:
	eax_34 = CONVERT(CONVERT(Mem20[eax_21 + 0xBC<32>:word32] != 0<32>, bool, int8), int8, uint32)
l006FE08F:
	eax_34 = fn0070C9E0(ecx_24) == 0<32>
l006FE0CE:
	branch eax_34 == 0<32> l006FE0F0
l006FE0D2:
	word32 eax_77 = Mem76[esi_11 + 4<32>:word32]
	word32 ecx_78 = Mem76[esi_11:word32]
	Mem79[eax_77:word32] = ecx_78
	Mem80[ecx_78 + 4<32>:word32] = eax_77
	word32 eax_82 = Mem80[edi + 4<32>:word32]
	Mem83[esi_11 + 4<32>:word32] = eax_82
	Mem84[edi + 4<32>:word32] = esi_11
	Mem85[eax_82:word32] = esi_11
	Mem86[esi_11:word32] = edi
	Mem87[esi_11 + 8<32>:word32] = 0xFFFFFFFD<32>
l006FE0F0:
	esi_11 = ebx_23
	branch ebx_23 != dwArg04 l006FE080
l006FE0F6:
l006FE0F7:
	return
fn006FE070_exit:


word32 fn006FE160(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006FE400
// MayUse:  Stack +0004:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn006FE160_entry:
l006FE160:
	word32 dwLoc0C_227 = fp - 0x10<32>
	word32 ecx_8 = dwArg04
	word32 edi_12 = Mem11[dwArg04:word32]
	word32 eax_13 = 0<32>
	branch edi_12 == dwArg04 l006FE28F
l006FE186:
l006FE190:
	word32 eax_30 = Mem29[edi_12 + 0x14<32>:word32]
	word32 ebp_33 = Mem29[edi_12:word32]
	branch (Mem29[eax_30 + 0x54<32>:byte] & 0x40<8>) == 0<8> l006FE1F9
l006FE19B:
	word32 ebx_35 = Mem29[eax_30 + 0x68<32>:word32]
	branch ebx_35 <= 0<32> l006FE1F9
l006FE1A2:
	word32 esi_38 = Mem29[ebx_35 + 0x10<32> + edi_12:word32]
	branch esi_38 == 0<32> l006FE1F9
l006FE1AA:
l006FE1B0:
	fn006F9C70(esi_38)
	branch Mem46[esi_38 + 0xC<32>:word32] == 0<32> l006FE1ED
l006FE1BF:
	branch Mem46[esi_38 - 8<32>:word32] == 0xFFFFFFFC<32> l006FE1ED
l006FE1C5:
	Mem60[esi_38:word32] = Mem46[esi_38:word32] + 1<32>
	word32 ecx_62 = Mem60[esi_38 - 0xC<32>:word32]
	word32 edx_63 = Mem60[esi_38 - 0x10<32>:word32]
	Mem65[ecx_62:word32] = edx_63
	Mem66[edx_63 + 4<32>:word32] = ecx_62
	word32 eax_64 = esi_38 - 0x10<32>
	Mem68[eax_64 + 4<32>:word32] = dwLoc0C_227
	Mem72[dwLoc0C_227:word32] = eax_64
	Mem73[eax_64:word32] = fp - 0x10<32>
	dwLoc0C_227 = eax_64
l006FE1ED:
	esi_38 = Mem78[ebx_35 + 0x10<32> + edi_12:word32]
	branch esi_38 != 0<32> l006FE1B0
l006FE1F5:
	ecx_8 = dwArg04
l006FE1F9:
	word32 esp_104 = fp - 0x24<32>
	edi_12 = ebp_33
	branch ebp_33 != ecx_8 l006FE190
l006FE1FF:
	word32 eax_100 = fp - 0x10<32>
	branch fp - 0x10<32> == fp - 0x10<32> l006FE288
l006FE20B:
l006FE210:
	word32 esp_132
	word32 ebx_102 = Mem101[eax_100 + 0x1C<32>:word32]
	word32 esp_105 = esp_104 - 4<i32>
	Mem106[esp_105:word32] = 0<32>
	word32 edi_103 = eax_100 + 0x10<32>
	Mem108[esp_105 - 4<i32>:word32] = edi_103
	Mem110[esp_105 - 8<i32>:word32] = ebx_102
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_293
	word32 edx_294
	word32 eax_117 = fn00703AF0(stackArg4, out ecx_293, out edx_294)
	esp_104 = esp_105 + 4<32>
	branch eax_117 != 0<32> l006FE230
l006FE230:
	word32 v15_124 = Mem110[eax_117:word32] + 0xFFFFFFFF<32>
	Mem125[eax_117:word32] = v15_124
	branch v15_124 != 0<32> l006FE241
l006FE235:
	word32 edx_128 = Mem125[eax_117 + 4<32>:word32]
	Mem130[esp_105:word32] = eax_117
	call Mem130[edx_128 + 0x18<32>:word32] (retsize: 4;)
		uses: edx:edx_128,Stack +0008:dwArg04
		defs: esp:esp_132
l006FE228:
	Mem139[esp_105:word32] = ebx_102
	fn006E1780()
	esp_132 = esp_105
l006FE23E:
	esp_104 = esp_132 + 4<32>
l006FE241:
	word32 v16_153 = Mem151[edi_103:word32] + 0xFFFFFFFF<32>
	Mem154[edi_103:word32] = v16_153
	branch v16_153 != 0<32> l006FE252
l006FE246:
	word32 ecx_157 = Mem154[edi_103 + 4<32>:word32]
	word32 edx_158 = Mem154[ecx_157 + 0x18<32>:word32]
	Mem161[esp_104 - 4<i32>:word32] = edi_103
	word32 esp_170
	call edx_158 (retsize: 4;)
		uses: ecx:ecx_157,Stack +0008:dwArg04
		defs: esp:esp_170
	esp_104 = esp_170 + 4<32>
l006FE252:
	eax_100 = Mem179[esp_104 + 0x14<32>:word32]
	branch eax_100 != eax_100 l006FE27B
l006FE27B:
	Mem185[esp_104 + 0x10<32>:word32] = Mem179[esp_104 + 0x10<32>:word32] + 1<32>
l006FE25A:
	word32 eax_187 = Mem179[eax_100 + 4<32>:word32]
	word32 ecx_188 = Mem179[eax_100:word32]
	Mem189[eax_187:word32] = ecx_188
	Mem190[ecx_188 + 4<32>:word32] = eax_187
	word32 ecx_191 = Mem190[esp_104 + 0x2C<32>:word32]
	word32 eax_192 = Mem190[ecx_191 + 4<32>:word32]
	Mem193[eax_100 + 4<32>:word32] = eax_192
	Mem194[ecx_191 + 4<32>:word32] = eax_100
	Mem195[eax_192:word32] = eax_100
	Mem196[eax_100:word32] = ecx_191
	eax_100 = Mem196[esp_104 + 0x14<32>:word32]
l006FE280:
	branch eax_100 != esp_104 + 0x14<32> l006FE210
l006FE288:
	eax_13 = Mem204[esp_104 + 0x10<32>:word32]
l006FE28F:
	return eax_13
fn006FE160_exit:


word32 fn006FE2A0(word32 ebx, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006FE400
// MayUse:  ebx:[0..31] Stack +0004:[0..31]
// LiveOut: ecx
// Trashed: SCZO eax ebp ecx edi edx esi Top
// Preserved: esp
fn006FE2A0_entry:
l006FE2A0:
	word32 edi_143 = Mem15[ebx:word32]
	branch Mem0[0x00A6CD0C<p32>:word32] != 0<32> l006FE2D2
l006FE2B2:
	word32 edx_247
	word32 eax_22 = fn006F2650(0<32>, out edx_247)
	Mem30[0x00A6CD0C<p32>:word32] = eax_22
	branch eax_22 != 0<32> l006FE2D2
l006FE2C5:
	fn006E86F0(0x8D654C<32>)
l006FE2D2:
	word32 esp_107 = fp - 12<i32>
	branch edi_143 == ebx l006FE353
l006FE2D6:
l006FE2E0:
	word32 esi_49 = edi_143 + 0x10<32>
	branch (Mem45[0x00A6CD04<p32>:byte] & 0x20<8>) != 0<8> l006FE339
l006FE2EC:
	word32 eax_62
	word32 eax_51 = Mem45[esi_49 + 4<32>:word32]
	branch eax_51 != 0xA1EB98<32> l006FE30D
l006FE30D:
	branch (Mem45[eax_51 + 0x54<32>:word32] & 0x200<32>) == 0<32> l006FE325
l006FE325:
	branch eax_51 != 0xA2EE18<32> l006FE34D
l006FE32C:
	word32 esp_60 = esp_107 - 4<i32>
	Mem61[esp_60:word32] = esi_49
	eax_62 = fn00750160(Mem61[esp_60:word32])
l006FE316:
	eax_62 = CONVERT(CONVERT(Mem45[eax_51 + 0xBC<32>:word32] != 0<32>, bool, int8), int8, uint32)
l006FE2F6:
	word32 esp_79 = esp_107 - 4<i32>
	Mem80[esp_79:word32] = Mem45[0x00A6CD14<p32>:word32]
	Mem82[esp_79 - 4<i32>:word32] = esi_49
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	eax_62 = fn0070C9E0(stackArg4) == 0<32>
l006FE335:
	branch eax_62 == 0<32> l006FE34D
l006FE339:
	word32 edx_105 = Mem103[0x00A6CD0C<p32>:word32]
	word32 esp_108 = esp_107 - 4<i32>
	Mem111[esp_108:word32] = esi_49
	Mem113[esp_108 - 4<i32>:word32] = edx_105
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	esp_107 = fp - 0xC<32>
	word32 ecx_124
	word32 edx_249
	branch fn006F2A10(stackArg4, dwArg04, out ecx_124, out edx_249) < 0<32> l006FE374
l006FE374:
	return ecx_124
l006FE34D:
	edi_143 = Mem142[edi_143:word32]
	branch edi_143 != ebx l006FE2E0
l006FE353:
	word32 ecx_150 = Mem148[ebx:word32]
	branch ecx_150 == ebx l006FE369
l006FE359:
	word32 eax_156 = Mem148[dwArg04 + 4<32>:word32]
	Mem157[eax_156:word32] = ecx_150
	Mem158[ecx_150 + 4<32>:word32] = eax_156
	word32 eax_159 = Mem158[ebx + 4<32>:word32]
	Mem160[dwArg04 + 4<32>:word32] = eax_159
	Mem161[eax_159:word32] = dwArg04
l006FE369:
	Mem172[ebx + 4<32>:word32] = ebx
	Mem173[ebx:word32] = ebx
	return ecx_150
fn006FE2A0_exit:


void fn006FE380(word32 ebx, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006FE400
// MayUse:  ebx:[0..31] Stack +0004:[0..31]
// LiveOut:
// Trashed: SCZO eax ebp ecx edi edx esi Top
// Preserved: esp
fn006FE380_entry:
l006FE380:
	word32 esi_11 = Mem10[dwArg04:word32]
	branch esi_11 == dwArg04 l006FE3FC
l006FE38D:
	word32 esp_14 = fp - 12<i32>
l006FE390:
	word32 edi_22 = esi_11 + 0x10<32>
	branch (Mem18[0x00A6CD04<p32>:byte] & 0x20<8>) == 0<8> l006FE3AD
l006FE3AD:
	word32 eax_25 = Mem18[Mem18[edi_22 + 4<32>:word32] + 0x60<32>:word32]
	branch eax_25 == 0<32> l006FE3D1
l006FE3B7:
	Mem30[edi_22:word32] = Mem18[edi_22:word32] + 1<32>
	Mem34[esp_14 - 4<i32>:word32] = edi_22
	word32 esp_37
	word32 eax_38
	word32 ecx_39
	word32 edx_40
	call eax_25 (retsize: 4;)
		uses: eax:eax_38,ecx:ecx_39,edx:edx_40,Stack +0008:dwArg04
		defs: eax:eax_38,ecx:ecx_39,edx:edx_40,esp:esp_37
	word32 v14_44 = Mem34[edi_22:word32] + 0xFFFFFFFF<32>
	Mem45[edi_22:word32] = v14_44
	esp_14 = esp_37 + 4<32>
	branch v14_44 != 0<32> l006FE3D1
l006FE3C5:
	word32 edx_48 = Mem45[edi_22 + 4<32>:word32]
	word32 eax_49 = Mem45[edx_48 + 0x18<32>:word32]
	Mem51[esp_37:word32] = edi_22
	word32 esp_52
	word32 eax_53
	word32 ecx_54
	call eax_49 (retsize: 4;)
		uses: eax:eax_53,ecx:ecx_54,edx:edx_48,Stack +0008:dwArg04
		defs: eax:eax_53,ecx:ecx_54,esp:esp_52
	esp_14 = esp_52 + 4<32>
l006FE39C:
	word32 eax_60 = Mem18[0x00A6CD0C<p32>:word32]
	word32 esp_61 = esp_14 - 4<i32>
	Mem62[esp_61:word32] = edi_22
	Mem64[esp_61 - 4<i32>:word32] = eax_60
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_154
	word32 edx_155
	fn006F2A10(stackArg4, dwArg04, out ecx_154, out edx_155)
	esp_14 = esp_61 + 4<32>
l006FE3D1:
	branch Mem74[dwArg04:word32] != esi_11 l006FE3F4
l006FE3D6:
	word32 eax_78 = Mem74[esi_11 + 4<32>:word32]
	word32 ecx_79 = Mem74[esi_11:word32]
	Mem80[eax_78:word32] = ecx_79
	Mem81[ecx_79 + 4<32>:word32] = eax_78
	word32 eax_84 = Mem81[ebx + 4<32>:word32]
	Mem85[esi_11 + 4<32>:word32] = eax_84
	Mem86[ebx + 4<32>:word32] = esi_11
	Mem87[eax_84:word32] = esi_11
	Mem88[esi_11:word32] = ebx
	Mem89[esi_11 + 8<32>:word32] = 0xFFFFFFFD<32>
l006FE3F4:
	esi_11 = Mem91[dwArg04:word32]
	branch esi_11 != dwArg04 l006FE390
l006FE3FB:
l006FE3FC:
	return
fn006FE380_exit:


word32 fn006FE400(word32 dwArg04, ptr32 & ebpOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006FE8B0
//      fn006FEE00
// MayUse:  Stack +0004:[0..31]
// LiveOut: ebp ecx
// Trashed: SCZO eax ebp ebx ecx edi edx esi FPU -1 Top
// Preserved: esp
fn006FE400_entry:
l006FE400:
	branch Mem18[0x00A6CD14<p32>:word32] != 0<32> l006FE445
l006FE422:
	word32 edx_1249
	word32 ecx_1248
	word32 eax_28 = fn006F1A70(out ecx_1248, out edx_1249)
	Mem34[0x00A6CD14<p32>:word32] = eax_28
	branch eax_28 != 0<32> l006FE445
l006FE438:
	fn006E86F0(0x8D6668<32>)
l006FE445:
	word32 esp_104 = fp - 0x40<32>
	branch (Mem49[0x00A6CD04<p32>:byte] & 1<8>) == 0<8> l006FE4EE
l006FE457:
	word32 eax_55 = Mem49[0x00A6CD18<p32>:word32]
	branch eax_55 == 0<32> l006FE49A
l006FE460:
	word32 ecx_1252
	word32 edx_1253
	word32 eax_70 = fn007038E0(eax_55, 0<32>, 0<32>, out ecx_1252, out edx_1253)
	esp_104 = fp - 0x40<32>
	branch eax_70 != 0<32> l006FE47C
l006FE47C:
	real64 rLoc1_1254
	fn006FF3E0(eax_70, out rLoc1_1254)
	word32 v14_90 = Mem87[eax_70:word32] + 0xFFFFFFFF<32>
	Mem91[eax_70:word32] = v14_90
	esp_104 = fp - 0x40<32>
	branch v14_90 != 0<32> l006FE49A
l006FE48E:
	word32 eax_94 = Mem91[eax_70 + 4<32>:word32]
	word32 esp_98
	call Mem91[eax_94 + 0x18<32>:word32] (retsize: 4;)
		uses: eax:eax_94,Stack +0004:eax_70,Stack +0008:0<32>,Stack +004C:0<32>
		defs: esp:esp_98
	esp_104 = esp_98 + 4<32>
l006FE475:
	word32 edx_1256
	word32 ecx_1255
	fn006E1160(out ecx_1255, out edx_1256)
l006FE49A:
	word32 esp_114 = esp_104 - 4<i32>
	Mem116[esp_114:word32] = dwArg04
	Mem118[esp_114 - 4<i32>:word32] = 0x8D6644<32>
	word32 edx_1250
	fn00716B20(out edx_1250)
	Mem130[esp_114 - 8<i32>:word32] = 0x8D6624<32>
	word32 edx_1251
	fn00716B20(out edx_1251)
	word32 esi_139 = 0xA1D510<32>
l006FE4B7:
	word32 eax_142 = Mem141[esi_139:word32]
	word32 ecx_143 = 0<32>
	branch eax_142 == esi_139 l006FE4C8
l006FE4BF:
l006FE4C0:
	eax_142 = Mem141[eax_142:word32]
	ecx_143 = ecx_143 + 1<32>
	branch eax_142 != esi_139 l006FE4C0
l006FE4C8:
	word32 esp_158 = esp_104 - 4<i32>
	Mem160[esp_158:word32] = ecx_143
	Mem162[esp_158 - 4<i32>:word32] = 0x8D6620<32>
	word32 edx_1257
	fn00716B20(out edx_1257)
	esi_139 = esi_139 + 0x18<32>
	branch esi_139 < 0xA1D558<32> l006FE4B7
l006FE4E1:
	Mem186[esp_158:word32] = 0x8A6DE8<32>
	word32 edx_1258
	fn00716B20(out edx_1258)
	esp_104 = esp_158 + 4<32>
l006FE4EE:
	word32 ecx_196 = dwArg04 + 1<32>
	branch dwArg04 >= 2<32> l006FE501
l006FE4F6:
	Mem203[dwArg04 * 0x18<32> + 0xA1D53C<32>:word32] = Mem200[dwArg04 * 0x18<32> + 0xA1D53C<32>:word32] + 1<32>
l006FE501:
	branch dwArg04 < 0<32> l006FE552
l006FE505:
	word32 eax_210 = 0xA1D524<32>
l006FE510:
	Mem215[eax_210:word32] = 0<32>
	eax_210 = eax_210 + 0x18<32>
	ecx_196 = ecx_196 - 1<32>
	branch ecx_196 != 0<32> l006FE510
l006FE519:
	branch dwArg04 <= 0<32> l006FE552
l006FE51D:
	word32 edx_226 = dwArg04 * 0x18<32> + 0xA1D510<32>
	word32 eax_227 = 0xA1D510<32>
	word32 edi_228 = dwArg04
l006FE530:
	word32 esi_231 = Mem230[eax_227:word32]
	branch esi_231 == eax_227 l006FE546
l006FE536:
	word32 ecx_235 = Mem230[edx_226 + 4<32>:word32]
	Mem236[ecx_235:word32] = esi_231
	Mem237[esi_231 + 4<32>:word32] = ecx_235
	word32 ecx_238 = Mem237[eax_227 + 4<32>:word32]
	Mem239[edx_226 + 4<32>:word32] = ecx_238
	Mem240[ecx_238:word32] = edx_226
l006FE546:
	Mem242[eax_227 + 4<32>:word32] = eax_227
	Mem243[eax_227:word32] = eax_227
	eax_227 = eax_227 + 0x18<32>
	edi_228 = edi_228 - 1<32>
	branch edi_228 != 0<32> l006FE530
l006FE552:
	word32 ebp_269
	word32 ebx_260 = dwArg04 * 0x18<32> + 0xA1D510<32>
	branch dwArg04 >= 2<32> l006FE573
l006FE573:
	Mem268[esp_104 + 0x10<32>:word32] = ebx_260
	ebp_269 = ebx_260
l006FE567:
	ebp_269 = dwArg04 * 0x18<32> + 0xA1D528<32>
	Mem271[esp_104 + 0x10<32>:word32] = ebp_269
l006FE579:
	word32 eax_274 = Mem273[ebx_260:word32]
	branch eax_274 == ebx_260 l006FE58C
l006FE57F:
l006FE580:
	Mem280[eax_274 + 8<32>:word32] = Mem278[eax_274 + 0x10<32>:word32]
	eax_274 = Mem280[eax_274:word32]
	branch eax_274 != ebx_260 l006FE580
l006FE58C:
	word32 esi_287 = Mem286[ebx_260:word32]
	branch esi_287 == ebx_260 l006FE5AE
l006FE592:
	word32 eax_292 = Mem291[esi_287 + 0x14<32>:word32]
	word32 edx_293 = Mem291[eax_292 + 0x5C<32>:word32]
	word32 esp_295 = esp_104 - 4<i32>
	Mem296[esp_295:word32] = 0<32>
	Mem299[esp_295 - 4<i32>:word32] = 0x6FDF70<32>
	word32 ecx_297 = esi_287 + 0x10<32>
	Mem301[esp_295 - 8<i32>:word32] = ecx_297
	word32 esp_306
	call edx_293 (retsize: 4;)
		uses: eax:eax_292,ecx:ecx_297,Stack +0008:0<32>
		defs: esp:esp_306
	esi_287 = Mem301[esi_287:word32]
	esp_104 = esp_306 + 0xC<32>
	branch esi_287 != ebx_260 l006FE592
l006FE5AE:
	word32 eax_320 = esp_104 + 0x30<32>
	Mem323[esp_104 + 0x34<32>:word32] = eax_320
	Mem324[esp_104 + 0x30<32>:word32] = eax_320
	fn006FE010(ebx_260, eax_320)
	branch ebx_260 == ebp_269 l006FE5E2
l006FE5C7:
	word32 ecx_338 = Mem324[ebx_260:word32]
	branch ecx_338 == ebx_260 l006FE5DD
l006FE5CD:
	word32 eax_341 = Mem324[ebp_269 + 4<32>:word32]
	Mem342[eax_341:word32] = ecx_338
	Mem343[ecx_338 + 4<32>:word32] = eax_341
	word32 eax_344 = Mem343[ebx_260 + 4<32>:word32]
	Mem345[ebp_269 + 4<32>:word32] = eax_344
	Mem346[eax_344:word32] = ebp_269
l006FE5DD:
	Mem348[ebx_260 + 4<32>:word32] = ebx_260
	Mem349[ebx_260:word32] = ebx_260
l006FE5E2:
	word32 esp_355 = esp_104 - 4<i32>
	Mem356[esp_355:word32] = esp_104 + 0x30<32>
	word32 edx_352 = esp_104 + 0x20<32>
	Mem358[esp_355 + 0x28<32>:word32] = edx_352
	Mem359[esp_355 + 0x24<32>:word32] = edx_352
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	fn006FE070(edx_352, stackArg4)
	word32 esi_384 = Mem359[esp_355 + 0x24<32>:word32]
	word32 esp_386 = esp_355 + 4<32>
	branch esi_384 == edx_352 l006FE633
l006FE609:
	esp_386 = esp_355 + 4<32>
l006FE610:
	word32 eax_393 = Mem391[Mem391[esi_384 + 0x14<32>:word32] + 0x5C<32>:word32]
	word32 ecx_395 = esp_386 + 0x20<32>
	word32 esp_396 = esp_386 - 4<i32>
	Mem397[esp_396:word32] = ecx_395
	Mem400[esp_396 - 4<i32>:word32] = 0x6FE100<32>
	word32 edx_398 = esi_384 + 0x10<32>
	Mem402[esp_396 - 8<i32>:word32] = edx_398
	word32 esp_407
	call eax_393 (retsize: 4;)
		uses: eax:eax_393,ecx:ecx_395,edx:edx_398,Stack +0008:0<32>
		defs: esp:esp_407
	esi_384 = Mem402[esi_384:word32]
	esp_386 = esp_407 + 0xC<32>
	branch esi_384 != esp_407 + 0x2C<32> l006FE610
l006FE633:
	word32 eax_420 = Mem419[esp_386 + 0x30<32>:word32]
	word32 ebx_423 = eax_420
	branch eax_420 == esp_386 + 0x30<32> l006FE752
l006FE645:
l006FE650:
	byte al_426 = Mem425[0x00A6CD04<p32>:byte]
	Mem429[esp_386 + 0x44<32>:word32] = Mem425[esp_386 + 0x44<32>:word32] + 1<32>
	branch (al_426 & 2<8>) == 0<8> l006FE6DC
l006FE65E:
	word32 esi_436 = ebx_423 + 0x10<32>
	branch (al_426 & 8<8>) == 0<8> l006FE6BE
l006FE665:
	branch Mem429[esi_436 + 4<32>:word32] != 0xA1EB98<32> l006FE6BE
l006FE6BE:
	branch (al_426 & 0x10<8>) == 0<8> l006FE6DC
l006FE6C2:
	word32 edx_447 = Mem429[Mem429[esi_436 + 4<32>:word32] + 0xC<32>:word32]
	word32 esp_449 = esp_386 - 4<i32>
	Mem450[esp_449:word32] = esi_436
	Mem452[esp_449 - 4<i32>:word32] = edx_447
	Mem454[esp_449 - 8<i32>:word32] = 0x8D6614<32>
	Mem456[esp_449 - 12<i32>:word32] = 0x8D6534<32>
l006FE66E:
	word32 edi_458 = Mem429[Mem429[esi_436 + 8<32>:word32] + 0x10<32>:word32]
	branch edi_458 == 0<32> l006FE6AB
l006FE678:
	word32 eax_462 = Mem429[edi_458 + 4<32>:word32]
	branch eax_462 == 0xA1B450<32> l006FE694
l006FE682:
	word32 esp_465 = esp_386 - 4<i32>
	Mem466[esp_465:word32] = 0xA1B450<32>
	Mem468[esp_465 - 4<i32>:word32] = eax_462
	word32 edx_1267
	word32 ecx_1266
	branch fn006D5670(Mem468[esp_465 - 4<i32>:word32], Mem468[esp_465:word32], out ecx_1266, out edx_1267) == 0<32> l006FE6AB
l006FE6AB:
	word32 esp_481 = esp_386 - 4<i32>
	Mem483[esp_481:word32] = esi_436
	Mem486[esp_481 - 4<i32>:word32] = 0x8D0E38<32>
	Mem488[esp_481 - 8<i32>:word32] = 0x8D6614<32>
	Mem490[esp_481 - 12<i32>:word32] = 0x8D6510<32>
l006FE694:
	word32 esp_492 = esp_386 - 4<i32>
	Mem494[esp_492:word32] = edi_458
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_1263
	word32 esi_1265
	word32 edx_1264
	word32 eax_503 = fn006ECC50(stackArg4, out ecx_1263, out edx_1264, out esi_1265)
	Mem510[esp_492:word32] = esi_436
	Mem512[esp_492 - 4<i32>:word32] = eax_503
	Mem514[esp_492 - 8<i32>:word32] = 0x8D6614<32>
	Mem516[esp_492 - 12<i32>:word32] = 0x8D6510<32>
l006FE6D4:
	word32 edx_1268
	fn00716B20(out edx_1268)
l006FE6DC:
	word32 eax_542 = Mem540[0x00A6CD18<p32>:word32]
	branch eax_542 == 0<32> l006FE744
l006FE6E5:
	branch (Mem540[0x00A6CD04<p32>:byte] & 1<8>) == 0<8> l006FE744
l006FE6EE:
	word32 esp_550 = esp_386 - 4<i32>
	Mem551[esp_550:word32] = 0<32>
	Mem553[esp_550 - 4<i32>:word32] = 0x8ACC9C<32>
	Mem555[esp_550 - 8<i32>:word32] = eax_542
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 stackArg12 = <invalid>
	word32 edx_1285
	word32 ecx_1284
	word32 eax_564 = fn007038E0(stackArg4, 0<32>, stackArg12, out ecx_1284, out edx_1285)
	esp_386 = esp_550 + 4<32>
	branch eax_564 != 0<32> l006FE70B
l006FE70B:
	Mem574[esp_550:word32] = eax_564
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	real64 rRet0
	fn006FF3E0(stackArg4, out rRet0)
	real64 rLoc1_1104 = rRet0 - Mem574[esp_550 + 0x1C<32>:real64]
	word32 v22_589 = Mem574[eax_564:word32] + 0xFFFFFFFF<32>
	Mem590[eax_564:word32] = v22_589
	Mem592[esp_550 + 0x1C<32>:real64] = rLoc1_1104
	word32 esp_588 = esp_550 + 4<32>
	branch v22_589 != 0<32> l006FE72D
l006FE721:
	word32 eax_595 = Mem592[eax_564 + 4<32>:word32]
	word32 ecx_596 = Mem592[eax_595 + 0x18<32>:word32]
	Mem598[esp_550:word32] = eax_564
	word32 esp_599
	call ecx_596 (retsize: 4;)
		uses: eax:eax_595,Stack +0008:0<32>
		defs: esp:esp_599
	esp_588 = esp_599 + 4<32>
l006FE72D:
	word32 esp_612 = esp_588 - 8<32>
	Mem614[esp_612:real64] = Mem610[esp_588 + 0x18<32>:real64]
	Mem617[esp_612 - 4<i32>:word32] = 0x8D6600<32>
	word32 edx_1289
	fn00716B20(out edx_1289)
	esp_386 = esp_612 + 8<32>
l006FE704:
	word32 edx_1288
	word32 ecx_1287
	fn006E1160(out ecx_1287, out edx_1288)
l006FE744:
	ebx_423 = Mem638[ebx_423:word32]
	branch ebx_423 != esp_386 + 0x30<32> l006FE650
l006FE752:
	word32 esp_646 = esp_386 - 4<i32>
	Mem650[esp_646:word32] = ebp_269
	Mem652[esp_646 - 4<i32>:word32] = esp_386 + 0x30<32>
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	Mem670[esp_646 + 0x48<32>:word32] = Mem652[esp_646 + 0x48<32>:word32] + fn006FE160(stackArg4)
	Mem674[esp_646 - 8<i32>:word32] = esp_646 + 0x34<32>
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	fn006FE380(ebp_269, stackArg4)
	word32 eax_682 = Mem674[esp_646 + 0x24<32>:word32]
	word32 ebp_683 = Mem674[esp_646 + 0x18<32>:word32]
	word32 ebx_686 = eax_682
	byte al_688 = Mem674[0x00A6CD04<p32>:byte]
	branch eax_682 == esp_646 + 0x24<32> l006FE82C
l006FE78B:
l006FE790:
	ebp_683 = ebp_683 + 1<32>
	branch (al_688 & 4<8>) == 0<8> l006FE81E
l006FE79B:
	word32 esi_699 = ebx_686 + 0x10<32>
	branch (al_688 & 8<8>) == 0<8> l006FE7FB
l006FE7A2:
	branch Mem701[esi_699 + 4<32>:word32] != 0xA1EB98<32> l006FE7FB
l006FE7FB:
	branch (al_688 & 0x10<8>) == 0<8> l006FE81E
l006FE7FF:
	word32 edx_711 = Mem701[Mem701[esi_699 + 4<32>:word32] + 0xC<32>:word32]
	word32 esp_714 = esp_386 - 4<i32>
	Mem715[esp_714:word32] = esi_699
	Mem717[esp_714 - 4<i32>:word32] = edx_711
	Mem719[esp_714 - 8<i32>:word32] = 0x8D65F0<32>
	Mem721[esp_714 - 12<i32>:word32] = 0x8D6534<32>
l006FE7AB:
	word32 edi_723 = Mem701[Mem701[esi_699 + 8<32>:word32] + 0x10<32>:word32]
	branch edi_723 == 0<32> l006FE7E8
l006FE7B5:
	word32 eax_727 = Mem701[edi_723 + 4<32>:word32]
	branch eax_727 == 0xA1B450<32> l006FE7D1
l006FE7BF:
	word32 esp_730 = esp_386 - 4<i32>
	Mem731[esp_730:word32] = 0xA1B450<32>
	Mem733[esp_730 - 4<i32>:word32] = eax_727
	word32 edx_1274
	word32 ecx_1273
	branch fn006D5670(Mem733[esp_730 - 4<i32>:word32], Mem733[esp_730:word32], out ecx_1273, out edx_1274) == 0<32> l006FE7E8
l006FE7E8:
	word32 esp_746 = esp_386 - 4<i32>
	Mem748[esp_746:word32] = esi_699
	Mem751[esp_746 - 4<i32>:word32] = 0x8D0E38<32>
	Mem753[esp_746 - 8<i32>:word32] = 0x8D65F0<32>
	Mem755[esp_746 - 12<i32>:word32] = 0x8D6510<32>
l006FE7D1:
	word32 esp_757 = esp_386 - 4<i32>
	Mem759[esp_757:word32] = edi_723
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 edx_1271
	word32 esi_1272
	word32 ecx_1270
	word32 eax_767 = fn006ECC50(stackArg4, out ecx_1270, out edx_1271, out esi_1272)
	Mem774[esp_757:word32] = esi_699
	Mem776[esp_757 - 4<i32>:word32] = eax_767
	Mem778[esp_757 - 8<i32>:word32] = 0x8D65F0<32>
	Mem780[esp_757 - 12<i32>:word32] = 0x8D6510<32>
l006FE811:
	word32 edx_1275
	fn00716B20(out edx_1275)
	al_688 = Mem802[0x00A6CD04<p32>:byte]
l006FE81E:
	ebx_686 = Mem807[ebx_686:word32]
	branch ebx_686 != esp_386 + 0x20<32> l006FE790
l006FE82C:
	word32 esi_819 = Mem818[esp_386 + 0x44<32>:word32]
	branch (al_688 & 1<8>) == 0<8> l006FE85D
l006FE834:
	branch esi_819 != 0<32> l006FE84B
l006FE838:
	branch ebp_683 != 0<32> l006FE84B
l006FE84B:
	word32 esp_830 = esp_386 - 4<i32>
	Mem832[esp_830:word32] = ebp_683
	Mem836[esp_830 - 4<i32>:word32] = esi_819 + ebp_683
	Mem838[esp_830 - 8<i32>:word32] = 0x8D65B4<32>
	word32 edx_1277
	fn00716B20(out edx_1277)
l006FE83C:
	Mem856[esp_386 - 4<i32>:word32] = 0x8D65E4<32>
	word32 edx_1278
	fn00716B20(out edx_1278)
l006FE85D:
	word32 esp_868 = esp_386 - 4<i32>
	Mem869[esp_868:word32] = Mem866[esp_386 + 0x10<32>:word32]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_1021 = fn006FE2A0(esp_868 + 0x24<32>, stackArg4)
	branch fn006E0FC0() == 0<32> l006FE8A6
l006FE878:
	word32 eax_889 = Mem869[0x00A6CD10<p32>:word32]
	branch eax_889 != 0<32> l006FE893
l006FE881:
	Mem894[esp_868 + 4<32>:word32] = 0x8D65A0<32>
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 edx_1281
	word32 ecx_1280
	eax_889 = fn006ECAC0(stackArg4, out ecx_1280, out edx_1281)
	Mem903[0x00A6CD10<p32>:word32] = eax_889
l006FE893:
	word32 esp_904 = esp_386 + 4<32>
	Mem907[esp_904 - 4<i32>:word32] = eax_889
	ecx_1021 = fn006E1780()
	Mem920[esp_904 - 8<i32>:word32] = 0x8D6570<32>
	fn006E86F0(Mem920[esp_904 - 8<i32>:word32])
l006FE8A6:
	ebpOut = ebp
	return ecx_1021
fn006FE400_exit:


word32 fn006FE8B0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006FEEB0
// MayUse: 
// LiveOut: ecx
// Trashed: SCZO eax ecx edx Top
// Preserved: esi esp
fn006FE8B0_entry:
l006FE8B0:
	word32 edx_20 = 2<32>
	word32 ecx_12 = 0xA1D554<32>
l006FE8C0:
	branch Mem11[ecx_12:word32] > Mem11[ecx_12 - 4<32>:word32] l006FE8D7
l006FE8D7:
	word32 ebp_63
	return fn006FE400(edx_20, out ebp_63)
l006FE8C7:
	ecx_12 = ecx_12 - 0x18<32>
	edx_20 = edx_20 - 1<32>
	branch ecx_12 >= 0xA1D524<32> l006FE8C0
l006FE8D5:
	return ecx_12
fn006FE8B0_exit:


word32 fn006FEE00()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E8910
// MayUse: 
// LiveOut: ebp
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn006FEE00_entry:
l006FEE00:
	branch Mem0[0x00A6CD08<p32>:word32] == 0<32> l006FEE0C
l006FEE0C:
	Mem9[0x00A6CD08<p32>:word32] = 1<32>
	word32 ebp_11
	fn006FE400(2<32>, out ebp_11)
	Mem23[0x00A6CD08<p32>:word32] = 0<32>
	return ebp_11
l006FEE09:
	return ebp
fn006FEE00_exit:


word32 fn006FEE30(word32 dwArg04, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00717180
//      fn0072F770
//      fn00738BB0
// MayUse:  Stack +0004:[0..31]
// LiveOut: ecx edx
// Trashed: SCZO eax ecx edx Top
// Preserved: esi esp
fn006FEE30_entry:
l006FEE30:
	branch Mem6[dwArg04 + 0xFFFFFFF8<32>:word32] == 0xFFFFFFFE<32> l006FEE4B
l006FEE3E:
	fn006E86F0(0x8D0E04<32>)
l006FEE4B:
	Mem21[dwArg04 + 0xFFFFFFF8<32>:word32] = 0xFFFFFFFD<32>
	Mem23[dwArg04 + 0xFFFFFFF0<32>:word32] = Mem21[0x00A1D558<p32>:word32]
	word32 ecx_24 = Mem23[0x00A1D558<p32>:word32]
	word32 eax_25 = Mem23[ecx_24 + 4<32>:word32]
	Mem26[dwArg04 + 0xFFFFFFF4<32>:word32] = eax_25
	Mem27[eax_25:word32] = dwArg04 + 0xFFFFFFF0<32>
	word32 edx_28 = Mem27[0x00A1D558<p32>:word32]
	Mem29[edx_28 + 4<32>:word32] = dwArg04 + 0xFFFFFFF0<32>
	edxOut = edx_28
	return ecx_24
fn006FEE30_exit:


word32 fn006FEEB0(word32 dwArg04, ptr32 & ecxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006FEF30
//      fn006FEF50
// MayUse:  Stack +0004:[0..31]
// LiveOut: eax ecx
// Trashed: SCZO eax ecx edx esi Top
// Preserved: esi esp
fn006FEEB0_entry:
l006FEEB0:
	word32 ecx_113
	word32 edx_114
	word32 eax_13 = fn00723860(dwArg04 + 0x10<32>, out ecx_113, out edx_114)
	branch eax_13 != 0<32> l006FEECD
l006FEECD:
	Mem25[eax_13 + 8<32>:word32] = 0xFFFFFFFE<32>
	word32 eax_26 = Mem25[0x00A1D524<p32>:word32]
	word32 ecx_27 = Mem25[0x00A1D520<p32>:word32]
	Mem30[0x00A1D524<p32>:word32] = eax_26 + 1<32>
	branch eax_26 + 1<32> <= ecx_27 l006FEF23
l006FEEEB:
	branch Mem30[0x00A1D55C<p32>:word32] == 0<32> l006FEF23
l006FEEF4:
	branch ecx_27 == 0<32> l006FEF23
l006FEEF8:
	branch Mem30[0x00A6CD08<p32>:word32] != 0<32> l006FEF23
l006FEF01:
	branch fn006E0FC0() != 0<32> l006FEF23
l006FEF0A:
	Mem43[0x00A6CD08<p32>:word32] = 1<32>
	ecx_27 = fn006FE8B0()
	Mem50[0x00A6CD08<p32>:word32] = 0<32>
l006FEF23:
	ecxOut = ecx_27
	return eax_13 + 0x10<32>
l006FEEC7:
l006FEEC8_thunk_fn006E1210:
	word32 ecx_61
	word32 edx_115
	word32 eax_60 = fn006E1210(out ecx_61, out edx_115)
	ecxOut = ecx_61
	return eax_60
fn006FEEB0_exit:


word32 fn006FEF30(word32 dwArg04, ptr32 & ecxOut, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006F2650
//      fn006F94A0
//      fn006FDCC0
//      fn00717180
//      fn00725010
//      fn00725DA0
//      fn0072F770
//      fn007500E0
//      fn00750380
// MayUse:  Stack +0004:[0..31]
// LiveOut: eax ecx edx
// Trashed: SCZO eax Top
// Preserved: esi esp
fn006FEF30_entry:
l006FEF30:
	word32 ecx_42
	word32 eax_12 = fn006FEEB0(Mem6[dwArg04 + 0x10<32>:word32], out ecx_42)
	branch eax_12 == 0<32> l006FEF4E
l006FEF45:
	Mem20[eax_12 + 4<32>:word32] = dwArg04
	Mem21[eax_12:word32] = 1<32>
l006FEF4E:
	ecxOut = <invalid>
	edxOut = <invalid>
	return eax_12
fn006FEF30_exit:


word32 fn006FEF50(word32 dwArg04, word32 dwArg08, ptr32 & ecxOut, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006DFD20
//      fn0073AFB0
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax ecx edx
// Trashed: SCZO eax ecx Top
// Preserved: edi esi esp
fn006FEF50_entry:
l006FEF50:
	word32 ecx_23
	word32 eax_22 = fn006FEEB0(Mem6[dwArg04 + 0x14<32>:word32] *s dwArg08 + 3<32> + Mem6[dwArg04 + 0x10<32>:word32] & 0xFFFFFFFC<32>, out ecx_23)
	branch eax_22 == 0<32> l006FEF83
l006FEF77:
	Mem30[eax_22 + 8<32>:word32] = dwArg08
	Mem31[eax_22 + 4<32>:word32] = dwArg04
	Mem32[eax_22:word32] = 1<32>
l006FEF83:
	ecxOut = ecx_23
	edxOut = <invalid>
	return eax_22
fn006FEF50_exit:


word32 fn006FEF90(word32 dwArg04, word32 dwArg08, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E0B00
//      fn0073AFB0
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ecx edx Top
// Preserved: esi esp
fn006FEF90_entry:
l006FEF90:
	word32 eax_6 = Mem0[dwArg04 + 4<32>:word32]
	word32 edx_25
	word32 ecx_73
	word32 eax_23 = fn00723B60(dwArg04 + 0xFFFFFFF0<32>, (Mem0[eax_6 + 0x14<32>:word32] *s dwArg08 + 3<32> + Mem0[eax_6 + 0x10<32>:word32] & 0xFFFFFFFC<32>) + 0x10<32>, out ecx_73, out edx_25)
	branch eax_23 != 0<32> l006FEFC6
l006FEFC6:
	Mem36[eax_23 + 0x18<32>:word32] = dwArg08
	edxOut = edx_25
	return eax_23 + 0x10<32>
l006FEFC0:
l006FEFC1_thunk_fn006E1210:
	word32 edx_44
	word32 ecx_74
	word32 eax_43 = fn006E1210(out ecx_74, out edx_44)
	edxOut = edx_44
	return eax_43
fn006FEF90_exit:


void fn006FEFD0(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E0B00
//      fn006E0CA0
//      fn006F2610
//      fn006F9B70
//      fn0070E820
//      fn00738D80
//      fn0073B5E0
// MayUse:  Stack +0004:[0..31]
// LiveOut:
// Trashed: SCZO eax ecx edx Top
// Preserved: esp
fn006FEFD0_entry:
l006FEFD0:
	branch Mem0[dwArg04 - 8<32>:word32] == 0xFFFFFFFE<32> l006FEFF2
l006FEFDD:
	Mem11[Mem0[dwArg04 - 0xC<32>:word32]:word32] = Mem0[dwArg04 - 0x10<32>:word32]
	Mem14[Mem11[dwArg04 - 0x10<32>:word32] + 4<32>:word32] = Mem11[dwArg04 - 0xC<32>:word32]
	Mem15[dwArg04 - 0x10<32>:word32] = 0<32>
l006FEFF2:
	branch Mem16[0x00A1D524<p32>:word32] <= 0<32> l006FF002
l006FEFFB:
	Mem20[0x00A1D524<p32>:word32] = Mem16[0x00A1D524<p32>:word32] - 1<32>
l006FF002:
l006FF006_thunk_fn007239C0:
	word32 ecx_38
	word32 edx_39
	fn007239C0(dwArg04 - 0x10<32>, out ecx_38, out edx_39)
	return
fn006FEFD0_exit:


word32 fn006FF010(ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006FF060
// MayUse: 
// LiveOut: eax edx
// Trashed: SCZO eax ecx edx Top
// Preserved: esi esp
fn006FF010_entry:
l006FF010:
	word32 eax_6 = malloc(0x3E8<32>)
	branch eax_6 != 0<32> l006FF027
l006FF027:
	Mem12[eax_6:word32] = Mem5[0x00A6CD2C<p32>:word32]
	Mem13[0x00A6CD2C<p32>:word32] = eax_6
	word32 ecx_19 = eax_6 + 0x3D8<32> + 4<32>
	branch eax_6 + 0x3D8<32> <=u eax_6 + 8<32> l006FF050
l006FF044:
	edx = ecx_19 - 0x10<32>
	Mem24[ecx_19 + 0<32>:word32] = edx
	ecx_19 = edx
	branch edx >u eax_6 + 8<32> l006FF044
l006FF050:
	Mem33[ecx_19 + 4<32>:word32] = 0<32>
	edxOut = edx
	return eax_6 + 0x3D8<32>
l006FF022:
l006FF022_thunk_fn006E1210:
	word32 edx_41
	word32 ecx_81
	word32 eax_39 = fn006E1210(out ecx_81, out edx_41)
	edxOut = edx_41
	return eax_39
fn006FF010_exit:


word32 fn006FF060(real64 rArg04, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E9BD0
//      fn00735890
//      fn007367D0
//      fn0073D140
// MayUse:  Stack +0004:[0..63]
// LiveOut: eax edx
// Trashed: SCZO eax ecx edx Top
// Preserved: esp
fn006FF060_entry:
l006FF060:
	word32 eax_10 = Mem0[0x00A6CD30<p32>:word32]
	branch eax_10 != 0<32> l006FF078
l006FF069:
	word32 edx_11
	eax_10 = fn006FF010(out edx_11)
	Mem18[0x00A6CD30<p32>:word32] = eax_10
	branch eax_10 != 0<32> l006FF078
l006FF078:
	word32 edx_22 = Mem21[eax_10 + 4<32>:word32]
	Mem28[eax_10 + 8<32>:real64] = rArg04
	Mem30[0x00A6CD30<p32>:word32] = edx_22
	Mem31[eax_10 + 4<32>:word32] = 0xA1E4B8<32>
	Mem32[eax_10:word32] = 1<32>
	edxOut = edx_22
	return eax_10
l006FF077:
	edxOut = edx_11
	return eax_10
fn006FF060_exit:


word32 fn006FF3E0(word32 dwArg04, ptr32 & rLoc1Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E5C60
//      fn006FE400
//      fn00733250
//      fn007332C0
//      fn00735890
// MayUse:  Stack +0004:[0..31]
// LiveOut: ecx FPU -1
// Trashed: SCZO eax ecx edx FPU -1 Top
// Preserved: esi esp FPU -1
fn006FF3E0_entry:
l006FF3E0:
	branch dwArg04 == 0<32> l006FF410
l006FF410:
	word32 edx_234
	word32 ecx_15 = fn006E11D0(out edx_234)
	rLoc1Out = <invalid>
	return ecx_15
l006FF3EC:
	word32 eax_24 = Mem7[dwArg04 + 4<32>:word32]
	branch eax_24 == 0xA1E4B8<32> l006FF408
l006FF3F6:
	word32 edx_235
	branch fn006D5670(eax_24, 0xA1E4B8<32>, out ecx, out edx_235) == 0<32> l006FF420
l006FF420:
	word32 ecx_104
	word32 esp_118
	word32 eax_43 = Mem30[Mem30[dwArg04 + 4<32>:word32] + 0x30<32>:word32]
	branch eax_43 == 0<32> l006FF481
l006FF42A:
	word32 eax_47 = Mem30[eax_43 + 0x50<32>:word32]
	branch eax_47 == 0<32> l006FF481
l006FF481:
	esp_118 = fp - 0x10<32>
l006FF431:
	word32 esp_56
	word32 eax_57
	word32 edx_60
	call eax_47 (retsize: 4;)
		uses: ecx:ecx_59,edx:edx_60,Stack +0004:dwArg04,Stack +0018:dwArg04
		defs: eax:eax_57,ecx:ecx_59,edx:edx_60,esp:esp_56
	branch eax_57 == 0<32> l006FF495
l006FF43D:
	word32 eax_67 = Mem55[eax_57 + 4<32>:word32]
	branch eax_67 == 0xA1E4B8<32> l006FF460
l006FF447:
	Mem71[esp_56:word32] = 0xA1E4B8<32>
	Mem73[esp_56 - 4<i32>:word32] = eax_67
	word32 edx_236
	branch fn006D5670(Mem73[esp_56 - 4<i32>:word32], Mem73[esp_56:word32], out ecx_104, out edx_236) != 0<32> l006FF460
l006FF460:
	word32 v11_87 = Mem86[eax_57:word32] + 0xFFFFFFFF<32>
	Mem88[eax_57:word32] = v11_87
	Mem94[esp_56 + 8<32>:real64] = Mem88[eax_57 + 8<32>:real64]
	branch v11_87 != 0<32> l006FF478
l006FF46C:
	word32 edx_97 = Mem94[eax_57 + 4<32>:word32]
	word32 eax_98 = Mem94[edx_97 + 0x18<32>:word32]
	Mem100[esp_56:word32] = eax_57
	call eax_98 (retsize: 4;)
		uses: ecx:ecx_104,edx:edx_97,Stack +0008:dwArg04
		defs: ecx:ecx_104
l006FF478:
	rLoc1Out = <invalid>
	return ecx_104
l006FF459:
	Mem119[esp_56:word32] = 0x8D682C<32>
	esp_118 = esp_56
l006FF486:
	Mem124[esp_118 - 4<i32>:word32] = Mem120[0x00A16B7C<p32>:word32]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 edx_238
	fn006E0F80(stackArg4, dwArg04, out ecx_104, out edx_238)
l006FF495:
	rLoc1Out = <invalid>
	return ecx_104
l006FF408:
	rLoc1Out = <invalid>
	return ecx
fn006FF3E0_exit:


word32 fn006FF4A0(word32 ecx, word32 edx, word32 ebx, word32 esi, word32 edi, selector es, selector ds, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006FF5D0
//      fn00700EC0
// MayUse:  cs:[0..15] ds:[0..15] ebx:[0..31] ecx:[0..31] edi:[0..31] edx:[0..31] es:[0..15] esi:[0..31] fs:[0..15] gs:[0..15] ss:[0..15] Stack +0004:[0..31]
// LiveOut: ebp
// Trashed: SCZDOP eax ebp ecx edx FPU -1 Top
// Preserved: ebx edi esi esp
fn006FF4A0_entry:
l006FF4A0:
	word32 eax_7 = Mem0[0x00A14188<p32>:word32] ^ fp - 0x24<32>
	fn00724FE0(fp - 0x24<32>, 0x20<32>, 0x8D6850<32>)
	word32 esi_23 = ecx
	word32 ebp_52
	word32 edx_55
	word32 eax_115 = fn0074F280(ecx, dwArg04, fp - 0x24<32>, Mem28[edx + 8<32>:real64], out edx_55, out ebp_52)
	branch Mem50[ecx:byte] != 0x2D<8> l006FF4EF
l006FF4EC:
	esi_23 = ecx + 1<32>
l006FF4EF:
	branch Mem50[esi_23:byte] == 0<8> l006FF51A
l006FF4F4:
l006FF500:
	eax_115 = isdigit(CONVERT(Mem74[esi_23:byte], byte, word32))
	branch eax_115 == 0<32> l006FF515
l006FF50D:
	esi_23 = esi_23 + 1<32>
	branch Mem78[esi_23:byte] != 0<8> l006FF500
l006FF515:
	branch Mem78[esi_23:byte] != 0<8> l006FF527
l006FF51A:
	Mem92[esi_23:byte] = 0x2E<8>
	word32 esi_93 = esi_23 + 1<32>
	Mem95[esi_93:byte] = 0x30<8>
	Mem96[esi_93 + 1<32>:byte] = 0<8>
l006FF527:
	word32 ecx_218
	fn00694B8E(eax_115, eax_7 ^ fp - 0x24<32>, edx_55, ebx, ebp_52, esi, edi, es, ds, esi, out ecx_218)
	return ebp_52
fn006FF4A0_exit:


word32 fn006FF5D0(word32 ebx, word32 esi, word32 edi, selector es, selector ds, word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00735890
// MayUse:  cs:[0..15] ds:[0..15] ebx:[0..31] edi:[0..31] es:[0..15] esi:[0..31] fs:[0..15] gs:[0..15] ss:[0..15] Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: ebp
// Trashed: SCZDOP eax ebp ecx edx Top
// Preserved: esp
fn006FF5D0_entry:
l006FF5D0:
	return fn006FF4A0(dwArg04, dwArg08, ebx, esi, edi, es, ds, 0x64<32>)
fn006FF5D0_exit:


void fn00700EC0(word32 ebx, word32 ebp, word32 esi, word32 edi, selector es, selector ds)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E8910
// MayUse:  cs:[0..15] ds:[0..15] ebp:[0..31] ebx:[0..31] edi:[0..31] es:[0..15] esi:[0..31] fs:[0..15] gs:[0..15] ss:[0..15]
// LiveOut:
// Trashed: SCZDOP eax ecx edx Top
// Preserved: ebp ebx edi esi esp
fn00700EC0_entry:
l00700EC0:
	word32 eax_116
	word32 eax_7 = Mem0[0x00A14188<p32>:word32] ^ fp - 0x70<32>
	word32 edx_149 = Mem8[0x00A6CD2C<p32>:word32]
	Mem26[0x00A6CD2C<p32>:word32] = 0<32>
	Mem27[0x00A6CD30<p32>:word32] = 0<32>
	word32 ebp_16 = 0<32>
	eax_116 = eax_7
	branch edx_149 == 0<32> l00700FA2
l00700EF6:
	eax_116 = edx_149 + 8<32>
	ebp_16 = ebp_16 + 1<32>
	word32 edi_33 = 0<32>
	word32 ecx_36 = eax_116
	word32 esi_37 = 0x1F<32>
l00700F05:
	branch Mem491[ecx_36 + 4<32>:word32] != 0xA1E4B8<32> l00700F17
l00700F0F:
	branch Mem491[ecx_36:word32] == 0<32> l00700F17
l00700F14:
	edi_33 = edi_33 + 1<32>
l00700F17:
	branch Mem491[ecx_36 + 0x14<32>:word32] != 0xA1E4B8<32> l00700F25
l00700F1C:
	branch Mem491[ecx_36 + 0x10<32>:word32] == 0<32> l00700F25
l00700F22:
	edi_33 = edi_33 + 1<32>
l00700F25:
	ecx_36 = ecx_36 + 0x20<32>
	esi_37 = esi_37 - 1<32>
	branch esi_37 != 0<32> l00700F05
l00700F2D:
	word32 esi_73 = Mem491[edx_149:word32]
	branch edi_33 == 0<32> l00700F85
l00700F85:
	free(edx_149)
l00700F33:
	Mem86[edx_149:word32] = Mem491[0x00A6CD2C<p32>:word32]
	Mem87[0x00A6CD2C<p32>:word32] = edx_149
	word32 ecx_119 = 0x1F<32>
l00700F46:
	branch Mem90[eax_116 + 4<32>:word32] != 0xA1E4B8<32> l00700F50
l00700F4B:
	branch Mem90[eax_116:word32] != 0<32> l00700F5E
l00700F50:
	Mem99[eax_116 + 4<32>:word32] = Mem90[0x00A6CD30<p32>:word32]
	Mem100[0x00A6CD30<p32>:word32] = eax_116
l00700F5E:
	branch Mem102[eax_116 + 0x14<32>:word32] != 0xA1E4B8<32> l00700F69
l00700F63:
	branch Mem102[eax_116 + 0x10<32>:word32] != 0<32> l00700F7B
l00700F69:
	Mem112[eax_116 + 0x14<32>:word32] = Mem102[0x00A6CD30<p32>:word32]
	Mem114[0x00A6CD30<p32>:word32] = eax_116 + 0x10<32>
l00700F7B:
	eax_116 = eax_116 + 0x20<32>
	ecx_119 = ecx_119 - 1<32>
	branch ecx_119 != 0<32> l00700F46
l00700F83:
l00700F94:
	edx_149 = esi_73
	branch esi_73 != 0<32> l00700EF6
l00700FA2:
	branch Mem151[0x00A74AF0<p32>:word32] == 0<32> l0070108F
l00700FAF:
	word32 esp_251
	word32 esp_185
	word32 eax_186
	call _iob_func (retsize: 4;)
		uses: Stack +0004:0x8D6BA0<32>
		defs: eax:eax_186,esp:esp_185
	Mem194[esp_185 - 4<i32>:word32] = eax_186 + 0x40<32>
	fprintf(Mem194[esp_185 - 4<i32>:(ptr32 FILE)], Mem194[esp_185:(ptr32 charconst )], 0<32>)
	word32 edx_196 = Mem194[esp_185 + 0x18<32>:word32]
	branch edx_196 != 0<32> l00700FE5
l00700FE5:
	word32 ecx_202 = 0x8A698F<32>
	branch ebp_16 == 1<32> l00700FF4
l00700FEF:
	ecx_202 = 0x8B22AC<32>
l00700FF4:
	word32 eax_207 = 0x8A698F<32>
	branch edx_196 == 1<32> l00701003
l00700FFE:
	eax_207 = 0x8B22AC<32>
l00701003:
	Mem215[esp_185:word32] = ecx_202
	Mem219[esp_185 - 4<i32>:word32] = ebp_16
	Mem223[esp_185 - 8<i32>:word32] = ebp_16 - Mem219[esp_185 + 0x14<32>:word32]
	Mem226[esp_185 - 12<i32>:word32] = eax_207
	Mem229[esp_185 - 16<i32>:word32] = edx_196
	Mem231[esp_185 - 20<i32>:word32] = 0x8D6B70<32>
	word32 esp_240
	word32 eax_241
	call _iob_func (retsize: 4;)
		defs: eax:eax_241,edx:edx_242,esp:esp_240
	Mem249[esp_240 - 4<i32>:word32] = eax_241 + 0x40<32>
	eax_116 = fprintf(Mem249[esp_240 - 4<i32>:(ptr32 FILE)], Mem249[esp_240:(ptr32 charconst )], 0<32>)
	esp_251 = esp_240 + 0x18<32>
l00700FD3:
	Mem254[esp_185:word32] = 0x8A6DE8<32>
	word32 esp_255
	word32 eax_256
	call _iob_func (retsize: 4;)
		defs: eax:eax_256,edx:edx_257,esp:esp_255
	Mem263[esp_255 - 4<i32>:word32] = eax_256 + 0x40<32>
	eax_116 = fprintf(Mem263[esp_255 - 4<i32>:(ptr32 FILE)], Mem263[esp_255:(ptr32 charconst )], 0<32>)
	esp_251 = esp_255 + 4<32>
l0070101C:
	branch Mem267[0x00A74AF0<p32>:word32] <= 1<32> l0070108F
l00701025:
	eax_116 = Mem267[0x00A6CD2C<p32>:word32]
	Mem274[esp_251 + 0x10<32>:word32] = eax_116
	branch eax_116 == 0<32> l0070108F
l00701032:
	word32 esi_279 = Mem277[esp_251 + 0x10<32>:word32] + 8<32>
	word32 ebp_281 = 0x3E<32>
l00701040:
	branch Mem285[esi_279 + 4<32>:word32] != 0xA1E4B8<32> l00701079
l00701049:
	branch Mem285[esi_279:word32] == 0<32> l00701079
l0070104E:
	word32 esp_291 = esp_251 - 4<i32>
	Mem292[esp_291:word32] = 0xC<32>
	Mem294[esp_291 - 4<i32>:word32] = 0x64<32>
	ebp_281 = fn006FF4A0(esp_291 + 0x1C<32>, esi_279, fprintf, esi_279, _iob_func, es, ds, Mem294[esp_291 - 4<i32>:word32])
	word32 ecx_315 = Mem294[esi_279:word32]
	Mem320[esp_291:word32] = esp_291 + 0x1C<32>
	Mem322[esp_291 - 4<i32>:word32] = ecx_315
	Mem324[esp_291 - 8<i32>:word32] = esi_279
	Mem326[esp_291 - 12<i32>:word32] = 0x8D6B48<32>
	word32 esp_328
	word32 eax_329
	call _iob_func (retsize: 4;)
		uses: eax:esp_291 + 0x1C<32>,ecx:ecx_315
		defs: eax:eax_329,esp:esp_328
	Mem336[esp_328 - 4<i32>:word32] = eax_329 + 0x40<32>
	fprintf(Mem336[esp_328 - 4<i32>:(ptr32 FILE)], Mem336[esp_328:(ptr32 charconst )], 0<32>)
	esp_251 = esp_328 + 0x10<32>
l00701079:
	esi_279 = esi_279 + 0x10<32>
	ebp_281 = ebp_281 - 1<32>
	branch ebp_281 != 0<32> l00701040
l00701081:
	edx_149 = Mem348[esp_251 + 0x10<32>:word32]
	eax_116 = Mem348[edx_149:word32]
	Mem353[esp_251 + 0x10<32>:word32] = eax_116
	branch eax_116 != 0<32> l00701032
l0070108F:
	word32 ecx_639
	fn00694B8E(eax_116, eax_7 ^ fp - 112<i32>, edx_149, ebx, ebp, esi, edi, es, ds, ebx, out ecx_639)
	return
fn00700EC0_exit:


