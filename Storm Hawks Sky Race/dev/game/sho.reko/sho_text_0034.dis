word32 fn00742E70(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn007403E0
// MayUse:  Stack +0004:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx Top
// Preserved: esp
fn00742E70_entry:
l00742E70:
	word32 edx_52
	word32 eax_11 = fn00740DC0(dwArg08, 8<32>, out edx_52)
	branch eax_11 != 0<32> l00742E8B
l00742E8B:
	Mem21[eax_11:word32] = 1<32>
	Mem22[eax_11 + 4<32>:word32] = dwArg04
	return eax_11
l00742E83:
	word32 ecx_53
	word32 edx_54
	fn006E1210(out ecx_53, out edx_54)
	return 0<32>
fn00742E70_exit:


word32 fn00742EA0(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn007403E0
// MayUse:  Stack +0004:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx Top
// Preserved: esp
fn00742EA0_entry:
l00742EA0:
	word32 edx_52
	word32 eax_11 = fn00740DC0(dwArg08, 8<32>, out edx_52)
	branch eax_11 != 0<32> l00742EBB
l00742EBB:
	Mem21[eax_11:word32] = 2<32>
	Mem22[eax_11 + 4<32>:word32] = dwArg04
	return eax_11
l00742EB3:
	word32 ecx_53
	word32 edx_54
	fn006E1210(out ecx_53, out edx_54)
	return 0<32>
fn00742EA0_exit:


word32 fn00742ED0(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn007403E0
// MayUse:  Stack +0004:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx esi Top
// Preserved: esp
fn00742ED0_entry:
l00742ED0:
	branch dwArg04 != 0<32> l00742EF0
l00742EF0:
	word32 edx_86
	word32 eax_17 = fn00740DC0(dwArg08, 8<32>, out edx_86)
	branch eax_17 != 0<32> l00742F0C
l00742F0C:
	Mem26[eax_17 + 4<32>:word32] = dwArg04
	Mem27[eax_17:word32] = 3<32>
	return eax_17
l00742F03:
	word32 ecx_89
	word32 edx_90
	fn006E1210(out ecx_89, out edx_90)
	return 0<32>
l00742ED9:
	word32 ecx_87
	word32 edx_88
	fn006E0F80(Mem6[0x00A17E2C<p32>:word32], 0x8DD324<32>, out ecx_87, out edx_88)
	return 0<32>
fn00742ED0_exit:


word32 fn00742F20(word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10, word32 dwArg14, word32 dwArg18, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00740060
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31] Stack +0010:[0..31] Stack +0014:[0..31] Stack +0018:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ecx edi edx esi Top
// Preserved: esp
fn00742F20_entry:
l00742F20:
	branch dwArg04 != 0<32> l00742F40
l00742F40:
	branch dwArg08 != 0<32> l00742F62
l00742F62:
	word32 edx_145
	word32 eax_24 = fn00740DC0(dwArg1C, 0x1C<32>, out edx_145)
	branch eax_24 != 0<32> l00742F7F
l00742F7F:
	Mem36[eax_24 + 8<32>:word32] = dwArg08
	Mem37[eax_24 + 0xC<32>:word32] = dwArg0C
	Mem39[eax_24 + 0x10<32>:word32] = dwArg10
	Mem43[eax_24 + 4<32>:word32] = dwArg04
	Mem44[eax_24:word32] = 1<32>
	Mem45[eax_24 + 0x14<32>:word32] = dwArg14
	Mem46[eax_24 + 0x18<32>:word32] = dwArg18
	edxOut = dwArg18
	return eax_24
l00742F75:
	word32 edx_52
	word32 ecx_147
	fn006E1210(out ecx_147, out edx_52)
	edxOut = edx_52
	return 0<32>
l00742F49:
	word32 edx_70
	word32 ecx_146
	fn006E0F80(Mem13[0x00A17E2C<p32>:word32], 0x8DD34C<32>, out ecx_146, out edx_70)
	edxOut = edx_70
	return 0<32>
l00742F29:
	word32 edx_89
	word32 ecx_144
	fn006E0F80(Mem6[0x00A17E2C<p32>:word32], 0x8DD374<32>, out ecx_144, out edx_89)
	edxOut = edx_89
	return 0<32>
fn00742F20_exit:


word32 fn00742FB0(word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10, word32 dwArg14, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073FAF0
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31] Stack +0010:[0..31] Stack +0014:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ecx edx esi Top
// Preserved: esp
fn00742FB0_entry:
l00742FB0:
	branch dwArg04 != 0<32> l00742FD0
l00742FD0:
	word32 edx_103
	word32 eax_17 = fn00740DC0(dwArg18, 0x1C<32>, out edx_103)
	branch eax_17 != 0<32> l00742FEC
l00742FEC:
	Mem29[eax_17 + 8<32>:word32] = dwArg08
	Mem31[eax_17 + 0xC<32>:word32] = dwArg0C
	Mem33[eax_17 + 4<32>:word32] = dwArg04
	Mem34[eax_17:word32] = 2<32>
	Mem35[eax_17 + 0x14<32>:word32] = dwArg10
	Mem36[eax_17 + 0x18<32>:word32] = dwArg14
	edxOut = dwArg10
	return eax_17
l00742FE3:
	word32 edx_42
	word32 ecx_105
	fn006E1210(out ecx_105, out edx_42)
	edxOut = edx_42
	return 0<32>
l00742FB9:
	word32 edx_58
	word32 ecx_104
	fn006E0F80(Mem6[0x00A17E2C<p32>:word32], 0x8DD39C<32>, out ecx_104, out edx_58)
	edxOut = edx_58
	return 0<32>
fn00742FB0_exit:


word32 fn00743020(word32 dwArg04, word32 dwArg08, word32 dwArg0C, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073EF40
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ecx edx Top
// Preserved: esp
fn00743020_entry:
l00743020:
	word32 edx_62
	word32 eax_11 = fn00740DC0(dwArg10, 0x1C<32>, out edx_62)
	branch eax_11 != 0<32> l0074303B
l0074303B:
	Mem23[eax_11 + 4<32>:word32] = dwArg04
	Mem25[eax_11:word32] = 3<32>
	Mem26[eax_11 + 0x14<32>:word32] = dwArg08
	Mem27[eax_11 + 0x18<32>:word32] = dwArg0C
	edxOut = dwArg08
	return eax_11
l00743033:
	word32 edx_31
	word32 ecx_63
	fn006E1210(out ecx_63, out edx_31)
	edxOut = edx_31
	return 0<32>
fn00743020_exit:


word32 fn00743060(word32 dwArg04, word32 dwArg08, word32 dwArg0C, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00740160
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ecx edx Top
// Preserved: esp
fn00743060_entry:
l00743060:
	word32 edx_62
	word32 eax_11 = fn00740DC0(dwArg10, 0x1C<32>, out edx_62)
	branch eax_11 != 0<32> l0074307B
l0074307B:
	Mem23[eax_11 + 4<32>:word32] = dwArg04
	Mem25[eax_11:word32] = 4<32>
	Mem26[eax_11 + 0x14<32>:word32] = dwArg08
	Mem27[eax_11 + 0x18<32>:word32] = dwArg0C
	edxOut = dwArg08
	return eax_11
l00743073:
	word32 edx_31
	word32 ecx_63
	fn006E1210(out ecx_63, out edx_31)
	edxOut = edx_31
	return 0<32>
fn00743060_exit:


word32 fn007430A0(word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073EB70
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31] Stack +0010:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ecx edx esi Top
// Preserved: esp
fn007430A0_entry:
l007430A0:
	branch dwArg08 != 0<32> l007430C0
l007430C0:
	word32 edx_100
	word32 eax_17 = fn00740DC0(dwArg14, 0x1C<32>, out edx_100)
	branch eax_17 != 0<32> l007430DC
l007430DC:
	Mem29[eax_17 + 4<32>:word32] = dwArg04
	Mem31[eax_17 + 8<32>:word32] = dwArg08
	Mem32[eax_17:word32] = 5<32>
	Mem33[eax_17 + 0x14<32>:word32] = dwArg0C
	Mem34[eax_17 + 0x18<32>:word32] = dwArg10
	edxOut = dwArg10
	return eax_17
l007430D3:
	word32 edx_40
	word32 ecx_102
	fn006E1210(out ecx_102, out edx_40)
	edxOut = edx_40
	return 0<32>
l007430A9:
	word32 edx_56
	word32 ecx_101
	fn006E0F80(Mem6[0x00A17E2C<p32>:word32], 0x8DD3C0<32>, out ecx_101, out edx_56)
	edxOut = edx_56
	return 0<32>
fn007430A0_exit:


word32 fn00743100(word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10, word32 dwArg14, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073EB70
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31] Stack +0010:[0..31] Stack +0014:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ebx ecx edi edx esi Top
// Preserved: esp
fn00743100_entry:
l00743100:
	branch dwArg04 != 0<32> l00743120
l00743120:
	branch dwArg08 != 0<32> l00743142
l00743142:
	branch dwArg0C != 0<32> l00743165
l00743165:
	word32 edx_183
	word32 eax_31 = fn00740DC0(dwArg18, 0x1C<32>, out edx_183)
	branch eax_31 != 0<32> l00743183
l00743183:
	Mem43[eax_31 + 0xC<32>:word32] = dwArg0C
	Mem46[eax_31 + 8<32>:word32] = dwArg08
	Mem49[eax_31 + 4<32>:word32] = dwArg04
	Mem50[eax_31:word32] = 6<32>
	Mem51[eax_31 + 0x14<32>:word32] = dwArg10
	Mem52[eax_31 + 0x18<32>:word32] = dwArg14
	edxOut = dwArg14
	return eax_31
l00743178:
	word32 edx_58
	word32 ecx_185
	fn006E1210(out ecx_185, out edx_58)
	edxOut = edx_58
	return 0<32>
l0074314B:
	word32 edx_78
	word32 ecx_184
	fn006E0F80(Mem20[0x00A17E2C<p32>:word32], 0x8DD3E4<32>, out ecx_184, out edx_78)
	edxOut = edx_78
	return 0<32>
l00743129:
	word32 edx_99
	word32 ecx_182
	fn006E0F80(Mem13[0x00A17E2C<p32>:word32], 0x8DD40C<32>, out ecx_182, out edx_99)
	edxOut = edx_99
	return 0<32>
l00743109:
	word32 edx_118
	word32 ecx_181
	fn006E0F80(Mem6[0x00A17E2C<p32>:word32], 0x8DD430<32>, out ecx_181, out edx_118)
	edxOut = edx_118
	return 0<32>
fn00743100_exit:


word32 fn007431B0(word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10, word32 dwArg14, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073EE40
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31] Stack +0010:[0..31] Stack +0014:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ecx edx Top
// Preserved: esp
fn007431B0_entry:
l007431B0:
	word32 edx_68
	word32 eax_11 = fn00740DC0(dwArg18, 0x1C<32>, out edx_68)
	branch eax_11 != 0<32> l007431CB
l007431CB:
	Mem23[eax_11 + 4<32>:word32] = dwArg04
	Mem25[eax_11 + 8<32>:word32] = dwArg08
	Mem27[eax_11 + 0xC<32>:word32] = dwArg0C
	Mem29[eax_11:word32] = 7<32>
	Mem30[eax_11 + 0x14<32>:word32] = dwArg10
	Mem31[eax_11 + 0x18<32>:word32] = dwArg14
	edxOut = dwArg10
	return eax_11
l007431C3:
	word32 edx_35
	word32 ecx_69
	fn006E1210(out ecx_69, out edx_35)
	edxOut = edx_35
	return 0<32>
fn007431B0_exit:


word32 fn00743200(word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10, word32 dwArg14, word32 dwArg18, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073D050
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31] Stack +0010:[0..31] Stack +0014:[0..31] Stack +0018:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ecx edi edx esi Top
// Preserved: esp
fn00743200_entry:
l00743200:
	branch dwArg04 != 0<32> l00743220
l00743220:
	branch dwArg08 != 0<32> l00743242
l00743242:
	word32 edx_145
	word32 eax_24 = fn00740DC0(dwArg1C, 0x1C<32>, out edx_145)
	branch eax_24 != 0<32> l0074325F
l0074325F:
	Mem36[eax_24 + 8<32>:word32] = dwArg08
	Mem37[eax_24 + 0xC<32>:word32] = dwArg0C
	Mem39[eax_24 + 0x10<32>:word32] = dwArg10
	Mem43[eax_24 + 4<32>:word32] = dwArg04
	Mem44[eax_24:word32] = 8<32>
	Mem45[eax_24 + 0x14<32>:word32] = dwArg14
	Mem46[eax_24 + 0x18<32>:word32] = dwArg18
	edxOut = dwArg18
	return eax_24
l00743255:
	word32 edx_52
	word32 ecx_147
	fn006E1210(out ecx_147, out edx_52)
	edxOut = edx_52
	return 0<32>
l00743229:
	word32 edx_70
	word32 ecx_146
	fn006E0F80(Mem13[0x00A17E2C<p32>:word32], 0x8DD458<32>, out ecx_146, out edx_70)
	edxOut = edx_70
	return 0<32>
l00743209:
	word32 edx_89
	word32 ecx_144
	fn006E0F80(Mem6[0x00A17E2C<p32>:word32], 0x8DD478<32>, out ecx_144, out edx_89)
	edxOut = edx_89
	return 0<32>
fn00743200_exit:


word32 fn00743290(word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10, word32 dwArg14, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073F5B0
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31] Stack +0010:[0..31] Stack +0014:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ecx edx esi Top
// Preserved: esp
fn00743290_entry:
l00743290:
	branch dwArg04 != 0<32> l007432B0
l007432B0:
	word32 edx_103
	word32 eax_17 = fn00740DC0(dwArg18, 0x1C<32>, out edx_103)
	branch eax_17 != 0<32> l007432CC
l007432CC:
	Mem29[eax_17 + 8<32>:word32] = dwArg08
	Mem31[eax_17 + 0xC<32>:word32] = dwArg0C
	Mem33[eax_17 + 4<32>:word32] = dwArg04
	Mem34[eax_17:word32] = 9<32>
	Mem35[eax_17 + 0x14<32>:word32] = dwArg10
	Mem36[eax_17 + 0x18<32>:word32] = dwArg14
	edxOut = dwArg10
	return eax_17
l007432C3:
	word32 edx_42
	word32 ecx_105
	fn006E1210(out ecx_105, out edx_42)
	edxOut = edx_42
	return 0<32>
l00743299:
	word32 edx_58
	word32 ecx_104
	fn006E0F80(Mem6[0x00A17E2C<p32>:word32], 0x8DD49C<32>, out ecx_104, out edx_58)
	edxOut = edx_58
	return 0<32>
fn00743290_exit:


word32 fn00743300(word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10, word32 dwArg14, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073F2C0
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31] Stack +0010:[0..31] Stack +0014:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ecx edx esi Top
// Preserved: esp
fn00743300_entry:
l00743300:
	branch dwArg04 != 0<32> l00743320
l00743320:
	word32 edx_103
	word32 eax_17 = fn00740DC0(dwArg18, 0x1C<32>, out edx_103)
	branch eax_17 != 0<32> l0074333C
l0074333C:
	Mem29[eax_17 + 8<32>:word32] = dwArg08
	Mem31[eax_17 + 0xC<32>:word32] = dwArg0C
	Mem33[eax_17 + 4<32>:word32] = dwArg04
	Mem34[eax_17:word32] = 0xA<32>
	Mem35[eax_17 + 0x14<32>:word32] = dwArg10
	Mem36[eax_17 + 0x18<32>:word32] = dwArg14
	edxOut = dwArg10
	return eax_17
l00743333:
	word32 edx_42
	word32 ecx_105
	fn006E1210(out ecx_105, out edx_42)
	edxOut = edx_42
	return 0<32>
l00743309:
	word32 edx_58
	word32 ecx_104
	fn006E0F80(Mem6[0x00A17E2C<p32>:word32], 0x8DD4C0<32>, out ecx_104, out edx_58)
	edxOut = edx_58
	return 0<32>
fn00743300_exit:


word32 fn00743370(word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10, word32 dwArg14, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073FA50
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31] Stack +0010:[0..31] Stack +0014:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ecx edx esi Top
// Preserved: esp
fn00743370_entry:
l00743370:
	branch dwArg04 != 0<32> l00743390
l00743390:
	word32 edx_103
	word32 eax_17 = fn00740DC0(dwArg18, 0x1C<32>, out edx_103)
	branch eax_17 != 0<32> l007433AC
l007433AC:
	Mem29[eax_17 + 8<32>:word32] = dwArg08
	Mem31[eax_17 + 0xC<32>:word32] = dwArg0C
	Mem33[eax_17 + 4<32>:word32] = dwArg04
	Mem34[eax_17:word32] = 0xB<32>
	Mem35[eax_17 + 0x14<32>:word32] = dwArg10
	Mem36[eax_17 + 0x18<32>:word32] = dwArg14
	edxOut = dwArg10
	return eax_17
l007433A3:
	word32 edx_42
	word32 ecx_105
	fn006E1210(out ecx_105, out edx_42)
	edxOut = edx_42
	return 0<32>
l00743379:
	word32 edx_58
	word32 ecx_104
	fn006E0F80(Mem6[0x00A17E2C<p32>:word32], 0x8DD4E0<32>, out ecx_104, out edx_58)
	edxOut = edx_58
	return 0<32>
fn00743370_exit:


word32 fn007433E0(word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10, word32 dwArg14, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073EF40
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31] Stack +0010:[0..31] Stack +0014:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ecx edx Top
// Preserved: esp
fn007433E0_entry:
l007433E0:
	word32 edx_68
	word32 eax_11 = fn00740DC0(dwArg18, 0x1C<32>, out edx_68)
	branch eax_11 != 0<32> l007433FB
l007433FB:
	Mem23[eax_11 + 4<32>:word32] = dwArg04
	Mem25[eax_11 + 8<32>:word32] = dwArg08
	Mem27[eax_11 + 0xC<32>:word32] = dwArg0C
	Mem29[eax_11:word32] = 0xC<32>
	Mem30[eax_11 + 0x14<32>:word32] = dwArg10
	Mem31[eax_11 + 0x18<32>:word32] = dwArg14
	edxOut = dwArg10
	return eax_11
l007433F3:
	word32 edx_35
	word32 ecx_69
	fn006E1210(out ecx_69, out edx_35)
	edxOut = edx_35
	return 0<32>
fn007433E0_exit:


word32 fn00743430(word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10, word32 dwArg14, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073F7B0
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31] Stack +0010:[0..31] Stack +0014:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ecx edx Top
// Preserved: esp
fn00743430_entry:
l00743430:
	word32 edx_68
	word32 eax_11 = fn00740DC0(dwArg18, 0x1C<32>, out edx_68)
	branch eax_11 != 0<32> l0074344B
l0074344B:
	Mem23[eax_11 + 4<32>:word32] = dwArg04
	Mem25[eax_11 + 8<32>:word32] = dwArg08
	Mem27[eax_11 + 0xC<32>:word32] = dwArg0C
	Mem29[eax_11:word32] = 0xD<32>
	Mem30[eax_11 + 0x14<32>:word32] = dwArg10
	Mem31[eax_11 + 0x18<32>:word32] = dwArg14
	edxOut = dwArg10
	return eax_11
l00743443:
	word32 edx_35
	word32 ecx_69
	fn006E1210(out ecx_69, out edx_35)
	edxOut = edx_35
	return 0<32>
fn00743430_exit:


word32 fn00743480(word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073F7B0
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31] Stack +0010:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ecx edx Top
// Preserved: esp
fn00743480_entry:
l00743480:
	word32 edx_65
	word32 eax_11 = fn00740DC0(dwArg14, 0x1C<32>, out edx_65)
	branch eax_11 != 0<32> l0074349B
l0074349B:
	Mem23[eax_11 + 4<32>:word32] = dwArg04
	Mem25[eax_11 + 8<32>:word32] = dwArg08
	Mem27[eax_11:word32] = 0xE<32>
	Mem28[eax_11 + 0x14<32>:word32] = dwArg0C
	Mem29[eax_11 + 0x18<32>:word32] = dwArg10
	edxOut = dwArg10
	return eax_11
l00743493:
	word32 edx_33
	word32 ecx_66
	fn006E1210(out ecx_66, out edx_33)
	edxOut = edx_33
	return 0<32>
fn00743480_exit:


word32 fn007434C0(word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073F220
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31] Stack +0010:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ecx edx esi Top
// Preserved: esp
fn007434C0_entry:
l007434C0:
	branch dwArg04 != 0<32> l007434E0
l007434E0:
	word32 edx_100
	word32 eax_17 = fn00740DC0(dwArg14, 0x1C<32>, out edx_100)
	branch eax_17 != 0<32> l007434FC
l007434FC:
	Mem29[eax_17 + 8<32>:word32] = dwArg08
	Mem31[eax_17 + 4<32>:word32] = dwArg04
	Mem32[eax_17:word32] = 0xF<32>
	Mem33[eax_17 + 0x14<32>:word32] = dwArg0C
	Mem34[eax_17 + 0x18<32>:word32] = dwArg10
	edxOut = dwArg10
	return eax_17
l007434F3:
	word32 edx_40
	word32 ecx_102
	fn006E1210(out ecx_102, out edx_40)
	edxOut = edx_40
	return 0<32>
l007434C9:
	word32 edx_56
	word32 ecx_101
	fn006E0F80(Mem6[0x00A17E2C<p32>:word32], 0x8DD508<32>, out ecx_101, out edx_56)
	edxOut = edx_56
	return 0<32>
fn007434C0_exit:


word32 fn00743520(word32 dwArg04, word32 dwArg08, word32 dwArg0C, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073CAE0
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ecx edx Top
// Preserved: esp
fn00743520_entry:
l00743520:
	word32 edx_62
	word32 eax_11 = fn00740DC0(dwArg10, 0x1C<32>, out edx_62)
	branch eax_11 != 0<32> l0074353B
l0074353B:
	Mem23[eax_11 + 4<32>:word32] = dwArg04
	Mem25[eax_11:word32] = 0x10<32>
	Mem26[eax_11 + 0x14<32>:word32] = dwArg08
	Mem27[eax_11 + 0x18<32>:word32] = dwArg0C
	edxOut = dwArg08
	return eax_11
l00743533:
	word32 edx_31
	word32 ecx_63
	fn006E1210(out ecx_63, out edx_31)
	edxOut = edx_31
	return 0<32>
fn00743520_exit:


word32 fn00743560(word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10, word32 dwArg14, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073CAE0
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31] Stack +0010:[0..31] Stack +0014:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ecx edx esi Top
// Preserved: esp
fn00743560_entry:
l00743560:
	branch dwArg04 != 0<32> l00743580
l00743580:
	word32 edx_103
	word32 eax_17 = fn00740DC0(dwArg18, 0x1C<32>, out edx_103)
	branch eax_17 != 0<32> l0074359C
l0074359C:
	Mem29[eax_17 + 8<32>:word32] = dwArg08
	Mem31[eax_17 + 0xC<32>:word32] = dwArg0C
	Mem33[eax_17 + 4<32>:word32] = dwArg04
	Mem34[eax_17:word32] = 0x11<32>
	Mem35[eax_17 + 0x14<32>:word32] = dwArg10
	Mem36[eax_17 + 0x18<32>:word32] = dwArg14
	edxOut = dwArg10
	return eax_17
l00743593:
	word32 edx_42
	word32 ecx_105
	fn006E1210(out ecx_105, out edx_42)
	edxOut = edx_42
	return 0<32>
l00743569:
	word32 edx_58
	word32 ecx_104
	fn006E0F80(Mem6[0x00A17E2C<p32>:word32], 0x8DD52C<32>, out ecx_104, out edx_58)
	edxOut = edx_58
	return 0<32>
fn00743560_exit:


word32 fn007435D0(word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10, word32 dwArg14, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073F160
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31] Stack +0010:[0..31] Stack +0014:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ecx edx esi Top
// Preserved: esp
fn007435D0_entry:
l007435D0:
	branch dwArg04 != 0<32> l007435F0
l007435F0:
	word32 edx_103
	word32 eax_17 = fn00740DC0(dwArg18, 0x1C<32>, out edx_103)
	branch eax_17 != 0<32> l0074360C
l0074360C:
	Mem29[eax_17 + 8<32>:word32] = dwArg08
	Mem31[eax_17 + 0xC<32>:word32] = dwArg0C
	Mem33[eax_17 + 4<32>:word32] = dwArg04
	Mem34[eax_17:word32] = 0x12<32>
	Mem35[eax_17 + 0x14<32>:word32] = dwArg10
	Mem36[eax_17 + 0x18<32>:word32] = dwArg14
	edxOut = dwArg10
	return eax_17
l00743603:
	word32 edx_42
	word32 ecx_105
	fn006E1210(out ecx_105, out edx_42)
	edxOut = edx_42
	return 0<32>
l007435D9:
	word32 edx_58
	word32 ecx_104
	fn006E0F80(Mem6[0x00A17E2C<p32>:word32], 0x8DD554<32>, out ecx_104, out edx_58)
	edxOut = edx_58
	return 0<32>
fn007435D0_exit:


word32 fn00743640(word32 dwArg04, word32 dwArg08, word32 dwArg0C, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073CE00
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ecx edx Top
// Preserved: esp
fn00743640_entry:
l00743640:
	word32 edx_62
	word32 eax_11 = fn00740DC0(dwArg10, 0x1C<32>, out edx_62)
	branch eax_11 != 0<32> l0074365B
l0074365B:
	Mem23[eax_11 + 4<32>:word32] = dwArg04
	Mem25[eax_11:word32] = 0x13<32>
	Mem26[eax_11 + 0x14<32>:word32] = dwArg08
	Mem27[eax_11 + 0x18<32>:word32] = dwArg0C
	edxOut = dwArg08
	return eax_11
l00743653:
	word32 edx_31
	word32 ecx_63
	fn006E1210(out ecx_63, out edx_31)
	edxOut = edx_31
	return 0<32>
fn00743640_exit:


word32 fn00743680(word32 dwArg04, word32 dwArg08, word32 dwArg0C, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073EB70
//      fn0073EF40
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ecx edx esi Top
// Preserved: esp
fn00743680_entry:
l00743680:
	branch dwArg04 != 0<32> l007436A0
l007436A0:
	word32 edx_97
	word32 eax_17 = fn00740DC0(dwArg10, 0x1C<32>, out edx_97)
	branch eax_17 != 0<32> l007436BC
l007436BC:
	Mem29[eax_17 + 4<32>:word32] = dwArg04
	Mem30[eax_17:word32] = 0x14<32>
	Mem31[eax_17 + 0x14<32>:word32] = dwArg08
	Mem32[eax_17 + 0x18<32>:word32] = dwArg0C
	edxOut = dwArg08
	return eax_17
l007436B3:
	word32 edx_38
	word32 ecx_99
	fn006E1210(out ecx_99, out edx_38)
	edxOut = edx_38
	return 0<32>
l00743689:
	word32 edx_54
	word32 ecx_98
	fn006E0F80(Mem6[0x00A17E2C<p32>:word32], 0x8DD574<32>, out ecx_98, out edx_54)
	edxOut = edx_54
	return 0<32>
fn00743680_exit:


word32 fn007436E0(word32 dwArg04, word32 dwArg08, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00740160
//      fn007403E0
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ecx edx Top
// Preserved: esp
fn007436E0_entry:
l007436E0:
	word32 edx_59
	word32 eax_11 = fn00740DC0(dwArg0C, 0x1C<32>, out edx_59)
	branch eax_11 != 0<32> l007436FB
l007436FB:
	Mem23[eax_11:word32] = 0x15<32>
	Mem24[eax_11 + 0x14<32>:word32] = dwArg04
	Mem25[eax_11 + 0x18<32>:word32] = dwArg08
	edxOut = dwArg08
	return eax_11
l007436F3:
	word32 edx_29
	word32 ecx_60
	fn006E1210(out ecx_60, out edx_29)
	edxOut = edx_29
	return 0<32>
fn007436E0_exit:


word32 fn00743710(word32 dwArg04, word32 dwArg08, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073EF40
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ecx edx Top
// Preserved: esp
fn00743710_entry:
l00743710:
	word32 edx_59
	word32 eax_11 = fn00740DC0(dwArg0C, 0x1C<32>, out edx_59)
	branch eax_11 != 0<32> l0074372B
l0074372B:
	Mem23[eax_11:word32] = 0x16<32>
	Mem24[eax_11 + 0x14<32>:word32] = dwArg04
	Mem25[eax_11 + 0x18<32>:word32] = dwArg08
	edxOut = dwArg08
	return eax_11
l00743723:
	word32 edx_29
	word32 ecx_60
	fn006E1210(out ecx_60, out edx_29)
	edxOut = edx_29
	return 0<32>
fn00743710_exit:


word32 fn00743740(word32 dwArg04, word32 dwArg08, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073EF40
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ecx edx Top
// Preserved: esp
fn00743740_entry:
l00743740:
	word32 edx_59
	word32 eax_11 = fn00740DC0(dwArg0C, 0x1C<32>, out edx_59)
	branch eax_11 != 0<32> l0074375B
l0074375B:
	Mem23[eax_11:word32] = 0x17<32>
	Mem24[eax_11 + 0x14<32>:word32] = dwArg04
	Mem25[eax_11 + 0x18<32>:word32] = dwArg08
	edxOut = dwArg08
	return eax_11
l00743753:
	word32 edx_29
	word32 ecx_60
	fn006E1210(out ecx_60, out edx_29)
	edxOut = edx_29
	return 0<32>
fn00743740_exit:


word32 fn00743770(word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073E7A0
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31] Stack +0010:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ecx edx esi Top
// Preserved: esp
fn00743770_entry:
l00743770:
	branch dwArg04 != 0<32> l00743790
l00743790:
	word32 edx_100
	word32 eax_17 = fn00740DC0(dwArg14, 0x20<32>, out edx_100)
	branch eax_17 != 0<32> l007437AC
l007437AC:
	Mem29[eax_17 + 8<32>:word32] = dwArg08
	Mem31[eax_17 + 4<32>:word32] = dwArg04
	Mem32[eax_17:word32] = 1<32>
	Mem33[eax_17 + 0x18<32>:word32] = dwArg0C
	Mem34[eax_17 + 0x1C<32>:word32] = dwArg10
	edxOut = dwArg10
	return eax_17
l007437A3:
	word32 edx_40
	word32 ecx_102
	fn006E1210(out ecx_102, out edx_40)
	edxOut = edx_40
	return 0<32>
l00743779:
	word32 edx_56
	word32 ecx_101
	fn006E0F80(Mem6[0x00A17E2C<p32>:word32], 0x8DD598<32>, out ecx_101, out edx_56)
	edxOut = edx_56
	return 0<32>
fn00743770_exit:


word32 fn007437D0(word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10, word32 dwArg14, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073C680
//      fn0073E6E0
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31] Stack +0010:[0..31] Stack +0014:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ebx ecx edi edx esi Top
// Preserved: esp
fn007437D0_entry:
l007437D0:
	branch dwArg04 != 0<32> l007437F0
l007437F0:
	branch dwArg08 != 0<32> l00743812
l00743812:
	branch dwArg0C != 0<32> l00743835
l00743835:
	word32 edx_183
	word32 eax_31 = fn00740DC0(dwArg18, 0x20<32>, out edx_183)
	branch eax_31 != 0<32> l00743853
l00743853:
	Mem43[eax_31 + 0xC<32>:word32] = dwArg0C
	Mem46[eax_31 + 8<32>:word32] = dwArg08
	Mem49[eax_31 + 4<32>:word32] = dwArg04
	Mem50[eax_31:word32] = 2<32>
	Mem51[eax_31 + 0x18<32>:word32] = dwArg10
	Mem52[eax_31 + 0x1C<32>:word32] = dwArg14
	edxOut = dwArg14
	return eax_31
l00743848:
	word32 edx_58
	word32 ecx_185
	fn006E1210(out ecx_185, out edx_58)
	edxOut = edx_58
	return 0<32>
l0074381B:
	word32 edx_78
	word32 ecx_184
	fn006E0F80(Mem20[0x00A17E2C<p32>:word32], 0x8DD5B8<32>, out ecx_184, out edx_78)
	edxOut = edx_78
	return 0<32>
l007437F9:
	word32 edx_99
	word32 ecx_182
	fn006E0F80(Mem13[0x00A17E2C<p32>:word32], 0x8DD5DC<32>, out ecx_182, out edx_99)
	edxOut = edx_99
	return 0<32>
l007437D9:
	word32 edx_118
	word32 ecx_181
	fn006E0F80(Mem6[0x00A17E2C<p32>:word32], 0x8DD5FC<32>, out ecx_181, out edx_118)
	edxOut = edx_118
	return 0<32>
fn007437D0_exit:


word32 fn00743880(word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073E590
//      fn0073E7A0
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31] Stack +0010:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ecx edi edx esi Top
// Preserved: esp
fn00743880_entry:
l00743880:
	branch dwArg04 != 0<32> l007438A0
l007438A0:
	branch dwArg08 != 0<32> l007438C2
l007438C2:
	word32 edx_139
	word32 eax_24 = fn00740DC0(dwArg14, 0x20<32>, out edx_139)
	branch eax_24 != 0<32> l007438DF
l007438DF:
	Mem36[eax_24 + 8<32>:word32] = dwArg08
	Mem39[eax_24 + 4<32>:word32] = dwArg04
	Mem40[eax_24:word32] = 3<32>
	Mem41[eax_24 + 0x18<32>:word32] = dwArg0C
	Mem42[eax_24 + 0x1C<32>:word32] = dwArg10
	edxOut = dwArg10
	return eax_24
l007438D5:
	word32 edx_48
	word32 ecx_141
	fn006E1210(out ecx_141, out edx_48)
	edxOut = edx_48
	return 0<32>
l007438A9:
	word32 edx_66
	word32 ecx_140
	fn006E0F80(Mem13[0x00A17E2C<p32>:word32], 0x8DD620<32>, out ecx_140, out edx_66)
	edxOut = edx_66
	return 0<32>
l00743889:
	word32 edx_85
	word32 ecx_138
	fn006E0F80(Mem6[0x00A17E2C<p32>:word32], 0x8DD648<32>, out ecx_138, out edx_85)
	edxOut = edx_85
	return 0<32>
fn00743880_exit:


word32 fn00743900(word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073C370
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31] Stack +0010:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ecx edi edx esi Top
// Preserved: esp
fn00743900_entry:
l00743900:
	branch dwArg04 != 0<32> l00743920
l00743920:
	branch dwArg08 != 0<32> l00743942
l00743942:
	word32 edx_139
	word32 eax_24 = fn00740DC0(dwArg14, 0x20<32>, out edx_139)
	branch eax_24 != 0<32> l0074395F
l0074395F:
	Mem36[eax_24 + 8<32>:word32] = dwArg08
	Mem39[eax_24 + 4<32>:word32] = dwArg04
	Mem40[eax_24:word32] = 4<32>
	Mem41[eax_24 + 0x18<32>:word32] = dwArg0C
	Mem42[eax_24 + 0x1C<32>:word32] = dwArg10
	edxOut = dwArg10
	return eax_24
l00743955:
	word32 edx_48
	word32 ecx_141
	fn006E1210(out ecx_141, out edx_48)
	edxOut = edx_48
	return 0<32>
l00743929:
	word32 edx_66
	word32 ecx_140
	fn006E0F80(Mem13[0x00A17E2C<p32>:word32], 0x8DD66C<32>, out ecx_140, out edx_66)
	edxOut = edx_66
	return 0<32>
l00743909:
	word32 edx_85
	word32 ecx_138
	fn006E0F80(Mem6[0x00A17E2C<p32>:word32], 0x8DD690<32>, out ecx_138, out edx_85)
	edxOut = edx_85
	return 0<32>
fn00743900_exit:


word32 fn00743980(word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10, word32 dwArg14, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073C3E0
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31] Stack +0010:[0..31] Stack +0014:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ebx ecx edi edx esi Top
// Preserved: esp
fn00743980_entry:
l00743980:
	branch dwArg04 != 0<32> l007439A0
l007439A0:
	branch dwArg08 != 0<32> l007439C2
l007439C2:
	branch dwArg0C != 0<32> l007439E5
l007439E5:
	word32 edx_183
	word32 eax_31 = fn00740DC0(dwArg18, 0x20<32>, out edx_183)
	branch eax_31 != 0<32> l00743A03
l00743A03:
	Mem43[eax_31 + 0xC<32>:word32] = dwArg0C
	Mem46[eax_31 + 8<32>:word32] = dwArg08
	Mem49[eax_31 + 4<32>:word32] = dwArg04
	Mem50[eax_31:word32] = 5<32>
	Mem51[eax_31 + 0x18<32>:word32] = dwArg10
	Mem52[eax_31 + 0x1C<32>:word32] = dwArg14
	edxOut = dwArg14
	return eax_31
l007439F8:
	word32 edx_58
	word32 ecx_185
	fn006E1210(out ecx_185, out edx_58)
	edxOut = edx_58
	return 0<32>
l007439CB:
	word32 edx_78
	word32 ecx_184
	fn006E0F80(Mem20[0x00A17E2C<p32>:word32], 0x8DD6B4<32>, out ecx_184, out edx_78)
	edxOut = edx_78
	return 0<32>
l007439A9:
	word32 edx_99
	word32 ecx_182
	fn006E0F80(Mem13[0x00A17E2C<p32>:word32], 0x8DD6D8<32>, out ecx_182, out edx_99)
	edxOut = edx_99
	return 0<32>
l00743989:
	word32 edx_118
	word32 ecx_181
	fn006E0F80(Mem6[0x00A17E2C<p32>:word32], 0x8DD6FC<32>, out ecx_181, out edx_118)
	edxOut = edx_118
	return 0<32>
fn00743980_exit:


word32 fn00743A30(word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073E050
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31] Stack +0010:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ecx edx Top
// Preserved: esp
fn00743A30_entry:
l00743A30:
	word32 edx_65
	word32 eax_11 = fn00740DC0(dwArg14, 0x20<32>, out edx_65)
	branch eax_11 != 0<32> l00743A4B
l00743A4B:
	Mem23[eax_11 + 4<32>:word32] = dwArg04
	Mem25[eax_11 + 8<32>:word32] = dwArg08
	Mem27[eax_11:word32] = 6<32>
	Mem28[eax_11 + 0x18<32>:word32] = dwArg0C
	Mem29[eax_11 + 0x1C<32>:word32] = dwArg10
	edxOut = dwArg10
	return eax_11
l00743A43:
	word32 edx_33
	word32 ecx_66
	fn006E1210(out ecx_66, out edx_33)
	edxOut = edx_33
	return 0<32>
fn00743A30_exit:


word32 fn00743A70(word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073D7A0
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31] Stack +0010:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ecx edx esi Top
// Preserved: esp
fn00743A70_entry:
l00743A70:
	branch dwArg04 != 0<32> l00743A90
l00743A90:
	word32 edx_100
	word32 eax_17 = fn00740DC0(dwArg14, 0x20<32>, out edx_100)
	branch eax_17 != 0<32> l00743AAC
l00743AAC:
	Mem29[eax_17 + 8<32>:word32] = dwArg08
	Mem31[eax_17 + 4<32>:word32] = dwArg04
	Mem32[eax_17:word32] = 7<32>
	Mem33[eax_17 + 0x18<32>:word32] = dwArg0C
	Mem34[eax_17 + 0x1C<32>:word32] = dwArg10
	edxOut = dwArg10
	return eax_17
l00743AA3:
	word32 edx_40
	word32 ecx_102
	fn006E1210(out ecx_102, out edx_40)
	edxOut = edx_40
	return 0<32>
l00743A79:
	word32 edx_56
	word32 ecx_101
	fn006E0F80(Mem6[0x00A17E2C<p32>:word32], 0x8DD720<32>, out ecx_101, out edx_56)
	edxOut = edx_56
	return 0<32>
fn00743A70_exit:


word32 fn00743AD0(word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073D9C0
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31] Stack +0010:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ecx edx esi Top
// Preserved: esp
fn00743AD0_entry:
l00743AD0:
	branch dwArg04 != 0<32> l00743AF0
l00743AF0:
	word32 edx_100
	word32 eax_17 = fn00740DC0(dwArg14, 0x20<32>, out edx_100)
	branch eax_17 != 0<32> l00743B0C
l00743B0C:
	Mem29[eax_17 + 8<32>:word32] = dwArg08
	Mem31[eax_17 + 4<32>:word32] = dwArg04
	Mem32[eax_17:word32] = 8<32>
	Mem33[eax_17 + 0x18<32>:word32] = dwArg0C
	Mem34[eax_17 + 0x1C<32>:word32] = dwArg10
	edxOut = dwArg10
	return eax_17
l00743B03:
	word32 edx_40
	word32 ecx_102
	fn006E1210(out ecx_102, out edx_40)
	edxOut = edx_40
	return 0<32>
l00743AD9:
	word32 edx_56
	word32 ecx_101
	fn006E0F80(Mem6[0x00A17E2C<p32>:word32], 0x8DD744<32>, out ecx_101, out edx_56)
	edxOut = edx_56
	return 0<32>
fn00743AD0_exit:


word32 fn00743B30(word32 dwArg04, word32 dwArg08, word32 dwArg0C, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073E7A0
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ecx edx Top
// Preserved: esp
fn00743B30_entry:
l00743B30:
	word32 edx_62
	word32 eax_11 = fn00740DC0(dwArg10, 0x20<32>, out edx_62)
	branch eax_11 != 0<32> l00743B4B
l00743B4B:
	Mem23[eax_11 + 4<32>:word32] = dwArg04
	Mem25[eax_11:word32] = 9<32>
	Mem26[eax_11 + 0x18<32>:word32] = dwArg08
	Mem27[eax_11 + 0x1C<32>:word32] = dwArg0C
	edxOut = dwArg08
	return eax_11
l00743B43:
	word32 edx_31
	word32 ecx_63
	fn006E1210(out ecx_63, out edx_31)
	edxOut = edx_31
	return 0<32>
fn00743B30_exit:


word32 fn00743B70(word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10, word32 dwArg14, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073E7A0
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31] Stack +0010:[0..31] Stack +0014:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ecx edx esi Top
// Preserved: esp
fn00743B70_entry:
l00743B70:
	branch dwArg04 != 0<32> l00743B90
l00743B90:
	word32 edx_103
	word32 eax_17 = fn00740DC0(dwArg18, 0x20<32>, out edx_103)
	branch eax_17 != 0<32> l00743BAC
l00743BAC:
	Mem29[eax_17 + 8<32>:word32] = dwArg08
	Mem31[eax_17 + 0xC<32>:word32] = dwArg0C
	Mem33[eax_17 + 4<32>:word32] = dwArg04
	Mem34[eax_17:word32] = 0xA<32>
	Mem35[eax_17 + 0x18<32>:word32] = dwArg10
	Mem36[eax_17 + 0x1C<32>:word32] = dwArg14
	edxOut = dwArg10
	return eax_17
l00743BA3:
	word32 edx_42
	word32 ecx_105
	fn006E1210(out ecx_105, out edx_42)
	edxOut = edx_42
	return 0<32>
l00743B79:
	word32 edx_58
	word32 ecx_104
	fn006E0F80(Mem6[0x00A17E2C<p32>:word32], 0x8DD76C<32>, out ecx_104, out edx_58)
	edxOut = edx_58
	return 0<32>
fn00743B70_exit:


word32 fn00743BE0(word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10, word32 dwArg14, word32 dwArg18, word32 dwArg1C, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073DBD0
//      fn0073DF70
//      fn0073E390
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31] Stack +0010:[0..31] Stack +0014:[0..31] Stack +0018:[0..31] Stack +001C:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ecx edx esi Top
// Preserved: esp
fn00743BE0_entry:
l00743BE0:
	branch dwArg04 != 0<32> l00743C00
l00743C00:
	word32 edx_109
	word32 eax_17 = fn00740DC0(dwArg20, 0x20<32>, out edx_109)
	branch eax_17 != 0<32> l00743C1C
l00743C1C:
	Mem29[eax_17 + 8<32>:word32] = dwArg08
	Mem31[eax_17 + 0xC<32>:word32] = dwArg0C
	Mem33[eax_17 + 0x10<32>:word32] = dwArg10
	Mem35[eax_17 + 0x14<32>:word32] = dwArg14
	Mem37[eax_17 + 4<32>:word32] = dwArg04
	Mem38[eax_17:word32] = 0xB<32>
	Mem39[eax_17 + 0x18<32>:word32] = dwArg18
	Mem40[eax_17 + 0x1C<32>:word32] = dwArg1C
	edxOut = dwArg18
	return eax_17
l00743C13:
	word32 edx_46
	word32 ecx_111
	fn006E1210(out ecx_111, out edx_46)
	edxOut = edx_46
	return 0<32>
l00743BE9:
	word32 edx_62
	word32 ecx_110
	fn006E0F80(Mem6[0x00A17E2C<p32>:word32], 0x8DD790<32>, out ecx_110, out edx_62)
	edxOut = edx_62
	return 0<32>
fn00743BE0_exit:


word32 fn00743C60(word32 dwArg04, word32 dwArg08, word32 dwArg0C, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073E050
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ecx edx esi Top
// Preserved: esp
fn00743C60_entry:
l00743C60:
	branch dwArg04 != 0<32> l00743C80
l00743C80:
	word32 edx_97
	word32 eax_17 = fn00740DC0(dwArg10, 0x20<32>, out edx_97)
	branch eax_17 != 0<32> l00743C9C
l00743C9C:
	Mem29[eax_17 + 4<32>:word32] = dwArg04
	Mem30[eax_17:word32] = 0xC<32>
	Mem31[eax_17 + 0x18<32>:word32] = dwArg08
	Mem32[eax_17 + 0x1C<32>:word32] = dwArg0C
	edxOut = dwArg08
	return eax_17
l00743C93:
	word32 edx_38
	word32 ecx_99
	fn006E1210(out ecx_99, out edx_38)
	edxOut = edx_38
	return 0<32>
l00743C69:
	word32 edx_54
	word32 ecx_98
	fn006E0F80(Mem6[0x00A17E2C<p32>:word32], 0x8DD7B0<32>, out ecx_98, out edx_54)
	edxOut = edx_54
	return 0<32>
fn00743C60_exit:


word32 fn00743CC0(word32 dwArg04, word32 dwArg08, word32 dwArg0C, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073E050
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ecx edx esi Top
// Preserved: esp
fn00743CC0_entry:
l00743CC0:
	branch dwArg04 != 0<32> l00743CE0
l00743CE0:
	word32 edx_97
	word32 eax_17 = fn00740DC0(dwArg10, 0x20<32>, out edx_97)
	branch eax_17 != 0<32> l00743CFC
l00743CFC:
	Mem29[eax_17 + 4<32>:word32] = dwArg04
	Mem30[eax_17:word32] = 0xD<32>
	Mem31[eax_17 + 0x18<32>:word32] = dwArg08
	Mem32[eax_17 + 0x1C<32>:word32] = dwArg0C
	edxOut = dwArg08
	return eax_17
l00743CF3:
	word32 edx_38
	word32 ecx_99
	fn006E1210(out ecx_99, out edx_38)
	edxOut = edx_38
	return 0<32>
l00743CC9:
	word32 edx_54
	word32 ecx_98
	fn006E0F80(Mem6[0x00A17E2C<p32>:word32], 0x8DD7D4<32>, out ecx_98, out edx_54)
	edxOut = edx_54
	return 0<32>
fn00743CC0_exit:


word32 fn00743D20(word32 dwArg04, word32 dwArg08, word32 dwArg0C, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073E050
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ecx edx esi Top
// Preserved: esp
fn00743D20_entry:
l00743D20:
	branch dwArg04 != 0<32> l00743D40
l00743D40:
	word32 edx_97
	word32 eax_17 = fn00740DC0(dwArg10, 0x20<32>, out edx_97)
	branch eax_17 != 0<32> l00743D5C
l00743D5C:
	Mem29[eax_17 + 4<32>:word32] = dwArg04
	Mem30[eax_17:word32] = 0xE<32>
	Mem31[eax_17 + 0x18<32>:word32] = dwArg08
	Mem32[eax_17 + 0x1C<32>:word32] = dwArg0C
	edxOut = dwArg08
	return eax_17
l00743D53:
	word32 edx_38
	word32 ecx_99
	fn006E1210(out ecx_99, out edx_38)
	edxOut = edx_38
	return 0<32>
l00743D29:
	word32 edx_54
	word32 ecx_98
	fn006E0F80(Mem6[0x00A17E2C<p32>:word32], 0x8DD7F0<32>, out ecx_98, out edx_54)
	edxOut = edx_54
	return 0<32>
fn00743D20_exit:


word32 fn00743D80(word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10, word32 dwArg14, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0072B830
//      fn0073C280
//      fn0073E390
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31] Stack +0010:[0..31] Stack +0014:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ebx ecx edi edx esi Top
// Preserved: esp
fn00743D80_entry:
l00743D80:
	branch dwArg04 != 0<32> l00743DA0
l00743DA0:
	branch dwArg08 != 0<32> l00743DC2
l00743DC2:
	branch dwArg0C != 0<32> l00743DE5
l00743DE5:
	word32 edx_183
	word32 eax_31 = fn00740DC0(dwArg18, 0x20<32>, out edx_183)
	branch eax_31 != 0<32> l00743E03
l00743E03:
	Mem43[eax_31 + 0xC<32>:word32] = dwArg0C
	Mem46[eax_31 + 8<32>:word32] = dwArg08
	Mem49[eax_31 + 4<32>:word32] = dwArg04
	Mem50[eax_31:word32] = 0xF<32>
	Mem51[eax_31 + 0x18<32>:word32] = dwArg10
	Mem52[eax_31 + 0x1C<32>:word32] = dwArg14
	edxOut = dwArg14
	return eax_31
l00743DF8:
	word32 edx_58
	word32 ecx_185
	fn006E1210(out ecx_185, out edx_58)
	edxOut = edx_58
	return 0<32>
l00743DCB:
	word32 edx_78
	word32 ecx_184
	fn006E0F80(Mem20[0x00A17E2C<p32>:word32], 0x8DD80C<32>, out ecx_184, out edx_78)
	edxOut = edx_78
	return 0<32>
l00743DA9:
	word32 edx_99
	word32 ecx_182
	fn006E0F80(Mem13[0x00A17E2C<p32>:word32], 0x8DD830<32>, out ecx_182, out edx_99)
	edxOut = edx_99
	return 0<32>
l00743D89:
	word32 edx_118
	word32 ecx_181
	fn006E0F80(Mem6[0x00A17E2C<p32>:word32], 0x8DD858<32>, out ecx_181, out edx_118)
	edxOut = edx_118
	return 0<32>
fn00743D80_exit:


word32 fn00743E30(word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10, word32 dwArg14, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0072B830
//      fn0073E390
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31] Stack +0010:[0..31] Stack +0014:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ebx ecx edi edx esi Top
// Preserved: esp
fn00743E30_entry:
l00743E30:
	branch dwArg04 != 0<32> l00743E50
l00743E50:
	branch dwArg08 != 0<32> l00743E72
l00743E72:
	branch dwArg0C != 0<32> l00743E95
l00743E95:
	word32 edx_183
	word32 eax_31 = fn00740DC0(dwArg18, 0x20<32>, out edx_183)
	branch eax_31 != 0<32> l00743EB3
l00743EB3:
	Mem43[eax_31 + 0xC<32>:word32] = dwArg0C
	Mem46[eax_31 + 8<32>:word32] = dwArg08
	Mem49[eax_31 + 4<32>:word32] = dwArg04
	Mem50[eax_31:word32] = 0x10<32>
	Mem51[eax_31 + 0x18<32>:word32] = dwArg10
	Mem52[eax_31 + 0x1C<32>:word32] = dwArg14
	edxOut = dwArg14
	return eax_31
l00743EA8:
	word32 edx_58
	word32 ecx_185
	fn006E1210(out ecx_185, out edx_58)
	edxOut = edx_58
	return 0<32>
l00743E7B:
	word32 edx_78
	word32 ecx_184
	fn006E0F80(Mem20[0x00A17E2C<p32>:word32], 0x8DD880<32>, out ecx_184, out edx_78)
	edxOut = edx_78
	return 0<32>
l00743E59:
	word32 edx_99
	word32 ecx_182
	fn006E0F80(Mem13[0x00A17E2C<p32>:word32], 0x8DD8A4<32>, out ecx_182, out edx_99)
	edxOut = edx_99
	return 0<32>
l00743E39:
	word32 edx_118
	word32 ecx_181
	fn006E0F80(Mem6[0x00A17E2C<p32>:word32], 0x8DD8CC<32>, out ecx_181, out edx_118)
	edxOut = edx_118
	return 0<32>
fn00743E30_exit:


word32 fn00743EE0(word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073C100
//      fn0073C280
//      fn0073C520
//      fn0073E050
//      fn0073FC30
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31] Stack +0010:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ecx edi edx esi Top
// Preserved: esp
fn00743EE0_entry:
l00743EE0:
	branch dwArg04 != 0<32> l00743F00
l00743F00:
	branch dwArg08 != 0<32> l00743F22
l00743F22:
	word32 edx_139
	word32 eax_24 = fn00740DC0(dwArg14, 0x20<32>, out edx_139)
	branch eax_24 != 0<32> l00743F3F
l00743F3F:
	Mem36[eax_24 + 8<32>:word32] = dwArg08
	Mem39[eax_24 + 4<32>:word32] = dwArg04
	Mem40[eax_24:word32] = 0x11<32>
	Mem41[eax_24 + 0x18<32>:word32] = dwArg0C
	Mem42[eax_24 + 0x1C<32>:word32] = dwArg10
	edxOut = dwArg10
	return eax_24
l00743F35:
	word32 edx_48
	word32 ecx_141
	fn006E1210(out ecx_141, out edx_48)
	edxOut = edx_48
	return 0<32>
l00743F09:
	word32 edx_66
	word32 ecx_140
	fn006E0F80(Mem13[0x00A17E2C<p32>:word32], 0x8DD8F4<32>, out ecx_140, out edx_66)
	edxOut = edx_66
	return 0<32>
l00743EE9:
	word32 edx_85
	word32 ecx_138
	fn006E0F80(Mem6[0x00A17E2C<p32>:word32], 0x8DD914<32>, out ecx_138, out edx_85)
	edxOut = edx_85
	return 0<32>
fn00743EE0_exit:


word32 fn00743F60(word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073E050
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31] Stack +0010:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ecx edx esi Top
// Preserved: esp
fn00743F60_entry:
l00743F60:
	branch dwArg08 != 0<32> l00743F80
l00743F80:
	word32 edx_100
	word32 eax_17 = fn00740DC0(dwArg14, 0x20<32>, out edx_100)
	branch eax_17 != 0<32> l00743F9C
l00743F9C:
	Mem29[eax_17 + 4<32>:word32] = dwArg04
	Mem31[eax_17 + 8<32>:word32] = dwArg08
	Mem32[eax_17:word32] = 0x12<32>
	Mem33[eax_17 + 0x18<32>:word32] = dwArg0C
	Mem34[eax_17 + 0x1C<32>:word32] = dwArg10
	edxOut = dwArg10
	return eax_17
l00743F93:
	word32 edx_40
	word32 ecx_102
	fn006E1210(out ecx_102, out edx_40)
	edxOut = edx_40
	return 0<32>
l00743F69:
	word32 edx_56
	word32 ecx_101
	fn006E0F80(Mem6[0x00A17E2C<p32>:word32], 0x8DD934<32>, out ecx_101, out edx_56)
	edxOut = edx_56
	return 0<32>
fn00743F60_exit:


word32 fn00743FC0(word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073C100
//      fn0073C790
//      fn0073D050
//      fn0073D7A0
//      fn0073D9C0
//      fn0073DF10
//      fn0073E050
//      fn0073E390
//      fn0073EB70
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31] Stack +0010:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ecx edx esi Top
// Preserved: esp
fn00743FC0_entry:
l00743FC0:
	branch dwArg08 != 0<32> l00743FE0
l00743FE0:
	word32 edx_100
	word32 eax_17 = fn00740DC0(dwArg14, 0x20<32>, out edx_100)
	branch eax_17 != 0<32> l00743FFC
l00743FFC:
	Mem29[eax_17 + 4<32>:word32] = dwArg04
	Mem31[eax_17 + 8<32>:word32] = dwArg08
	Mem32[eax_17:word32] = 0x13<32>
	Mem33[eax_17 + 0x18<32>:word32] = dwArg0C
	Mem34[eax_17 + 0x1C<32>:word32] = dwArg10
	edxOut = dwArg10
	return eax_17
l00743FF3:
	word32 edx_40
	word32 ecx_102
	fn006E1210(out ecx_102, out edx_40)
	edxOut = edx_40
	return 0<32>
l00743FC9:
	word32 edx_56
	word32 ecx_101
	fn006E0F80(Mem6[0x00A17E2C<p32>:word32], 0x8DD954<32>, out ecx_101, out edx_56)
	edxOut = edx_56
	return 0<32>
fn00743FC0_exit:


word32 fn00744020(ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073C520
// MayUse: 
// LiveOut: eax edx
// Trashed: SCZO eax Top
// Preserved: esp
fn00744020_entry:
l00744020:
	word32 edx_47
	word32 eax_11 = fn00740DC0(dwArg04, 0x10<32>, out edx_47)
	branch eax_11 != 0<32> l0074403B
l0074403B:
	Mem19[eax_11:word32] = 1<32>
	edxOut = <invalid>
	return eax_11
l00744033:
	word32 ecx_48
	word32 edx_49
	fn006E1210(out ecx_48, out edx_49)
	edxOut = <invalid>
	return 0<32>
fn00744020_exit:


word32 fn00744050(word32 dwArg04, word32 dwArg08, word32 dwArg0C, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073C520
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ecx edx Top
// Preserved: esp
fn00744050_entry:
l00744050:
	word32 edx_62
	word32 eax_11 = fn00740DC0(dwArg10, 0x10<32>, out edx_62)
	branch eax_11 != 0<32> l0074406B
l0074406B:
	Mem23[eax_11 + 4<32>:word32] = dwArg04
	Mem25[eax_11:word32] = 2<32>
	Mem26[eax_11 + 8<32>:word32] = dwArg08
	Mem27[eax_11 + 0xC<32>:word32] = dwArg0C
	edxOut = dwArg08
	return eax_11
l00744063:
	word32 edx_31
	word32 ecx_63
	fn006E1210(out ecx_63, out edx_31)
	edxOut = edx_31
	return 0<32>
fn00744050_exit:


word32 fn00744090(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073E390
// MayUse:  Stack +0004:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx Top
// Preserved: esp
fn00744090_entry:
l00744090:
	word32 edx_52
	word32 eax_11 = fn00740DC0(dwArg08, 0x10<32>, out edx_52)
	branch eax_11 != 0<32> l007440AB
l007440AB:
	Mem21[eax_11:word32] = 3<32>
	Mem22[eax_11 + 4<32>:word32] = dwArg04
	return eax_11
l007440A3:
	word32 ecx_53
	word32 edx_54
	fn006E1210(out ecx_53, out edx_54)
	return 0<32>
fn00744090_exit:


word32 fn007440C0(word32 dwArg04, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073C520
//      fn0073E390
// MayUse:  Stack +0004:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ecx esi Top
// Preserved: esp
fn007440C0_entry:
l007440C0:
	branch dwArg04 != 0<32> l007440E0
l007440E0:
	word32 edx_87
	word32 eax_17 = fn00740DC0(dwArg08, 0x10<32>, out edx_87)
	branch eax_17 != 0<32> l007440FC
l007440FC:
	Mem26[eax_17 + 4<32>:word32] = dwArg04
	Mem27[eax_17:word32] = 4<32>
	edxOut = <invalid>
	return eax_17
l007440F3:
	word32 ecx_90
	word32 edx_91
	fn006E1210(out ecx_90, out edx_91)
	edxOut = <invalid>
	return 0<32>
l007440C9:
	word32 ecx_88
	word32 edx_89
	fn006E0F80(Mem6[0x00A17E2C<p32>:word32], 0x8DD974<32>, out ecx_88, out edx_89)
	edxOut = <invalid>
	return 0<32>
fn007440C0_exit:


word32 fn00744110(word32 dwArg04, word32 dwArg08, word32 dwArg0C, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073D7A0
//      fn0073D9C0
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ecx edi edx esi Top
// Preserved: esp
fn00744110_entry:
l00744110:
	branch dwArg04 != 0<32> l00744130
l00744130:
	branch dwArg08 != 0<32> l00744152
l00744152:
	word32 edx_26
	word32 eax_24 = fn00740DC0(dwArg10, 0xC<32>, out edx_26)
	branch eax_24 != 0<32> l0074416F
l0074416F:
	Mem35[eax_24 + 4<32>:word32] = dwArg08
	Mem38[eax_24:word32] = dwArg04
	Mem39[eax_24 + 8<32>:word32] = dwArg0C
	edxOut = edx_26
	return eax_24
l00744165:
	word32 edx_45
	word32 ecx_136
	fn006E1210(out ecx_136, out edx_45)
	edxOut = edx_45
	return 0<32>
l00744139:
	word32 edx_63
	word32 ecx_135
	fn006E0F80(Mem13[0x00A17E2C<p32>:word32], 0x8DD998<32>, out ecx_135, out edx_63)
	edxOut = edx_63
	return 0<32>
l00744119:
	word32 edx_82
	word32 ecx_134
	fn006E0F80(Mem6[0x00A17E2C<p32>:word32], 0x8DD9C4<32>, out ecx_134, out edx_82)
	edxOut = edx_82
	return 0<32>
fn00744110_exit:


word32 fn00744180(word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10, word32 dwArg14, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073F690
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31] Stack +0010:[0..31] Stack +0014:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ecx edx Top
// Preserved: esp
fn00744180_entry:
l00744180:
	word32 edx_67
	word32 eax_11 = fn00740DC0(dwArg18, 0x14<32>, out edx_67)
	branch eax_11 != 0<32> l0074419B
l0074419B:
	Mem23[eax_11:word32] = dwArg04
	Mem25[eax_11 + 4<32>:word32] = dwArg08
	Mem27[eax_11 + 8<32>:word32] = dwArg0C
	Mem29[eax_11 + 0xC<32>:word32] = dwArg10
	Mem30[eax_11 + 0x10<32>:word32] = dwArg14
	edxOut = dwArg10
	return eax_11
l00744193:
	word32 edx_34
	word32 ecx_68
	fn006E1210(out ecx_68, out edx_34)
	edxOut = edx_34
	return 0<32>
fn00744180_exit:


word32 fn007441C0(word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073C370
//      fn0073FC30
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31] Stack +0010:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ecx edx Top
// Preserved: esp
fn007441C0_entry:
l007441C0:
	word32 edx_64
	word32 eax_11 = fn00740DC0(dwArg14, 0x10<32>, out edx_64)
	branch eax_11 != 0<32> l007441DB
l007441DB:
	Mem23[eax_11:word32] = dwArg04
	Mem25[eax_11 + 4<32>:word32] = dwArg08
	Mem27[eax_11 + 8<32>:word32] = dwArg0C
	Mem28[eax_11 + 0xC<32>:word32] = dwArg10
	edxOut = dwArg10
	return eax_11
l007441D3:
	word32 edx_32
	word32 ecx_65
	fn006E1210(out ecx_65, out edx_32)
	edxOut = edx_32
	return 0<32>
fn007441C0_exit:


word32 fn00744200(word32 dwArg04, word32 dwArg08, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073DBD0
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ecx edi edx esi Top
// Preserved: esp
fn00744200_entry:
l00744200:
	branch dwArg04 != 0<32> l00744220
l00744220:
	branch dwArg08 != 0<32> l00744242
l00744242:
	word32 edx_26
	word32 eax_24 = fn00740DC0(dwArg0C, 8<32>, out edx_26)
	branch eax_24 != 0<32> l0074425F
l0074425F:
	Mem34[eax_24 + 4<32>:word32] = dwArg08
	Mem37[eax_24:word32] = dwArg04
	edxOut = edx_26
	return eax_24
l00744255:
	word32 edx_43
	word32 ecx_133
	fn006E1210(out ecx_133, out edx_43)
	edxOut = edx_43
	return 0<32>
l00744229:
	word32 edx_61
	word32 ecx_132
	fn006E0F80(Mem13[0x00A17E2C<p32>:word32], 0x8DD9F0<32>, out ecx_132, out edx_61)
	edxOut = edx_61
	return 0<32>
l00744209:
	word32 edx_80
	word32 ecx_131
	fn006E0F80(Mem6[0x00A17E2C<p32>:word32], 0x8DDA14<32>, out ecx_131, out edx_80)
	edxOut = edx_80
	return 0<32>
fn00744200_exit:


word32 fn00744270(word32 dwArg04, word32 dwArg08, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073C870
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ecx edx esi Top
// Preserved: esp
fn00744270_entry:
l00744270:
	branch dwArg04 != 0<32> l00744290
l00744290:
	word32 edx_93
	word32 eax_17 = fn00740DC0(dwArg0C, 8<32>, out edx_93)
	branch eax_17 != 0<32> l007442AC
l007442AC:
	Mem28[eax_17:word32] = dwArg04
	Mem29[eax_17 + 4<32>:word32] = dwArg08
	edxOut = dwArg08
	return eax_17
l007442A3:
	word32 edx_35
	word32 ecx_95
	fn006E1210(out ecx_95, out edx_35)
	edxOut = edx_35
	return 0<32>
l00744279:
	word32 edx_51
	word32 ecx_94
	fn006E0F80(Mem6[0x00A17E2C<p32>:word32], 0x8DDA38<32>, out ecx_94, out edx_51)
	edxOut = edx_51
	return 0<32>
fn00744270_exit:


word32 fn00747330(word32 ebx, word32 dwArg08, word32 dwArg0C, word32 dwArg10, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00748090
// MayUse:  ebx:[0..31] Stack +0008:[0..31] Stack +000C:[0..31] Stack +0010:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ebp ecx edi edx esi Top
// Preserved: esp
fn00747330_entry:
l00747330:
	word32 edx_140
	word32 eax_17 = fn00711280(eax, out edx_140)
	branch eax_17 == 0<32> l00747403
l00747348:
	word32 edx_258
	word32 ecx_257
	word32 eax_30 = fn006DDD80(0xA2BCA8<32>, out ecx_257, out edx_258)
	Mem38[eax_30 + 0x34<32>:word32] = dwArg08
	Mem39[eax_30 + 8<32>:word32] = eax_17
	Mem40[eax_30 + 0x30<32>:word32] = 0<32>
	Mem42[eax_30 + 0x10<32>:word32] = ebx
	Mem44[ebx:word32] = Mem42[ebx:word32] + 1<32>
	Mem47[eax_30 + 0xC<32>:word32] = 0<32>
	Mem48[eax_30 + 0x14<32>:word32] = 0<32>
	Mem49[eax_30 + 0x18<32>:word32] = 0<32>
	word32 ecx_259
	word32 eax_51 = fn006FDCC0(out ecx_259, out edx_140)
	Mem57[eax_30 + 0xC<32>:word32] = eax_51
	word32 esp_143 = fp - 8<32>
	branch eax_51 == 0<32> l007473F2
l0074737F:
	word32 eax_62 = fn006F2650(0<32>, out edx_140)
	Mem69[eax_30 + 0x14<32>:word32] = eax_62
	esp_143 = fp - 8<32>
	branch eax_62 == 0<32> l007473F2
l0074738F:
	word32 eax_74 = fn006F2650(0<32>, out edx_140)
	Mem81[eax_30 + 0x18<32>:word32] = eax_74
	esp_143 = fp - 8<32>
	branch eax_74 == 0<32> l007473F2
l0074739F:
	Mem86[eax_30 + 0x24<32>:word32] = Mem81[eax_30 + 0x24<32>:word32] & 0xFFFFFFCC<32>
	word32 ecx_88 = Mem86[eax_30 + 0x24<32>:word32]
	Mem89[eax_30 + 0x1C<32>:word32] = dwArg0C
	Mem91[eax_30 + 0x20<32>:word32] = 0<32>
	Mem92[eax_30 + 0x2C<32>:word32] = 0<32>
	Mem93[eax_30 + 0x30<32>:word32] = 0<32>
	Mem94[eax_30 + 0x28<32>:word32] = dwArg10
	word32 eax_95 = Mem94[dwArg08 + 4<32>:word32]
	branch eax_95 == 0<32> l007473D9
l007473C8:
	branch (Mem94[eax_95 + 0x24<32>:byte] & 1<8>) != 0<8> l007473D3
l007473CE:
	branch Mem94[eax_95 + 0x1C<32>:word32] != 0<32> l007473D9
l007473D3:
	Mem108[eax_30 + 0x24<32>:word32] = ecx_88 | 1<32>
l007473D9:
	word32 ecx_111 = Mem110[eax_30 + 8<32>:word32]
	Mem113[eax_30 + 0x24<32>:word32] = Mem110[eax_30 + 0x24<32>:word32] & 0xFFFFFFB3<32>
	esp_143 = fp - 0xC<32>
	word32 edi_262
	word32 ebx_261
	word32 ecx_260
	branch fn006FBD90(Mem113[dwArg08 + 0xC<32>:word32], ecx_111, eax_30, out ecx_260, out edx_140, out ebx_261, out edi_262) >= 0<32> l00747409
l00747409:
	edxOut = edx_140
	return eax_30
l007473F2:
	word32 v18_156 = Mem155[eax_30:word32] + 0xFFFFFFFF<32>
	Mem157[eax_30:word32] = v18_156
	branch v18_156 != 0<32> l00747403
l007473F7:
	word32 eax_160 = Mem157[eax_30 + 4<32>:word32]
	word32 ecx_161 = Mem157[eax_160 + 0x18<32>:word32]
	Mem164[esp_143 - 4<i32>:word32] = eax_30
	call ecx_161 (retsize: 4;)
		uses: eax:eax_160,Stack +000C:dwArg08,Stack +0010:dwArg0C,Stack +0014:dwArg10
		defs: edx:edx_172
l00747403:
	edxOut = edx_140
	return 0<32>
fn00747330_exit:


void fn00747530(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0072E790
//      fn00748670
//      fn00749820
// MayUse:  Stack +0004:[0..31]
// LiveOut:
// Trashed: SCZO eax ecx edx Top
// Preserved: esi esp
fn00747530_entry:
l00747530:
	word32 esp_26 = fp - 4<i32>
	branch Mem6[dwArg04 + 0xC<32>:word32] == 0<32> l00747555
l0074753B:
	word32 eax_10 = Mem6[dwArg04 + 0xC<32>:word32]
	Mem12[eax_10:word32] = Mem6[eax_10:word32] + 0xFFFFFFFF<32>
	word32 eax_13 = Mem12[dwArg04 + 0xC<32>:word32]
	branch Mem12[eax_13:word32] != 0<32> l00747555
l00747549:
	word32 ecx_16 = Mem12[eax_13 + 4<32>:word32]
	word32 esp_20
	word32 eax_21
	word32 edx_23
	call Mem12[ecx_16 + 0x18<32>:word32] (retsize: 4;)
		uses: eax:eax_21,ecx:ecx_16,edx:edx_23,Stack +0004:eax_13,Stack +0010:dwArg04
		defs: eax:eax_21,edx:edx_23,esp:esp_20
	esp_26 = esp_20 + 4<32>
l00747555:
	branch Mem29[dwArg04 + 0x10<32>:word32] == 0<32> l00747575
l0074755B:
	word32 eax_32 = Mem29[dwArg04 + 0x10<32>:word32]
	Mem34[eax_32:word32] = Mem29[eax_32:word32] + 0xFFFFFFFF<32>
	word32 eax_35 = Mem34[dwArg04 + 0x10<32>:word32]
	branch Mem34[eax_35:word32] != 0<32> l00747575
l00747569:
	word32 ecx_38 = Mem34[eax_35 + 4<32>:word32]
	word32 edx_39 = Mem34[ecx_38 + 0x18<32>:word32]
	Mem42[esp_26 - 4<i32>:word32] = eax_35
	word32 eax_45
	word32 edx_47
	call edx_39 (retsize: 4;)
		uses: eax:eax_45,ecx:ecx_38,edx:edx_47,Stack +0008:dwArg04
		defs: eax:eax_45,edx:edx_47
l00747575:
	free(dwArg04)
	return
fn00747530_exit:


word32 fn00747580(word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00728E40
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx edi edx Top
// Preserved: esi esp
fn00747580_entry:
l00747580:
	word32 edx_141
	word32 eax_12 = fn00711280(dwArg08, out edx_141)
	branch eax_12 != 0<32> l00747596
l00747596:
	word32 edx_143
	word32 ecx_142
	word32 eax_32 = fn006FBCC0(Mem10[dwArg04 + 0xC<32>:word32], eax_12, out ecx_142, out edx_143)
	branch eax_32 == 0<32> l007475B3
l007475B3:
	word32 edx_145
	word32 ecx_144
	fn006E0F80(Mem30[0x00A17E28<p32>:word32], 0x8DDAC4<32>, out ecx_144, out edx_145)
l007475AE:
	Mem56[eax_32:word32] = Mem30[eax_32:word32] + 1<32>
l007475C6:
	word32 v13_60 = Mem59[eax_12:word32] + 0xFFFFFFFF<32>
	Mem61[eax_12:word32] = v13_60
	branch v13_60 != 0<32> l007475D7
l007475CB:
	word32 ecx_64 = Mem61[eax_12 + 4<32>:word32]
	call Mem61[ecx_64 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_64,Stack +0004:eax_12,Stack +000C:dwArg08,Stack +0014:dwArg04,Stack +0018:dwArg08
l007475D7:
	return eax_32
l00747594:
	return eax_12
fn00747580_exit:


word32 fn007475E0(word32 dwArg04, ptr32 & ecxOut, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00727910
//      fn00729510
//      fn00729810
//      fn00729D20
//      fn0072A740
//      fn0072A940
//      fn0072AC20
//      fn0072B830
//      fn0072BF10
//      fn0072C160
//      fn0072C510
//      fn0072DD60
// MayUse:  Stack +0004:[0..31]
// LiveOut: eax ecx edx
// Trashed: SCZO eax ecx edx Top
// Preserved: esp
fn007475E0_entry:
l007475E0:
	word32 ecx_14
	word32 edx_15
	word32 eax_13 = fn006FBCC0(Mem0[dwArg04 + 0xC<32>:word32], dwArg08, out ecx_14, out edx_15)
	branch eax_13 != 0<32> l007475FA
l007475FA:
	word32 eax_24 = Mem11[eax_13 + 8<32>:word32] >> 0xB<32> & 7<32>
	ecxOut = <invalid>
	edxOut = <invalid>
	return eax_24
l007475F9:
	ecxOut = <invalid>
	edxOut = <invalid>
	return eax_13
fn007475E0_exit:


word32 fn00747610(word32 eax, word32 ecx, word32 ebx, word32 dwArg04, word32 dwArg08, word32 dwArg14)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00747CA0
// MayUse:  eax:[0..31] ebx:[0..31] ecx:[0..31] Stack +0004:[0..31] Stack +0008:[0..31] Stack +0014:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ebp ecx edi edx esi Top
// Preserved: esp
fn00747610_entry:
	byte al = SLICE(eax, byte, 0)
l00747610:
	word32 ecx_124
	word32 edi_108
	branch (al & 1<8>) == 0<8> l007476D6
l007476D6:
	branch (eax & 0x406<32>) == 0<32> l00747751
l00747751:
	branch ebx == 0<32> l007477C3
l00747755:
	word32 edx_853
	word32 ecx_852
	branch fn006FBCC0(ebx, ecx, out ecx_852, out edx_853) == 0<32> l007477C3
l007477C3:
	branch dwArg14 == 0<32> l00747835
l007477CB:
	word32 edx_869
	word32 ecx_868
	branch fn006FBCC0(dwArg14, dwArg04, out ecx_868, out edx_869) == 0<32> l00747835
l00747835:
	word32 eax_73 = Mem72[dwArg04 + 0x24<32>:word32]
	branch (SLICE(eax_73, byte, 0) & 1<8>) == 0<8> l00747842
l0074783C:
	Mem81[dwArg04 + 0x24<32>:word32] = eax_73 | 2<32>
l00747842:
	word32 edx_876
	word32 ecx_875
	word32 eax_103 = fn007050A0(3<32>, out ecx_875, out edx_876)
	edi_108 = eax_103
	branch eax_103 == 0<32> l0074763C
l00747856:
	word32 edx_880
	word32 ebx_881
	word32 edi_882
	word32 eax_123 = fn006FBD90(dwArg08, dwArg04, eax_103, out ecx_124, out edx_880, out ebx_881, out edi_882)
	byte al_140 = SLICE(eax_123, byte, 0)
	word24 eax_24_8_141 = SLICE(eax_123, word24, 8)
	branch eax_123 < 0<32> l00747665
l0074786D:
	word32 v23_132 = Mem119[eax_103:word32] + 0xFFFFFFFF<32>
	Mem133[eax_103:word32] = v23_132
	branch v23_132 != 0<32> l0074787E
l00747872:
	word32 ecx_136 = Mem133[eax_103 + 4<32>:word32]
	call Mem133[ecx_136 + 0x18<32>:word32] (retsize: 4;)
		uses: al:al_140,eax_24_8:eax_24_8_141,ecx:ecx_136,Stack +0004:eax_103,Stack +0008:dwArg04,Stack +0018:dwArg04,Stack +001C:dwArg08,Stack +0028:dwArg14
l007477D9:
	word32 edx_871
	word32 ecx_870
	word32 eax_155 = fn007050A0(2<32>, out ecx_870, out edx_871)
	branch eax_155 == 0<32> l0074763C
l007477ED:
	word32 ecx_176
	word32 edi_874
	word32 ebx_873
	word32 edx_872
	branch fn006FBD90(dwArg08, dwArg04, eax_155, out ecx_176, out edx_872, out ebx_873, out edi_874) >= 0<32> l0074781B
l0074781B:
	word32 v22_184 = Mem171[eax_155:word32] + 0xFFFFFFFF<32>
	Mem185[eax_155:word32] = v22_184
	branch v22_184 != 0<32> l0074787E
l00747820:
	word32 edx_188 = Mem185[eax_155 + 4<32>:word32]
	word32 eax_189 = Mem185[edx_188 + 0x18<32>:word32]
	call eax_189 (retsize: 4;)
		uses: al:SLICE(eax_189, byte, 0),eax_24_8:SLICE(eax_189, word24, 8),ecx:ecx_176,edx:edx_188,Stack +0004:eax_155,Stack +0008:dwArg04,Stack +0018:dwArg04,Stack +001C:dwArg08,Stack +0028:dwArg14
	return 1<32>
l00747800:
	word32 v21_209 = Mem171[eax_155:word32] + 0xFFFFFFFF<32>
	Mem210[eax_155:word32] = v21_209
	branch v21_209 != 0<32> l00747676
l00747809:
	word32 eax_213 = Mem210[eax_155 + 4<32>:word32]
	word32 ecx_214 = Mem210[eax_213 + 0x18<32>:word32]
	call ecx_214 (retsize: 4;)
		uses: eax:eax_213,ecx:ecx_214,Stack +0004:eax_155,Stack +0008:dwArg04,Stack +0018:dwArg04,Stack +001C:dwArg08,Stack +0028:dwArg14
	return 0<32>
l00747763:
	word32 ecx_854
	word32 edx_855
	word32 eax_238 = fn007050A0(4<32>, out ecx_854, out edx_855)
	edi_108 = eax_238
	branch eax_238 == 0<32> l0074763C
l00747777:
	word32 ebx_857
	word32 edi_858
	word32 edx_856
	word32 eax_258 = fn006FBD90(dwArg08, dwArg04, eax_238, out ecx_124, out edx_856, out ebx_857, out edi_858)
	byte al_275 = SLICE(eax_258, byte, 0)
	word24 eax_24_8_276 = SLICE(eax_258, word24, 8)
	word32 esp_263 = fp - 0xC<32>
	branch eax_258 < 0<32> l00747665
l0074778E:
	word32 v17_267 = Mem254[eax_238:word32] + 0xFFFFFFFF<32>
	Mem268[eax_238:word32] = v17_267
	branch v17_267 != 0<32> l0074779F
l00747793:
	word32 ecx_271 = Mem268[eax_238 + 4<32>:word32]
	word32 esp_277
	call Mem268[ecx_271 + 0x18<32>:word32] (retsize: 4;)
		uses: al:al_275,eax_24_8:eax_24_8_276,ecx:ecx_271,Stack +0004:eax_238,Stack +0008:dwArg04,Stack +0018:dwArg04,Stack +001C:dwArg08,Stack +0028:dwArg14
		defs: esp:esp_277
	esp_263 = esp_277 + 4<32>
l0074779F:
	word32 eax_287 = Mem286[esp_263 + 0x1C<32>:word32]
	Mem290[dwArg04 + 0x24<32>:word32] = Mem286[dwArg04 + 0x24<32>:word32] | 2<32>
	word32 esp_293 = esp_263 - 4<i32>
	Mem294[esp_293:word32] = 0xA163B8<32>
	Mem297[esp_293 - 4<i32>:word32] = ecx
	Mem299[esp_293 - 8<i32>:word32] = eax_287
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_860
	word32 edi_863
	word32 edx_861
	word32 ebx_862
	return CONVERT(CONVERT(fn006FBD90(stackArg4, dwArg04, dwArg08, out ecx_860, out edx_861, out ebx_862, out edi_863) >= 0<32>, bool, int8), int8, uint32)
l007476DD:
	word32 ecx_842
	word32 edx_843
	word32 eax_328 = fn007050A0(1<32>, out ecx_842, out edx_843)
	edi_108 = eax_328
	branch eax_328 == 0<32> l0074763C
l007476F1:
	word32 edi_846
	word32 edx_844
	word32 ebx_845
	word32 eax_348 = fn006FBD90(dwArg08, dwArg04, eax_328, out ecx_124, out edx_844, out ebx_845, out edi_846)
	byte al_365 = SLICE(eax_348, byte, 0)
	word24 eax_24_8_366 = SLICE(eax_348, word24, 8)
	word32 esp_353 = fp - 0xC<32>
	branch eax_348 < 0<32> l00747665
l00747708:
	word32 v14_357 = Mem344[eax_328:word32] + 0xFFFFFFFF<32>
	Mem358[eax_328:word32] = v14_357
	branch v14_357 != 0<32> l00747719
l0074770D:
	word32 ecx_361 = Mem358[eax_328 + 4<32>:word32]
	word32 esp_367
	call Mem358[ecx_361 + 0x18<32>:word32] (retsize: 4;)
		uses: al:al_365,eax_24_8:eax_24_8_366,ecx:ecx_361,Stack +0004:eax_328,Stack +0008:dwArg04,Stack +0018:dwArg04,Stack +001C:dwArg08,Stack +0028:dwArg14
		defs: esp:esp_367
	esp_353 = esp_367 + 4<32>
l00747719:
	word32 eax_377 = Mem376[esp_353 + 0x18<32>:word32]
	word32 esp_378 = esp_353 - 4<i32>
	Mem379[esp_378:word32] = 0xA163B8<32>
	Mem382[esp_378 - 4<i32>:word32] = ecx
	Mem384[esp_378 - 8<i32>:word32] = eax_377
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_848
	word32 edi_851
	word32 edx_849
	word32 ebx_850
	branch fn006FBD90(stackArg4, dwArg04, dwArg08, out ecx_848, out edx_849, out ebx_850, out edi_851) < 0<32> l0074763C
l00747734:
	word32 edi_400 = Mem384[esp_378 + 0x24<32>:word32]
	Mem402[esp_378:word32] = ecx
	Mem404[esp_378 - 4<32>:word32] = edi_400
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 edx_866
	word32 ecx_865
	branch fn006FBCC0(stackArg4, dwArg04, out ecx_865, out edx_866) == 0<32> l0074787E
l0074774A:
	Mem418[esp_378:word32] = ecx
	Mem420[esp_378 - 4<32>:word32] = edi_400
l00747621:
	branch (al & 4<8>) == 0<8> l00747642
l00747642:
	word32 edx_839
	word32 ecx_838
	word32 eax_427 = fn007050A0(2<32>, out ecx_838, out edx_839)
	edi_108 = eax_427
	branch eax_427 == 0<32> l0074763C
l00747652:
	word32 edi_879
	word32 ebx_878
	word32 edx_877
	word32 eax_447 = fn006FBD90(dwArg08, dwArg04, eax_427, out ecx_124, out edx_877, out ebx_878, out edi_879)
	byte al_464 = SLICE(eax_447, byte, 0)
	word24 eax_24_8_465 = SLICE(eax_447, word24, 8)
	word32 esp_452 = fp - 0xC<32>
	branch eax_447 >= 0<32> l0074767C
l0074767C:
	word32 v24_456 = Mem443[eax_427:word32] + 0xFFFFFFFF<32>
	Mem457[eax_427:word32] = v24_456
	branch v24_456 != 0<32> l0074768D
l00747681:
	word32 ecx_460 = Mem457[eax_427 + 4<32>:word32]
	word32 esp_466
	call Mem457[ecx_460 + 0x18<32>:word32] (retsize: 4;)
		uses: al:al_464,eax_24_8:eax_24_8_465,ecx:ecx_460,Stack +0004:eax_427,Stack +0008:dwArg04,Stack +0018:dwArg04,Stack +001C:dwArg08,Stack +0028:dwArg14
		defs: esp:esp_466
	esp_452 = esp_466 + 4<32>
l0074768D:
	word32 eax_476 = Mem475[esp_452 + 0x20<32>:word32]
	word32 esp_477 = esp_452 - 4<i32>
	Mem478[esp_477:word32] = 0xA163B8<32>
	Mem481[esp_477 - 4<i32>:word32] = ecx
	Mem483[esp_477 - 8<i32>:word32] = eax_476
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 edx_885
	word32 ecx_884
	word32 ebx_886
	word32 edi_887
	branch fn006FBD90(stackArg4, dwArg04, dwArg08, out ecx_884, out edx_885, out ebx_886, out edi_887) < 0<32> l0074763C
l007476A4:
	branch ebx == 0<32> l0074787E
l007476AC:
	Mem503[esp_477:word32] = ecx
	Mem505[esp_477 - 4<32>:word32] = ebx
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_889
	word32 edx_890
	branch fn006FBCC0(stackArg4, dwArg04, out ecx_889, out edx_890) == 0<32> l0074787E
l007476BE:
	Mem519[esp_477:word32] = ecx
	Mem521[esp_477 - 4<32>:word32] = ebx
l007476C0:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	branch fn006FBE60(stackArg4, dwArg04) >= 0<32> l0074787E
l0074787E:
	return 1<32>
l007476D0:
	return 0<32>
l00747665:
	word32 v18_566 = Mem565[edi_108:word32] + 0xFFFFFFFF<32>
	Mem567[edi_108:word32] = v18_566
	branch v18_566 != 0<32> l00747676
l0074766A:
	word32 edx_570 = Mem567[edi_108 + 4<32>:word32]
	word32 eax_571 = Mem567[edx_570 + 0x18<32>:word32]
	call eax_571 (retsize: 4;)
		uses: al:SLICE(eax_571, byte, 0),eax_24_8:SLICE(eax_571, word24, 8),ecx:ecx_579,edx:edx_570,Stack +0004:edi_564,Stack +0008:dwArg04,Stack +0018:dwArg04,Stack +001C:dwArg08,Stack +0028:dwArg14
l00747676:
	return 0<32>
l00747625:
	word32 ecx_840
	word32 edx_841
	fn006E15D0(Mem16[0x00A178F4<p32>:word32], 0x8DDAE0<32>, out ecx_840, out edx_841)
l0074763C:
	return 0<32>
fn00747610_exit:


word32 fn00747890(word32 edi, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00747CA0
// MayUse:  edi:[0..31] Stack +0004:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx edx Top
// Preserved: ebp ebx esi esp
fn00747890_entry:
l00747890:
	word32 ebx_139 = 0<32>
	word32 ecx_277
	word32 edx_278
	word32 eax_22 = fn007050A0(5<32>, out ecx_277, out edx_278)
	branch eax_22 != 0<32> l007478B9
l007478B9:
	word32 edx_279
	branch fn006FC050(edi, fp - 4<32>, fp - 0xC<32>, fp - 8<32>, out edx_279) == 0<32> l00747935
l007478D5:
	branch Mem55[dwLoc08 + 8<32>:word32] != 1<32> l00747919
l007478DF:
	word32 ecx_281
	word32 edx_282
	branch fn006FBCC0(dwArg04, dwArg04, out ecx_281, out edx_282) == 0<32> l00747919
l007478F1:
	word32 edi_286
	word32 edx_284
	word32 ebx_285
	word32 ecx_283
	branch fn006FBD90(edi, dwArg04, eax_22, out ecx_283, out edx_284, out ebx_285, out edi_286) < 0<32> l0074793A
l00747904:
	branch 0<32> - (fn006FBE60(dwArg04, dwArg04) == 0<32>) < 1<32> l0074793A
l00747919:
	word32 edx_280
	branch fn006FC050(edi, fp - 4<32>, fp - 0xC<32>, fp - 8<32>, out edx_280) != 0<32> l007478D5
l00747935:
	ebx_139 = 1<32>
l0074793A:
	word32 v16_145 = Mem143[eax_22:word32] + 0xFFFFFFFF<32>
	Mem146[eax_22:word32] = v16_145
	branch v16_145 != 0<32> l0074794B
l0074793F:
	word32 ecx_149 = Mem146[eax_22 + 4<32>:word32]
	call Mem146[ecx_149 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_149,Stack +0004:eax_22,Stack +0008:dwArg04,Stack +0024:dwArg04
l0074794B:
	return ebx_139
l007478B0:
	return 0<32>
fn00747890_exit:


word32 fn00747960(word32 edx, word32 ebx, word32 ebp, word32 esi, word32 edi, selector es, selector ds)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00747CA0
// MayUse:  cs:[0..15] ds:[0..15] ebp:[0..31] ebx:[0..31] edi:[0..31] edx:[0..31] es:[0..15] esi:[0..31] fs:[0..15] gs:[0..15] ss:[0..15]
// LiveOut: eax
// Trashed: SCZDOP eax ecx edx Top
// Preserved: esp
fn00747960_entry:
l00747960:
	word32 eax_7 = Mem0[0x00A14188<p32>:word32] ^ fp - 0x130<32>
	branch Mem8[esi + 0x1C<32>:word32] != 0<32> l00747A3B
l0074797E:
	word32 ecx_12 = Mem8[esi + 0x20<32>:word32]
	branch ecx_12 == 0<32> l00747A3B
l00747989:
	byte al_17 = Mem8[esi + 0x24<32>:byte]
	branch (al_17 & 6<8>) == 0<8> l00747A3B
l00747994:
	branch (al_17 & 4<8>) != 0<8> l007479A2
l0074799D:
l007479A2:
	word32 dwLoc013C_205
	branch ecx_12 >u 8<32> l007479E3
l007479AA:
	switch (ecx_12 + 0xFFFFFFFF<32>) { l007479B1 l00747A3B l007479E3 l007479CA l007479E3 l007479E3 l007479E3 l00747A3B }
l007479CA:
	dwLoc013C_205 = 0x8DDB50<32>
l007479E3:
	dwLoc013C_205 = 0x8DDB00<32>
l00747A3B:
	word32 ecx_256
	return fn00694B8E(1<32>, eax_7 ^ fp - 0x130<32>, edx, ebx, ebp, esi, edi, es, ds, dwLoc0134, out ecx_256)
l007479B1:
	dwLoc013C_205 = 0x8DDB8C<32>
l007479FA:
	fn00724FE0(fp - 0x130<32>, 0x12C<32>, dwLoc013C_205)
	word32 edx_258
	word32 ecx_257
	fn006E0F80(Mem129[0x00A178F4<p32>:word32], fp - 0x130<32>, out ecx_257, out edx_258)
	word32 edx_183
	fn006E1DE0(Mem143[esi + 0x2C<32>:word32], out edx_183)
	word32 ecx_259
	return fn00694B8E(0<32>, eax_7 ^ fp - 0x130<32>, edx_183, ebx, ebp, esi, edi, es, ds, fp - 0x130<32>, out ecx_259)
fn00747960_exit:


word32 fn00747A80(word32 eax, word32 ebx)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00747CA0
// MayUse:  eax:[0..31] ebx:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx edi edx esi Top
// Preserved: esp
fn00747A80_entry:
l00747A80:
	word32 esp_143 = fp - 0x14<32>
	word32 edx_537
	branch fn006FC050(ebx, fp - 8<32>, fp - 0xC<32>, fp - 4<32>, out edx_537) == 0<32> l00747B21
l00747AAB:
l00747AB0:
	word32 esi_42 = Mem39[Mem39[esp_143 + 0x10<32>:word32] + 8<32>:word32]
	word32 esp_43 = esp_143 - 4<i32>
	Mem44[esp_43:word32] = Mem39[esp_143 + 8<32>:word32]
	Mem47[esp_43 - 4<i32>:word32] = eax
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 stackArg8 = <invalid>
	word32 ecx_543
	word32 edx_544
	Mem62[esp_43 - 8<i32>:word32] = Mem47[fn006FBCC0(stackArg4, stackArg8, out ecx_543, out edx_544) + 8<32>:word32] << 0xB<32> | esi_42
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 edx_547
	word32 ecx_546
	word32 eax_64 = fn007050A0(stackArg4, out ecx_546, out edx_547)
	branch eax_64 == 0<32> l00747BE2
l00747ADD:
	word32 edx_74 = Mem62[esp_43 + 0xC<32>:word32]
	Mem76[esp_43:word32] = eax_64
	Mem78[esp_43 - 4<32>:word32] = edx_74
	Mem80[esp_43 - 8<i32>:word32] = ebx
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 stackArg8 = <invalid>
	word32 stackArg12 = <invalid>
	word32 esp_121 = esp_43 + 4<32>
	word32 ecx_571
	word32 edx_572
	word32 ebx_573
	word32 edi_574
	branch fn006FBD90(stackArg4, stackArg8, stackArg12, out ecx_571, out edx_572, out ebx_573, out edi_574) < 0<32> l00747BD1
l00747BD1:
	word32 v16_91 = Mem80[eax_64:word32] + 0xFFFFFFFF<32>
	Mem92[eax_64:word32] = v16_91
	branch v16_91 != 0<32> l00747BE2
l00747BD6:
	word32 edx_95 = Mem92[eax_64 + 4<32>:word32]
	word32 eax_96 = Mem92[edx_95 + 0x18<32>:word32]
	Mem98[esp_43:word32] = eax_64
	call eax_96 (retsize: 4;)
		uses: eax:eax_96,edx:edx_95
l00747AF4:
	word32 v15_107 = Mem80[eax_64:word32] + 0xFFFFFFFF<32>
	Mem108[eax_64:word32] = v15_107
	branch v15_107 != 0<32> l00747B05
l00747AF9:
	word32 eax_111 = Mem108[eax_64 + 4<32>:word32]
	word32 ecx_112 = Mem108[eax_111 + 0x18<32>:word32]
	Mem114[esp_43:word32] = eax_64
	word32 esp_115
	call ecx_112 (retsize: 4;)
		uses: eax:eax_111
		defs: esp:esp_115
	esp_121 = esp_115 + 4<32>
l00747B05:
	word32 esp_125 = esp_121 - 4<i32>
	Mem126[esp_125:word32] = esp_121 + 0x10<32>
	Mem129[esp_125 - 4<i32>:word32] = esp_125 + 0xC<32>
	Mem132[esp_125 - 8<i32>:word32] = esp_125 + 0x10<32>
	Mem135[esp_125 - 12<i32>:word32] = ebx
	esp_143 = esp_125 + 4<32>
	word32 edx_575
	branch fn006FC050(Mem135[esp_125 - 12<i32>:word32], Mem135[esp_125 - 8<i32>:word32], Mem135[esp_125 - 4<i32>:word32], Mem135[esp_125:word32], out edx_575) != 0<32> l00747AB0
l00747B21:
	word32 esp_148 = esp_143 - 4<i32>
	Mem149[esp_148:word32] = 0x2000<32>
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 edx_540
	word32 ecx_539
	word32 eax_159 = fn007050A0(stackArg4, out ecx_539, out edx_540)
	branch eax_159 == 0<32> l00747BE2
l00747B38:
	Mem171[esp_148:word32] = esp_148 + 0x14<32>
	word32 ecx_172 = Mem171[esp_148 + 0x20<32>:word32]
	Mem175[esp_148 - 4<i32>:word32] = esp_148 + 0xC<32>
	Mem178[esp_148 - 8<i32>:word32] = esp_148 + 0x10<32>
	Mem180[esp_148 - 12<i32>:word32] = ecx_172
	Mem181[esp_148 + 0x10<32>:word32] = 0<32>
	word32 esp_189 = esp_148 + 4<32>
	word32 edx_548
	branch fn006FC050(Mem181[esp_148 - 12<i32>:word32], Mem181[esp_148 - 8<i32>:word32], Mem181[esp_148 - 4<i32>:word32], Mem181[esp_148:word32], out edx_548) == 0<32> l00747C37
l00747B64:
	word32 eax_239
	word32 esp_196 = esp_189 - 4<i32>
	Mem197[esp_196:word32] = Mem194[esp_189 + 8<32>:word32]
	Mem200[esp_196 - 4<i32>:word32] = ebx
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 stackArg8 = <invalid>
	word32 edx_552
	word32 ecx_551
	word32 eax_206 = fn006FBCC0(stackArg4, stackArg8, out ecx_551, out edx_552)
	word32 esp_211 = esp_196 + 4<32>
	branch eax_206 == 0<32> l00747BEA
l00747BEA:
	word32 ecx_216 = Mem200[esp_196 + 0x1C<32>:word32]
	Mem218[esp_196:word32] = Mem200[esp_196 + 0xC<32>:word32]
	Mem220[esp_196 - 4<i32>:word32] = ecx_216
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 stackArg8 = <invalid>
	esp_211 = esp_196 + 4<32>
	word32 edx_556
	word32 ecx_555
	branch fn006FBCC0(stackArg4, stackArg8, out ecx_555, out edx_556) == 0<32> l00747C13
l00747C00:
	word32 edx_231 = Mem220[esp_196 + 0xC<32>:word32]
	Mem233[esp_196:word32] = eax_159
	Mem235[esp_196 - 4<i32>:word32] = edx_231
	Mem237[esp_196 - 8<i32>:word32] = ebx
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 stackArg8 = <invalid>
	word32 stackArg12 = <invalid>
	word32 ecx_579
	word32 edx_580
	word32 ebx_581
	word32 edi_582
	eax_239 = fn006FBD90(stackArg4, stackArg8, stackArg12, out ecx_579, out edx_580, out ebx_581, out edi_582)
	esp_211 = esp_196 + 4<32>
	branch eax_239 < 0<32> l00747C53
l00747B76:
	branch Mem200[esp_196 + 0x24<32>:word32] == 0<32> l00747C13
l00747B81:
	word32 eax_250 = Mem200[eax_206 + 8<32>:word32]
	branch (eax_250 & 0x407<32>) == 0<32> l00747C13
l00747B8F:
	Mem258[esp_196:word32] = eax_250 | 0x200<32>
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_559
	word32 edx_560
	eax_239 = fn007050A0(stackArg4, out ecx_559, out edx_560)
	branch eax_239 == 0<32> l00747C53
l00747C53:
	word32 v18_272 = Mem271[eax_159:word32] + 0xFFFFFFFF<32>
	Mem273[eax_159:word32] = v18_272
	branch v18_272 != 0<32> l00747BE2
l00747C58:
	word32 ecx_276 = Mem273[eax_159 + 4<32>:word32]
	word32 edx_277 = Mem273[ecx_276 + 0x18<32>:word32]
	Mem280[esp_189 - 4<i32>:word32] = eax_159
	call edx_277 (retsize: 4;)
		uses: eax:eax_282,ecx:ecx_276
	return 0<32>
l00747BA7:
	word32 eax_299 = Mem258[esp_196 + 0xC<32>:word32]
	Mem301[esp_196:word32] = eax_239
	Mem303[esp_196 - 4<i32>:word32] = eax_299
	Mem305[esp_196 - 8<i32>:word32] = ebx
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 stackArg8 = <invalid>
	word32 stackArg12 = <invalid>
	word32 ecx_564
	word32 edx_565
	word32 ebx_566
	word32 edi_567
	word32 eax_307 = fn006FBD90(stackArg4, stackArg8, stackArg12, out ecx_564, out edx_565, out ebx_566, out edi_567)
	esp_211 = esp_196 + 4<32>
	branch eax_307 < 0<32> l00747C6C
l00747C6C:
	word32 v17_316 = Mem305[eax_239:word32] + 0xFFFFFFFF<32>
	Mem317[eax_239:word32] = v17_316
	branch v17_316 != 0<32> l00747C7D
l00747C71:
	word32 eax_320 = Mem317[eax_239 + 4<32>:word32]
	word32 ecx_321 = Mem317[eax_320 + 0x18<32>:word32]
	Mem323[esp_196:word32] = eax_239
	word32 esp_324
	call ecx_321 (retsize: 4;)
		uses: eax:eax_320
		defs: esp:esp_324
	esp_211 = esp_324 + 4<32>
l00747C7D:
	word32 v19_334 = Mem333[eax_159:word32] + 0xFFFFFFFF<32>
	Mem335[eax_159:word32] = v19_334
	branch v19_334 != 0<32> l00747BE2
l00747BE2:
	return 0<32>
l00747C86:
	word32 edx_348 = Mem335[eax_159 + 4<32>:word32]
	word32 eax_349 = Mem335[edx_348 + 0x18<32>:word32]
	Mem351[esp_211 - 4<i32>:word32] = eax_159
	call eax_349 (retsize: 4;)
		uses: eax:eax_349,edx:edx_348
	return 0<32>
l00747BBE:
	word32 v14_369 = Mem305[eax_239:word32] + 0xFFFFFFFF<32>
	Mem370[eax_239:word32] = v14_369
	branch v14_369 != 0<32> l00747C13
l00747BC3:
	word32 ecx_373 = Mem370[eax_239 + 4<32>:word32]
	word32 edx_374 = Mem370[ecx_373 + 0x18<32>:word32]
	Mem376[esp_196:word32] = eax_239
	word32 esp_377
	call edx_374 (retsize: 4;)
		uses: eax:eax_307,ecx:ecx_373
		defs: esp:esp_377
	esp_211 = esp_377 + 4<32>
l00747C13:
	word32 esp_387 = esp_211 - 4<i32>
	Mem388[esp_387:word32] = esp_211 + 0x10<32>
	word32 eax_389 = Mem388[esp_387 + 0x20<32>:word32]
	Mem392[esp_387 - 4<i32>:word32] = esp_387 + 0xC<32>
	Mem395[esp_387 - 8<i32>:word32] = esp_387 + 0x10<32>
	Mem397[esp_387 - 12<i32>:word32] = eax_389
	esp_189 = esp_387 + 4<32>
	word32 edx_557
	branch fn006FC050(Mem397[esp_387 - 12<i32>:word32], Mem397[esp_387 - 8<i32>:word32], Mem397[esp_387 - 4<i32>:word32], Mem397[esp_387:word32], out edx_557) != 0<32> l00747B64
l00747C37:
	word32 v20_412 = Mem411[eax_159:word32] + 0xFFFFFFFF<32>
	Mem413[eax_159:word32] = v20_412
	branch v20_412 != 0<32> l00747C48
l00747C3C:
	word32 eax_416 = Mem413[eax_159 + 4<32>:word32]
	word32 ecx_417 = Mem413[eax_416 + 0x18<32>:word32]
	Mem420[esp_189 - 4<i32>:word32] = eax_159
	call ecx_417 (retsize: 4;)
		uses: eax:eax_416
l00747C48:
	return 1<32>
fn00747A80_exit:


word32 fn00747CA0(word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00747CA0
//      fn00747F60
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31] Stack +0010:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn00747CA0_entry:
l00747CA0:
	word32 esi_14 = 0<32>
	word32 edi_18 = 0<32>
	word32 ebp_19 = 0<32>
	word32 dwLoc18_586 = 0<32>
	word32 ecx_940
	word32 edx_941
	word32 eax_25 = fn006FDCC0(out ecx_940, out edx_941)
	branch eax_25 == 0<32> l00747F50
l00747F50:
	return 0<32>
l00747CC8:
	word32 edx_943
	word32 ecx_942
	word32 eax_47 = fn006FDCC0(out ecx_942, out edx_943)
	branch eax_47 == 0<32> l00747ECF
l00747CD9:
	word32 edx_945
	word32 ecx_944
	word32 eax_57 = fn006FDCC0(out ecx_944, out edx_945)
	branch eax_57 == 0<32> l00747F45
l00747F45:
	esi_14 = eax_57
l00747CEA:
	word32 ecx_946
	word32 edx_947
	word32 eax_68 = fn006FDCC0(out ecx_946, out edx_947)
	branch eax_68 == 0<32> l00747F49
l00747F49:
l00747CFB:
	word32 edx_949
	word32 ecx_948
	word32 eax_79 = fn006FDCC0(out ecx_948, out edx_949)
	branch eax_79 == 0<32> l00747EC3
l00747D0C:
	branch Mem86[dwArg04 + 0x1C<32>:word32] != 1<32> l00747D4E
l00747D1E:
	branch fn006FDE40() < 0<32> l00747EC3
l00747D34:
	branch dwArg08 == 0<32> l00747D4E
l00747D38:
	branch fn006FDE40() < 0<32> l00747EC3
l00747D4E:
	word32 edx_950
	branch fn006FC050(Mem129[dwArg04 + 0xC<32>:word32], fp - 4<32>, fp - 8<32>, fp - 0xC<32>, out edx_950) == 0<32> l00747DBD
l00747D6D:
l00747D70:
	branch fn00747610(Mem153[dwLoc0C + 8<32>:word32], dwLoc08, dwArg08, dwArg04, eax_47, dwArg10) == 0<32> l00747EBF
l00747D9A:
	word32 edx_951
	branch fn006FC050(Mem187[dwArg04 + 0xC<32>:word32], fp - 4<32>, fp - 8<32>, fp - 0xC<32>, out edx_951) != 0<32> l00747D70
l00747DBD:
	word32 eax_211 = Mem210[dwArg04 + 0x1C<32>:word32]
	branch eax_211 == 1<32> l00747E0F
l00747DC5:
	branch eax_211 != 0<32> l00747DDF
l00747DC9:
	branch fn006FDE40() < 0<32> l00747EC3
l00747DDF:
	branch dwArg08 == 0<32> l00747DF9
l00747DE3:
	branch fn006FDE40() < 0<32> l00747EC3
l00747DF9:
	branch fn006FDE40() < 0<32> l00747EC3
l00747E0F:
	word32 ebx_291 = 0<32>
	branch Mem289[Mem289[dwArg04 + 0x18<32>:word32] + 8<32>:word32] <= 0<32> l00747E5A
l00747E19:
l00747E20:
	word32 edi_303 = Mem297[Mem297[Mem297[dwArg04 + 0x18<32>:word32] + 0xC<32>:word32] + ebx_291 * 4<32>:word32]
	branch fn00747CA0(edi_303, eax_79, eax_68, eax_57) == 0<32> l00747EBF
l00747E45:
	branch (Mem313[edi_303 + 0x24<32>:byte] & 6<8>) == 0<8> l00747E4F
l00747E4B:
	Mem330[dwArg04 + 0x24<32>:word32] = Mem313[dwArg04 + 0x24<32>:word32] | 4<32>
l00747E4F:
	ebx_291 = ebx_291 + 1<32>
	branch ebx_291 < Mem334[Mem334[dwArg04 + 0x18<32>:word32] + 8<32>:word32] l00747E20
l00747E5A:
	branch Mem341[dwArg04 + 0x1C<32>:word32] != 0<32> l00747E75
l00747E60:
	branch fn00747890(eax_47, eax_68) == 0<32> l00747EBF
l00747E75:
	word32 ebx_371 = Mem368[dwArg04 + 0xC<32>:word32]
	branch fn00747A80(eax_47, ebx_371) == 0<32> l00747EBF
l00747E9C:
	branch fn00747960(edx, ebx_371, dwArg08, dwArg04, 1<32>, es, ds) == 0<32> l00747EBF
l00747EA5:
	branch fn006FDE40() < 0<32> l00747EBF
l00747EBB:
	dwLoc18_586 = 1<32>
l00747EBF:
l00747EC3:
	edi_18 = eax_79
l00747ECB:
	ebp_19 = eax_68
	esi_14 = eax_57
l00747ECF:
	word32 v17_438 = Mem437[eax_25:word32] + 0xFFFFFFFF<32>
	Mem439[eax_25:word32] = v17_438
	word32 esp_444 = fp - 52<i32>
	branch v17_438 != 0<32> l00747EE0
l00747ED4:
	word32 ecx_442 = Mem439[eax_25 + 4<32>:word32]
	word32 esp_456
	call Mem439[ecx_442 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_442,Stack +0004:eax_25,Stack +0040:dwArg04,Stack +0044:dwArg08,Stack +0048:dwArg0C,Stack +004C:dwArg10
		defs: esp:esp_456
	esp_444 = esp_456 + 4<32>
l00747EE0:
	word32 eax_466 = Mem465[esp_444 + 0x24<32>:word32]
	branch eax_466 == 0<32> l00747EF9
l00747EE8:
	word32 v18_470 = Mem465[eax_466:word32] + 0xFFFFFFFF<32>
	Mem471[eax_466:word32] = v18_470
	branch v18_470 != 0<32> l00747EF9
l00747EED:
	word32 ecx_474 = Mem471[eax_466 + 4<32>:word32]
	word32 edx_475 = Mem471[ecx_474 + 0x18<32>:word32]
	Mem477[esp_444 - 4<i32>:word32] = eax_466
	word32 esp_483
	call edx_475 (retsize: 4;)
		uses: ecx:ecx_474,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C,Stack +0014:dwArg10
		defs: esp:esp_483
	esp_444 = esp_483 + 4<32>
l00747EF9:
	branch edi_18 == 0<32> l00747F0E
l00747EFD:
	word32 v19_496 = Mem495[edi_18:word32] + 0xFFFFFFFF<32>
	Mem497[edi_18:word32] = v19_496
	branch v19_496 != 0<32> l00747F0E
l00747F02:
	word32 eax_500 = Mem497[edi_18 + 4<32>:word32]
	word32 ecx_501 = Mem497[eax_500 + 0x18<32>:word32]
	Mem504[esp_444 - 4<i32>:word32] = edi_18
	word32 esp_509
	call ecx_501 (retsize: 4;)
		uses: eax:eax_500,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C,Stack +0014:dwArg10
		defs: esp:esp_509
	esp_444 = esp_509 + 4<32>
l00747F0E:
	branch esi_14 == 0<32> l00747F23
l00747F12:
	word32 v20_522 = Mem521[esi_14:word32] + 0xFFFFFFFF<32>
	Mem523[esi_14:word32] = v20_522
	branch v20_522 != 0<32> l00747F23
l00747F17:
	word32 edx_526 = Mem523[esi_14 + 4<32>:word32]
	word32 eax_527 = Mem523[edx_526 + 0x18<32>:word32]
	Mem530[esp_444 - 4<i32>:word32] = esi_14
	word32 esp_535
	call eax_527 (retsize: 4;)
		uses: edx:edx_526,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C,Stack +0014:dwArg10
		defs: esp:esp_535
	esp_444 = esp_535 + 4<32>
l00747F23:
	branch ebp_19 == 0<32> l00747F39
l00747F27:
	word32 v21_548 = Mem547[ebp_19:word32] + 0xFFFFFFFF<32>
	Mem549[ebp_19:word32] = v21_548
	branch v21_548 != 0<32> l00747F39
l00747F2D:
	word32 ecx_552 = Mem549[ebp_19 + 4<32>:word32]
	word32 edx_553 = Mem549[ecx_552 + 0x18<32>:word32]
	Mem556[esp_444 - 4<i32>:word32] = ebp_19
	call edx_553 (retsize: 4;)
		uses: ecx:ecx_552,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C,Stack +0014:dwArg10
l00747F39:
	return dwLoc18_586
fn00747CA0_exit:


word32 fn00747F60(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00749820
// MayUse:  Stack +0004:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ebx ecx edi edx esi Top
// Preserved: esp
fn00747F60_entry:
l00747F60:
	word32 edx_192
	word32 ecx_191
	word32 eax_8 = fn006FDCC0(out ecx_191, out edx_192)
	branch eax_8 != 0<32> l00747F6E
l00747F6E:
	word32 ecx_193
	word32 edx_194
	word32 eax_21 = fn006FDCC0(out ecx_193, out edx_194)
	branch eax_21 != 0<32> l00747F90
l00747F90:
	word32 eax_44 = fn00747CA0(Mem19[dwArg04 + 8<32>:word32], 0<32>, eax_8, eax_21)
	word32 v14_50 = Mem42[eax_8:word32] + 0xFFFFFFFF<32>
	Mem51[eax_8:word32] = v14_50
	word32 esp_49 = fp - 0xC<32>
	branch v14_50 != 0<32> l00747FB8
l00747FAC:
	word32 ecx_55 = Mem51[eax_8 + 4<32>:word32]
	word32 esp_59
	call Mem51[ecx_55 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_55,Stack +0004:eax_8,Stack +0018:dwArg04
		defs: esp:esp_59
	esp_49 = esp_59 + 4<32>
l00747FB8:
	word32 v15_69 = Mem68[eax_21:word32] + 0xFFFFFFFF<32>
	Mem70[eax_21:word32] = v15_69
	branch v15_69 != 0<32> l00747FC9
l00747FBD:
	word32 eax_73 = Mem70[eax_21 + 4<32>:word32]
	word32 ecx_74 = Mem70[eax_73 + 0x18<32>:word32]
	Mem77[esp_49 - 4<i32>:word32] = eax_21
	call ecx_74 (retsize: 4;)
		uses: eax:eax_73,Stack +0008:dwArg04
l00747FC9:
	return eax_44
l00747F7A:
	word32 v9_99 = Mem19[eax_8:word32] + 0xFFFFFFFF<32>
	Mem100[eax_8:word32] = v9_99
	branch v9_99 != 0<32> l00747F8B
l00747F7F:
	word32 eax_103 = Mem100[eax_8 + 4<32>:word32]
	call Mem100[eax_103 + 0x18<32>:word32] (retsize: 4;)
		uses: eax:eax_103,Stack +0004:eax_8,Stack +0014:dwArg04
l00747F8B:
	return 0<32>
l00747F6C:
	return eax_8
fn00747F60_exit:


word32 fn00747FD0(word32 esi, ptr32 & ecxOut, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00748470
//      fn00748E50
// MayUse:  esi:[0..31]
// LiveOut: eax ecx edx
// Trashed: SCZO eax ecx edx Top
// Preserved: esp
fn00747FD0_entry:
l00747FD0:
	word32 ecx_23
	word32 edx_24
	branch fn006E19F0(out ecx_23, out edx_24) >= 0<32> l00748020
l00748020:
	ecxOut = ecx_23
	edxOut = edx_24
	return 1<32>
l00747FEC:
	word32 ecx_37
	word32 edx_38
	branch fn006E1110(out ecx_37, out edx_38) == 0<32> l0074801D
l00747FFE:
	word32 ecx_115
	word32 edx_116
	fn006E0F80(Mem35[0x00A178F4<p32>:word32], edi, out ecx_115, out edx_116)
	ecx_37 = fn006E1DE0(Mem50[Mem50[esi + 4<32>:word32] + 0x28<32>:word32], out edx_38)
l0074801D:
	ecxOut = ecx_37
	edxOut = edx_38
	return 0<32>
fn00747FD0_exit:


word32 fn00748030(word32 esi, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00748810
//      fn00748D30
//      fn00748E50
//      fn00749820
// MayUse:  esi:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ecx edx Top
// Preserved: esp
fn00748030_entry:
	word32 esp_2 = fp
l00748030:
	word32 eax_6 = Mem0[esi + 4<32>:word32]
	branch eax_6 == 0<32> l0074804F
l00748037:
	Mem10[esi + 4<32>:word32] = 0<32>
	word32 v8_11 = Mem10[eax_6:word32] + 0xFFFFFFFF<32>
	Mem12[eax_6:word32] = v8_11
	branch v8_11 != 0<32> l0074804F
l00748043:
	word32 ecx_15 = Mem12[eax_6 + 4<32>:word32]
	word32 esp_19
	call Mem12[ecx_15 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_15,edx:edx_22,Stack +0004:eax_6
		defs: edx:edx_22,esp:esp_19
	esp_2 = esp_19 + 4<32>
l0074804F:
	word32 eax_29 = Mem28[esi + 0x10<32>:word32]
	word32 ecx_30 = Mem28[eax_29 + 8<32>:word32]
	branch ecx_30 < 1<32> l0074807E
l0074805A:
	word32 eax_35 = Mem28[Mem28[eax_29 + 0xC<32>:word32] + (ecx_30 - 1<32>) * 4<32>:word32]
	Mem38[esi + 4<32>:word32] = eax_35
	branch eax_35 != 0<32> l0074806A
l0074806A:
	Mem41[eax_35:word32] = Mem38[eax_35:word32] + 1<32>
	word32 esp_44 = esp_2 - 4<i32>
	Mem45[esp_44:word32] = ecx_30 - 1<32>
	Mem48[esp_44 - 4<i32>:word32] = Mem45[esi + 0x10<32>:word32]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 stackArg8 = <invalid>
	word32 ecx_103
	branch fn00703390(stackArg4, stackArg8, out ecx_103, out edx) < 0<32> l00748067
l0074807E:
	edxOut = edx
	return 1<32>
l00748067:
	edxOut = edx
	return 0<32>
fn00748030_exit:


word32 fn00748090(word32 eax, word32 esi, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00748810
//      fn00748D30
//      fn00748E50
//      fn00749820
// MayUse:  eax:[0..31] esi:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ebx ecx edi edx Top
// Preserved: esp
fn00748090_entry:
l00748090:
	word32 edx_124
	word32 eax_10 = Mem6[esi + 4<32>:word32]
	word32 esp_11 = fp - 8<i32>
	word32 edi_14 = 0<32>
	branch eax_10 == 0<32> l007480CF
l0074809D:
	edi_14 = eax_10
	esp_11 = fp - 8<32>
	word32 ecx_208
	branch fn006F2A10(Mem19[esi + 0x10<32>:word32], eax_10, out ecx_208, out edx_124) >= 0<32> l007480B5
l007480B5:
	word32 eax_34 = Mem23[esi + 4<32>:word32]
	Mem36[eax_34:word32] = Mem23[eax_34:word32] + 0xFFFFFFFF<32>
	word32 eax_37 = Mem36[esi + 4<32>:word32]
	branch Mem36[eax_37:word32] != 0<32> l007480CF
l007480C3:
	word32 ecx_40 = Mem36[eax_37 + 4<32>:word32]
	word32 esp_44
	call Mem36[ecx_40 + 0x18<32>:word32] (retsize: 4;)
		uses: eax:eax_37,ecx:ecx_40,Stack +0004:eax_37
		defs: esp:esp_44
	esp_11 = esp_44 + 4<32>
l007480CF:
	word32 ecx_55 = Mem53[esp_11 + 0xC<32>:word32]
	word32 esp_56 = esp_11 - 4<i32>
	Mem57[esp_56:word32] = Mem53[esp_11 + 0x14<32>:word32]
	Mem60[esp_56 - 4<i32>:word32] = ecx_55
	Mem63[esp_56 - 8<i32>:word32] = esi
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg8 = <invalid>
	word32 stackArg12 = <invalid>
	word32 stackArg16 = <invalid>
	word32 eax_68 = fn00747330(eax, stackArg8, stackArg12, stackArg16, out edx_124)
	Mem76[esi + 4<32>:word32] = eax_68
	branch eax_68 == 0<32> l007480B0
l007480ED:
	word32 eax_78 = Mem76[0x00A6E150<p32>:word32]
	branch eax_78 != 0<32> l00748108
l007480F6:
	Mem83[esp_56:word32] = 0x8DDC14<32>
	word32 ecx_209
	eax_78 = fn006F1A70(out ecx_209, out edx_124)
	Mem92[0x00A6E150<p32>:word32] = eax_78
l00748108:
	branch eax != eax_78 l00748115
l0074810C:
	edx_124 = Mem98[esi + 4<32>:word32]
	Mem101[esi + 0x14<32>:word32] = Mem98[edx_124 + 0xC<32>:word32]
l00748115:
	branch edi_14 == 0<32> l0074812D
l00748119:
	word32 edx_110 = Mem108[edi_14 + 0x18<32>:word32]
	word32 esp_113 = esp_11 - 4<i32>
	Mem114[esp_113:word32] = Mem108[esi + 4<32>:word32]
	Mem116[esp_113 - 4<i32>:word32] = edx_110
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 stackArg8 = <invalid>
	word32 ecx_212
	branch fn006F2A10(stackArg4, stackArg8, out ecx_212, out edx_124) < 0<32> l007480B0
l0074812D:
	edxOut = edx_124
	return 1<32>
l007480B0:
	edxOut = edx_124
	return 0<32>
fn00748090_exit:


word32 fn00748140(word32 ecx, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00748E50
// MayUse:  ecx:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ecx edi edx Top
// Preserved: esi esp
fn00748140_entry:
l00748140:
	word32 edx_103
	word32 eax_20 = fn00726150(Mem9[ecx + 0x1C<32>:word32], eax, out edx_103)
	branch eax_20 != 0<32> l0074815C
l0074815C:
	word32 ecx_133
	word32 eax_37 = fn006FBCC0(Mem17[Mem17[ecx + 4<32>:word32] + 0xC<32>:word32], eax_20, out ecx_133, out edx_103)
	word32 v12_42 = Mem34[eax_20:word32] + 0xFFFFFFFF<32>
	Mem43[eax_20:word32] = v12_42
	word32 esp_41 = fp - 8<32>
	branch v12_42 != 0<32> l0074817F
l00748173:
	word32 ecx_47 = Mem43[eax_20 + 4<32>:word32]
	word32 esp_51
	call Mem43[ecx_47 + 0x18<32>:word32] (retsize: 4;)
		uses: eax:eax_37,ecx:ecx_47,Stack +0004:eax_20
		defs: edx:edx_54,esp:esp_51
	esp_41 = esp_51 + 4<32>
l0074817F:
	branch eax_37 == 0<32> l00748157
l00748183:
	Mem65[esp_41 - 4<i32>:word32] = eax_37
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 edx_73
	word32 ecx_135
	word32 esi_136
	word32 edi_137
	word32 eax_72 = fn007051A0(eax_37, stackArg4, out ecx_135, out edx_73, out esi_136, out edi_137)
	edxOut = edx_73
	return eax_72
l00748157:
	edxOut = edx_103
	return 0<32>
fn00748140_exit:


word32 fn00748190(word32 ebx, word32 dwArg04, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00748310
//      fn007483C0
//      fn00748470
//      fn007486D0
//      fn00748790
//      fn00748810
//      fn00748E50
// MayUse:  ebx:[0..31] Stack +0004:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ecx edx Top
// Preserved: ebp ebx edi esi esp
fn00748190_entry:
	byte bl_51 = SLICE(ebx, byte, 0)
l00748190:
	word32 edx_100
	word32 eax_22 = fn00726150(Mem13[dwArg04 + 0x1C<32>:word32], eax, out edx_100)
	branch eax_22 == 0<32> l007482D0
l007481B0:
	word32 esp_103
	word32 eax_50
	word32 ecx_495
	word32 edx_496
	word32 eax_40 = fn006FBCC0(Mem20[Mem20[dwArg04 + 4<32>:word32] + 0xC<32>:word32], dwArg04, out ecx_495, out edx_496)
	branch eax_40 == 0<32> l00748208
l00748208:
	eax_50 = ebx
l007481C8:
	word32 eax_54 = Mem38[eax_40 + 8<32>:word32]
	byte al_56 = SLICE(eax_54, byte, 0)
	branch (bl_51 & 4<8>) == 0<8> l00748204
l007481D0:
	branch (al_56 & 4<8>) == 0<8> l00748204
l00748204:
	eax_50 = eax_54 | ebx
l0074820A:
	word32 ecx_502
	word32 eax_80 = fn007050A0(eax_50, out ecx_502, out edx_100)
	esp_103 = fp - 0xC<32>
	branch eax_80 == 0<32> l007482BF
l0074821D:
	word32 esp_220
	word32 ecx_503
	word32 ebx_504
	word32 edi_505
	word32 eax_98 = fn006FBD90(dwArg04, dwArg04, eax_80, out ecx_503, out edx_100, out ebx_504, out edi_505)
	esp_103 = fp - 0xC<32>
	branch eax_98 >= 0<32> l00748244
l00748244:
	word32 v19_107 = Mem96[eax_80:word32] + 0xFFFFFFFF<32>
	Mem108[eax_80:word32] = v19_107
	branch v19_107 != 0<32> l00748255
l00748249:
	word32 eax_111 = Mem108[eax_80 + 4<32>:word32]
	word32 esp_115
	call Mem108[eax_111 + 0x18<32>:word32] (retsize: 4;)
		uses: eax:eax_111,Stack +0004:eax_80,Stack +0008:dwArg04,Stack +0018:dwArg04
		defs: edx:edx_118,esp:esp_115
	esp_103 = esp_115 + 4<32>
l00748255:
	branch (bl_51 & 4<8>) == 0<8> l00748270
l00748270:
	branch (bl_51 & 1<8>) == 0<8> l007482E7
l00748275:
	word32 ecx_132 = Mem131[dwArg04 + 0x14<32>:word32]
	word32 esp_134 = esp_103 - 4<i32>
	Mem136[esp_134:word32] = eax_22
	Mem138[esp_134 - 4<i32>:word32] = ecx_132
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 edi_142 = ebx
	word32 ecx_509
	word32 edx_510
	word32 eax_146 = fn006FBCC0(stackArg4, dwArg04, out ecx_509, out edx_510)
	branch eax_146 == 0<32> l0074828D
l00748288:
	edi_142 = Mem138[eax_146 + 8<32>:word32] | ebx
l0074828D:
	Mem162[esp_134:word32] = edi_142
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_512
	word32 eax_169 = fn007050A0(stackArg4, out ecx_512, out edx_100)
	esp_103 = esp_134 + 4<32>
	branch eax_169 == 0<32> l007482BF
l0074829C:
	word32 edx_179 = Mem162[dwArg04 + 0x14<32>:word32]
	Mem181[esp_134:word32] = eax_169
	Mem183[esp_134 - 4<i32>:word32] = eax_22
	Mem185[esp_134 - 8<i32>:word32] = edx_179
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 stackArg12 = <invalid>
	word32 ecx_515
	word32 ebx_516
	word32 edi_517
	word32 eax_187 = fn006FBD90(stackArg4, dwArg04, stackArg12, out ecx_515, out edx_100, out ebx_516, out edi_517)
	esp_103 = esp_134 + 4<32>
	branch eax_187 >= 0<32> l007482D6
l007482D6:
	word32 v22_196 = Mem185[eax_169:word32] + 0xFFFFFFFF<32>
	Mem197[eax_169:word32] = v22_196
	branch v22_196 != 0<32> l007482E7
l007482DB:
	word32 ecx_200 = Mem197[eax_169 + 4<32>:word32]
	word32 edx_201 = Mem197[ecx_200 + 0x18<32>:word32]
	Mem203[esp_134:word32] = eax_169
	word32 esp_204
	call edx_201 (retsize: 4;)
		uses: eax:eax_187,ecx:ecx_200,Stack +0008:dwArg04
		defs: edx:edx_207,esp:esp_204
	esp_103 = esp_204 + 4<32>
l007482AE:
	word32 v21_212 = Mem185[eax_169:word32] + 0xFFFFFFFF<32>
	Mem213[eax_169:word32] = v21_212
	branch v21_212 != 0<32> l007482BF
l007482B3:
	word32 eax_216 = Mem213[eax_169 + 4<32>:word32]
	word32 ecx_217 = Mem213[eax_216 + 0x18<32>:word32]
	Mem219[esp_134:word32] = eax_169
	call ecx_217 (retsize: 4;)
		uses: eax:eax_216,Stack +0008:dwArg04
		defs: edx:edx_223,esp:esp_220
l0074825A:
	word32 eax_227 = Mem131[Mem131[dwArg04 + 4<32>:word32] + 0x14<32>:word32]
	word32 esp_228 = esp_103 - 4<i32>
	Mem229[esp_228:word32] = eax_22
	Mem231[esp_228 - 4<i32>:word32] = eax_227
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	esp_103 = esp_228 + 4<32>
	word32 ecx_507
	branch fn006F2A10(stackArg4, dwArg04, out ecx_507, out edx_100) < 0<32> l007482BF
l0074826E:
l007482E7:
	word32 v20_245 = Mem244[eax_22:word32] + 0xFFFFFFFF<32>
	Mem246[eax_22:word32] = v20_245
	branch v20_245 != 0<32> l007482F8
l007482EC:
	word32 eax_249 = Mem246[eax_22 + 4<32>:word32]
	word32 ecx_250 = Mem246[eax_249 + 0x18<32>:word32]
	Mem253[esp_103 - 4<i32>:word32] = eax_22
	call ecx_250 (retsize: 4;)
		uses: eax:eax_249,Stack +0008:dwArg04
		defs: edx:edx_261
l007482F8:
	edxOut = edx_100
	return 1<32>
l00748230:
	word32 v18_275 = Mem96[eax_80:word32] + 0xFFFFFFFF<32>
	Mem276[eax_80:word32] = v18_275
	branch v18_275 != 0<32> l007482BF
l00748239:
	word32 ecx_279 = Mem276[eax_80 + 4<32>:word32]
	call Mem276[ecx_279 + 0x18<32>:word32] (retsize: 4;)
		uses: eax:eax_98,ecx:ecx_279,Stack +0004:eax_80,Stack +0008:dwArg04,Stack +0018:dwArg04
		defs: edx:edx_286,esp:esp_283
l007482BC:
	esp_103 = esp_220 + 4<32>
l007481D4:
	word32 ecx_497
	word32 edx_498
	word32 esi_499
	fn006ECC50(eax, out ecx_497, out edx_498, out esi_499)
	word32 ecx_500
	word32 edx_501
	fn006E15D0(Mem293[0x00A178F4<p32>:word32], dwArg04, out ecx_500, out edx_501)
	fn006E1DE0(dwArg04, out edx_100)
	esp_103 = fp - 0xC<32>
l007482BF:
	word32 v15_332 = Mem330[eax_22:word32] + 0xFFFFFFFF<32>
	Mem333[eax_22:word32] = v15_332
	branch v15_332 != 0<32> l007482D0
l007482C4:
	word32 edx_336 = Mem333[eax_22 + 4<32>:word32]
	word32 eax_337 = Mem333[edx_336 + 0x18<32>:word32]
	Mem340[esp_103 - 4<i32>:word32] = eax_22
	call eax_337 (retsize: 4;)
		uses: eax:eax_337,edx:edx_336,Stack +0008:dwArg04
		defs: edx:edx_352
l007482D0:
	edxOut = edx_100
	return 0<32>
fn00748190_exit:


word32 fn00748310(word32 ebx, word32 ebp, word32 esi, word32 edi, selector es, selector ds, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00748810
//      fn00748E50
// MayUse:  cs:[0..15] ds:[0..15] ebp:[0..31] ebx:[0..31] edi:[0..31] es:[0..15] esi:[0..31] fs:[0..15] gs:[0..15] ss:[0..15]
// LiveOut: eax edx
// Trashed: SCZDOP eax ebx ecx edx Top
// Preserved: edi esp
fn00748310_entry:
l00748310:
	word32 eax_10 = Mem8[esi + 4<32>:word32]
	word32 eax_7 = Mem0[0x00A14188<p32>:word32] ^ fp - 0x104<32>
	Mem12[eax_10 + 0x30<32>:word32] = Mem8[eax_10 + 0x30<32>:word32] + 1<32>
	fn00724FE0(fp - 0x104<32>, 0x100<32>, 0x8DA664<32>)
	word32 ecx_193
	word32 edx_128
	word32 eax_38 = fn006F1A70(out ecx_193, out edx_128)
	branch eax_38 != 0<32> l00748372
l00748372:
	branch fn00748190(2<32>, esi, out edx_128) == 0<32> l0074835A
l00748386:
	word32 v14_66 = Mem52[eax_38:word32] + 0xFFFFFFFF<32>
	Mem67[eax_38:word32] = v14_66
	branch v14_66 != 0<32> l00748397
l0074838B:
	word32 ecx_70 = Mem67[eax_38 + 4<32>:word32]
	call Mem67[ecx_70 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_70,Stack +0004:eax_38
		defs: edx:edx_77
l00748397:
	word32 ecx_195
	word32 eax_108 = fn00694B8E(1<32>, eax_7 ^ fp - 260<i32>, edx_128, ebx, ebp, esi, edi, es, ds, edi, out ecx_195)
	edxOut = edx_128
	return eax_108
l0074835A:
	word32 ecx_194
	word32 eax_137 = fn00694B8E(0<32>, eax_7 ^ fp - 260<i32>, edx_128, ebx, ebp, esi, edi, es, ds, edi, out ecx_194)
	edxOut = edx_128
	return eax_137
fn00748310_exit:


word32 fn007483C0(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn007486D0
//      fn00748D30
// MayUse:  Stack +0004:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ebx ecx edx esi Top
// Preserved: esp
fn007483C0_entry:
l007483C0:
	word32 eax_13 = fn006F2070()
	branch eax_13 == 0<32> l007483FE
l007483D5:
	word32 edx_135
	word32 eax_31 = fn00748190(4<32>, dwArg04, out edx_135)
	branch eax_31 != 0<32> l00748402
l00748402:
	word32 v13_42 = Mem28[eax_13:word32] + 0xFFFFFFFF<32>
	Mem43[eax_13:word32] = v13_42
	branch v13_42 != 0<32> l00748413
l00748407:
	word32 ecx_46 = Mem43[eax_13 + 4<32>:word32]
	call Mem43[ecx_46 + 0x18<32>:word32] (retsize: 4;)
		uses: eax:eax_31,ecx:ecx_46,Stack +0004:eax_13,Stack +0010:dwArg04
l00748413:
	return 1<32>
l007483ED:
	word32 v11_63 = Mem28[eax_13:word32] + 0xFFFFFFFF<32>
	Mem64[eax_13:word32] = v11_63
	branch v11_63 != 0<32> l007483FE
l007483F2:
	word32 edx_67 = Mem64[eax_13 + 4<32>:word32]
	word32 eax_68 = Mem64[edx_67 + 0x18<32>:word32]
	call eax_68 (retsize: 4;)
		uses: eax:eax_68,edx:edx_67,Stack +0004:eax_13,Stack +0010:dwArg04
l007483FE:
	return 0<32>
fn007483C0_exit:


word32 fn00748420(word32 ebx)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn007486D0
//      fn00748790
// MayUse:  ebx:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ebp edi esi Top
// Preserved: esp
fn00748420_entry:
l00748420:
	word32 edi_14 = 0<32>
	word32 esi_18 = ebx + 4<32>
l00748430:
	word32 eax_25
	branch ebx != 0<32> l00748438
l00748438:
	eax_25 = Mem24[ebx:word32]
l00748434:
	eax_25 = 0<32>
l0074843A:
	branch edi_14 >= eax_25 l00748466
l00748466:
	return 1<32>
l0074843E:
	branch Mem24[Mem24[esi_18:word32]:word32] != 0x13<32> l00748458
l00748445:
	branch fn007486D0(dwArg04, dwArg04, 0<32>) == 0<32> l00748460
l00748460:
	return 0<32>
fn00748420_exit:
l00748458:
	edi_14 = edi_14 + 1<32>
	esi_18 = esi_18 + 4<32>


word32 fn00748470(word32 eax, word32 ecx, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00748E50
// MayUse:  eax:[0..31] ecx:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn00748470_entry:
l00748470:
	word32 ebp_11 = Mem9[eax + 4<32>:word32]
	branch ebp_11 != 0<32> l0074847E
l0074847C:
	ebp_11 = Mem16[eax:word32]
l0074847E:
	word32 esi_22 = ebp_11 + 0x14<32>
	word32 eax_28 = strchr(esi_22, 0x2E<32>)
	branch eax_28 == 0<32> l007484A7
l007484A7:
	Mem34[ebp_11:word32] = Mem27[ebp_11:word32] + 1<32>
l00748491:
	word32 ecx_335
	word32 eax_46 = fn006EC9B0(esi_22, eax_28 - esi_22, out ecx_335, out edx)
	ebp_11 = eax_46
	branch eax_46 != 0<32> l007484AB
l007484AB:
	word32 edi_62 = 0x8A7F90<32>
	word32 ecx_100 = 2<32>
	bool v20_224 = true
l007484B8:
	branch ecx_100 == 0<32> l007484BA
l007484B8_1:
	v20_224 = Mem61[esi_336:byte] == Mem61[edi_337:byte]
	esi_22 = esi_336 + 1<i32>
	edi_62 = edi_337 + 1<i32>
	ecx_100 = ecx_100 - 1<32>
	esi_336 = esi_22
	edi_337 = edi_62
	branch Mem61[esi_336:byte] != Mem61[edi_337:byte] l007484B8
l007484BA:
	branch v20_224 l007484E7
l007484E7:
	branch Mem61[Mem61[ecx + 4<32>:word32] + 0x1C<32>:word32] == 2<32> l0074851C
l007484F0:
	branch fn00747FD0(ecx, out ecx_100, out edx) != 0<32> l0074851C
l0074851C:
	word32 eax_109 = Mem61[ecx + 4<32>:word32]
	Mem111[eax_109 + 0x20<32>:word32] = Mem61[eax_109 + 0x20<32>:word32] | 1<32>
	word32 v18_114 = Mem111[ebp_11:word32] + 0xFFFFFFFF<32>
	Mem115[ebp_11:word32] = v18_114
	branch v18_114 != 0<32> l00748535
l00748529:
	word32 edx_118 = Mem115[ebp_11 + 4<32>:word32]
	word32 eax_119 = Mem115[edx_118 + 0x18<32>:word32]
	call eax_119 (retsize: 4;)
		uses: eax:eax_119,ecx:ecx_125,edx:edx_118,Stack +0004:ebp_91
		defs: edx:edx_132
l00748535:
	edxOut = edx
	return 1<32>
l00748503:
	word32 v16_148 = Mem61[ebp_11:word32] + 0xFFFFFFFF<32>
	Mem149[ebp_11:word32] = v16_148
	branch v16_148 != 0<32> l00748515
l00748509:
	word32 eax_152 = Mem149[ebp_11 + 4<32>:word32]
	word32 ecx_153 = Mem149[eax_152 + 0x18<32>:word32]
	call ecx_153 (retsize: 4;)
		uses: eax:eax_152,ecx:ecx_153,edx:edx_159,Stack +0004:ebp_91
		defs: edx:edx_159
l00748515:
	edxOut = edx
	return 0<32>
l007484BC:
	word32 edx_184
	word32 eax_182 = fn00748190(0x400<32>, ecx, out edx_184)
	word32 v14_188 = Mem178[ebp_11:word32] + 0xFFFFFFFF<32>
	Mem189[ebp_11:word32] = v14_188
	branch v14_188 != 0<32> l007484E0
l007484D4:
	word32 ecx_193 = Mem189[ebp_11 + 4<32>:word32]
	call Mem189[ecx_193 + 0x18<32>:word32] (retsize: 4;)
		uses: eax:eax_182,ecx:ecx_193,edx:edx_200,Stack +0004:ebp_91
		defs: edx:edx_200
l007484E0:
	edxOut = edx_184
	return eax_182
l007484A3:
	edxOut = edx
	return eax_46
fn00748470_exit:


word32 fn00748540(word32 eax, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00748810
//      fn00748D30
// MayUse:  eax:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ebp ebx ecx edi esi Top
// Preserved: esp
fn00748540_entry:
l00748540:
	word32 edx_180
	branch fn00748810(dwArg04, Mem10[eax:word32], out edx_180) != 0<32> l0074855D
l0074855D:
	word32 edx_181
	branch fn00748810(dwArg04, dwArg04, out edx_181) == 0<32> l00748558
l0074856E:
	word32 ebx_44 = Mem43[eax + 8<32>:word32]
	word32 edi_110 = 0<32>
l00748578:
	word32 eax_57
	branch ebx_44 != 0<32> l00748580
l00748580:
	eax_57 = Mem56[ebx_44:word32]
l0074857C:
	eax_57 = 0<32>
l00748582:
	branch edi_110 >= eax_57 l007485A5
l007485A5:
	edxOut = <invalid>
	return 1<32>
l00748586:
	word32 edx_182
	branch fn00748810(dwArg04, dwArg04, out edx_182) == 0<32> l0074859E
l0074859E:
	edxOut = <invalid>
	return 0<32>
l00748596:
	edi_110 = edi_110 + 1<32>
l00748558:
	edxOut = <invalid>
	return 0<32>
fn00748540_exit:


word32 fn007485B0(word32 dwArg08, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn007485B0
//      fn00748810
// MayUse:  Stack +0008:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ebp ebx ecx edi esi Top
// Preserved: esp
fn007485B0_entry:
l007485B0:
	word32 eax_14 = Mem12[dwArg08:word32]
	branch eax_14 == 2<32> l0074861B
l0074861B:
	word32 eax_21 = Mem19[dwArg08 + 4<32>:word32]
	branch eax_21 == 0<32> l00748634
l00748626:
	word32 edx_280
	branch fn00748810(dwArg04, eax_21, out edx_280) == 0<32> l007485E2
l00748634:
	branch Mem40[dwArg08 + 8<32>:word32] == 0<32> l00748649
l0074863B:
	word32 edx_281
	branch fn00748810(dwArg04, dwArg04, out edx_281) == 0<32> l007485E2
l00748649:
	branch Mem64[dwArg08 + 0xC<32>:word32] == 0<32> l0074865E
l00748650:
	word32 edx_282
	branch fn00748810(dwArg04, dwArg04, out edx_282) == 0<32> l007485E2
l007485BF:
	branch eax_14 == 3<32> l007485E9
l007485E9:
	word32 esi_90 = Mem19[dwArg08 + 4<32>:word32]
	word32 ebx_106 = 0<32>
l007485F5:
	word32 eax_101
	branch esi_90 != 0<32> l007485FD
l007485FD:
	eax_101 = Mem100[esi_90:word32]
l007485F9:
	eax_101 = 0<32>
l007485FF:
	branch ebx_106 >= eax_101 l0074865E
l00748603:
	word32 edx_283
	branch fn007485B0(dwArg04, out edx_283) == 0<32> l007485E2
l00748613:
	ebx_106 = ebx_106 + 1<32>
l007485C4:
	branch eax_14 != 4<32> l0074865E
l007485CD:
	word32 edx_279
	branch fn00748810(dwArg04, Mem19[dwArg08 + 4<32>:word32], out edx_279) != 0<32> l0074865E
l0074865E:
	edxOut = <invalid>
	return 1<32>
l007485E2:
	edxOut = <invalid>
	return 0<32>
fn007485B0_exit:


word32 fn00748670()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00749820
// MayUse: 
// LiveOut: eax
// Trashed: SCZO eax ecx edi edx esi Top
// Preserved: esp
fn00748670_entry:
l00748670:
	word32 eax_12 = fn006DECD0(0x28<32>)
	branch eax_12 == 0<32> l007486AE
l00748684:
	Mem24[eax_12:word32] = 0<32>
	Mem25[eax_12 + 0xC<32>:word32] = 0<32>
	word32 edx_111
	word32 eax_27 = fn006F2650(0<32>, out edx_111)
	Mem32[eax_12 + 0x10<32>:word32] = eax_27
	branch eax_27 == 0<32> l007486A5
l00748699:
	word32 edx_113
	word32 ecx_112
	word32 eax_35 = fn006FDCC0(out ecx_112, out edx_113)
	Mem39[eax_12 + 0xC<32>:word32] = eax_35
	branch eax_35 != 0<32> l007486B3
l007486B3:
	Mem41[eax_12 + 4<32>:word32] = 0<32>
	Mem42[eax_12 + 0x20<32>:word32] = 0<32>
	Mem43[eax_12 + 0x1C<32>:word32] = 0<32>
	return eax_12
l007486A5:
	fn00747530(eax_12)
l007486AE:
	return 0<32>
fn00748670_exit:


word32 fn007486D0(word32 dwArg04, word32 dwArg08, word32 dwArg0C)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00748420
//      fn00748790
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn007486D0_entry:
l007486D0:
	word32 esi_119 = 0<32>
	word32 edi_121 = dwArg08 + 4<32>
l007486E1:
	word32 eax_27
	branch dwArg08 != 0<32> l007486E9
l007486E9:
	eax_27 = Mem26[dwArg08:word32]
l007486E5:
	eax_27 = 0<32>
l007486EB:
	branch esi_119 >= eax_27 l00748766
l00748766:
	branch dwArg0C != 0<32> l0074877A
l0074876D:
	branch fn00748420(dwArg08) == 0<32> l0074875F
l0074877A:
	return 1<32>
l007486EF:
	word32 ecx_72 = Mem26[Mem26[edi_121:word32]:word32]
	branch ecx_72 != 0x11<32> l00748719
l00748719:
	branch ecx_72 != 0x13<32> l0074873C
l0074873C:
	word32 edx_253
	word32 ecx_252
	fn006E0F80(Mem26[0x00A178F4<p32>:word32], dwArg04, out ecx_252, out edx_253)
	word32 edx_254
	fn006E1DE0(dwArg04, out edx_254)
l0074871E:
	branch dwArg0C == 0<32> l00748734
l00748725:
	branch fn007483C0(dwArg04) == 0<32> l0074875F
l00748734:
	esi_119 = esi_119 + 1<32>
	edi_121 = edi_121 + 4<32>
l007486F8:
	word32 edx_251
	branch fn00748190(4<32>, dwArg04, out edx_251) == 0<32> l0074875F
l0074875F:
	return 0<32>
fn007486D0_exit:
l0074870D:
	esi_119 = esi_119 + 1<32>
	edi_121 = edi_121 + 4<32>


word32 fn00748790(word32 eax, word32 esi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00748810
//      fn00748E50
// MayUse:  eax:[0..31] esi:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ebx edi Top
// Preserved: esp
fn00748790_entry:
l00748790:
	word32 eax_9 = Mem6[eax:word32]
	branch eax_9 == 0<32> l007487AB
l00748799:
	word32 eax_21 = fn007486D0(esi, eax_9, 1<32>)
	branch eax_21 != 0<32> l007487AB
l007487AB:
	branch Mem29[eax + 4<32>:word32] == 0<32> l007487CC
l007487B3:
	word32 edx_170
	branch fn00748190(4<32>, esi, out edx_170) == 0<32> l00748801
l007487C5:
	word32 eax_52 = Mem41[esi + 4<32>:word32]
	Mem54[eax_52 + 0x24<32>:word32] = Mem41[eax_52 + 0x24<32>:word32] | 0x10<32>
l007487CC:
	branch Mem58[eax + 8<32>:word32] == 0<32> l007487EC
l007487D3:
	word32 edx_171
	branch fn00748190(4<32>, esi, out edx_171) == 0<32> l00748801
l007487E5:
	word32 eax_77 = Mem66[esi + 4<32>:word32]
	Mem79[eax_77 + 0x24<32>:word32] = Mem66[eax_77 + 0x24<32>:word32] | 0x20<32>
l007487EC:
	word32 edi_84 = Mem83[eax:word32]
	branch edi_84 == 0<32> l00748806
l007487F2:
	branch fn00748420(edi_84) != 0<32> l00748806
l00748806:
	return 1<32>
l00748801:
	return 0<32>
l007487A9:
	return eax_21
fn00748790_exit:


word32 fn00748810(word32 dwArg04, word32 dwArg08, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00748540
//      fn007485B0
//      fn00748810
//      fn00748D30
//      fn00748E50
//      fn007497A0
//      fn00749820
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn00748810_entry:
l00748810:
	word32 eax_17 = Mem15[dwArg08:word32]
	branch eax_17 >u 0x13<32> l00748CD0
l00748826:
	word32 eax_131
	switch (eax_17 + 0xFFFFFFFF<32>) { l0074882D l0074886A l0074889B l007488A6 l00748977 l007489AA l00748A22 l00748A7D l00748A8D l00748AE5 l00748B34 l00748BF5 l00748CD0 l00748CD0 l00748C03 l00748C11 l00748C39 l00748C5E l00748C9A }
l00748C9A:
	word32 edi_21 = Mem15[dwArg08 + 4<32>:word32]
	word32 ebx_23 = 0<32>
l00748CA6:
	word32 eax_32
	branch edi_21 != 0<32> l00748CAE
l00748CAE:
	eax_32 = Mem31[edi_21:word32]
l00748CAA:
	eax_32 = 0<32>
l00748CB0:
	branch ebx_23 >= eax_32 l00748CD0
l00748CB4:
	branch fn00748810(dwArg04, dwArg04, out edx) == 0<32> l00748894
l00748CC8:
	ebx_23 = ebx_23 + 1<32>
l00748C5E:
	word32 edi_69 = Mem15[dwArg08 + 4<32>:word32]
	word32 ebx_115 = 0<32>
l00748C70:
	word32 eax_81
	branch edi_69 != 0<32> l00748C78
l00748C78:
	eax_81 = Mem80[edi_69:word32]
l00748C74:
	eax_81 = 0<32>
l00748C7A:
	branch ebx_115 >= eax_81 l00748CD0
l00748C7E:
	branch fn00748810(dwArg04, dwArg04, out edx) == 0<32> l00748894
l00748C92:
	ebx_115 = ebx_115 + 1<32>
l00748C39:
	eax_131 = fn00748190((0<32> - (Mem15[dwArg08 + 8<32>:word32] == 1<32>) & 0xFFFFFFFA<32>) + 8<32>, dwArg04, out edx)
l00748C11:
	branch fn00748810(dwArg04, Mem15[dwArg08 + 4<32>:word32], out edx) == 0<32> l00748894
l00748C2A:
	eax_131 = fn007485B0(dwArg04, out edx)
l00748C03:
l00748BF5:
l00748B34:
	branch fn00748810(dwArg04, Mem15[dwArg08 + 4<32>:word32], out edx) == 0<32> l00748894
l00748B4D:
	word32 ebp_193 = Mem182[dwArg08 + 8<32>:word32]
	word32 ebx_194 = 0<32>
l00748B55:
	word32 eax_203
	branch ebp_193 != 0<32> l00748B5D
l00748B5D:
	eax_203 = Mem202[ebp_193:word32]
l00748B59:
	eax_203 = 0<32>
l00748B60:
	branch ebx_194 >= eax_203 l00748B84
l00748B84:
	word32 ebp_215 = Mem202[dwArg08 + 0xC<32>:word32]
	word32 ebx_216 = 0<32>
l00748B90:
	word32 eax_228
	branch ebp_215 != 0<32> l00748B98
l00748B98:
	eax_228 = Mem227[ebp_215:word32]
l00748B94:
	eax_228 = 0<32>
l00748B9B:
	branch ebx_216 >= eax_228 l00748BC2
l00748BC2:
	branch Mem227[dwArg08 + 0x10<32>:word32] == 0<32> l00748BDF
l00748BC9:
	branch fn00748810(dwArg04, dwArg04, out edx) == 0<32> l00748894
l00748BDF:
	branch Mem267[dwArg08 + 0x14<32>:word32] == 0<32> l00748CD0
l00748BEA:
l00748B9F:
	branch fn00748810(dwArg04, dwArg04, out edx) == 0<32> l00748894
l00748BBA:
	ebx_216 = ebx_216 + 1<32>
l00748B64:
	branch fn00748810(dwArg04, dwArg04, out edx) == 0<32> l00748894
l00748B7C:
	ebx_194 = ebx_194 + 1<32>
l00748AE5:
	branch fn00748810(dwArg04, Mem15[dwArg08 + 4<32>:word32], out edx) == 0<32> l00748894
l00748AFE:
	word32 edi_338 = Mem327[dwArg08 + 0xC<32>:word32]
	word32 ebx_339 = 0<32>
l00748B06:
	word32 eax_348
	branch edi_338 != 0<32> l00748B0E
l00748B0E:
	eax_348 = Mem347[edi_338:word32]
l00748B0A:
	eax_348 = 0<32>
l00748B10:
	branch ebx_339 >= eax_348 l00748CD0
l00748B18:
	branch fn00748810(dwArg04, dwArg04, out edx) == 0<32> l00748894
l00748B2C:
	ebx_339 = ebx_339 + 1<32>
l00748A8D:
	word32 eax_385 = Mem15[dwArg08 + 4<32>:word32]
	branch eax_385 == 0<32> l00748AAA
l00748A98:
	branch fn00748810(dwArg04, eax_385, out edx) == 0<32> l00748894
l00748AAA:
	word32 eax_406 = Mem405[dwArg04 + 4<32>:word32]
	Mem408[eax_406 + 0x24<32>:word32] = Mem405[eax_406 + 0x24<32>:word32] | 8<32>
	branch (Mem408[Mem408[dwArg04 + 4<32>:word32] + 0x24<32>:byte] & 0x40<8>) == 0<8> l00748CD0
l00748ABE:
	word32 edx_1436
	word32 ecx_1435
	fn006E0F80(Mem408[0x00A178F4<p32>:word32], dwArg04, out ecx_1435, out edx_1436)
	word32 edx_439
	fn006E1DE0(dwArg04, out edx_439)
	edxOut = edx_439
	return 0<32>
l00748A7D:
	eax_131 = fn00748D30(dwArg04, dwArg08, out edx)
l00748A22:
	branch fn00748310(ebx, ebp, dwArg04, dwArg08, es, ds, out edx) == 0<32> l00748894
l00748A33:
	branch fn00748810(dwArg04, dwArg04, out edx) == 0<32> l00748894
l00748A48:
	word32 edi_490 = Mem479[dwArg08 + 8<32>:word32]
	word32 ebp_491 = 0<32>
	word32 ebx_494 = edi_490 + 4<32>
l00748A50:
	word32 eax_500
	branch edi_490 != 0<32> l00748A58
l00748A58:
	eax_500 = Mem499[edi_490:word32]
l00748A54:
	eax_500 = 0<32>
l00748A5A:
	branch ebp_491 >= eax_500 l00748CD0
l00748A62:
	branch fn00748540(Mem499[ebx_494:word32], out edx) == 0<32> l00748894
l00748A75:
	ebp_491 = ebp_491 + 1<32>
	ebx_494 = ebx_494 + 4<32>
l007489AA:
	word32 ebp_535 = Mem15[dwArg08 + 4<32>:word32]
	word32 ebx_536 = 0<32>
l007489B2:
	word32 eax_545
	branch ebp_535 != 0<32> l007489BA
l007489BA:
	eax_545 = Mem544[ebp_535:word32]
l007489B6:
	eax_545 = 0<32>
l007489BD:
	branch ebx_536 >= eax_545 l007489E1
l007489E1:
	word32 edi_557 = Mem544[dwArg08 + 8<32>:word32]
	word32 ebx_558 = 0<32>
l007489F0:
	word32 eax_570
	branch edi_557 != 0<32> l007489F8
l007489F8:
	eax_570 = Mem569[edi_557:word32]
l007489F4:
	eax_570 = 0<32>
l007489FA:
	branch ebx_558 >= eax_570 l00748CD0
l00748A02:
	branch fn00748810(dwArg04, dwArg04, out edx) == 0<32> l00748894
l00748A1A:
	ebx_558 = ebx_558 + 1<32>
l007489C1:
	branch fn00748810(dwArg04, dwArg04, out edx) == 0<32> l00748894
l007489D9:
	ebx_536 = ebx_536 + 1<32>
l00748977:
	branch fn00748810(dwArg04, Mem15[dwArg08 + 4<32>:word32], out edx) == 0<32> l00748894
l00748990:
	word32 edx_656
	word32 eax_654 = fn00748810(dwArg04, dwArg04, out edx_656)
	branch eax_654 != 0<32> l0074887F
l007489A5:
	edxOut = edx_656
	return eax_654
l007488A6:
	branch Mem15[0x00A6E154<p32>:word32] != 0<32> l007488C1
l007488AF:
	word32 ecx_1437
	word32 edx_1438
	Mem685[0x00A6E154<p32>:word32] = fn006F1A70(out ecx_1437, out edx_1438)
l007488C1:
	branch fn00748190(2<32>, dwArg04, out edx) == 0<32> l00748894
l007488D7:
	word32 esi_707 = Mem690[Mem690[dwArg08 + 4<32>:word32] + 0xC<32>:word32]
	branch esi_707 == 0<32> l00748910
l007488E1:
	word32 ebp_711 = 0<32>
l007488E6:
	word32 eax_720
	branch esi_707 != 0<32> l007488EE
l007488EE:
	eax_720 = Mem719[esi_707:word32]
l007488EA:
	eax_720 = 0<32>
l007488F0:
	branch ebp_711 >= eax_720 l00748910
l00748910:
	branch Mem729[0x00A6E154<p32>:word32] != 0<32> l0074892B
l00748919:
	word32 ecx_1440
	word32 edx_1441
	Mem760[0x00A6E154<p32>:word32] = fn006F1A70(out ecx_1440, out edx_1441)
l0074892B:
	branch fn00748090(eax, dwArg04, out edx) == 0<32> l00748894
l00748944:
	branch fn00748790(Mem770[dwArg08 + 4<32>:word32], dwArg04) != 0<32> l0074895C
l0074895C:
	word32 edx_1442
	branch fn00748810(dwArg04, dwArg04, out edx_1442) == 0<32> l00748950
l0074896D:
	eax_131 = fn00748030(dwArg04, out edx)
l00748950:
	word32 edx_824
	fn00748030(dwArg04, out edx_824)
	edxOut = edx_824
	return 0<32>
l007488F4:
	branch fn00748810(dwArg04, dwArg04, out edx) == 0<32> l00748894
l00748908:
	ebp_711 = ebp_711 + 1<32>
l0074889B:
l0074886A:
	branch fn00748810(dwArg04, Mem15[dwArg08 + 4<32>:word32], out edx) == 0<32> l00748894
l0074887F:
l00748884:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	eax_131 = fn00748810(stackArg4, dwArg04, out edx)
l00748889:
l0074888C:
	branch eax_131 != 0<32> l00748CD0
l0074882D:
	word32 edi_916 = Mem15[dwArg08 + 8<32>:word32]
	word32 ebx_918 = 0<32>
l00748840:
	word32 eax_928
	branch edi_916 != 0<32> l00748848
l00748848:
	eax_928 = Mem927[edi_916:word32]
l00748844:
	eax_928 = 0<32>
l0074884A:
	branch ebx_918 >= eax_928 l00748CD0
l00748CD0:
	edxOut = edx
	return 1<32>
l00748852:
	branch fn00748810(dwArg04, dwArg04, out edx) == 0<32> l00748894
l00748894:
	edxOut = edx
	return 0<32>
fn00748810_exit:
l00748862:
	ebx_918 = ebx_918 + 1<32>


word32 fn00748D30(word32 dwArg04, word32 dwArg08, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00748810
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn00748D30_entry:
l00748D30:
	word32 edi_16 = Mem15[Mem10[dwArg08 + 8<32>:word32] + 4<32>:word32]
	word32 edx_25
	branch fn00748810(dwArg04, Mem15[edi_16 + 4<32>:word32], out edx_25) == 0<32> l00748D9B
l00748D52:
	branch Mem21[0x00A6E158<p32>:word32] != 0<32> l00748D6D
l00748D5B:
	word32 edx_411
	word32 ecx_410
	Mem46[0x00A6E158<p32>:word32] = fn006F1A70(out ecx_410, out edx_411)
l00748D6D:
	branch fn00748090(eax, dwArg04, out edx_25) == 0<32> l00748D9B
l00748D80:
	word32 eax_69 = Mem54[dwArg04 + 4<32>:word32]
	Mem71[eax_69 + 0x24<32>:word32] = Mem54[eax_69 + 0x24<32>:word32] | 8<32>
	branch fn007483C0(dwArg04) != 0<32> l00748DA1
l00748DA1:
	word32 edx_412
	branch fn00748810(dwArg04, dwArg04, out edx_412) == 0<32> l00748D96
l00748DB1:
	word32 ebx_107 = Mem106[edi_16 + 8<32>:word32]
	word32 esi_108 = 0<32>
l00748DC0:
	word32 eax_118
	branch ebx_107 != 0<32> l00748DC8
l00748DC8:
	eax_118 = Mem117[ebx_107:word32]
l00748DC4:
	eax_118 = 0<32>
l00748DCA:
	branch esi_108 >= eax_118 l00748DE6
l00748DE6:
	word32 esi_131 = Mem117[dwArg08 + 8<32>:word32]
	word32 ebx_132 = 1<32>
	word32 edi_133 = esi_131 + 8<32>
l00748DF5:
	word32 eax_139
	branch esi_131 != 0<32> l00748DFD
l00748DFD:
	eax_139 = Mem138[esi_131:word32]
l00748DF9:
	eax_139 = 0<32>
l00748DFF:
	branch ebx_132 >= eax_139 l00748E28
l00748E28:
	word32 edx_414
	branch fn00748810(dwArg04, dwArg04, out edx_414) == 0<32> l00748E1C
l00748E3F:
	word32 edx_178
	word32 eax_190 = fn00748030(dwArg04, out edx_178) == 0<32>
	edxOut = edx_178
	return eax_190
l00748E03:
	word32 edx_415
	branch fn00748540(Mem138[edi_133:word32], out edx_415) == 0<32> l00748E1A
l00748E12:
	ebx_132 = ebx_132 + 1<32>
	edi_133 = edi_133 + 4<32>
l00748DCE:
	word32 edx_413
	branch fn00748810(dwArg04, dwArg04, out edx_413) == 0<32> l00748E1A
l00748E1A:
l00748E1C:
	word32 edx_248
	fn00748030(dwArg04, out edx_248)
	edxOut = edx_248
	return 0<32>
l00748DDE:
	esi_108 = esi_108 + 1<32>
l00748D96:
	fn00748030(dwArg04, out edx_25)
l00748D9B:
	edxOut = edx_25
	return 0<32>
fn00748D30_exit:


word32 fn00748E50(word32 edx, word32 ebx, word32 ebp, word32 esi, word32 edi, selector es, selector ds, word32 dwArg04, word32 dwArg08, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00748E50
//      fn007497A0
//      fn00749820
// MayUse:  cs:[0..15] ds:[0..15] ebp:[0..31] ebx:[0..31] edi:[0..31] edx:[0..31] es:[0..15] esi:[0..31] fs:[0..15] gs:[0..15] ss:[0..15] Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax edx
// Trashed: SCZDOP eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn00748E50_entry:
l00748E50:
	word32 eax_1202
	word32 eax_7 = Mem0[0x00A14188<p32>:word32] ^ fp - 0x118<32>
	word32 eax_16 = Mem14[dwArg08:word32]
	branch eax_16 >u 0x14<32> l0074938C
l00748E8D:
	switch (eax_16 + 0xFFFFFFFF<32>) { l00748E94 l00748F8B l00749048 l0074909F l007490D6 l00749126 l00749141 l00749191 l00749234 l007492C3 l007496C6 l0074934F l007493AA l00749453 l007494C9 l007494EF l00749542 l0074959F l007495F6 l007496BE }
l007496BE:
l007495F6:
	word32 ebp_30 = Mem27[dwArg08 + 4<32>:word32]
	word32 dwLoc0110_2162 = 0<32>
l00749610:
	word32 eax_41
	branch ebp_30 != 0<32> l00749618
l00749618:
	eax_41 = Mem40[ebp_30:word32]
l00749614:
	eax_41 = 0<32>
l0074961B:
	branch dwLoc0110_2162 >= eax_41 l0074938C
l00749625:
	word32 eax_63 = fn00748140(dwArg04, out edx)
	byte al_71 = SLICE(eax_63, byte, 0)
	branch eax_63 < 0<32> l00748F4B
l0074963F:
	branch (al_71 & 0xA<8>) == 0<8> l0074968C
l00749643:
	word32 dwLoc0130_2366
	branch (al_71 & 2<8>) == 0<8> l00749659
l00749659:
	dwLoc0130_2366 = 0x8DDCC8<32>
l00749648:
	dwLoc0130_2366 = 0x8DDCFC<32>
l00749668:
	fn00724FE0(fp - 0x104<32>, 0x100<32>, dwLoc0130_2366)
	word32 ecx_2905
	branch fn00747FD0(dwArg04, out ecx_2905, out edx) == 0<32> l00748F4B
l0074968C:
	branch fn00748190(1<32>, dwArg04, out edx) == 0<32> l00748F4B
l007496A8:
	dwLoc0110_2162 = dwLoc0110_2162 + 1<32>
l0074959F:
	branch fn00748810(dwArg04, Mem27[dwArg08 + 4<32>:word32], out edx) == 0<32> l00748F4B
l007495B4:
	word32 eax_163 = Mem152[dwArg04 + 4<32>:word32]
	branch Mem152[eax_163 + 0x2C<32>:word32] != 0<32> l007495C3
l007495BD:
	Mem167[eax_163 + 0x2C<32>:word32] = Mem152[dwArg08 + 0x14<32>:word32]
l007495C3:
	branch Mem169[dwArg08 + 8<32>:word32] == 0<32> l007495EA
l007495EA:
	word32 esi_173 = Mem169[dwArg04 + 4<32>:word32]
	Mem175[esi_173 + 0x20<32>:word32] = Mem169[esi_173 + 0x20<32>:word32] | 4<32>
l007495C9:
	word32 eax_178 = Mem169[dwArg04 + 4<32>:word32]
	Mem180[eax_178 + 0x20<32>:word32] = Mem169[eax_178 + 0x20<32>:word32] | 2<32>
	eax_1202 = fn00748810(dwArg04, dwArg04, out edx)
	branch eax_1202 != 0<32> l00749381
l007495E5:
l00749542:
	word32 esi_202 = Mem27[dwArg08 + 8<32>:word32]
	word32 edi_206 = esi_202 + 4<32>
	word32 ebx_207 = 0<32>
l00749550:
	word32 eax_213
	branch esi_202 != 0<32> l00749558
l00749558:
	eax_213 = Mem27[esi_202:word32]
l00749554:
	eax_213 = 0<32>
l0074955A:
	branch ebx_207 >= eax_213 l00749579
l00749579:
	word32 eax_226 = Mem27[dwArg04 + 4<32>:word32]
	branch Mem27[eax_226 + 0x20<32>:word32] == 0<32> l0074938C
l0074958A:
	branch Mem27[eax_226 + 0x2C<32>:word32] != 0<32> l0074938C
l00749594:
	Mem234[eax_226 + 0x2C<32>:word32] = Mem27[dwArg08 + 0x14<32>:word32]
l0074955E:
	branch fn00748470(Mem27[edi_206:word32], dwArg04, out edx) == 0<32> l00748F4B
l00749571:
	ebx_207 = ebx_207 + 1<32>
	edi_206 = edi_206 + 4<32>
l007494EF:
	word32 esi_254 = Mem27[dwArg08 + 4<32>:word32]
	word32 ebx_255 = 0<32>
	word32 edi_258 = esi_254 + 4<32>
l007494F7:
	word32 eax_264
	branch esi_254 != 0<32> l007494FF
l007494FF:
	eax_264 = Mem27[esi_254:word32]
l007494FB:
	eax_264 = 0<32>
l00749501:
	branch ebx_255 >= eax_264 l00749520
l00749520:
	word32 eax_277 = Mem27[dwArg04 + 4<32>:word32]
	branch Mem27[eax_277 + 0x20<32>:word32] == 0<32> l0074938C
l0074952D:
	branch Mem27[eax_277 + 0x2C<32>:word32] != 0<32> l0074938C
l00749537:
	edx = Mem27[dwArg08 + 0x14<32>:word32]
	Mem285[eax_277 + 0x2C<32>:word32] = edx
l00749509:
	branch fn00748470(Mem27[edi_258:word32], ecx, out edx) == 0<32> l00748F4B
l00749518:
	ebx_255 = ebx_255 + 1<32>
	edi_258 = edi_258 + 4<32>
l007494C9:
	branch fn00748810(dwArg04, Mem27[dwArg08 + 4<32>:word32], out edx) == 0<32> l00748F4B
l007494DE:
	branch Mem308[dwArg08 + 8<32>:word32] == 0<32> l0074938C
l007494E9:
l00749453:
	word32 esi_325 = Mem27[dwArg08 + 4<32>:word32]
	word32 ebx_326 = 0<32>
	word32 edi_329 = esi_325 + 4<32>
l00749460:
	word32 eax_335
	branch esi_325 != 0<32> l00749468
l00749468:
	eax_335 = Mem334[esi_325:word32]
l00749464:
	eax_335 = 0<32>
l0074946A:
	branch ebx_326 >= eax_335 l0074948E
l0074948E:
	word32 ebp_347 = Mem334[dwArg08 + 8<32>:word32]
	word32 ebx_348 = 0<32>
	word32 edi_351 = ebp_347 + 4<32>
l00749496:
	word32 eax_357
	branch ebp_347 != 0<32> l0074949E
l0074949E:
	eax_357 = Mem356[ebp_347:word32]
l0074949A:
	eax_357 = 0<32>
l007494A1:
	branch ebx_348 >= eax_357 l0074938C
l007494A9:
	branch fn00748E50(dwArg04, ebx_348, ebp_347, esi_325, edi_351, es, ds, dwArg04, dwArg04, out edx) == 0<32> l00748F4B
l007494C1:
	ebx_348 = ebx_348 + 1<32>
	edi_351 = edi_351 + 4<32>
l0074946E:
	branch fn00748E50(edx, ebx_326, dwArg08, esi_325, edi_329, es, ds, dwArg04, dwArg04, out edx) == 0<32> l00748F4B
l00749486:
	ebx_326 = ebx_326 + 1<32>
	edi_329 = edi_329 + 4<32>
l007493AA:
	word32 esi_421 = Mem27[dwArg08 + 4<32>:word32]
	word32 ebx_422 = 0<32>
	word32 edi_425 = esi_421 + 4<32>
l007493B2:
	word32 eax_431
	branch esi_421 != 0<32> l007493BA
l007493BA:
	eax_431 = Mem430[esi_421:word32]
l007493B6:
	eax_431 = 0<32>
l007493BC:
	branch ebx_422 >= eax_431 l007493E0
l007493E0:
	word32 esi_443 = Mem430[dwArg08 + 0xC<32>:word32]
	word32 ebx_444 = 0<32>
	word32 edi_447 = esi_443 + 4<32>
l007493E8:
	word32 eax_453
	branch esi_443 != 0<32> l007493F0
l007493F0:
	eax_453 = Mem452[esi_443:word32]
l007493EC:
	eax_453 = 0<32>
l007493F2:
	branch ebx_444 >= eax_453 l00749416
l00749416:
	word32 ebp_465 = Mem452[dwArg08 + 8<32>:word32]
	word32 ebx_466 = 0<32>
l00749420:
	word32 eax_476
	branch ebp_465 != 0<32> l00749428
l00749428:
	eax_476 = Mem475[ebp_465:word32]
l00749424:
	eax_476 = 0<32>
l0074942B:
	branch ebx_466 >= eax_476 l0074938C
l00749433:
	branch fn007497A0(dwArg04, out edx) == 0<32> l00748F4B
l0074944B:
	ebx_466 = ebx_466 + 1<32>
l007493F6:
	branch fn00748E50(dwArg04, ebx_444, dwArg08, esi_443, edi_447, es, ds, dwArg04, dwArg04, out edx) == 0<32> l00748F4B
l0074940E:
	ebx_444 = ebx_444 + 1<32>
	edi_447 = edi_447 + 4<32>
l007493C0:
	branch fn00748E50(edx, ebx_422, dwArg08, esi_421, edi_425, es, ds, dwArg04, dwArg04, out edx) == 0<32> l00748F4B
l007493D8:
	ebx_422 = ebx_422 + 1<32>
	edi_425 = edi_425 + 4<32>
l0074934F:
	word32 eax_566 = Mem27[dwArg08 + 4<32>:word32]
	branch eax_566 == 0<32> l0074938C
l00749356:
	branch fn00748810(dwArg04, eax_566, out edx) == 0<32> l00748F4B
l00749368:
	branch Mem573[dwArg08 + 8<32>:word32] == 0<32> l0074938C
l0074936F:
	branch fn00748810(dwArg04, dwArg04, out edx) == 0<32> l00748F4B
l00749381:
	branch Mem603[dwArg08 + 0xC<32>:word32] != 0<32> l0074910F
l007496C6:
	branch fn00748310(ebx, dwArg08, dwArg04, edi, es, ds, out edx) == 0<32> l00748F4B
l007496D3:
	branch fn00748810(dwArg04, dwArg04, out edx) == 0<32> l00748F4B
l007496E8:
	branch Mem621[dwArg08 + 8<32>:word32] == 0<32> l00749710
l007496EE:
	branch fn00748310(ebx, dwArg08, dwArg04, edi, es, ds, out edx) == 0<32> l00748F4B
l007496FB:
	branch fn00748810(dwArg04, dwArg04, out edx) == 0<32> l00748F4B
l00749710:
	word32 ebp_660 = Mem659[dwArg08 + 0xC<32>:word32]
	word32 ebx_661 = 0<32>
	word32 edi_664 = ebp_660 + 4<32>
l00749718:
	word32 eax_670
	branch ebp_660 != 0<32> l00749720
l00749720:
	eax_670 = Mem669[ebp_660:word32]
l0074971C:
	eax_670 = 0<32>
l00749723:
	branch ebx_661 >= eax_670 l0074938C
l0074972B:
	branch fn00748E50(edx, ebx_661, ebp_660, dwArg04, edi_664, es, ds, dwArg04, dwArg04, out edx) == 0<32> l00748F4B
l0074973F:
	ebx_661 = ebx_661 + 1<32>
	edi_664 = edi_664 + 4<32>
l007492C3:
	branch fn00748810(dwArg04, Mem27[dwArg08 + 4<32>:word32], out edx) == 0<32> l00748F4B
l007492D8:
	word32 esi_722 = Mem711[dwArg08 + 8<32>:word32]
	word32 ebx_723 = 0<32>
	word32 edi_726 = esi_722 + 4<32>
l007492E0:
	word32 eax_732
	branch esi_722 != 0<32> l007492E8
l007492E8:
	eax_732 = Mem731[esi_722:word32]
l007492E4:
	eax_732 = 0<32>
l007492EA:
	branch ebx_723 >= eax_732 l0074930E
l0074930E:
	word32 ebp_744 = Mem731[dwArg08 + 0xC<32>:word32]
	branch ebp_744 == 0<32> l0074938C
l00749315:
	word32 edi_751 = ebp_744 + 4<32>
	word32 ebx_752 = 0<32>
l00749320:
	word32 eax_758
	branch ebp_744 != 0<32> l00749328
l00749328:
	eax_758 = Mem757[ebp_744:word32]
l00749324:
	eax_758 = 0<32>
l0074932B:
	branch ebx_752 >= eax_758 l0074938C
l0074932F:
	branch fn00748E50(edx, ebx_752, ebp_744, esi_722, edi_751, es, ds, dwArg04, dwArg04, out edx) == 0<32> l00748F4B
l00749347:
	ebx_752 = ebx_752 + 1<32>
	edi_751 = edi_751 + 4<32>
l007492EE:
	branch fn00748E50(dwArg04, ebx_723, dwArg08, esi_722, edi_726, es, ds, dwArg04, dwArg04, out edx) == 0<32> l00748F4B
l00749306:
	ebx_723 = ebx_723 + 1<32>
	edi_726 = edi_726 + 4<32>
l00749234:
	branch fn00748810(dwArg04, Mem27[dwArg08 + 4<32>:word32], out edx) == 0<32> l00748F4B
l00749249:
	word32 esi_837 = Mem826[dwArg08 + 8<32>:word32]
	word32 ebx_838 = 0<32>
	word32 edi_841 = esi_837 + 4<32>
l00749251:
	word32 eax_847
	branch esi_837 != 0<32> l00749259
l00749259:
	eax_847 = Mem846[esi_837:word32]
l00749255:
	eax_847 = 0<32>
l0074925B:
	branch ebx_838 >= eax_847 l0074927F
l0074927F:
	word32 ebp_859 = Mem846[dwArg08 + 0xC<32>:word32]
	branch ebp_859 == 0<32> l0074938C
l0074928A:
	word32 ebx_863 = 0<32>
	word32 edi_866 = ebp_859 + 4<32>
l00749290:
	word32 eax_872
	branch ebp_859 != 0<32> l00749298
l00749298:
	eax_872 = Mem871[ebp_859:word32]
l00749294:
	eax_872 = 0<32>
l0074929B:
	branch ebx_863 >= eax_872 l0074938C
l007492A3:
	branch fn00748E50(edx, ebx_863, ebp_859, esi_837, edi_866, es, ds, dwArg04, dwArg04, out edx) == 0<32> l00748F4B
l007492BB:
	ebx_863 = ebx_863 + 1<32>
	edi_866 = edi_866 + 4<32>
l0074925F:
	branch fn00748E50(dwArg04, ebx_838, dwArg08, esi_837, edi_841, es, ds, dwArg04, dwArg04, out edx) == 0<32> l00748F4B
l00749277:
	ebx_838 = ebx_838 + 1<32>
	edi_841 = edi_841 + 4<32>
l00749191:
	branch fn00748810(dwArg04, Mem27[dwArg08 + 4<32>:word32], out edx) == 0<32> l00748F4B
l007491A6:
	branch fn00748810(dwArg04, dwArg04, out edx) == 0<32> l00748F4B
l007491BB:
	word32 esi_966 = Mem955[dwArg08 + 0xC<32>:word32]
	word32 ebx_1062 = 0<32>
	word32 edi_1040 = esi_966 + 4<32>
l007491C3:
	word32 eax_976
	branch esi_966 != 0<32> l007491CB
l007491CB:
	eax_976 = Mem975[esi_966:word32]
l007491C7:
	eax_976 = 0<32>
l007491CD:
	branch ebx_1062 >= eax_976 l007491F1
l007491F1:
	word32 ebp_988 = Mem975[dwArg08 + 0x10<32>:word32]
	branch ebp_988 == 0<32> l0074938C
l007491FC:
	word32 ebx_1006 = 0<32>
	word32 edi_1011 = ebp_988 + 4<32>
l00749201:
	word32 eax_1001
	branch ebp_988 != 0<32> l00749209
l00749209:
	eax_1001 = Mem1000[ebp_988:word32]
l00749205:
	eax_1001 = 0<32>
l0074920C:
	branch ebx_1006 >= eax_1001 l0074938C
l00749214:
	branch fn00748E50(edx, ebx_1006, ebp_988, esi_966, edi_1011, es, ds, dwArg04, dwArg04, out edx) == 0<32> l00748F4B
l0074922C:
	ebx_1006 = ebx_1006 + 1<32>
	edi_1011 = edi_1011 + 4<32>
l007491D1:
	branch fn00748E50(dwArg04, ebx_1062, dwArg08, esi_966, edi_1040, es, ds, dwArg04, dwArg04, out edx) == 0<32> l00748F4B
l007491E9:
	ebx_1062 = ebx_1062 + 1<32>
	edi_1040 = edi_1040 + 4<32>
l00749141:
	word32 eax_1065 = Mem27[dwArg08 + 4<32>:word32]
	branch eax_1065 == 0<32> l0074915A
l00749148:
	branch fn00748810(dwArg04, eax_1065, out edx) == 0<32> l00748F4B
l0074915A:
	word32 ebp_1085 = Mem1084[dwArg08 + 8<32>:word32]
	word32 ebx_1086 = 0<32>
l00749162:
	word32 eax_1095
	branch ebp_1085 != 0<32> l0074916A
l0074916A:
	eax_1095 = Mem1094[ebp_1085:word32]
l00749166:
	eax_1095 = 0<32>
l0074916D:
	branch ebx_1086 >= eax_1095 l0074938C
l00749175:
	branch fn00748810(dwArg04, dwArg04, out edx) == 0<32> l00748F4B
l00749189:
	ebx_1086 = ebx_1086 + 1<32>
l00749126:
	branch fn00748810(dwArg04, Mem27[dwArg08 + 4<32>:word32], out edx) == 0<32> l00748F4B
l0074913B:
l007490D6:
	word32 eax_1150 = Mem27[dwArg08 + 4<32>:word32]
	word32 ebx_1152 = 0<32>
l007490E2:
	word32 eax_1156 = eax_1150
	branch eax_1150 == 0<32> l007490E8
l007490E6:
	eax_1156 = Mem1160[eax_1150:word32]
l007490E8:
	branch ebx_1152 >= eax_1156 l0074910C
l0074910C:
l0074910F:
l00749110:
	eax_1202 = fn00748810(dwArg04, dwArg04, out edx)
	branch eax_1202 != 0<32> l0074938C
l00749121:
l007490EC:
	branch fn00748810(dwArg04, dwArg04, out edx) == 0<32> l00748F4B
l00749100:
	ebx_1152 = ebx_1152 + 1<32>
l0074909F:
	word32 ebp_1230 = Mem27[dwArg08 + 4<32>:word32]
	word32 ebx_1231 = 0<32>
l007490A7:
	word32 eax_1240
	branch ebp_1230 != 0<32> l007490AF
l007490AF:
	eax_1240 = Mem1239[ebp_1230:word32]
l007490AB:
	eax_1240 = 0<32>
l007490B2:
	branch ebx_1231 >= eax_1240 l0074938C
l007490BA:
	branch fn00748810(dwArg04, dwArg04, out edx) == 0<32> l00748F4B
l007490CE:
	ebx_1231 = ebx_1231 + 1<32>
l00749048:
	word32 eax_1277 = Mem27[dwArg08 + 4<32>:word32]
	branch eax_1277 == 0<32> l0074938C
l00749053:
	branch fn00748810(dwArg04, eax_1277, out edx) == 0<32> l00748F4B
l00749065:
	word32 eax_1295 = Mem1284[dwArg04 + 4<32>:word32]
	Mem1297[eax_1295 + 0x24<32>:word32] = Mem1284[eax_1295 + 0x24<32>:word32] | 0x40<32>
	edx = Mem1297[dwArg04 + 4<32>:word32]
	branch (Mem1297[edx + 0x24<32>:byte] & 8<8>) == 0<8> l0074938C
l00749079:
	word32 ecx_2907
	word32 edx_2908
	fn006E0F80(Mem1297[0x00A178F4<p32>:word32], dwArg04, out ecx_2907, out edx_2908)
	fn006E1DE0(dwArg04, out edx)
	eax_1202 = 0<32>
l00748F8B:
	branch fn00748190(2<32>, dwArg04, out edx) == 0<32> l00748F4B
l00748FA0:
	word32 eax_1344 = Mem1332[dwArg08 + 8<32>:word32]
	word32 ebx_1346 = 0<32>
l00748FB0:
	word32 eax_1351 = eax_1344
	branch eax_1344 == 0<32> l00748FB6
l00748FB4:
	eax_1351 = Mem1355[eax_1344:word32]
l00748FB6:
	branch ebx_1346 >= eax_1351 l00748FD6
l00748FD6:
	branch fn00748090(Mem1355[dwArg08 + 4<32>:word32], dwArg04, out edx) == 0<32> l00748F4B
l00748FF0:
	word32 edx_1392 = Mem1374[dwArg04 + 0x1C<32>:word32]
	Mem1393[dwArg04 + 0x1C<32>:word32] = Mem1374[dwArg08 + 4<32>:word32]
	word32 ebx_1394 = Mem1393[dwArg08 + 0xC<32>:word32]
	word32 ebp_1396 = 0<32>
	word32 edi_1399 = ebx_1394 + 4<32>
l00749005:
	word32 eax_1405
	branch ebx_1394 != 0<32> l0074900D
l0074900D:
	eax_1405 = Mem1404[ebx_1394:word32]
l00749009:
	eax_1405 = 0<32>
l0074900F:
	branch ebp_1396 >= eax_1405 l0074902F
l0074902F:
	Mem1420[dwArg04 + 0x1C<32>:word32] = edx_1392
l00749013:
	word32 edx_1434
	branch fn00748E50(edx_1434, ebx_1394, ebp_1396, dwArg04, edi_1399, es, ds, dwArg04, dwArg04, out edx_1434) == 0<32> l00748F46
l00749027:
	ebp_1396 = ebp_1396 + 1<32>
	edi_1399 = edi_1399 + 4<32>
l00748FBA:
	branch fn00748810(dwArg04, dwArg04, out edx) == 0<32> l00748F4B
l00748FCA:
	ebx_1346 = ebx_1346 + 1<32>
l00748E94:
	branch fn00748190(2<32>, dwArg04, out edx) == 0<32> l00748F4B
l00748EAD:
	word32 ebx_1478 = Mem1465[Mem1465[dwArg08 + 8<32>:word32] + 0xC<32>:word32]
	branch ebx_1478 == 0<32> l00748EEA
l00748EB7:
	word32 esi_1482 = 0<32>
l00748EC0:
	word32 eax_1492
	branch ebx_1478 != 0<32> l00748EC8
l00748EC8:
	eax_1492 = Mem1491[ebx_1478:word32]
l00748EC4:
	eax_1492 = 0<32>
l00748ECA:
	branch esi_1482 >= eax_1492 l00748EEA
l00748EEA:
	word32 esi_1506 = Mem1504[dwArg08 + 0x10<32>:word32]
	branch esi_1506 == 0<32> l00748F20
l00748EF1:
	word32 ebx_1510 = 0<32>
l00748EF6:
	word32 eax_1519
	branch esi_1506 != 0<32> l00748EFE
l00748EFE:
	eax_1519 = Mem1518[esi_1506:word32]
l00748EFA:
	eax_1519 = 0<32>
l00748F00:
	branch ebx_1510 >= eax_1519 l00748F20
l00748F20:
	branch fn00748090(Mem1542[dwArg08 + 4<32>:word32], dwArg04, out edx) == 0<32> l00748F4B
l00748F3A:
	branch fn00748790(Mem1547[dwArg08 + 8<32>:word32], dwArg04) != 0<32> l00748F52
l00748F52:
	word32 ebp_1583 = Mem1547[dwArg08 + 0xC<32>:word32]
	word32 edi_1587 = ebp_1583 + 4<32>
	word32 ebx_1588 = 0<32>
l00748F60:
	word32 eax_1594
	branch ebp_1583 != 0<32> l00748F68
l00748F68:
	eax_1594 = Mem1593[ebp_1583:word32]
l00748F64:
	eax_1594 = 0<32>
l00748F6B:
	branch ebx_1588 >= eax_1594 l00749036
l00749036:
	eax_1202 = fn00748030(dwArg04, out edx)
	branch eax_1202 != 0<32> l0074938C
l0074938C:
	eax_1202 = 1<32>
l00749043:
l00748F73:
	word32 edx_1637
	branch fn00748E50(edx_1637, ebx_1588, ebp_1583, dwArg04, edi_1587, es, ds, dwArg04, dwArg04, out edx_1637) == 0<32> l00748F46
l00748F83:
	ebx_1588 = ebx_1588 + 1<32>
	edi_1587 = edi_1587 + 4<32>
l00748F46:
	fn00748030(dwArg04, out edx)
l00748F04:
	branch fn00748810(dwArg04, dwArg04, out edx) == 0<32> l00748F4B
l00748F18:
	ebx_1510 = ebx_1510 + 1<32>
l00748ECE:
	branch fn00748810(dwArg04, dwArg04, out edx) == 0<32> l00748F4B
l00748F4B:
	eax_1202 = 0<32>
l00749391:
	word32 ecx_2904
	word32 eax_2133 = fn00694B8E(eax_1202, eax_7 ^ fp - 280<i32>, edx, ebx, ebp, esi, edi, es, ds, ebx, out ecx_2904)
	edxOut = edx
	return eax_2133
fn00748E50_exit:
l00748EE2:
	esi_1482 = esi_1482 + 1<32>


word32 fn007497A0(word32 dwArg08, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00748E50
// MayUse:  Stack +0008:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ebp ebx edi esi Top
// Preserved: esp
fn007497A0_entry:
l007497A0:
	word32 eax_12 = Mem10[dwArg08:word32]
	branch eax_12 == 0<32> l007497C3
l007497B0:
	word32 edx_202
	branch fn00748810(dwArg04, eax_12, out edx_202) != 0<32> l007497C3
l007497C3:
	branch Mem29[dwArg08 + 4<32>:word32] == 0<32> l007497D8
l007497CA:
	word32 edx_203
	branch fn00748810(dwArg04, dwArg04, out edx_203) == 0<32> l007497BE
l007497D8:
	word32 ebx_56 = Mem54[dwArg08 + 8<32>:word32]
	word32 edi_123 = 0<32>
	word32 esi_124 = ebx_56 + 4<32>
l007497E2:
	word32 eax_71
	branch ebx_56 != 0<32> l007497EA
l007497EA:
	eax_71 = Mem70[ebx_56:word32]
l007497E6:
	eax_71 = 0<32>
l007497EC:
	branch edi_123 >= eax_71 l0074980F
l0074980F:
	edxOut = <invalid>
	return 1<32>
l007497F0:
	word32 edx_207
	branch fn00748E50(edx, ebx_56, dwArg04, esi_124, edi_123, es, ds, dwArg04, dwArg04, out edx_207) == 0<32> l00749808
l00749808:
	edxOut = <invalid>
	return 0<32>
l00749800:
	edi_123 = edi_123 + 1<32>
	esi_124 = esi_124 + 4<32>
l007497BE:
	edxOut = <invalid>
	return 0<32>
fn007497A0_exit:


word32 fn00749820(word32 dwArg04, word32 dwArg08, word32 dwArg0C)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0072E790
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn00749820_entry:
l00749820:
	word32 eax_8 = fn00748670()
	branch eax_8 != 0<32> l0074982E
l0074982E:
	Mem19[eax_8:word32] = dwArg08
	word32 eax_20 = Mem19[0x00A6E150<p32>:word32]
	Mem23[eax_8 + 0x24<32>:word32] = dwArg0C
	branch eax_20 != 0<32> l00749856
l00749844:
	word32 edx_414
	word32 ecx_413
	Mem35[0x00A6E150<p32>:word32] = fn006F1A70(out ecx_413, out edx_414)
l00749856:
	word32 edx_412
	branch fn00748090(eax, eax_8, out edx_412) != 0<32> l0074987A
l0074987A:
	word32 eax_60 = Mem47[eax_8 + 4<32>:word32]
	Mem61[eax_8 + 8<32>:word32] = eax_60
	Mem62[eax_60 + 0x20<32>:word32] = 8<32>
	word32 eax_63 = Mem62[dwArg04:word32]
	branch eax_63 >u 4<32> l007498DA
l00749893:
	switch (eax_63 + 0xFFFFFFFF<32>) { l0074989A l007498F7 l007498C9 l00749927 }
l00749927:
	word32 edx_418
	word32 ecx_417
	fn006E0F80(Mem73[0x00A175E0<p32>:word32], 0x8DDD34<32>, out ecx_417, out edx_418)
l007498C9:
	word32 edx_416
	branch fn00748810(eax_8, Mem73[dwArg04 + 4<32>:word32], out edx_416) == 0<32> l0074993B
l007498F7:
	word32 edi_103 = Mem73[dwArg04 + 4<32>:word32]
	word32 ebx_104 = 0<32>
	word32 ebp_107 = edi_103 + 4<32>
l00749900:
	word32 eax_113
	branch edi_103 != 0<32> l00749908
l00749908:
	eax_113 = Mem112[edi_103:word32]
l00749904:
	eax_113 = 0<32>
l0074990A:
	branch ebx_104 >= eax_113 l007498DA
l0074990E:
	word32 edx_425
	branch fn00748E50(edx, ebx_104, ebp_107, eax_8, edi_103, es, ds, eax_8, Mem112[ebp_107:word32], out edx_425) == 0<32> l0074993B
l0074991F:
	ebx_104 = ebx_104 + 1<32>
	ebp_107 = ebp_107 + 4<32>
l0074989A:
	word32 edi_150 = Mem73[dwArg04 + 4<32>:word32]
	word32 ebx_151 = 0<32>
	word32 ebp_154 = edi_150 + 4<32>
l007498A2:
	word32 eax_160
	branch edi_150 != 0<32> l007498AA
l007498AA:
	eax_160 = Mem159[edi_150:word32]
l007498A6:
	eax_160 = 0<32>
l007498AC:
	branch ebx_151 >= eax_160 l007498DA
l007498DA:
	word32 edx_415
	branch fn00748030(eax_8, out edx_415) == 0<32> l00749941
l007498E4:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	branch fn00747F60(stackArg4) == 0<32> l00749940
l007498F0:
	return eax_8
l007498B0:
	word32 edx_215 = Mem159[ebp_154:word32]
	word32 edx_423
	branch fn00748E50(edx_215, ebx_151, ebp_154, eax_8, edi_150, es, ds, eax_8, edx_215, out edx_423) == 0<32> l0074993B
l0074993B:
	word32 edx_420
	fn00748030(eax_8, out edx_420)
l00749940:
l00749941:
	fn00747530(eax_8)
	return 0<32>
l007498C1:
	ebx_151 = ebx_151 + 1<32>
	ebp_154 = ebp_154 + 4<32>
l0074986C:
	fn00747530(eax_8)
	return 0<32>
l0074982C:
	return eax_8
fn00749820_exit:


word32 fn0074E0B0(word32 eax, ptr32 & ecxOut, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0074EB10
// MayUse:  eax:[0..31]
// LiveOut: eax ecx edx
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn0074E0B0_entry:
l0074E0B0:
	word32 dwLoc04_148 = ecx
	eax_16 = eax
l0074E0B8:
	word32 eax_16
	eax_16 = eax_222 + 1<32>
	eax_222 = eax_16
	branch Mem12[eax_222:byte] != 0<8> l0074E0B8
l0074E0C1:
	word32 edx_126
	word32 eax_24 = eax_16 - (eax + 1<32>)
	word32 edi_25 = eax_24
	branch eax_24 <=u 0x7FFFFFFF<32> l0074E0E6
l0074E0E6:
	word32 ecx_220
	word32 eax_40 = fn006EC9B0(0<32>, eax_24, out ecx_220, out edx_126)
	word32 ecx_110 = eax_40
	dwLoc04_148 = eax_40
	branch eax_40 == 0<32> l0074E0E0
l0074E0FB:
	word32 esi_56 = eax_40 + 0x14<32>
	branch eax_24 <=u 0<32> l0074E133
l0074E103:
	word32 ebx_64 = eax - (eax_40 + 0x14<32>)
l0074E110:
	byte al_91
	byte al_70 = Mem69[ebx_64 + esi_56:byte]
	branch al_70 != 0x20<8> l0074E11B
l0074E11B:
	edx_126 = <invalid>
	al_91 = SLICE(tolower(CONVERT(al_70, byte, word32)), byte, 0) (alias)
	ecx_110 = eax_40
l0074E117:
	al_91 = 0x2D<8>
l0074E128:
	Mem95[esi_56:byte] = al_91
	esi_56 = esi_56 + 1<32>
	edi_25 = edi_25 - 1<32>
	branch edi_25 != 0<32> l0074E110
l0074E132:
l0074E133:
	ecxOut = eax_40
	edxOut = edx_126
	return ecx_110
l0074E0CD:
	word32 ecx_221
	fn006E0F80(Mem12[0x00A18598<p32>:word32], 0x8DE828<32>, out ecx_221, out edx_126)
l0074E0E0:
	ecxOut = dwLoc04_148
	edxOut = edx_126
	return 0<32>
fn0074E0B0_exit:


word32 fn0074E140(word32 ebx, word32 edi, ptr32 & ecxOut, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0074ED80
//      fn0074EE90
// MayUse:  ebx:[0..31] edi:[0..31]
// LiveOut: eax ecx edx
// Trashed: SCZO eax ecx edx esi Top
// Preserved: esp
fn0074E140_entry:
l0074E140:
	word32 ecx_20
	word32 edx_21
	word32 eax_19 = fn006DFD20(CONVERT(CONVERT(ebx != 0<32>, bool, int8), int8, uint32) + 1<32>, out ecx_20, out edx_21)
	branch eax_19 == 0<32> l0074E182
l0074E15A:
	Mem31[edi:word32] = Mem17[edi:word32] + 1<32>
	Mem34[eax_19 + 0xC<32>:word32] = edi
	branch ebx == 0<32> l0074E189
l0074E164:
	word32 eax_39 = fn006ECAC0(ebx, out ecx_20, out edx_21)
	branch eax_39 != 0<32> l0074E186
l0074E186:
	Mem48[eax_19 + 0x10<32>:word32] = eax_39
l0074E189:
	ecxOut = ecx_20
	edxOut = edx_21
	return eax_19
l0074E171:
	word32 v13_55 = Mem37[eax_19:word32] + 0xFFFFFFFF<32>
	Mem56[eax_19:word32] = v13_55
	branch v13_55 != 0<32> l0074E182
l0074E176:
	word32 ecx_59 = Mem56[eax_19 + 4<32>:word32]
	call Mem56[ecx_59 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_59,Stack +0004:eax_19
		defs: ecx:ecx_65,edx:edx_66
l0074E182:
	ecxOut = ecx_20
	edxOut = edx_21
	return 0<32>
fn0074E140_exit:


word32 fn0074E190()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0074E980
// MayUse: 
// LiveOut: eax
// Trashed: SCZO eax ecx edi edx esi Top
// Preserved: esp
fn0074E190_entry:
l0074E190:
	word32 esi_9 = Mem8[Mem0[0x00A6D67C<p32>:word32] + 4<32>:word32]
	branch Mem8[esi_9 + 0x18<32>:word32] != 0<32> l0074E1AD
l0074E19F:
	word32 edx_128
	word32 ecx_127
	branch fn0074E980(out ecx_127, out edx_128) == 0<32> l0074E1AD
l0074E1AD:
	branch fn006DF870(dwArg08) != 0<32> l0074E1D9
l0074E1D9:
	word32 ecx_129
	word32 edx_130
	word32 esi_131
	return fn006FD8F0(Mem28[esi_9 + 0x20<32>:word32], dwArg04, dwArg08, out ecx_129, out edx_130, out esi_131)
l0074E1BF:
	word32 ecx_132
	word32 edx_133
	fn006E0F80(Mem28[0x00A16B7C<p32>:word32], 0x8DE83C<32>, out ecx_132, out edx_133)
	return 0xFFFFFFFF<32>
l0074E1A8:
	return 0xFFFFFFFF<32>
fn0074E190_exit:


word32 fn0074E280(word32 dwArg04, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0071A060
// MayUse:  Stack +0004:[0..31]
// LiveOut: ecx edx
// Trashed: SCZO eax ecx edx Top
// Preserved: esi esp
fn0074E280_entry:
l0074E280:
	word32 eax_8 = Mem6[dwArg04 + 4<32>:word32]
	branch eax_8 == 0xA1EB98<32> l0074E2BB
l0074E28F:
	word32 ecx_102
	word32 edx_103
	branch fn006D5670(eax_8, Mem6[0x00A169F0<p32>:word32], out ecx_102, out edx_103) != 0<32> l0074E2BB
l0074E2BB:
	word32 eax_29 = Mem28[dwArg04 + 4<32>:word32]
	branch eax_29 != 0xA1EB98<32> l0074E2C8
l0074E2C5:
	eax_29 = Mem28[dwArg04 + 8<32>:word32]
l0074E2C8:
	word32 ecx_42
	word32 edx_43
	fn006E0E90(eax_29, dwArg04, out ecx_42, out edx_43)
	edxOut = edx_43
	return ecx_42
l0074E2A3:
	word32 ecx_61
	word32 edx_62
	fn006E0F80(Mem15[0x00A16B7C<p32>:word32], 0x8DE88C<32>, out ecx_61, out edx_62)
	edxOut = edx_62
	return ecx_61
fn0074E280_exit:


word32 fn0074E980(ptr32 & ecxOut, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0074E190
//      fn0074EB10
//      fn0074EFB0
// MayUse: 
// LiveOut: eax ecx edx
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn0074E980_entry:
l0074E980:
	word32 ebp_9 = Mem8[Mem0[0x00A6D67C<p32>:word32] + 4<32>:word32]
	branch Mem8[ebp_9 + 0x18<32>:word32] != 0<32> l0074EA8F
l0074E993:
	word32 edx_325
	Mem22[ebp_9 + 0x18<32>:word32] = fn006F2650(0<32>, out edx_325)
	word32 ecx_326
	word32 edx_327
	Mem29[ebp_9 + 0x1C<32>:word32] = fn006FDCC0(out ecx_326, out edx_327)
	word32 edx_329
	word32 ecx_328
	word32 eax_31 = fn006FDCC0(out ecx_328, out edx_329)
	Mem38[ebp_9 + 0x20<32>:word32] = eax_31
	word32 esp_149 = fp - 4<32>
	branch eax_31 == 0<32> l0074EA25
l0074E9B4:
	word32 edi_138 = 0<32>
	word32 esp_141 = fp - 0x10<32>
l0074E9C0:
	word32 esp_54 = esp_141 - 4<i32>
	Mem55[esp_54:word32] = 0<32>
	Mem59[esp_54 - 4<i32>:word32] = 0<32>
	Mem61[esp_54 - 8<i32>:word32] = edi_138 + 0xA2E9B4<32>
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 stackArg8 = <invalid>
	word32 stackArg12 = <invalid>
	word32 eax_67 = fn006F94A0(stackArg4, stackArg8, stackArg12)
	branch eax_67 != 0<32> l0074E9E6
l0074E9D9:
	Mem78[esp_54:word32] = 0x8DE8EC<32>
	fn006E86F0(Mem78[esp_54:word32])
l0074E9E6:
	word32 edx_88 = Mem87[edi_138 + 0xA2E9B0<32>:word32]
	Mem92[esp_54:word32] = eax_67
	Mem94[esp_54 - 4<32>:word32] = edx_88
	word32 eax_99 = fn0074E190()
	word32 v14_105 = Mem94[eax_67:word32] + 0xFFFFFFFF<32>
	Mem106[eax_67:word32] = v14_105
	word32 esp_104 = esp_54 + 4<32>
	branch v14_105 != 0<32> l0074EA09
l0074E9FD:
	word32 eax_110 = Mem106[eax_67 + 4<32>:word32]
	word32 ecx_111 = Mem106[eax_110 + 0x18<32>:word32]
	Mem113[esp_54:word32] = eax_67
	word32 esp_114
	word32 ecx_116
	word32 edx_117
	call ecx_111 (retsize: 4;)
		uses: eax:eax_110,ecx:ecx_116,edx:edx_117
		defs: ecx:ecx_116,edx:edx_117,esp:esp_114
	esp_104 = esp_114 + 4<32>
l0074EA09:
	branch eax_99 == 0<32> l0074EA1A
l0074EA0D:
	word32 esp_127 = esp_104 - 4<i32>
	Mem128[esp_127:word32] = 0x8DE8EC<32>
	fn006E86F0(Mem128[esp_127:word32])
l0074EA1A:
	esp_141 = esp_104
	edi_138 = edi_138 + 0x14<32>
	branch edi_138 <u 0x64<32> l0074E9C0
l0074EA22:
	esp_149 = esp_104 + 12<i32>
l0074EA25:
	branch Mem153[ebp_9 + 0x18<32>:word32] == 0<32> l0074EA37
l0074EA2B:
	branch Mem153[ebp_9 + 0x1C<32>:word32] == 0<32> l0074EA37
l0074EA31:
	branch Mem153[ebp_9 + 0x20<32>:word32] != 0<32> l0074EA44
l0074EA37:
	word32 esp_162 = esp_149 - 4<i32>
	Mem163[esp_162:word32] = 0x8DE8CC<32>
	fn006E86F0(Mem163[esp_162:word32])
l0074EA44:
	word32 esp_172 = esp_149 - 4<i32>
	Mem173[esp_172:word32] = 0<32>
	Mem175[esp_172 - 4<i32>:word32] = 0<32>
	Mem177[esp_172 - 8<i32>:word32] = 0<32>
	Mem179[esp_172 - 12<i32>:word32] = 0<32>
	Mem181[esp_172 - 16<i32>:word32] = 0x8DE8C0<32>
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 stackArg8 = <invalid>
	word32 stackArg16 = <invalid>
	word32 stackArg20 = <invalid>
	word32 eax_199 = fn006F9090(stackArg4, stackArg8, stackArg16, stackArg20, out ecx, out edx)
	branch eax_199 != 0<32> l0074EA7E
l0074EA7E:
	word32 v15_208 = Mem181[eax_199:word32] + 0xFFFFFFFF<32>
	Mem209[eax_199:word32] = v15_208
	branch v15_208 != 0<32> l0074EA8F
l0074EA83:
	word32 ecx_212 = Mem209[eax_199 + 4<32>:word32]
	word32 edx_213 = Mem209[ecx_212 + 0x18<32>:word32]
	Mem215[esp_172:word32] = eax_199
	call edx_213 (retsize: 4;)
		uses: ecx:ecx_212,edx:edx_219
		defs: ecx:ecx_218,edx:edx_219
l0074EA8F:
	ecxOut = ecx
	edxOut = edx
	return 0<32>
l0074EA5D:
	Mem233[esp_172:word32] = Mem181[0x00A16F8C<p32>:word32]
	word32 ecx_236
	word32 edx_237
	branch fn006E1110(out ecx_236, out edx_237) == 0<32> l0074EA79
l0074EA79:
	ecxOut = ecx_236
	edxOut = edx_237
	return 0xFFFFFFFF<32>
l0074EA70:
	word32 ecx_250
	word32 edx_251
	fn006E1160(out ecx_250, out edx_251)
	ecxOut = ecx_250
	edxOut = edx_251
	return 0<32>
fn0074E980_exit:


word32 fn0074EB10(word32 dwArg04, ptr32 & ecxOut, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0074ED80
//      fn0074EE90
// MayUse:  Stack +0004:[0..31]
// LiveOut: eax ecx edx
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn0074EB10_entry:
l0074EB10:
	branch dwArg04 != 0<32> l0074EB2E
l0074EB2E:
	word32 ecx_127
	word32 edx_128
	word32 ebx_22 = Mem19[Mem19[0x00A6D67C<p32>:word32] + 4<32>:word32]
	branch Mem19[ebx_22 + 0x18<32>:word32] != 0<32> l0074EB4D
l0074EB40:
	branch fn0074E980(out ecx_127, out edx_128) != 0<32> l0074EC79
l0074EB4D:
	word32 eax_43 = fn0074E0B0(dwArg04, out ecx_127, out edx_128)
	branch eax_43 == 0<32> l0074EC79
l0074EB60:
	word32 edx_538
	fn006EC890(fp - 8<32>, out edx_538)
	word32 edx_263
	word32 ecx_262
	word32 eax_68 = fn006FBCC0(Mem54[ebx_22 + 0x1C<32>:word32], dwArg04, out ecx_262, out edx_263)
	word32 esi_147 = eax_68
	branch eax_68 == 0<32> l0074EBAE
l0074EBAE:
	word32 eax_81 = fn006DFD20(1<32>, out ecx_127, out edx_128)
	branch eax_81 == 0<32> l0074EC79
l0074EBC2:
	Mem92[eax_81 + 0xC<32>:word32] = eax_43
	word32 eax_97 = fn006F2750(Mem92[ebx_22 + 0x18<32>:word32], out ecx_127, out edx_128)
	word32 esp_103 = fp - 0x18<32>
	branch eax_97 < 0<32> l0074EC68
l0074EBDF:
	branch eax_97 != 0<32> l0074EBF7
l0074EBF7:
	word32 ebx_108 = 0<32>
	branch eax_97 <= 0<32> l0074EC47
l0074EBFD:
l0074EC00:
	word32 ecx_115 = Mem113[Mem113[esp_103 + 0x14<32>:word32] + 0x18<32>:word32]
	word32 esp_116 = esp_103 - 4<i32>
	Mem118[esp_116:word32] = ebx_108
	Mem120[esp_116 - 4<i32>:word32] = ecx_115
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 eax_126 = fn006F2790(stackArg4, dwArg04, out ecx_127, out edx_128)
	esp_103 = esp_116 + 4<32>
	branch eax_126 == 0<32> l0074EC68
l0074EC15:
	Mem136[esp_116:word32] = 0<32>
	Mem138[esp_116 - 4<i32>:word32] = eax_81
	Mem140[esp_116 - 8<i32>:word32] = eax_126
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 stackArg12 = <invalid>
	word32 esi_541
	word32 edi_542
	word32 eax_142 = fn00707680(stackArg4, dwArg04, stackArg12, out ecx_127, out edx_128, out esi_541, out edi_542)
	esi_147 = eax_142
	esp_103 = esp_116 + 4<32>
	branch eax_142 == 0<32> l0074EC68
l0074EC27:
	branch eax_142 != 0xA163B8<32> l0074EC83
l0074EC83:
	word32 eax_154 = Mem140[eax_142 + 4<32>:word32]
	branch eax_154 == 0xA16588<32> l0074EC9F
l0074EC8D:
	Mem158[esp_116:word32] = 0xA16588<32>
	Mem160[esp_116 - 4<32>:word32] = eax_154
	word32 ecx_548
	word32 edx_549
	branch fn006D5670(Mem160[esp_116 - 4<32>:word32], Mem160[esp_116:word32], out ecx_548, out edx_549) == 0<32> l0074ECA5
l0074EC9F:
	esp_103 = esp_116 + 4<32>
	branch Mem173[eax_142 + 8<32>:word32] == 4<32> l0074EC47
l0074ECA5:
	word32 ecx_177 = Mem176[0x00A16B7C<p32>:word32]
	Mem181[esp_116:word32] = 0x8DE930<32>
	Mem183[esp_116 - 4<32>:word32] = ecx_177
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	fn006E0F80(stackArg4, dwArg04, out ecx_127, out edx_128)
	word32 v19_200 = Mem183[eax_142:word32] + 0xFFFFFFFF<32>
	Mem201[eax_142:word32] = v19_200
	esp_103 = esp_116 + 4<32>
	branch v19_200 != 0<32> l0074EC68
l0074ECBE:
	word32 edx_204 = Mem201[eax_142 + 4<32>:word32]
	word32 eax_205 = Mem201[edx_204 + 0x18<32>:word32]
	Mem207[esp_116:word32] = eax_142
	word32 esp_208
	call eax_205 (retsize: 4;)
		uses: edx:edx_204,Stack +0008:dwArg04
		defs: ecx:ecx_210,edx:edx_211,esp:esp_208
	esp_103 = esp_208 + 4<32>
l0074EC2F:
	word32 v18_216 = Mem140[eax_142:word32] + 0xFFFFFFFF<32>
	Mem217[eax_142:word32] = v18_216
	branch v18_216 != 0<32> l0074EC40
l0074EC34:
	word32 edx_220 = Mem217[eax_142 + 4<32>:word32]
	word32 eax_221 = Mem217[edx_220 + 0x18<32>:word32]
	Mem223[esp_116:word32] = eax_142
	word32 esp_224
	call eax_221 (retsize: 4;)
		uses: edx:edx_220,Stack +0008:dwArg04
		defs: esp:esp_224
	esp_103 = esp_224 + 4<32>
l0074EC40:
	ebx_108 = ebx_108 + 1<32>
	branch ebx_108 < eax_97 l0074EC00
l0074EC47:
	branch ebx_108 != eax_97 l0074ECCC
l0074ECCC:
	word32 edx_245 = Mem243[esp_103 + 0x10<32>:word32]
	word32 ecx_247 = Mem243[Mem243[esp_103 + 0x14<32>:word32] + 0x1C<32>:word32]
	word32 esp_248 = esp_103 - 4<i32>
	Mem251[esp_248:word32] = esi_147
	Mem253[esp_248 - 4<i32>:word32] = edx_245
	Mem255[esp_248 - 8<i32>:word32] = ecx_247
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 stackArg12 = <invalid>
	word32 ebx_545
	word32 edi_546
	fn006FBD90(stackArg4, dwArg04, stackArg12, out ecx_262, out edx_263, out ebx_545, out edi_546)
	word32 v20_267 = Mem255[eax_81:word32] + 0xFFFFFFFF<32>
	Mem268[eax_81:word32] = v20_267
	branch v20_267 != 0<32> l0074ECF3
l0074ECE7:
	word32 edx_271 = Mem268[eax_81 + 4<32>:word32]
	word32 eax_272 = Mem268[edx_271 + 0x18<32>:word32]
	Mem274[esp_248:word32] = eax_81
	call eax_272 (retsize: 4;)
		uses: edx:edx_271,Stack +0008:dwArg04
		defs: ecx:ecx_277,edx:edx_278
l0074EC4F:
	word32 edx_284 = Mem243[0x00A17CA0<p32>:word32]
	word32 esp_285 = esp_103 - 4<i32>
	Mem286[esp_285:word32] = Mem243[esp_103 + 0x1C<32>:word32]
	Mem288[esp_285 - 4<i32>:word32] = 0x8DE95C<32>
	Mem290[esp_285 - 8<i32>:word32] = edx_284
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	fn006E15D0(stackArg4, dwArg04, out ecx_127, out edx_128)
	esp_103 = esp_285 + 4<32>
l0074EBE1:
	fn006E0F80(Mem95[0x00A17CA0<p32>:word32], dwArg04, out ecx_127, out edx_128)
	esp_103 = fp - 0x18<32>
l0074EC68:
	word32 v17_314 = Mem313[eax_81:word32] + 0xFFFFFFFF<32>
	Mem315[eax_81:word32] = v17_314
	branch v17_314 != 0<32> l0074EC79
l0074EC6D:
	word32 eax_318 = Mem315[eax_81 + 4<32>:word32]
	word32 ecx_319 = Mem315[eax_318 + 0x18<32>:word32]
	Mem322[esp_103 - 4<i32>:word32] = eax_81
	call ecx_319 (retsize: 4;)
		uses: eax:eax_318,Stack +0008:dwArg04
		defs: ecx:ecx_329,edx:edx_330
l0074EC79:
	ecxOut = ecx_127
	edxOut = edx_128
	return 0<32>
l0074EB81:
	Mem349[eax_68:word32] = Mem66[eax_68:word32] + 1<32>
	Mem352[eax_43:word32] = Mem349[eax_43:word32] + 0xFFFFFFFF<32>
	branch Mem352[eax_43:word32] != 0<32> l0074ECF3
l0074ECF3:
	ecxOut = ecx_262
	edxOut = edx_263
	return esi_147
l0074EB98:
	word32 ecx_370 = Mem352[eax_43 + 4<32>:word32]
	word32 ecx_376
	word32 edx_377
	call Mem352[ecx_370 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_370,Stack +0004:eax_43,Stack +0008:dwArg04,Stack +0024:dwArg04
		defs: ecx:ecx_376,edx:edx_377
	ecxOut = ecx_376
	edxOut = edx_377
	return eax_68
l0074EB1F:
	word32 edx_395
	ecxOut = fn006E11D0(out edx_395)
	edxOut = edx_395
	return 0<32>
fn0074EB10_exit:


word32 fn0074ED80(word32 dwArg08, ptr32 & ecxOut, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0071FB20
// MayUse:  Stack +0008:[0..31]
// LiveOut: eax ecx edx
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn0074ED80_entry:
l0074ED80:
	word32 ecx_123
	word32 edx_124
	word32 eax_21 = fn0074EB10(dwArg08, out ecx_123, out edx_124)
	word32 esp_26 = fp - 0x10<32>
	branch eax_21 == 0<32> l0074EE3F
l0074ED99:
	word32 v12_30 = Mem19[eax_21:word32] + 0xFFFFFFFF<32>
	Mem31[eax_21:word32] = v12_30
	word32 ebp_33 = Mem31[eax_21 + 0xC<32>:word32]
	branch v12_30 != 0<32> l0074EDAD
l0074EDA1:
	word32 ecx_35 = Mem31[eax_21 + 4<32>:word32]
	word32 esp_39
	call Mem31[ecx_35 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_35,Stack +0004:eax_21,Stack +000C:dwArg08,Stack +0020:dwArg08
		defs: esp:esp_39
	esp_26 = esp_39 + 4<32>
l0074EDAD:
	word32 ebx_49 = Mem48[esp_26 + 0x1C<32>:word32]
	word32 edi_50 = Mem48[esp_26 + 0x14<32>:word32]
	Mem53[ebp_33:word32] = Mem48[ebp_33:word32] + 1<32>
	word32 eax_58 = fn0074E140(ebx_49, edi_50, out ecx_123, out edx_124)
	word32 esp_206 = esp_26
	branch eax_58 == 0<32> l0074EE2D
l0074EDC4:
	Mem68[esp_26 - 4<i32>:word32] = 0<32>
	Mem70[esp_26 - 8<i32>:word32] = eax_58
	Mem72[esp_26 - 12<i32>:word32] = ebp_33
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 stackArg8 = <invalid>
	word32 esp_73 = esp_26 - 12<i32>
	word32 esi_394
	word32 edi_395
	word32 eax_74 = fn00707680(stackArg4, stackArg8, dwArg08, out ecx_123, out edx_124, out esi_394, out edi_395)
	esp_206 = esp_73 + 0xC<32>
	branch eax_74 == 0<32> l0074EE1C
l0074EDD6:
	word32 eax_84 = Mem72[eax_74 + 4<32>:word32]
	branch eax_84 == 0xA16588<32> l0074EDF2
l0074EDE0:
	Mem88[esp_73 + 8<32>:word32] = 0xA16588<32>
	Mem90[esp_73 + 4<32>:word32] = eax_84
	branch fn006D5670(Mem90[esp_73 + 4<32>:word32], Mem90[esp_73 + 8<32>:word32], out ecx_123, out edx_124) == 0<32> l0074EDF8
l0074EDF2:
	word32 esp_116 = esp_73 + 0xC<32>
	branch Mem103[eax_74 + 8<32>:word32] == 2<32> l0074EE46
l0074EE46:
	word32 ebx_106 = Mem103[eax_74 + 0xC<32>:word32]
	Mem108[ebx_106:word32] = Mem103[ebx_106:word32] + 1<32>
	word32 v19_110 = Mem108[eax_58:word32] + 0xFFFFFFFF<32>
	Mem111[eax_58:word32] = v19_110
	branch v19_110 != 0<32> l0074EE5D
l0074EE51:
	word32 ecx_114 = Mem111[eax_58 + 4<32>:word32]
	word32 edx_115 = Mem111[ecx_114 + 0x18<32>:word32]
	Mem118[esp_73 + 8<32>:word32] = eax_58
	word32 esp_121
	call edx_115 (retsize: 4;)
		uses: ecx:ecx_114,Stack +000C:dwArg08
		defs: ecx:ecx_123,edx:edx_124,esp:esp_121
	esp_116 = esp_121 + 4<32>
l0074EE5D:
	word32 v20_131 = Mem130[ebp_33:word32] + 0xFFFFFFFF<32>
	Mem132[ebp_33:word32] = v20_131
	branch v20_131 != 0<32> l0074EE6F
l0074EE63:
	word32 eax_135 = Mem132[ebp_33 + 4<32>:word32]
	word32 ecx_136 = Mem132[eax_135 + 0x18<32>:word32]
	Mem139[esp_116 - 4<i32>:word32] = ebp_33
	word32 esp_144
	call ecx_136 (retsize: 4;)
		uses: eax:eax_135,Stack +000C:dwArg08
		defs: ecx:ecx_146,edx:edx_147,esp:esp_144
	esp_116 = esp_144 + 4<32>
l0074EE6F:
	word32 v21_154 = Mem153[eax_74:word32] + 0xFFFFFFFF<32>
	Mem155[eax_74:word32] = v21_154
	branch v21_154 != 0<32> l0074EE80
l0074EE74:
	word32 edx_158 = Mem155[eax_74 + 4<32>:word32]
	word32 eax_159 = Mem155[edx_158 + 0x18<32>:word32]
	Mem162[esp_116 - 4<i32>:word32] = eax_74
	call eax_159 (retsize: 4;)
		uses: edx:edx_158,Stack +000C:dwArg08
		defs: ecx:ecx_169,edx:edx_170
l0074EE80:
	ecxOut = ecx_123
	edxOut = edx_124
	return ebx_106
l0074EDF8:
	word32 eax_188 = Mem187[0x00A16B7C<p32>:word32]
	Mem191[esp_73 + 8<32>:word32] = 0x8DE9B4<32>
	Mem193[esp_73 + 4<32>:word32] = eax_188
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 stackArg8 = <invalid>
	fn006E0F80(stackArg4, stackArg8, out ecx_123, out edx_124)
	word32 v16_207 = Mem193[eax_74:word32] + 0xFFFFFFFF<32>
	Mem208[eax_74:word32] = v16_207
	esp_206 = esp_73 + 0xC<32>
	branch v16_207 != 0<32> l0074EE1C
l0074EE10:
	word32 ecx_211 = Mem208[eax_74 + 4<32>:word32]
	word32 edx_212 = Mem208[ecx_211 + 0x18<32>:word32]
	Mem214[esp_73 + 8<32>:word32] = eax_74
	word32 esp_215
	call edx_212 (retsize: 4;)
		uses: ecx:ecx_211,Stack +000C:dwArg08
		defs: ecx:ecx_217,edx:edx_218,esp:esp_215
	esp_206 = esp_215 + 4<32>
l0074EE1C:
	word32 v22_225 = Mem224[eax_58:word32] + 0xFFFFFFFF<32>
	Mem226[eax_58:word32] = v22_225
	branch v22_225 != 0<32> l0074EE2D
l0074EE21:
	word32 eax_229 = Mem226[eax_58 + 4<32>:word32]
	word32 ecx_230 = Mem226[eax_229 + 0x18<32>:word32]
	Mem233[esp_206 - 4<i32>:word32] = eax_58
	word32 esp_238
	call ecx_230 (retsize: 4;)
		uses: eax:eax_229,Stack +000C:dwArg08
		defs: ecx:ecx_240,edx:edx_241,esp:esp_238
	esp_206 = esp_238 + 4<32>
l0074EE2D:
	word32 v17_248 = Mem247[ebp_33:word32] + 0xFFFFFFFF<32>
	Mem249[ebp_33:word32] = v17_248
	branch v17_248 != 0<32> l0074EE3F
l0074EE33:
	word32 edx_252 = Mem249[ebp_33 + 4<32>:word32]
	word32 eax_253 = Mem249[edx_252 + 0x18<32>:word32]
	Mem256[esp_206 - 4<i32>:word32] = ebp_33
	call eax_253 (retsize: 4;)
		uses: edx:edx_252,Stack +000C:dwArg08
		defs: ecx:ecx_263,edx:edx_264
l0074EE3F:
	ecxOut = ecx_123
	edxOut = edx_124
	return 0<32>
fn0074ED80_exit:


word32 fn0074EE90(word32 dwArg08, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0071FEB0
// MayUse:  Stack +0008:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn0074EE90_entry:
l0074EE90:
	word32 ebp_22 = 0<32>
	word32 ecx_432
	word32 edx_101
	word32 eax_27 = fn0074EB10(dwArg08, out ecx_432, out edx_101)
	word32 esp_31 = fp - 0x14<32>
	branch eax_27 == 0<32> l0074EF5D
l0074EEAC:
	word32 v13_35 = Mem21[eax_27:word32] + 0xFFFFFFFF<32>
	Mem36[eax_27:word32] = v13_35
	word32 esi_38 = Mem36[eax_27 + 0x10<32>:word32]
	branch v13_35 != 0<32> l0074EEC4
l0074EEB8:
	word32 ecx_41 = Mem39[eax_27 + 4<32>:word32]
	word32 esp_45
	call Mem39[ecx_41 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_41,Stack +0004:eax_27,Stack +000C:dwArg08,Stack +0024:dwArg08
		defs: esp:esp_45
	esp_31 = esp_45 + 4<32>
l0074EEC4:
	word32 ebx_55 = Mem54[esp_31 + 0x20<32>:word32]
	word32 edi_56 = Mem54[esp_31 + 0x18<32>:word32]
	Mem59[esi_38:word32] = Mem54[esi_38:word32] + 1<32>
	word32 ecx_100
	word32 eax_66 = fn0074E140(ebx_55, edi_56, out ecx_100, out edx_101)
	word32 esp_230 = esp_31
	word32 ebx_70 = Mem59[esp_31 + 0x10<32>:word32]
	branch eax_66 == 0<32> l0074EF36
l0074EEDE:
	Mem76[esp_31 - 4<i32>:word32] = 0<32>
	Mem78[esp_31 - 8<i32>:word32] = eax_66
	Mem80[esp_31 - 12<i32>:word32] = ebx_70
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 stackArg8 = <invalid>
	word32 esi_435
	word32 edi_436
	word32 eax_83 = fn00707680(stackArg4, stackArg8, dwArg08, out ecx_100, out edx_101, out esi_435, out edi_436)
	word32 esp_81 = esp_31 - 12<i32>
	ebp_22 = eax_83
	branch eax_83 == 0<32> l0074EF25
l0074EEF0:
	word32 eax_92 = Mem80[eax_83 + 4<32>:word32]
	branch eax_92 == 0xA16588<32> l0074EF0C
l0074EEFA:
	Mem96[esp_81 + 8<32>:word32] = 0xA16588<32>
	Mem98[esp_81 + 4<32>:word32] = eax_92
	branch fn006D5670(Mem98[esp_81 + 4<32>:word32], Mem98[esp_81 + 8<32>:word32], out ecx_100, out edx_101) == 0<32> l0074EF12
l0074EF0C:
	word32 esp_124 = esp_81 + 0xC<32>
	branch Mem111[eax_83 + 8<32>:word32] == 2<32> l0074EF65
l0074EF65:
	word32 edi_114 = Mem111[eax_83 + 0xC<32>:word32]
	Mem116[edi_114:word32] = Mem111[edi_114:word32] + 1<32>
	word32 v18_118 = Mem116[eax_66:word32] + 0xFFFFFFFF<32>
	Mem119[eax_66:word32] = v18_118
	branch v18_118 != 0<32> l0074EF7C
l0074EF70:
	word32 ecx_122 = Mem119[eax_66 + 4<32>:word32]
	word32 edx_123 = Mem119[ecx_122 + 0x18<32>:word32]
	Mem126[esp_81 + 8<32>:word32] = eax_66
	word32 esp_129
	call edx_123 (retsize: 4;)
		uses: ecx:ecx_122,Stack +000C:dwArg08
		defs: ecx:ecx_130,edx:edx_132,esp:esp_129
	esp_124 = esp_129 + 4<32>
l0074EF7C:
	word32 v20_139 = Mem138[ebx_70:word32] + 0xFFFFFFFF<32>
	Mem140[ebx_70:word32] = v20_139
	branch v20_139 != 0<32> l0074EF8D
l0074EF81:
	word32 eax_143 = Mem140[ebx_70 + 4<32>:word32]
	word32 ecx_144 = Mem140[eax_143 + 0x18<32>:word32]
	Mem147[esp_124 - 4<i32>:word32] = ebx_70
	word32 esp_152
	call ecx_144 (retsize: 4;)
		uses: eax:eax_143,ecx:ecx_144,Stack +000C:dwArg08
		defs: ecx:ecx_153,edx:edx_155,esp:esp_152
	esp_124 = esp_152 + 4<32>
l0074EF8D:
	word32 v21_162 = Mem161[eax_83:word32] + 0xFFFFFFFF<32>
	Mem163[eax_83:word32] = v21_162
	branch v21_162 != 0<32> l0074EF9F
l0074EF93:
	word32 edx_166 = Mem163[eax_83 + 4<32>:word32]
	word32 eax_167 = Mem163[edx_166 + 0x18<32>:word32]
	Mem170[esp_124 - 4<i32>:word32] = eax_83
	call eax_167 (retsize: 4;)
		uses: ecx:ecx_171,edx:edx_166,Stack +000C:dwArg08
		defs: edx:edx_181
l0074EF9F:
	edxOut = edx_101
	return edi_114
l0074EF12:
	word32 eax_201 = Mem200[0x00A16B7C<p32>:word32]
	Mem204[esp_81 + 8<32>:word32] = 0x8DE9E4<32>
	Mem206[esp_81 + 4<32>:word32] = eax_201
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 stackArg8 = <invalid>
	fn006E0F80(stackArg4, stackArg8, out ecx_100, out edx_101)
l0074EF25:
	word32 v22_224 = Mem223[eax_66:word32] + 0xFFFFFFFF<32>
	Mem225[eax_66:word32] = v22_224
	esp_230 = esp_31
	branch v22_224 != 0<32> l0074EF36
l0074EF2A:
	word32 ecx_228 = Mem225[eax_66 + 4<32>:word32]
	word32 edx_229 = Mem225[ecx_228 + 0x18<32>:word32]
	Mem232[esp_31 - 4<i32>:word32] = eax_66
	word32 esp_237
	call edx_229 (retsize: 4;)
		uses: ecx:ecx_228,Stack +000C:dwArg08
		defs: ecx:ecx_238,edx:edx_240,esp:esp_237
	esp_230 = esp_237 + 4<32>
l0074EF36:
	word32 v16_247 = Mem246[ebx_70:word32] + 0xFFFFFFFF<32>
	Mem248[ebx_70:word32] = v16_247
	branch v16_247 != 0<32> l0074EF47
l0074EF3B:
	word32 eax_251 = Mem248[ebx_70 + 4<32>:word32]
	word32 ecx_252 = Mem248[eax_251 + 0x18<32>:word32]
	Mem255[esp_230 - 4<i32>:word32] = ebx_70
	word32 esp_260
	call ecx_252 (retsize: 4;)
		uses: eax:eax_251,ecx:ecx_252,Stack +000C:dwArg08
		defs: ecx:ecx_261,edx:edx_263,esp:esp_260
	esp_230 = esp_260 + 4<32>
l0074EF47:
	branch ebp_22 == 0<32> l0074EF5D
l0074EF4B:
	word32 v19_273 = Mem272[ebp_22:word32] + 0xFFFFFFFF<32>
	Mem274[ebp_22:word32] = v19_273
	branch v19_273 != 0<32> l0074EF5D
l0074EF51:
	word32 edx_277 = Mem274[ebp_22 + 4<32>:word32]
	word32 eax_278 = Mem274[edx_277 + 0x18<32>:word32]
	Mem281[esp_230 - 4<i32>:word32] = ebp_22
	call eax_278 (retsize: 4;)
		uses: ecx:ecx_282,edx:edx_277,Stack +000C:dwArg08
		defs: edx:edx_292
l0074EF5D:
	edxOut = edx_101
	return 0<32>
fn0074EE90_exit:


word32 fn0074EFB0(word32 dwArg04, ptr32 & ecxOut, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00717CB0
//      fn00719F20
// MayUse:  Stack +0004:[0..31]
// LiveOut: eax ecx edx
// Trashed: SCZO eax ecx edi edx esi Top
// Preserved: esp
fn0074EFB0_entry:
l0074EFB0:
	word32 esi_9 = Mem8[Mem0[0x00A6D67C<p32>:word32] + 4<32>:word32]
	branch Mem8[esi_9 + 0x18<32>:word32] != 0<32> l0074EFCC
l0074EFBF:
	word32 ecx_14
	word32 edx_15
	branch fn0074E980(out ecx_14, out edx_15) == 0<32> l0074EFCC
l0074EFCC:
	word32 edi_26 = dwArg04
	branch dwArg04 != 0<32> l0074EFDA
l0074EFD5:
	edi_26 = 0x8D1DC8<32>
l0074EFDA:
	word32 ecx_45
	word32 edx_46
	word32 edi_131
	word32 esi_130
	word32 eax_44 = fn006FD8B0(Mem25[esi_9 + 0x20<32>:word32], edi_26, out ecx_45, out edx_46, out esi_130, out edi_131)
	branch eax_44 != 0<32> l0074F007
l0074F007:
	Mem55[eax_44:word32] = Mem40[eax_44:word32] + 1<32>
	ecxOut = ecx_45
	edxOut = edx_46
	return eax_44
l0074EFED:
	word32 ecx_71
	word32 edx_72
	fn006E15D0(Mem40[0x00A17CA0<p32>:word32], 0x8DEA14<32>, out ecx_71, out edx_72)
	ecxOut = ecx_71
	edxOut = edx_72
	return eax_44
l0074EFC8:
	ecxOut = ecx_14
	edxOut = edx_15
	return 0<32>
fn0074EFB0_exit:


word32 fn0074F010(word32 dwArg04, word32 dwArg08, ptr32 & rLoc1Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0074F3B0
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: ecx FPU -1
// Trashed: SCZO eax ecx edx FPU -1 Top
// Preserved: ebp ebx edi esi esp
fn0074F010_entry:
l0074F010:
	word32 eax_29
	call MSVCR80.dll!localeconv (retsize: 4;)
		uses: Stack +0014:0<32>,Stack +0018:0<32>,Stack +0024:Mem0[0x008A86F8<p32>:real64]
		defs: eax:eax_29
	word32 esi_33 = Mem26[eax_29:word32]
	word32 dwLoc14_460 = 0<32>
	word32 dwLoc18_461 = 0<32>
	word32 eax_34 = esi_33
	word32 ecx_263 = esi_33 + 1<32>
	word24 ecx_24_8_475 = SLICE(esi_33 + 1<32>, word24, 8)
l0074F040:
	eax_34 = eax_821 + 1<32>
	word32 ebx_155 = 0<32>
	eax_821 = eax_34
	branch Mem35[eax_821:byte] != 0<8> l0074F040
l0074F049:
	word32 eax_48 = eax_34 - (esi_33 + 1<32>)
	branch Mem35[esi_33:byte] != 0x2E<8> l0074F063
l0074F05A:
	branch Mem52[esi_33 + 1<32>:byte] == 0<8> l0074F114
l0074F063:
	word32 eax_439 = dwArg04
l0074F065:
	byte cl_62 = Mem52[eax_439:byte]
	branch cl_62 == 0x20<8> l0074F085
l0074F06C:
	branch cl_62 == 0xC<8> l0074F085
l0074F071:
	branch cl_62 == 0xA<8> l0074F085
l0074F076:
	branch cl_62 == 0xD<8> l0074F085
l0074F07B:
	branch cl_62 == 9<8> l0074F085
l0074F080:
	branch cl_62 != 0xB<8> l0074F08A
l0074F08A:
	byte cl_75 = Mem52[eax_439:byte]
	branch cl_75 == 0x2B<8> l0074F096
l0074F091:
	branch cl_75 != 0x2D<8> l0074F099
l0074F096:
	eax_439 = eax_439 + 1<32>
l0074F099:
	byte cl_86 = Mem52[eax_439:byte]
	ecx_263 = SEQ(ecx_24_8_475, cl_86) (alias)
	branch cl_86 < 0x30<8> l0074F0B0
l0074F0A0:
	ecx_263 = SEQ(ecx_24_8_475, cl_86) (alias)
	branch cl_86 > 0x39<8> l0074F0B0
l0074F0A5:
	cl_86 = Mem52[eax_439 + 1<32>:byte]
	eax_439 = eax_439 + 1<32>
	ecx_263 = SEQ(ecx_24_8_475, cl_86) (alias)
	branch cl_86 >= 0x30<8> l0074F0A0
l0074F0B0:
	word24 ecx_24_8_493 = SLICE(ecx_263, word24, 8)
	branch Mem52[eax_439:byte] != 0x2E<8> l0074F16D
l0074F16D:
	branch strncmp(eax_439, esi_33, eax_48) != 0<32> l0074F114
l0074F17D:
	Mem134[dwArg08:word32] = dwArg04
	Mem149[_errno():word32] = 0x16<32>
	rLoc1Out = <invalid>
	return ecx_263
l0074F0B9:
	byte cl_154 = Mem52[eax_439 + 1<32>:byte]
	ebx_155 = eax_439
	word32 eax_156 = eax_439 + 1<32>
	branch cl_154 < 0x30<8> l0074F0D6
l0074F0C6:
	branch cl_154 > 0x39<8> l0074F0D6
l0074F0CB:
	cl_154 = Mem52[eax_156 + 1<32>:byte]
	eax_156 = eax_156 + 1<32>
	branch cl_154 >= 0x30<8> l0074F0C6
l0074F0D6:
	byte cl_170 = Mem52[eax_156:byte]
	branch cl_170 == 0x65<8> l0074F0E2
l0074F0DD:
	branch cl_170 != 0x45<8> l0074F0E5
l0074F0E2:
	eax_156 = eax_156 + 1<32>
l0074F0E5:
	byte cl_181 = Mem52[eax_156:byte]
	branch cl_181 == 0x2B<8> l0074F0F1
l0074F0EC:
	branch cl_181 != 0x2D<8> l0074F0F4
l0074F0F1:
	eax_156 = eax_156 + 1<32>
l0074F0F4:
	byte cl_192 = Mem52[eax_156:byte]
	ecx_263 = SEQ(ecx_24_8_493, cl_192) (alias)
	branch cl_192 < 0x30<8> l0074F110
l0074F0FB:
l0074F100:
	ecx_263 = SEQ(ecx_24_8_493, cl_192) (alias)
	branch cl_192 > 0x39<8> l0074F110
l0074F105:
	cl_192 = Mem52[eax_156 + 1<32>:byte]
	eax_156 = eax_156 + 1<32>
	ecx_263 = SEQ(ecx_24_8_493, cl_192) (alias)
	branch cl_192 >= 0x30<8> l0074F100
l0074F110:
	dwLoc14_460 = eax_156
l0074F114:
	Mem235[_errno():word32] = 0<32>
	branch ebx_155 == 0<32> l0074F22D
l0074F22D:
	word32 eax_237 = 0<32>
	branch Mem235[dwArg04:byte] != 0x2D<8> l0074F23A
l0074F235:
	eax_237 = 1<32>
l0074F23A:
	branch Mem235[eax_237 + dwArg04:byte] != 0x30<8> l0074F252
l0074F240:
	byte al_255 = Mem235[eax_237 + 1<32> + dwArg04:byte]
	branch al_255 == 0x78<8> l0074F24C
l0074F248:
	branch al_255 != 0x58<8> l0074F252
l0074F252:
	strtod(dwArg04, fp - 0x18<32>)
	ecx_263 = fp - 0x18<32>
l0074F24C:
	dwLoc18_461 = dwArg04
l0074F12A:
	word32 eax_301 = eax_48 - dwArg04 + 1<32> + dwLoc14_460
	branch eax_301 != 0<32> l0074F13D
l0074F138:
	eax_301 = 1<32>
l0074F13D:
	word32 eax_310 = malloc(eax_301)
	branch eax_310 != 0<32> l0074F19D
l0074F19D:
	memcpy(eax_310, dwArg04, ebx_155 - dwArg04)
	word32 esi_335 = eax_310 - dwArg04 + ebx_155
	memcpy(esi_335, esi_33, eax_48)
	word32 esi_340 = esi_335 + eax_48
	memcpy(esi_340, ebx_155 + 1<32>, dwLoc14_460 - ebx_155 - 1<32>)
	Mem358[esi_340 - ebx_155 - 1<32> + dwLoc14_460:byte] = 0<8>
	strtod(eax_310, fp - 0x18<32>)
	ecx_263 = dwLoc14_460
	branch true l0074F221
l0074F1FD:
	word32 ebp_369 = dwArg04 - eax_310
	branch ebx_155 >=u 0<32> l0074F21B
l0074F21B:
	dwLoc18_461 = ebp_369
l0074F221:
	free(eax_310)
l0074F203:
	free(eax_310)
	dwLoc18_461 = ebp_369 - eax_48 + 1<32>
l0074F265:
	branch dwArg08 == 0<32> l0074F273
l0074F26D:
	Mem395[dwArg08:word32] = dwLoc18_461
l0074F273:
	rLoc1Out = <invalid>
	return ecx_263
l0074F14D:
	branch dwArg08 == 0<32> l0074F157
l0074F155:
	Mem418[dwArg08:word32] = dwArg04
l0074F157:
	Mem433[_errno():word32] = 0xC<32>
	rLoc1Out = <invalid>
	return dwLoc14_460
fn0074F010_exit:
l0074F085:
	eax_439 = eax_439 + 1<32>


word32 fn0074F280(word32 dwArg04, word32 dwArg08, word32 dwArg0C, real64 rArg10, ptr32 & edxOut, ptr32 & ebpOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006FF4A0
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31] Stack +0010:[0..63]
// LiveOut: eax ebp edx
// Trashed: SCZO eax ebp ecx edi edx FPU -1 Top
// Preserved: ebx esi esp
fn0074F280_entry:
l0074F280:
	word32 eax_11 = dwArg0C
l0074F290:
	eax_11 = eax_407 + 1<32>
	eax_407 = eax_11
	branch Mem9[eax_407:byte] != 0<8> l0074F290
l0074F299:
	byte bl_24 = Mem9[eax_11 - (dwArg0C + 1<32>) - 1<32> + dwArg0C:byte]
	branch Mem9[dwArg0C:byte] == 0x25<8> l0074F2A9
l0074F2A9:
	branch strpbrk(dwArg0C + 1<32>, 0x8DEA38<32>) != 0<32> l0074F2A4
l0074F2BF:
	branch bl_24 == 0x65<8> l0074F2DD
l0074F2C4:
	branch bl_24 == 0x45<8> l0074F2DD
l0074F2C9:
	branch bl_24 == 0x66<8> l0074F2DD
l0074F2CE:
	branch bl_24 == 0x46<8> l0074F2DD
l0074F2D3:
	branch bl_24 == 0x67<8> l0074F2DD
l0074F2D8:
	branch bl_24 != 0x47<8> l0074F2A4
l0074F2DD:
	fn00724FE0(dwArg04, dwArg08, dwArg0C)
	word32 eax_96
	word32 ecx_98
	call MSVCR80.dll!localeconv (retsize: 4;)
		uses: ecx_24_8:ecx_24_8_281,Stack +0018:dwArg04,Stack +001C:dwArg08,Stack +0020:dwArg0C,Stack +0024:rArg10
		defs: eax:eax_96,ecx:ecx_98
	word32 edi_101 = Mem77[eax_96:word32]
	word32 esi_129 = dwArg04
	word24 ecx_24_8_281 = SLICE(ecx_98, word24, 8)
	word32 eax_102 = edi_101
	word32 edx_103 = edi_101 + 1<32>
l0074F310:
	byte cl_107 = Mem77[eax_102:byte]
	eax_102 = eax_102 + 1<32>
	branch cl_107 != 0<8> l0074F310
l0074F319:
	word32 eax_113 = eax_102 - (edi_101 + 1<32>)
	branch Mem77[edi_101:byte] != 0x2E<8> l0074F327
l0074F322:
	branch Mem77[edi_101 + 1<32>:byte] == cl_107 l0074F3A1
l0074F327:
	byte al_123 = Mem77[dwArg04:byte]
	branch al_123 == 0x2B<8> l0074F331
l0074F32D:
	branch al_123 != 0x2D<8> l0074F334
l0074F331:
	esi_129 = dwArg04 + 1<32>
l0074F334:
	edx_103 = CONVERT(Mem77[esi_129:byte], byte, word32)
	word24 edx_24_8_299 = SLICE(edx_103, word24, 8)
	branch isdigit(edx_103) == 0<32> l0074F358
l0074F347:
	esi_129 = esi_408 + 1<32>
	esi_408 = esi_129
	branch isdigit(CONVERT(Mem148[esi_408 + 1<32>:byte], byte, word32)) != 0<32> l0074F347
l0074F358:
	branch strncmp(esi_129, edi_101, eax_113) != 0<32> l0074F39D
l0074F368:
	Mem182[esi_129:byte] = 0x2E<8>
	word32 esi_183 = esi_129 + 1<32>
	branch eax_113 <=u 1<32> l0074F39D
l0074F373:
	word32 ecx_186 = esi_183 - 1<32> + eax_113
	word32 eax_187 = ecx_186
l0074F380:
	byte dl_192 = Mem182[eax_187:byte]
	eax_187 = eax_187 + 1<32>
	edx_103 = SEQ(edx_24_8_299, dl_192) (alias)
	branch dl_192 != 0<8> l0074F380
l0074F389:
	word32 eax_198 = eax_187 - (ecx_186 + 1<32>)
	memmove(esi_183, ecx_186, eax_198)
	Mem212[eax_198 + esi_183:byte] = 0<8>
l0074F39D:
l0074F3A1:
	edxOut = edx_103
	ebpOut = <invalid>
	return dwArg04
l0074F2A4:
	edxOut = dwArg0C + 1<32>
	ebpOut = <invalid>
	return 0<32>
fn0074F280_exit:


word32 fn0074F3B0(word32 dwArg04, ptr32 & rLoc1Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn007367D0
//      fn0073D140
// MayUse:  Stack +0004:[0..31]
// LiveOut: ecx FPU -1
// Trashed: SCZO eax ecx edx FPU -1 Top
// Preserved: esp
fn0074F3B0_entry:
l0074F3B0:
	word64 rRet0_17
	word32 ecx_11 = fn0074F010(dwArg04, 0<32>, out rRet0_17)
	rLoc1Out = rRet0_17
	return ecx_11
fn0074F3B0_exit:


word32 fn0074F420(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0074F6A0
// MayUse:  Stack +0004:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx Top
// Preserved: esi esp
fn0074F420_entry:
l0074F420:
	branch Mem0[0x00A6E478<p32>:word32] != 0<32> l0074F457
l0074F429:
	word32 eax_9 = GetModuleHandleA(0x8DEC08<32>)
	branch eax_9 == 0<32> l0074F44D
l0074F438:
	word32 eax_18 = GetProcAddress(eax_9, 0x8DEBEC<32>)
	Mem22[0x00A6E478<p32>:word32] = eax_18
	branch eax_18 != 0<32> l0074F457
l0074F44D:
	Mem24[0x00A6E478<p32>:word32] = 0x74F3C0<32>
l0074F457:
	Mem41[dwArg04:word32] = 0xFFFFFFFF<32>
	Mem42[dwArg04 + 4<32>:word32] = 0<32>
	word32 eax_43 = CreateEventA(0<32>, 0<32>, 0<32>, 0<32>)
	Mem50[dwArg04 + 8<32>:word32] = eax_43
	return CONVERT(CONVERT(eax_43 != 0<32>, bool, int8), int8, uint32)
fn0074F420_exit:


word32 fn0074F490(word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0074F540
//      fn0074F5E0
//      fn0074F6F0
//      fn0074F810
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax
// Trashed: SCZO eax Top
// Preserved: edi esi esp
fn0074F490_entry:
l0074F490:
	branch dwArg08 != 0<32> l0074F4B5
l0074F4B5:
	branch InterlockedIncrement(dwArg04) == 0<32> l0074F4DC
l0074F4C0:
	word32 eax_26 = WaitForSingleObject(Mem15[dwArg04 + 8<32>:word32], 0xFFFFFFFF<32>)
	Mem30[dwArg04 + 4<32>:word32] = GetCurrentThreadId()
	return eax_26
l0074F49D:
	word32 eax_43
	call Mem41[0x00A6E478<p32>:word32] (retsize: 4;)
		uses: Stack +0004:dwArg04,Stack +0008:0<32>,Stack +000C:0xFFFFFFFF<32>,Stack +001C:dwArg04,Stack +0020:dwArg08
		defs: eax:eax_43
	branch eax_43 == 0xFFFFFFFF<32> l0074F4DC
l0074F4DC:
	Mem53[dwArg04 + 4<32>:word32] = GetCurrentThreadId()
	return 0<32>
l0074F4AD:
	return 0x102<32>
fn0074F490_exit:


word32 fn0074F540(word32 dwArg04, word32 dwArg08, ptr32 & ecxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006F5C60
//      fn00706C20
//      fn00708DC0
//      fn007157B0
//      fn00715A70
//      fn00715BD0
//      fn007558B0
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax ecx
// Trashed: SCZO eax ecx Top
// Preserved: esp
fn0074F540_entry:
l0074F540:
	branch dwArg04 == 0<32> l0074F564
l0074F548:
	ecx = 0<32> - (dwArg08 == 0<32>)
	branch fn0074F490(dwArg04, ecx) != 0<32> l0074F564
l0074F564:
	ecxOut = ecx
	return 0<32>
l0074F55E:
	ecxOut = ecx
	return 1<32>
fn0074F540_exit:


void fn0074F570(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006F9090
//      fn00706BE0
//      fn00708DC0
//      fn007157B0
//      fn00715A70
//      fn00715BD0
//      fn007558B0
// MayUse:  Stack +0004:[0..31]
// LiveOut:
// Trashed: SCZO eax Top
// Preserved: esi esp
fn0074F570_entry:
l0074F570:
	branch dwArg04 == 0<32> l0074F595
l0074F579:
	Mem13[dwArg04 + 4<32>:word32] = 0<32>
	branch InterlockedDecrement(dwArg04) < 0<32> l0074F595
l0074F58B:
	SetEvent(Mem13[dwArg04 + 8<32>:word32])
l0074F595:
	return
fn0074F570_exit:


void fn0074F5E0(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn007159F0
// MayUse:  Stack +0004:[0..31]
// LiveOut:
// Trashed: SCZO eax edx Top
// Preserved: ebp ebx ecx edi esi esp
fn0074F5E0_entry:
l0074F5E0:
	word32 edi_10 = Mem9[0x00A6E48C<p32>:word32]
	branch edi_10 == 0<32> l0074F5FD
l0074F5EC:
	fn0074F490(edi_10, 0xFFFFFFFF<32>)
	edi_10 = Mem17[0x00A6E48C<p32>:word32]
l0074F5FD:
	word32 eax_27 = Mem26[0x00A6E488<p32>:word32]
	word32 esi_30 = 0xA6E488<32>
	branch eax_27 == 0<32> l0074F632
l0074F60B:
l0074F617:
	branch Mem44[eax_27 + 8<32>:word32] != dwArg04 l0074F628
l0074F628:
	esi_30 = eax_27
l0074F61C:
	Mem54[esi_30:word32] = Mem44[eax_27:word32]
	free(eax_27)
l0074F62A:
	eax_27 = Mem58[esi_30:word32]
	branch eax_27 != 0<32> l0074F617
l0074F630:
l0074F632:
	branch edi_10 == 0<32> l0074F654
l0074F638:
	Mem79[edi_10 + 4<32>:word32] = 0<32>
	branch InterlockedDecrement(edi_10) < 0<32> l0074F654
l0074F64A:
	SetEvent(Mem79[edi_10 + 8<32>:word32])
l0074F654:
	return
fn0074F5E0_exit:


word32 fn0074F680()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006F5C60
//      fn006F9090
//      fn00706CF0
//      fn0072EC10
//      fn0072ED00
// MayUse: 
// LiveOut: eax
// Trashed: SCZO eax Top
// Preserved: esp
fn0074F680_entry:
l0074F680:
	branch Mem0[0x00A6E47C<p32>:word32] != 0<32> l0074F693
l0074F689:
	Mem7[0x00A6E47C<p32>:word32] = 1<32>
l0074F693:
	return GetCurrentThreadId()
fn0074F680_exit:


word32 fn0074F6A0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006F5C60
//      fn007558B0
// MayUse: 
// LiveOut: eax
// Trashed: SCZO eax ecx Top
// Preserved: esi esp
fn0074F6A0_entry:
l0074F6A0:
	branch Mem0[0x00A6E47C<p32>:word32] != 0<32> l0074F6B3
l0074F6A9:
	Mem7[0x00A6E47C<p32>:word32] = 1<32>
l0074F6B3:
	word32 eax_15 = malloc(0xC<32>)
	branch eax_15 == 0<32> l0074F6E2
l0074F6C5:
	branch fn0074F420(eax_15) != 0<32> l0074F6E0
l0074F6E0:
l0074F6E2:
	return eax_15
l0074F6D2:
	free(eax_15)
	return 0<32>
fn0074F6A0_exit:


word32 fn0074F6F0(word32 ebx, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0074F7F0
// MayUse:  ebx:[0..31] Stack +0004:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx Top
// Preserved: ebp edi esi esp
fn0074F6F0_entry:
l0074F6F0:
	branch Mem0[0x00A6E47C<p32>:word32] != 0<32> l0074F709
l0074F6FF:
	Mem14[0x00A6E47C<p32>:word32] = 1<32>
l0074F709:
	word32 eax_15 = GetCurrentThreadId()
	word32 eax_18 = Mem17[0x00A6E48C<p32>:word32]
	branch eax_18 != 0<32> l0074F71D
l0074F71D:
	fn0074F490(eax_18, 0xFFFFFFFF<32>)
	word32 esi_107 = Mem30[0x00A6E488<p32>:word32]
	branch esi_107 == 0<32> l0074F743
l0074F733:
	branch Mem30[esi_107 + 4<32>:word32] != eax_15 l0074F73D
l0074F738:
	branch Mem30[esi_107 + 8<32>:word32] == ebx l0074F76E
l0074F73D:
	esi_107 = Mem30[esi_107:word32]
	branch esi_107 != 0<32> l0074F733
l0074F743:
	branch dwArg04 == 0<32> l0074F76E
l0074F747:
	word32 eax_67 = malloc(0x10<32>)
	esi_107 = eax_67
	branch eax_67 == 0<32> l0074F76E
l0074F758:
	Mem75[eax_67 + 4<32>:word32] = eax_15
	Mem80[eax_67 + 8<32>:word32] = ebx
	Mem81[eax_67 + 0xC<32>:word32] = dwArg04
	Mem83[eax_67:word32] = Mem81[0x00A6E488<p32>:word32]
	Mem84[0x00A6E488<p32>:word32] = eax_67
l0074F76E:
	word32 eax_87 = Mem85[0x00A6E48C<p32>:word32]
	branch eax_87 == 0<32> l0074F795
l0074F779:
	Mem95[eax_87 + 4<32>:word32] = 0<32>
	branch InterlockedDecrement(eax_87) < 0<32> l0074F795
l0074F78B:
	SetEvent(Mem95[eax_87 + 8<32>:word32])
l0074F795:
	return esi_107
l0074F71A:
	return eax_18
fn0074F6F0_exit:


word32 fn0074F7F0(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00715B80
// MayUse:  Stack +0004:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx Top
// Preserved: ebx esp
fn0074F7F0_entry:
l0074F7F0:
	word32 eax_10 = fn0074F6F0(dwArg04, 0<32>)
	branch eax_10 != 0<32> l0074F805
l0074F805:
	return Mem9[eax_10 + 0xC<32>:word32]
l0074F804:
	return eax_10
fn0074F7F0_exit:


void fn0074F810(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00715B80
// MayUse:  Stack +0004:[0..31]
// LiveOut:
// Trashed: SCZO eax ecx Top
// Preserved: ebx edi edx esi esp
fn0074F810_entry:
l0074F810:
	branch Mem0[0x00A6E47C<p32>:word32] != 0<32> l0074F823
l0074F819:
	Mem7[0x00A6E47C<p32>:word32] = 1<32>
l0074F823:
	word32 eax_17 = GetCurrentThreadId()
	word32 esi_18 = Mem16[0x00A6E48C<p32>:word32]
	branch esi_18 == 0<32> l0074F848
l0074F837:
	fn0074F490(esi_18, 0xFFFFFFFF<32>)
	esi_18 = Mem26[0x00A6E48C<p32>:word32]
l0074F848:
	word32 eax_36 = Mem35[0x00A6E488<p32>:word32]
	word32 ecx_39 = 0xA6E488<32>
	branch eax_36 == 0<32> l0074F882
l0074F856:
l0074F860:
	branch Mem35[eax_36 + 8<32>:word32] != dwArg04 l0074F86A
l0074F865:
	branch Mem35[eax_36 + 4<32>:word32] == eax_17 l0074F874
l0074F874:
	Mem60[ecx_39:word32] = Mem35[eax_36:word32]
	free(eax_36)
l0074F86A:
	ecx_39 = eax_36
	eax_36 = Mem35[eax_36:word32]
	branch eax_36 != 0<32> l0074F860
l0074F872:
l0074F882:
	branch esi_18 == 0<32> l0074F8A2
l0074F886:
	Mem81[esi_18 + 4<32>:word32] = 0<32>
	branch InterlockedDecrement(esi_18) < 0<32> l0074F8A2
l0074F898:
	SetEvent(Mem81[esi_18 + 8<32>:word32])
l0074F8A2:
	return
fn0074F810_exit:


word32 fn0074F9A0(word32 dwArg08, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006F68F0
// MayUse:  Stack +0008:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ecx edx Top
// Preserved: esp
fn0074F9A0_entry:
l0074F9A0:
	word32 esp_10
	word32 eax_11
	call fileno (retsize: 4;)
		uses: eax:dwArg08,Stack +0004:dwArg08,Stack +0040:dwArg08
		defs: eax:eax_11,esp:esp_10
	Mem18[esp_10 - 4<i32>:word32] = esp_10 + 4<32>
	Mem20[esp_10 - 8<i32>:word32] = eax_11
	word32 eax_22
	call fstat64i32 (retsize: 4;)
		uses: ecx:esp_10 + 4<32>,Stack +000C:dwArg08
		defs: eax:eax_22
	branch eax_22 == 0<32> l0074F9CB
l0074F9CB:
	edxOut = dwLoc0C
	return dwLoc10
l0074F9C1:
	edxOut = 0xFFFFFFFF<32>
	return 0xFFFFFFFF<32>
fn0074F9A0_exit:


word32 fn0074F9E0(word32 dwArg04, word32 dwArg08, word32 dwArg0C, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006F82C0
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn0074F9E0_entry:
l0074F9E0:
	word32 edx_19
	word32 eax_17 = fn006F7810(out edx_19)
	branch eax_17 == 0<32> l0074F9FE
l0074F9FE:
	word32 ebp_41
	word32 edi_42
	word32 eax_36 = strrchr(dwArg04, 0x2E<32>)
	branch eax_36 != 0<32> l0074FA16
l0074FA16:
	ebp_41 = dwArg04
	edi_42 = eax_36 + 1<32>
l0074FA10:
	ebp_41 = 0<32>
	edi_42 = dwArg04
l0074FA1B:
	word32 edx_149
	word32 eax_64 = fn00723540(dwArg08, ebp_41, dwArg04, edi_42, es, ds, dwArg08, out edx_149)
	branch fn006E0FC0() != 0<32> l0074FA9C
l0074FA36:
	branch eax_64 != 0<32> l0074FA56
l0074FA56:
	word32 edi_79 = Mem60[0x00A6C630<p32>:word32]
	Mem80[0x00A6C630<p32>:word32] = ebp_41
	word32 esp_81
	call eax_64 (retsize: 4;)
		uses: Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0018:dwArg04,Stack +001C:dwArg08,Stack +0020:dwArg0C
		defs: edx:edx_84,esp:esp_81
	Mem87[0x00A6C630<p32>:word32] = edi_79
	branch fn006E0FC0() != 0<32> l0074FA9C
l0074FA73:
	Mem93[esp_81 - 4<i32>:word32] = dwArg04
	Mem100[esp_81 - 8<i32>:word32] = fn006F5DA0()
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 esi_342
	word32 edi_343
	word32 ecx_340
	word32 edx_341
	word32 eax_102 = fn006FD8B0(stackArg4, dwArg04, out ecx_340, out edx_341, out esi_342, out edi_343)
	branch eax_102 != 0<32> l0074FAA3
l0074FAA3:
	word32 ebx_112 = Mem100[esp_81 + 0x18<32>:word32]
	Mem114[esp_81 - 4<32>:word32] = ebx_112
	Mem116[esp_81 - 8<i32>:word32] = 0x8D42BC<32>
	Mem118[esp_81 - 12<i32>:word32] = eax_102
	branch fn006EA080() >= 0<32> l0074FABF
l0074FABA:
	word32 edx_348
	word32 ecx_347
	fn006E1160(out ecx_347, out edx_348)
l0074FABF:
	Mem139[esp_81 - 4<32>:word32] = ebx_112
	Mem142[esp_81 - 8<32>:word32] = dwArg04
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	branch fn006F62D0(stackArg4, dwArg04, out edx_149) == 0<32> l0074FA9C
l0074FACD:
	branch Mem142[0x00A74AF0<p32>:word32] == 0<32> l0074FAE5
l0074FAD6:
	Mem159[esp_81 - 4<32>:word32] = ebx_112
	Mem161[esp_81 - 8<32>:word32] = dwArg04
	Mem163[esp_81 - 0xC<32>:word32] = 0x8DEC40<32>
	fn00716B20(out edx_149)
l0074FAE5:
	Mem175[eax_102:word32] = Mem173[eax_102:word32] + 1<32>
	edxOut = edx_149
	return eax_102
l0074FA88:
	word32 edx_187 = Mem100[0x00A18720<p32>:word32]
	Mem189[esp_81 - 4<32>:word32] = 0x8DEC68<32>
	Mem191[esp_81 - 8<i32>:word32] = edx_187
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_345
	fn006E0F80(stackArg4, dwArg04, out ecx_345, out edx_149)
l0074FA9C:
	edxOut = edx_149
	return 0<32>
l0074FA3A:
	word32 edx_223
	word32 ecx_338
	fn006E15D0(Mem60[0x00A16F8C<p32>:word32], dwArg04, out ecx_338, out edx_223)
	edxOut = edx_223
	return 0<32>
l0074F9F8:
	Mem239[eax_17:word32] = Mem15[eax_17:word32] + 1<32>
	edxOut = edx_19
	return eax_17
fn0074F9E0_exit:


word32 fn007500E0(word32 dwArg04, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0070B600
// MayUse:  Stack +0004:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ecx edx esi Top
// Preserved: edi esp
fn007500E0_entry:
l007500E0:
	word32 ecx_123
	word32 edx_12
	word32 eax_10 = fn006FEF30(0xA2EE18<32>, out ecx_123, out edx_12)
	branch eax_10 != 0<32> l0075010F
l0075010F:
	Mem25[eax_10 + 8<32>:word32] = dwArg04
	Mem26[eax_10 + 0xC<32>:word32] = 0<32>
	Mem27[eax_10 + 0x10<32>:word32] = 0<32>
	branch Mem27[eax_10 - 8<32>:word32] == 0xFFFFFFFE<32> l00750133
l00750126:
	fn006E86F0(0x8D0E04<32>)
l00750133:
	Mem40[eax_10 - 8<32>:word32] = 0xFFFFFFFD<32>
	word32 edx_41 = Mem40[0x00A1D558<p32>:word32]
	Mem42[eax_10 - 0x10<32>:word32] = edx_41
	word32 eax_44 = Mem42[Mem42[0x00A1D558<p32>:word32] + 4<32>:word32]
	Mem45[eax_10 - 0xC<32>:word32] = eax_44
	Mem46[eax_44:word32] = eax_10 - 0x10<32>
	Mem48[Mem46[0x00A1D558<p32>:word32] + 4<32>:word32] = eax_10 - 0x10<32>
	edxOut = edx_41
	return eax_10
l007500F6:
	word32 v9_57 = Mem8[dwArg04:word32] + 0xFFFFFFFF<32>
	Mem58[dwArg04:word32] = v9_57
	branch v9_57 != 0<32> l0075010B
l007500FF:
	word32 ecx_61 = Mem58[dwArg04 + 4<32>:word32]
	call Mem58[ecx_61 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_61,Stack +0004:dwArg04,Stack +0010:dwArg04
		defs: edx:edx_68
l0075010B:
	edxOut = edx_12
	return 0<32>
fn007500E0_exit:


word32 fn00750160(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006FE070
//      fn006FE2A0
// MayUse:  Stack +0004:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx edx Top
// Preserved: esp
fn00750160_entry:
l00750160:
	word32 ecx_6 = Mem0[dwArg04 + 8<32>:word32]
	branch ecx_6 == 0<32> l00750193
l0075016B:
	branch Mem0[ecx_6 + 0x24<32>:word32] == 0<32> l00750193
l00750171:
	word32 eax_12 = Mem0[ecx_6 + 0x44<32>:word32]
	branch eax_12 <= 0<32> l00750193
l00750178:
	word32 eax_15 = eax_12 + 0xFFFFFFFF<32>
	branch eax_12 < 0xFFFFFFFF<32> l00750193
l0075017D:
	word32 ecx_19 = ecx_6 + ((eax_12 + 0x11<32>) + (eax_12 + 0xFFFFFFFF<32>) * 2<32>) * 4<32>
l00750184:
	branch Mem0[ecx_19:word32] != 0x78<32> l00750196
l00750196:
	return 1<32>
l00750189:
	eax_15 = eax_15 - 1<32>
	ecx_19 = ecx_19 - 0xC<32>
	branch eax_15 >= 0<32> l00750184
l00750193:
	return 0<32>
fn00750160_exit:


word32 fn007501A0(word32 dwArg04, word32 dwArg08, word32 dwArg0C)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073D140
//      fn007502F0
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx edx Top
// Preserved: ebx edi esi esp
fn007501A0_entry:
l007501A0:
	word32 esi_10 = dwArg04
	byte al_11 = Mem9[dwArg04:byte]
	word32 edi_119 = 0<32>
	branch al_11 == 0<8> l007501CC
l007501AF:
l007501B5:
	branch isspace(CONVERT(al_11, byte, word32)) == 0<32> l007501CC
l007501C2:
	al_11 = Mem24[esi_10 + 1<32>:byte]
	esi_10 = esi_10 + 1<32>
	branch al_11 != 0<8> l007501B5
l007501CC:
	word32 eax_108 = dwArg0C
	branch dwArg0C == 0<32> l007501F3
l007501F3:
	branch Mem37[esi_10:byte] != 0x30<8> l00750217
l00750217:
	eax_108 = 0xA<32>
l007501F8:
	byte al_46 = Mem37[esi_10 + 1<32>:byte]
	esi_10 = esi_10 + 1<32>
	branch al_46 == 0x78<8> l0075020D
l00750202:
	branch al_46 == 0x58<8> l0075020D
l0075020D:
	esi_10 = esi_10 + 1<32>
	eax_108 = 0x10<32>
l00750206:
	eax_108 = 8<32>
l007501D4:
	branch dwArg0C != 0x10<32> l0075021E
l0075021E:
	branch dwArg0C < 2<32> l007502D5
l00750227:
	branch dwArg0C > 0x24<32> l007502D5
l007502D5:
	branch dwArg08 == 0<32> l007502DF
l007502DD:
	Mem70[dwArg08:word32] = esi_10
l007502DF:
	return 0<32>
l007501D9:
	branch Mem37[esi_10:byte] != 0x30<8> l0075023D
l007501DE:
	byte cl_84 = Mem37[esi_10 + 1<32>:byte]
	esi_10 = esi_10 + 1<32>
	branch cl_84 == 0x78<8> l007501EE
l007501E9:
	branch cl_84 != 0x58<8> l00750230
l007501EE:
	esi_10 = esi_10 + 1<32>
l00750230:
	branch Mem37[esi_10:byte] != 0x30<8> l0075023D
l00750235:
	esi_10 = esi_10 + 1<32>
	branch Mem37[esi_10:byte] == 0x30<8> l00750235
l0075023D:
	word32 ecx_107 = Mem37[CONVERT(Mem37[esi_10:byte], byte, word32) * 4<32> + 0xA1EDE0<32>:word32]
	word32 ebx_113 = Mem37[eax_108 * 4<32> + 0xA2EF70<32>:word32]
	branch ecx_107 >= eax_108 l0075028A
l00750252:
	branch ebx_113 <= 0<32> l0075025D
l0075025D:
	branch ebx_113 < 0<32> l0075029A
l0075025F:
	branch edi_119 >u Mem37[eax_108 * 4<32> + 0xA2EED8<32>:word32] l0075029A
l00750268:
	word32 edi_124 = edi_119 *s eax_108
	word32 ecx_127 = ecx_107 + edi_124
	branch ecx_127 <u edi_124 l0075029A
l0075029A:
	branch dwArg08 == 0<32> l007502C2
l007502A2:
	branch Mem37[CONVERT(Mem37[esi_10:byte], byte, word32) * 4<32> + 0xA1EDE0<32>:word32] >= eax_108 l007502C0
l007502AE:
l007502B0:
	esi_10 = esi_355 + 1<32>
	esi_355 = esi_10
	branch Mem37[CONVERT(Mem37[esi_355 + 1<32>:byte], byte, word32) * 4<32> + 0xA1EDE0<32>:word32] < eax_108 l007502B0
l007502C0:
	Mem155[dwArg08:word32] = esi_10
l007502C2:
	Mem165[_errno():word32] = 0x22<32>
	return 0xFFFFFFFF<32>
l00750273:
	edi_119 = ecx_127
l00750256:
	edi_119 = edi_119 *s eax_108 + ecx_107
l00750275:
	ecx_107 = Mem37[CONVERT(Mem37[esi_10 + 1<32>:byte], byte, word32) * 4<32> + 0xA1EDE0<32>:word32]
	esi_10 = esi_10 + 1<32>
	ebx_113 = ebx_113 - 1<32>
	branch ecx_107 < eax_108 l00750252
l0075028A:
	branch dwArg08 == 0<32> l00750294
l00750292:
	Mem198[dwArg08:word32] = esi_10
l00750294:
	return edi_119
fn007501A0_exit:


word32 fn007502F0(word32 dwArg04, word32 dwArg08, word32 dwArg0C)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073D140
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx edx Top
// Preserved: ebx edi esi esp
fn007502F0_entry:
l007502F0:
	word32 esi_10 = dwArg04
	byte al_11 = Mem9[dwArg04:byte]
	branch al_11 == 0<8> l0075031B
l007502FC:
l00750303:
	branch isspace(CONVERT(al_11, byte, word32)) == 0<32> l0075031A
l00750310:
	al_11 = Mem23[esi_10 + 1<32>:byte]
	esi_10 = esi_10 + 1<32>
	branch al_11 != 0<8> l00750303
l0075031A:
l0075031B:
	byte bl_42 = Mem41[esi_10:byte]
	branch bl_42 == 0x2B<8> l00750327
l00750322:
	branch bl_42 != 0x2D<8> l0075032A
l00750327:
	esi_10 = esi_10 + 1<32>
l0075032A:
	word32 eax_146 = fn007501A0(esi_10, dwArg08, dwArg0C)
	branch eax_146 >u 0x7FFFFFFF<32> l0075034E
l0075034E:
	branch bl_42 != 0x2D<8> l0075035D
l00750353:
	branch eax_146 != 0x80000000<32> l0075035D
l0075035D:
	Mem81[_errno():word32] = 0x22<32>
	eax_146 = 0x7FFFFFFF<32>
l0075035A:
	return eax_146
l00750344:
	branch bl_42 != 0x2D<8> l0075036E
l0075036E:
	return eax_146
l00750349:
	return -eax_146
fn007502F0_exit:


word32 fn00750380(word32 dwArg04, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0070B600
// MayUse:  Stack +0004:[0..31]
// LiveOut: eax edx
// Trashed: SCZO ecx edx esi Top
// Preserved: edi esp
fn00750380_entry:
l00750380:
	word32 edx_12
	word32 ecx_103
	word32 eax_10 = fn006FEF30(0xA2F030<32>, out ecx_103, out edx_12)
	branch eax_10 != 0<32> l00750396
l00750396:
	Mem23[eax_10 + 8<32>:word32] = dwArg04
	branch dwArg04 == 0<32> l007503A4
l007503A1:
	Mem26[dwArg04:word32] = Mem23[dwArg04:word32] + 1<32>
l007503A4:
	branch Mem29[eax_10 - 8<32>:word32] == 0xFFFFFFFE<32> l007503BB
l007503AE:
	fn006E86F0(0x8D0E04<32>)
l007503BB:
	Mem48[eax_10 - 8<32>:word32] = 0xFFFFFFFD<32>
	Mem50[eax_10 - 0x10<32>:word32] = Mem48[0x00A1D558<p32>:word32]
	word32 eax_52 = Mem50[Mem50[0x00A1D558<p32>:word32] + 4<32>:word32]
	Mem53[eax_10 - 0xC<32>:word32] = eax_52
	Mem54[eax_52:word32] = eax_10 - 0x10<32>
	word32 edx_55 = Mem54[0x00A1D558<p32>:word32]
	Mem56[edx_55 + 4<32>:word32] = eax_10 - 0x10<32>
	edxOut = edx_55
	return <invalid>
l00750394:
	edxOut = edx_12
	return <invalid>
fn00750380_exit:


word32 fn007503F0(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00708DC0
// MayUse:  Stack +0004:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx Top
// Preserved: esp
fn007503F0_entry:
l007503F0:
	branch Mem0[dwArg04 + 4<32>:word32] == 0xA2F030<32> l0075040F
l0075040F:
	branch Mem0[dwArg04 + 8<32>:word32] == 0<32> l0075041B
l00750415:
	word32 eax_10 = Mem0[dwArg04 + 8<32>:word32]
	Mem12[eax_10:word32] = Mem0[eax_10:word32] + 1<32>
l0075041B:
	return Mem15[dwArg04 + 8<32>:word32]
l007503FD:
	word32 edx_59
	fn006E1DC0(out edx_59)
	return 0<32>
fn007503F0_exit:


word32 fn00750420(word32 dwArg04, word32 dwArg08, ptr32 & ecxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00708410
//      fn00708DC0
//      fn0073B310
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax ecx
// Trashed: SCZO eax ecx edx Top
// Preserved: esi esp
fn00750420_entry:
l00750420:
	branch Mem6[dwArg04 + 4<32>:word32] == 0xA2F030<32> l00750442
l00750442:
	word32 eax_10 = Mem6[dwArg04 + 8<32>:word32]
	branch eax_10 == 0<32> l00750460
l00750449:
	Mem15[eax_10:word32] = Mem6[eax_10:word32] + 0xFFFFFFFF<32>
	word32 eax_16 = Mem15[dwArg04 + 8<32>:word32]
	branch Mem15[eax_16:word32] != 0<32> l00750460
l00750454:
	word32 ecx_19 = Mem15[eax_16 + 4<32>:word32]
	word32 edx_26
	call Mem15[ecx_19 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_19,edx:edx_26,Stack +0004:eax_16,Stack +0010:dwArg04
		defs: ecx:ecx_25,edx:edx_26
l00750460:
	branch dwArg08 == 0<32> l0075046B
l00750468:
	Mem38[dwArg08:word32] = Mem32[dwArg08:word32] + 1<32>
l0075046B:
	Mem43[dwArg04 + 8<32>:word32] = dwArg08
	ecxOut = ecx
	return 0<32>
l0075042E:
	word32 edx_103
	ecxOut = fn006E1DC0(out edx_103)
	return 0xFFFFFFFF<32>
fn00750420_exit:


word32 fn00750FF0(word16 wArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00708DC0
// MayUse:  Stack +0004:[0..15]
// LiveOut: eax
// Trashed: SCZO eax Top
// Preserved: esp
fn00750FF0_entry:
l00750FF0:
	bool v11_37
	word32 eax_5 = CONVERT(wArg04, word16, word32)
	branch eax_5 > 0x200B<32> l00751030
l00751030:
	branch eax_5 > 0x205F<32> l0075104E
l0075104E:
	v11_37 = eax_5 == 0x3000<32>
l00751037:
	branch eax_5 == 0x205F<32> l00751058
l00751039:
	branch eax_5 < 0x2028<32> l00751055
l00751040:
	branch eax_5 <= 0x2029<32> l00751058
l00751047:
	v11_37 = eax_5 == 0x202F<32>
l00750FFC:
	branch eax_5 >= 0x2000<32> l00751058
l00751003:
	branch eax_5 > 0x85<32> l00751022
l00751022:
	branch eax_5 == 0xA0<32> l00751058
l00751029:
	v11_37 = eax_5 == 0x1680<32>
l00751053:
	branch v11_37 l00751058
l0075100A:
	branch eax_5 == 0x85<32> l00751058
l0075100C:
	branch eax_5 >u 0x20<32> l00751055
l00751014:
	switch (CONVERT(Mem0[eax_5 + 0x75105F<32>:byte], byte, word32)) { l00751058 l00751058 l00751058 l00751058 l00751058 l00751055 l00751055 l00751055 l00751055 l00751055 l00751055 l00751055 l00751055 l00751055 l00751055 l00751055 l00751055 l00751055 l00751055 l00751058 l00751058 l00751058 l00751058 l00751058 }
l00751055:
	return 0<32>
l00751058:
	return 1<32>
fn00750FF0_exit:


