word32 fn00694B89(uint32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00401080
//      fn0040A480
//      fn00417BC0
//      fn0041A830
//      fn0041A910
//      fn0041DF20
//      fn00623420
// MayUse:  Stack +0004:[0..31]
// LiveOut: eax
// Trashed: eax Top
// Preserved: esp
fn00694B89_entry:
l00694B89:
	return operator new(dwArg04)
fn00694B89_exit:


word32 fn00694B8E(word32 eax, word32 ecx, word32 edx, word32 ebx, word32 ebp, word32 esi, word32 edi, selector es, selector ds, word32 dwArg00, ptr32 & ecxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00401080
//      fn00402150
//      fn004023A0
//      fn00402D20
//      fn00403200
//      fn00403420
//      fn00403570
//      fn00403950
//      fn00403F70
//      fn00404190
//      fn004046D0
//      fn00404FF0
//      fn00405370
//      fn0040CBA0
//      fn00413A20
//      fn0041EE00
//      fn00420190
//      fn004295F0
//      fn00429930
//      fn005A67A0
//      fn005A6DD0
//      fn005A7560
//      fn005A7E10
//      fn0061FB20
//      fn0061FD40
//      fn0061FD60
//      fn0061FD80
//      fn0061FD90
//      fn00623E00
//      fn00656570
//      fn00657290
//      fn00659040
//      fn006E1260
//      fn006E1400
//      fn006E1AB0
//      fn006E5590
//      fn006E7660
//      fn006E8060
//      fn006E8800
//      fn006F68F0
//      fn006F7890
//      fn006F8440
//      fn006F8960
//      fn006F8EC0
//      fn006FF4A0
//      fn00700EC0
//      fn00701650
//      fn00716A00
//      fn007189B0
//      fn007234D0
//      fn00723540
//      fn007272E0
//      fn00727910
//      fn0072F830
//      fn00735890
//      fn00736780
//      fn007367D0
//      fn00737880
//      fn0073B9B0
//      fn0073BBE0
//      fn00747960
//      fn00748310
//      fn00748E50
//      fn00752FC0
//      fn00753600
//      fn007544F0
// MayUse:  cs:[0..15] ds:[0..15] eax:[0..31] ebp:[0..31] ebx:[0..31] ecx:[0..31] edi:[0..31] edx:[0..31] es:[0..15] esi:[0..31] fs:[0..15] gs:[0..15] ss:[0..15] Stack +0000:[0..31]
// LiveOut: eax ecx
// Trashed: SCZDOP eax ecx Top
// Preserved: ebp edx esp
fn00694B8E_entry:
l00694B8E:
	branch ecx != Mem0[0x00A14188<p32>:word32] l00694B98
l00694B98:
l00695465:
	Mem15[0x00A6B208<p32>:word32] = eax
	Mem16[0x00A6B204<p32>:word32] = ecx
	Mem18[0x00A6B200<p32>:word32] = edx
	Mem20[0x00A6B1FC<p32>:word32] = ebx
	Mem22[0x00A6B1F8<p32>:word32] = esi
	Mem24[0x00A6B1F4<p32>:word32] = edi
	Mem26[0x00A6B220<p32>:word16] = ss
	Mem28[0x00A6B214<p32>:word16] = cs
	Mem30[0x00A6B1F0<p32>:word16] = ds
	Mem32[0x00A6B1EC<p32>:word16] = es
	Mem34[0x00A6B1E8<p32>:word16] = fs
	Mem36[0x00A6B1E4<p32>:word16] = gs
	Mem41[0x00A6B218<p32>:word32] = cond(fp - 0x32C<32>) | SCZDOP
	Mem44[0x00A6B20C<p32>:word32] = ebp
	Mem46[0x00A6B210<p32>:word32] = dwArg00
	Mem48[0x00A6B21C<p32>:word32] = fp + 4<32>
	Mem50[0x00A6B158<p32>:word32] = 0x10001<32>
	Mem52[0x00A6B10C<p32>:word32] = Mem50[0x00A6B210<p32>:word32]
	Mem53[0x00A6B100<p32>:word32] = 0xC0000409<32>
	Mem54[0x00A6B104<p32>:word32] = 1<32>
	word32 eax_55 = Mem54[0x00A14188<p32>:word32]
	word32 eax_57 = Mem56[0x00A1418C<p32>:word32]
	word32 eax_59 = IsDebuggerPresent()
	Mem60[0x00A6B150<p32>:word32] = eax_59
	word32 esp_63
	word32 edx_66
	call crt_debugger_hook (retsize: 4;)
		uses: eax:eax_59,ecx:ecx,edx:edx,Stack +0004:1<32>,Stack +0008:eax_55,Stack +000C:eax_57,Stack +0010:dwLoc0324,Stack +0334:dwArg00
		defs: edx:edx_66,esp:esp_63
	word32 ecx_123 = Mem62[esp_63:word32]
	Mem72[esp_63:word32] = 0<32>
	SetUnhandledExceptionFilter(Mem72[esp_63:LPTOP_LEVEL_EXCEPTION_FILTER])
	Mem76[esp_63:word32] = 0x8CD010<32>
	word32 eax_77 = UnhandledExceptionFilter(Mem76[esp_63:(ptr32 (struct "_EXCEPTION_POINTERS"))])
	word32 esp_78 = esp_63 + 4<32>
	branch Mem76[0x00A6B150<p32>:word32] != 0<32> l00695555
l0069554D:
	Mem82[esp_63:word32] = 1<32>
	word32 esp_83
	call crt_debugger_hook (retsize: 4;)
		uses: eax:eax_77,ecx:ecx_69,edx:edx_66,Stack +0004:dwArg00,Stack +FFFFFCE0:dwLoc0324
		defs: esp:esp_83
	ecx_123 = Mem82[esp_83:word32]
	esp_78 = esp_83 + 4<i32>
l00695555:
	word32 esp_92 = esp_78 - 4<i32>
	Mem93[esp_92:word32] = 0xC0000409<32>
	Mem96[esp_92 - 4<i32>:word32] = GetCurrentProcess()
	word32 eax_97 = TerminateProcess(Mem96[esp_92 - 4<i32>:HANDLE], Mem96[esp_92:UINT])
	ecxOut = ecx_123
	return eax_97
l00694B96:
	ecxOut = ecx
	return eax
fn00694B8E_exit:


word32 fn00694BED(word32 ebx, word32 esi, word32 edi, ptr32 & ebxOut, ptr32 & ebpOut, ptr32 & esiOut, ptr32 & ediOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00694C8C
// MayUse:  ebx:[0..31] edi:[0..31] esi:[0..31] fs:[0..15]
// LiveOut: eax ebp ebx edi esi
// Trashed: SCZO eax ebp ebx ecx edi esi Top
// Preserved: esp
fn00694BED_entry:
l00694BED:
	word32 eax_111
	word32 esp_80
	word32 ebp_13 = fn0069557C(ebx, esi, edi, dwLoc0C, 0x14<32>)
	word32 eax_22 = _decode_pointer(Mem7[0x00A74B20<p32>:word32])
	Mem25[ebp_13 - 0x1C<32>:word32] = eax_22
	branch eax_22 != 0xFFFFFFFF<32> l00694C1C
l00694C1C:
	word32 esp_30
	call lock (retsize: 4;)
		uses: Stack +0004:8<32>
		defs: esp:esp_30
	word32 ecx_35 = Mem29[esp_30:word32]
	Mem38[ebp_13 - 4<32>:word32] = 0<32>
	Mem43[esp_30:word32] = Mem38[0x00A74B20<p32>:word32]
	Mem45[ebp_13 - 0x1C<32>:word32] = _decode_pointer(Mem43[esp_30:(ptr32 void)])
	Mem48[esp_30 - 4<i32>:word32] = Mem45[0x00A74B1C<p32>:word32]
	Mem50[ebp_13 - 0x20<32>:word32] = _decode_pointer(Mem48[esp_30 - 4<i32>:(ptr32 void)])
	Mem53[esp_30 - 8<i32>:word32] = ebp_13 - 0x20<32>
	Mem56[esp_30 - 12<i32>:word32] = ebp_13 - 0x1C<32>
	Mem59[esp_30 - 16<i32>:word32] = Mem56[ebp_13 + 8<32>:word32]
	word32 eax_60 = __dllonexit(Mem59[esp_30 - 16<i32>:_onexit_t], Mem59[esp_30 - 12<i32>:(ptr32 (ptr32 PVFV))], Mem59[esp_30 - 8<i32>:(ptr32 (ptr32 PVFV))])
	Mem61[ebp_13 - 0x24<32>:word32] = eax_60
	Mem64[esp_30 - 20<i32>:word32] = Mem61[ebp_13 - 0x1C<32>:word32]
	word32 esp_66
	word32 eax_67
	call encode_pointer (retsize: 4;)
		uses: eax:eax_60,ecx:ecx_35,Stack +FFFFFFF8:8<32>
		defs: eax:eax_67,esp:esp_66
	Mem71[0x00A74B20<p32>:word32] = eax_67
	Mem74[esp_66 - 4<i32>:word32] = Mem71[ebp_13 - 0x20<32>:word32]
	word32 esp_75
	word32 eax_76
	call encode_pointer (retsize: 4;)
		uses: Stack +FFFFFFF8:8<32>
		defs: eax:eax_76,esp:esp_75
	Mem82[0x00A74B1C<p32>:word32] = eax_76
	Mem83[ebp_13 - 4<32>:word32] = 0xFFFFFFFE<32>
	fn00694C83()
	esp_80 = esp_75 + 0x1C<32>
	eax_111 = Mem83[ebp_13 - 0x24<32>:word32]
l00694C10:
	eax_111 = _onexit(Mem25[ebp_13 + 8<32>:word32])
	esp_80 = fp - 8<i32>
l00694C7D:
	word32 ebp_96
	word32 edi_99
	word32 esi_100
	ebxOut = fn006955C1(ebp_13, Mem95[esp_80 + -4<i32>:word32], out ebp_96, out esi_100, out edi_99)
	ebpOut = ebp_96
	esiOut = esi_100
	ediOut = edi_99
	return eax_111
fn00694BED_exit:


void fn00694C83()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00694BED
// MayUse: 
// LiveOut:
// Trashed: ecx Top
// Preserved: esp
fn00694C83_entry:
l00694C83:
	call unlock (retsize: 4;)
		uses: Stack +0004:8<32>
	return
fn00694C83_exit:


word32 fn00694C8C(word32 ebx, word32 esi, word32 edi, ptr32 & ebpOut, ptr32 & esiOut, ptr32 & ediOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn004048C0
//      fn0043D330
//      fn0045E0B0
//      fn0046E360
//      fn005A74F0
//      fn00621380
//      fn006233B0
//      fn0081DDF0
// MayUse:  ebx:[0..31] edi:[0..31] esi:[0..31] fs:[0..15]
// LiveOut: ebp ebx edi esi
// Trashed: SCZO eax ebp ebx ecx edi esi Top
// Preserved: esp
fn00694C8C_entry:
l00694C8C:
	word32 ebp_13
	word32 ebx_14
	word32 edi_16
	word32 esi_17
	fn00694BED(ebx, esi, edi, out ebx_14, out ebp_13, out esi_17, out edi_16)
	ebpOut = ebp_13
	esiOut = esi_17
	ediOut = edi_16
	return ebx_14
fn00694C8C_exit:


DWORD Win32CrtStartup()
// stackDelta: 4; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cs:[0..15] ds:[0..15] ebx:[0..31] edi:[0..31] es:[0..15] esi:[0..31] fs:[0..15] gs:[0..15] ss:[0..15] xmm0:[0..127]
// LiveOut: eax
// Trashed: eax
// Preserved:
Win32CrtStartup_entry:
l00694FAA:
	fn00695766()
l00694CE9:
	word32 ebp_138 = fn0069557C(ebx, esi, edi, dwLoc0C, 0x58<32>)
	Mem26[ebp_138 - 0x1C<32>:word32] = 0<32>
	Mem27[ebp_138 - 4<32>:word32] = 0<32>
	GetStartupInfoA(ebp_138 - 0x68<32>)
	Mem32[ebp_138 - 4<32>:word32] = 0xFFFFFFFE<32>
	Mem33[ebp_138 - 4<32>:word32] = 1<32>
	word32 ebx_106 = 0<32>
	word32 esi_35 = Mem33[Mem33[fs:0x18<32>:word32] + 4<32>:word32]
	word32 edi_141 = 0xA74B14<32>
l00694D23:
	word32 dwLoc0C_439 = 0<32>
	word32 eax_46 = InterlockedCompareExchange(0xA74B14<32>, esi_35, 0<32>)
	branch eax_46 == 0<32> l00694D49
l00694D49:
l00694D31:
	branch eax_46 != esi_35 l00694D3C
l00694D3C:
	Sleep(0x3E8<32>)
l00694D35:
	ebx_106 = 1<32>
l00694D4C:
	branch Mem45[0x00A74B10<p32>:word32] != 1<32> l00694D5F
l00694D5F:
	word32 eax_330
	word32 esp_313
	branch Mem45[0x00A74B10<p32>:word32] != 0<32> l00694D88
l00694D88:
	Mem74[0x00A6B0F0<p32>:word32] = 1<32>
l00694D68:
	Mem75[0x00A74B10<p32>:word32] = 1<32>
	dwLoc0C_439 = 0x8A68E0<32>
	esp_313 = fp - 8<32>
	branch _initterm_e(0x8A68D4<32>, 0x8A68E0<32>) == 0<32> l00694D8E
l00694D8E:
	branch Mem89[0x00A74B10<p32>:word32] != 1<32> l00694DB2
l00694D97:
	_initterm(0x8A4A48<32>, 0x8A68D0<32>)
	Mem103[0x00A74B10<p32>:word32] = 2<32>
	dwLoc0C_439 = 0x8A68D0<32>
l00694DB2:
	branch ebx_106 != 0<32> l00694DBE
l00694DB6:
	InterlockedExchange(0xA74B14<32>, ebx_106)
	dwLoc0C_439 = ebx_106
l00694DBE:
	word32 esp_125 = fp - 8<32>
	branch Mem121[0x00A74B18<p32>:word32] == 0<32> l00694DE2
l00694DC7:
	dwLoc0C_439 = 0xA74B18<32>
	esp_125 = fp - 8<32>
	branch fn006956C2(ebx_106, 1<32>, 0xA74B14<32>, out ebx_106, out ebp_138, out edi_141) == 0<32> l00694DE2
l00694DD6:
	word32 edx_168
	call Mem158[0x00A74B18<p32>:word32] (retsize: 4;)
		uses: edx:edx_168,Stack +0004:0<32>,Stack +0008:2<32>,Stack +000C:0<32>
		defs: edx:edx_168,esp:esp_164
	dwLoc0C_439 = 0<32>
l00694DE2:
	word32 esi_172 = Mem171[acmdln:word32]
l00694DE9:
	Mem175[ebp_138 - 0x20<32>:word32] = esi_172
	byte al_176 = Mem175[esi_172:byte]
	branch al_176 >u 0x20<8> l00694E3E
l00694DF2:
	branch al_176 == 0<8> l00694DFC
l00694DF6:
	branch Mem175[ebp_138 - 0x1C<32>:word32] != 0<32> l00694E3E
l00694E3E:
	branch al_176 != 0x22<8> l00694E4D
l00694E42:
	Mem195[ebp_138 - 0x1C<32>:word32] = CONVERT(CONVERT(Mem175[ebp_138 - 0x1C<32>:word32] == 0<32>, bool, int8), int8, uint32)
l00694E4D:
	word32 eax_197 = CONVERT(al_176, byte, word32)
	Mem202[esp_125 - 4<i32>:word32] = eax_197
	word32 esp_217
	word32 eax_218
	word32 edx_221
	call ismbblead (retsize: 4;)
		uses: eax:eax_197,edx:edx_221,Stack +FFFFFFF8:dwLoc0C_462
		defs: eax:eax_218,edx:edx_221,esp:esp_217
	esp_125 = esp_217 + 4<i32>
	branch eax_218 == 0<32> l00694E60
l00694E5C:
	esi_172 = esi_172 + 1<32>
	Mem231[ebp_138 - 0x20<32>:word32] = esi_172
l00694E60:
	esi_172 = esi_172 + 1<32>
l00694DFC:
	byte al_237 = Mem236[esi_172:byte]
	branch al_237 == 0<8> l00694E0C
l00694E02:
	branch al_237 >u 0x20<8> l00694E0C
l00694E0C:
	word32 eax_253
	branch (Mem236[ebp_138 - 0x3C<32>:byte] & 1<8>) == 0<8> l00694E18
l00694E18:
	word32 esp_251 = esp_125 - 4<i32>
	Mem252[esp_251:word32] = 0xA<32>
	eax_253 = Mem252[esp_251:word32]
l00694E12:
	eax_253 = CONVERT(Mem236[ebp_138 - 0x38<32>:word16], word16, word32)
l00694E1B:
	word32 esp_257 = esp_125 - 4<i32>
	Mem259[esp_257:word32] = eax_253
	Mem263[esp_257 - 4<i32>:word32] = esi_172
	Mem265[esp_257 - 8<i32>:word32] = 0<32>
	Mem267[esp_257 - 12<i32>:word32] = 0x400000<32>
	word32 esp_302 = <invalid>
	word32 eax_295 = fn004014B0(ebx_106, esi_172, edi_141, es, ds, xmm0, Mem267[esp_257 - 12<i32>:word32], Mem267[esp_257 - 4<i32>:word32], Mem267[esp_257:word32], out ebp_138)
	Mem314[0x00A6B0EC<p32>:word32] = eax_295
	esp_313 = esp_302 + 0x10<32>
	branch Mem314[0x00A6B0E0<p32>:word32] != 0<32> l00694E92
l00694E92:
	branch Mem314[0x00A6B0F0<p32>:word32] != 0<32> l00694EA1
l00694E9B:
	word32 edx_326
	call cexit (retsize: 4;)
		uses: edx:edx_326,Stack +FFFFFFF8:dwLoc0C_462
		defs: edx:edx_326,esp:esp_322
l00694EA1:
	Mem329[ebp_138 - 4<32>:word32] = 0xFFFFFFFE<32>
	eax_330 = Mem329[0x00A6B0EC<p32>:word32]
l00694E37:
	Mem332[esp_302 + 0xC<32>:word32] = eax_295
	exit(Mem332[esp_302 + 0xC<32>:int32])
l00694E06:
	esi_172 = esi_172 + 1<32>
	Mem335[ebp_138 - 0x20<32>:word32] = esi_172
l00694D83:
l00694EB6:
	Mem338[ebp_138 - 4<32>:word32] = 0xFFFFFFFE<32>
	eax_330 = 0xFF<32>
l00694EC2:
	word32 ebp_346
	word32 edi_349
	word32 esi_350
	fn006955C1(ebp_138, Mem345[esp_313 + -4<i32>:word32], out ebp_346, out esi_350, out edi_349)
	return eax_330
Win32CrtStartup_exit:
l00694D55:
	_amsg_exit(0x1F<32>)


word32 fn00694FE0(word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0042ACF0
//      fn00626A30
//      fn00711700
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31] Stack +0010:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ecx edx Top
// Preserved: ebx esp
fn00694FE0_entry:
l00694FE0:
	branch (dwArg10 | dwArg08) != 0<32> l00694FF9
l00694FF9:
	word64 edx_eax_23 = dwArg0C *u64 dwArg04
	edxOut = SLICE(edx_eax_23, word32, 32) + SLICE(dwArg0C *u64 dwArg08 + dwArg10 *u64 dwArg04, word32, 0)
	return SLICE(edx_eax_23, word32, 0)
l00694FF0:
	word64 edx_eax_30 = dwArg0C *u64 dwArg04
	edxOut = SLICE(edx_eax_30, word32, 32)
	return SLICE(edx_eax_30, word32, 0)
fn00694FE0_exit:


word32 fn00695040(real64 rArg0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn007120F0
// MayUse:  FPU +0:[0..63]
// LiveOut: eax
// Trashed: SCZO eax ecx edx FPU +0 FPU -1 Top
// Preserved: ebp esp FPU +0
fn00695040_entry:
l00695040:
	branch Mem0[0x00A74B08<p32>:word32] == 0<32> l00695076
l00695076:
	__align(fp - 0x24<32>)
	int64 qwLoc14_90 = CONVERT(rArg0, real64, int64)
	word32 dwLoc14_92 = SLICE(qwLoc14_90, word32, 0)
	word32 dwLoc10_93 = SLICE(qwLoc14_90, word32, 32)
	real64 rLoc1_91 = CONVERT(qwLoc14_90, int64, real64)
	word32 edx_21 = CONVERT(rArg0, real64, real32)
	word32 eax_112 = dwLoc14_92
	branch dwLoc14_92 == 0<32> l006950D5
l006950D5:
	edx_21 = dwLoc10_93
	branch (dwLoc10_93 & 0x7FFFFFFF<32>) != 0<32> l00695099
l006950E1:
l00695099:
	real64 rArg0_98 = rArg0 - rLoc1_91
	branch edx_21 >= 0<32> l006950BD
l006950BD:
	eax_112 = dwLoc14_92 - (CONVERT(rArg0_98, real64, real32) <u 0x7FFFFFFF<32>)
l0069509F:
	eax_112 = dwLoc14_92 + ((CONVERT(rArg0_98, real64, real32) ^ 0x80000000<32>) <u 0x7FFFFFFF<32>)
l006950E9:
	return eax_112
l00695049:
	__align(fp - 0xC<32>)
	return CONVERT(rArg0, real64, int32)
fn00695040_exit:


word32 fn006951B0(word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0042ACF0
//      fn0042B310
//      fn00626A30
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31] Stack +0010:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ecx edx Top
// Preserved: ebx esi esp
fn006951B0_entry:
l006951B0:
	word32 eax_110
	word32 edx_114
	branch dwArg10 != 0<32> l006951D2
l006951D2:
	word32 ecx_15 = dwArg10
	word32 ebx_16 = dwArg0C
	word32 edx_17 = dwArg08
	word32 eax_18 = dwArg04
l006951E0:
	word32 ecx_20 = ecx_15 >>u 1<32>
	edx_17 = edx_17 >>u 1<32>
	ebx_16 = __rcr(ebx_16, 1<8>, SLICE(cond(ecx_20), bool, 1))
	eax_18 = __rcr(eax_18, 1<8>, SLICE(cond(edx_17), bool, 1))
	ecx_15 = ecx_20
	branch ecx_20 != 0<32> l006951E0
l006951EC:
	word32 eax_39 = CONVERT(SEQ(edx_17, eax_18) /u ebx_16, word32, uint32)
	word64 edx_eax_47 = eax_39 *u64 dwArg0C
	word32 esi_40 = eax_39
	word32 eax_55 = SLICE(edx_eax_47, word32, 0)
	word32 edx_49 = SLICE(edx_eax_47, word32, 32) + SLICE(dwArg10 *u64 eax_39, word32, 0)
	branch edx_49 <u 0<32> l0069520E
l00695200:
	branch edx_49 >u dwArg08 l0069520E
l00695206:
	branch edx_49 <u dwArg08 l0069520F
l00695208:
	branch eax_55 <=u dwArg04 l0069520F
l0069520E:
	esi_40 = eax_39 - 1<32>
l0069520F:
	edx_114 = 0<32>
	eax_110 = esi_40
l006951BA:
	word64 edx_eax_69 = CONVERT(dwArg08, word32, uint64)
	eax_110 = CONVERT(SEQ(CONVERT(edx_eax_69 % dwArg0C, word64, uint32), dwArg04) /u dwArg0C, word32, uint32)
	edx_114 = CONVERT(edx_eax_69 /u dwArg0C, word32, uint32)
l00695213:
	edxOut = edx_114
	return eax_110
fn006951B0_exit:


void fn006952A0(word32 eax, word32 dwArg00)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00737880
//      fn0082ABF0
// MayUse:  eax:[0..31] Stack +0000:[0..31]
// LiveOut: esp
// Trashed: SCZO eax esp Top
// Preserved: ecx
fn006952A0_entry:
l006952A0:
	word32 ecx_9 = fp - eax
	word32 ecx_14 = ecx_9 & ~(0<32> - (ecx_9 <u 0<32>))
	word32 eax_16 = fp - 4<i32> & 0xFFFFF000<32>
l006952B4:
	branch ecx_14 <u eax_16 l006952C2
l006952C2:
	eax_16 = eax_16 - 0x1000<32>
l006952B8:
	Mem35[ecx_14:word32] = dwArg00
	return
fn006952A0_exit:


word32 fn0069557C(word32 ebx, word32 esi, word32 edi, word32 dwArg00, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00694BED
//      Win32CrtStartup
//      fn006956C2
// MayUse:  ebx:[0..31] edi:[0..31] esi:[0..31] fs:[0..15] Stack +0000:[0..31] Stack +0008:[0..31]
// LiveOut: ebp
// Trashed: SCZO eax ebp Top
// Preserved: esp
fn0069557C_entry:
l0069557C:
	word32 esp_14 = fp - 8<i32> - dwArg08
	Mem17[esp_14 - 4<i32>:word32] = ebx
	Mem20[esp_14 - 8<i32>:word32] = esi
	Mem23[esp_14 - 12<i32>:word32] = edi
	Mem32[esp_14 - 16<i32>:word32] = Mem23[0x00A14188<p32>:word32] ^ fp + 8<32>
	Mem36[esp_14 - 20<i32>:word32] = dwArg00
	Mem41[fs:0<32>:word32] = fp - 8<32>
	return fp + 8<32>
fn0069557C_exit:


word32 fn006955C1(word32 ebp, word32 dwArg00, ptr32 & ebpOut, ptr32 & esiOut, ptr32 & ediOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00694BED
//      Win32CrtStartup
//      fn006956C2
// MayUse:  ebp:[0..31] fs:[0..15] Stack +0000:[0..31]
// LiveOut: ebp ebx edi esi
// Trashed: ebp ebx ecx edi esi esp Top
// Preserved:
fn006955C1_entry:
l006955C1:
	Mem8[fs:0x00000000<p32>:word32] = Mem0[ebp - 0x10<32>:word32]
	word32 ebp_19 = Mem8[ebp:word32]
	Mem22[ebp:word32] = dwArg00
	ebpOut = ebp_19
	esiOut = dwArg0C
	ediOut = dwArg08
	return dwArg10
fn006955C1_exit:


word32 fn00695650(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006956C2
// MayUse:  Stack +0004:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx Top
// Preserved: esp
fn00695650_entry:
l00695650:
	branch Mem0[dwArg04:word16] == 0x5A4D<16> l0069565E
l0069565E:
	word32 eax_9 = Mem0[dwArg04 + 0x3C<32>:word32] + dwArg04
	branch Mem0[eax_9:word32] != 0x4550<32> l0069565B
l0069566B:
	return CONVERT(CONVERT(Mem0[eax_9 + 0x18<32>:word16] == 0x10B<16>, bool, int8), int8, uint32)
l0069565B:
	return 0<32>
fn00695650_exit:


word32 fn00695680(word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006956C2
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx edx Top
// Preserved: ebx edi esi esp
fn00695680_entry:
l00695680:
	word32 ecx_7 = Mem0[dwArg04 + 0x3C<32>:word32] + dwArg04
	word32 esi_15 = CONVERT(Mem14[ecx_7 + 6<32>:word16], word16, word32)
	word32 edx_16 = 0<32>
	word32 eax_22 = CONVERT(Mem0[ecx_7 + 0x14<32>:word16], word16, word32) + 0x18<32> + ecx_7
	branch esi_15 <=u 0<32> l006956BC
l0069569E:
l006956A2:
	word32 ecx_28 = Mem21[eax_22 + 0xC<32>:word32]
	branch dwArg08 <u ecx_28 l006956B2
l006956A9:
	branch dwArg08 <u Mem21[eax_22 + 8<32>:word32] + ecx_28 l006956BE
l006956B2:
	edx_16 = edx_16 + 1<32>
	eax_22 = eax_22 + 0x28<32>
	branch edx_16 <u esi_15 l006956A2
l006956BC:
	eax_22 = 0<32>
l006956BE:
	return eax_22
fn00695680_exit:


word32 fn006956C2(word32 ebx, word32 esi, word32 edi, ptr32 & ebxOut, ptr32 & ebpOut, ptr32 & ediOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      Win32CrtStartup
// MayUse:  ebx:[0..31] edi:[0..31] esi:[0..31] fs:[0..15]
// LiveOut: eax ebp ebx edi
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn006956C2_entry:
l006956C2:
	word32 eax_59
	word32 ebp_13 = fn0069557C(ebx, esi, edi, dwLoc0C, 8<32>)
	Mem19[ebp_13 - 4<32>:word32] = 0<32>
	word32 dwLoc0C_84 = 0x400000<32>
	branch fn00695650(0x400000<32>) == 0<32> l0069571F
l006956E2:
	word32 eax_36 = Mem24[ebp_13 + 8<32>:word32]
	dwLoc0C_84 = eax_36 - 0x400000<32>
	word32 eax_43 = fn00695680(0x400000<32>, eax_36 - 0x400000<32>)
	branch eax_43 == 0<32> l0069571F
l0069571F:
	Mem58[ebp_13 - 4<32>:word32] = 0xFFFFFFFE<32>
	eax_59 = 0<32>
l006956F4:
	eax_59 = ~(Mem42[eax_43 + 0x24<32>:word32] >>u 0x1F<32>) & 1<32>
	Mem68[ebp_13 - 4<32>:word32] = 0xFFFFFFFE<32>
l00695728:
	word32 ebp_75
	word32 edi_78
	word32 esi_107
	ebxOut = fn006955C1(ebp_13, dwLoc0C_84, out ebp_75, out esi_107, out edi_78)
	ebpOut = ebp_75
	ediOut = edi_78
	return eax_59
fn006956C2_exit:


void fn00695766()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      Win32CrtStartup
// MayUse: 
// LiveOut:
// Trashed: SCZO eax Top
// Preserved: ebp ebx edi esi esp
fn00695766_entry:
l00695766:
	word32 eax_9 = Mem6[0x00A14188<p32>:word32]
	branch eax_9 == 0xBB40E64E<32> l00695796
l00695789:
	branch (eax_9 & 0xFFFF0000<32>) == 0<32> l00695796
l00695796:
	GetSystemTimeAsFileTime(fp - 0xC<32>)
	word32 esi_46 = GetCurrentProcessId() ^ GetCurrentThreadId() ^ GetTickCount()
	QueryPerformanceCounter(fp - 0x14<32>)
	word32 esi_54 = esi_46 ^ (dwLoc10 ^ dwLoc14)
	branch esi_54 != 0xBB40E64E<32> l006957DC
l006957DC:
	branch (esi_54 & 0xFFFF0000<32>) != 0<32> l006957E7
l006957E0:
	esi_54 = esi_54 | esi_54 << 0x10<32>
l006957D5:
	esi_54 = 0xBB40E64F<32>
l006957E7:
	Mem69[0x00A14188<p32>:word32] = esi_54
	Mem71[0x00A1418C<p32>:word32] = ~esi_54
l0069578D:
	Mem76[0x00A1418C<p32>:word32] = ~eax_9
l006957F6:
	return
fn00695766_exit:


void fn00697A30(word32 dwArg04, word32 dwArg08, word32 dwArg0C)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn005A5950
//      fn00697E60
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut:
// Trashed: SCZO eax ecx edx Top
// Preserved: esi esp
fn00697A30_entry:
l00697A30:
	word32 ecx_30 = dwArg08
	branch dwArg08 <=u 0<32> l00697A66
l00697A38:
	word32 eax_11 = dwArg04
l00697A41:
	branch eax_11 == 0<32> l00697A5B
l00697A45:
	Mem22[eax_11:word32] = Mem20[dwArg0C:word32]
	Mem24[eax_11 + 4<32>:word32] = Mem22[dwArg0C + 4<32>:word32]
	Mem26[eax_11 + 8<32>:word32] = Mem24[dwArg0C + 8<32>:word32]
	Mem28[eax_11 + 0xC<32>:word32] = Mem26[dwArg0C + 0xC<32>:word32]
l00697A5B:
	ecx_30 = ecx_30 - 1<32>
	eax_11 = eax_11 + 0x10<32>
	branch ecx_30 >u 0<32> l00697A41
l00697A65:
l00697A66:
	return
fn00697A30_exit:


word32 fn00697E60(word32 dwArg04, word32 dwArg08, word32 dwArg0C)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn005A5370
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx edx Top
// Preserved: edi esi esp
fn00697E60_entry:
l00697E60:
	fn00697A30(dwArg04, dwArg08, dwArg0C)
	return (dwArg08 << 4<32>) + dwArg04
fn00697E60_exit:


