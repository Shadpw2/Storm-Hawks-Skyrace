word32 fn006E1110(ptr32 & ecxOut, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E8730
//      fn006E8D90
//      fn006F3930
//      fn006F6AF0
//      fn006F8440
//      fn006F8960
//      fn006F8C70
//      fn00703B60
//      fn00704040
//      fn007040D0
//      fn00704BA0
//      fn00704DA0
//      fn00704E40
//      fn00707BD0
//      fn007081C0
//      fn00708210
//      fn00708C10
//      fn00708DC0
//      fn00720070
//      fn0073B870
//      fn00747FD0
//      fn0074E980
// MayUse: 
// LiveOut: eax ecx edx
// Trashed: SCZO eax ecx Top
// Preserved: esp
fn006E1110_entry:
l006E1110:
	word32 ecx_14
	word32 edx_30
	word32 eax_13 = fn006E0FD0(Mem0[Mem0[0x00A6D67C<p32>:word32] + 0x28<32>:word32], dwArg04, out ecx_14, out edx_30)
	ecxOut = ecx_14
	edxOut = <invalid>
	return eax_13
fn006E1110_exit:


word32 fn006E1130(word32 dwArg04, word32 dwArg08, word32 dwArg0C)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00657140
//      fn006DDFE0
//      fn006E7CE0
//      fn006E8430
//      fn006E8D90
//      fn006FBCC0
//      fn007040D0
//      fn00708590
//      fn007086B0
//      fn00708C10
//      fn00708DC0
//      fn00716A00
//      fn0073B3D0
//      fn0073B4E0
//      fn0073B870
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut: edx
// Trashed: SCZO eax ecx edx Top
// Preserved: esp
fn006E1130_entry:
l006E1130:
	word32 eax_5 = Mem0[0x00A6D67C<p32>:word32]
	Mem8[dwArg04:word32] = Mem0[eax_5 + 0x28<32>:word32]
	Mem11[dwArg08:word32] = Mem8[eax_5 + 0x2C<32>:word32]
	Mem14[dwArg0C:word32] = Mem11[eax_5 + 0x30<32>:word32]
	Mem18[eax_5 + 0x28<32>:word32] = 0<32>
	Mem19[eax_5 + 0x2C<32>:word32] = 0<32>
	Mem20[eax_5 + 0x30<32>:word32] = 0<32>
	return dwArg0C
fn006E1130_exit:


word32 fn006E1160(ptr32 & ecxOut, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0042DF20
//      fn00657140
//      fn006DC1B0
//      fn006DE3F0
//      fn006DF7C0
//      fn006DF870
//      fn006E1780
//      fn006E1DE0
//      fn006E5710
//      fn006E8060
//      fn006E8730
//      fn006E8D90
//      fn006EC890
//      fn006F3930
//      fn006F6490
//      fn006F6AF0
//      fn006F8440
//      fn006F8960
//      fn006F8C70
//      fn006F9120
//      fn006FBCC0
//      fn006FE400
//      fn00702C30
//      fn00703B60
//      fn00703D00
//      fn00704040
//      fn00704BA0
//      fn00704E40
//      fn00708210
//      fn00708410
//      fn00708C10
//      fn00708DC0
//      fn00716A00
//      fn00726570
//      fn00726760
//      fn0072F830
//      fn00731A20
//      fn0073B2B0
//      fn0073B310
//      fn0073B3D0
//      fn0074E980
//      fn0074F9E0
//      fn00753A60
//      fn00754FD0
// MayUse: 
// LiveOut: eax ecx edx
// Trashed: SCZO eax ecx edx Top
// Preserved: edi esi esp
fn006E1160_entry:
l006E1160:
	word32 eax_30 = Mem0[0x00A6D67C<p32>:word32]
	word32 ecx_100 = Mem0[eax_30 + 0x28<32>:word32]
	word32 esi_12 = Mem11[eax_30 + 0x2C<32>:word32]
	word32 edi_16 = Mem15[eax_30 + 0x30<32>:word32]
	Mem17[eax_30 + 0x28<32>:word32] = 0<32>
	Mem18[eax_30 + 0x2C<32>:word32] = 0<32>
	Mem19[eax_30 + 0x30<32>:word32] = 0<32>
	word32 esp_13 = fp - 8<i32>
	branch ecx_100 == 0<32> l006E119A
l006E1189:
	word32 v10_21 = Mem19[ecx_100:word32] + 0xFFFFFFFF<32>
	Mem22[ecx_100:word32] = v10_21
	branch v10_21 != 0<32> l006E119A
l006E118E:
	word32 eax_25 = Mem22[ecx_100 + 4<32>:word32]
	word32 esp_29
	call Mem27[eax_25 + 0x18<32>:word32] (retsize: 4;)
		uses: eax:eax_25,edx:edx_32,Stack +0004:ecx_6
		defs: eax:eax_30,ecx:ecx_31,edx:edx_32,esp:esp_29
	esp_13 = esp_29 + 4<32>
l006E119A:
	branch esi_12 == 0<32> l006E11AF
l006E119E:
	word32 v12_42 = Mem41[esi_12:word32] + 0xFFFFFFFF<32>
	Mem43[esi_12:word32] = v12_42
	branch v12_42 != 0<32> l006E11AF
l006E11A3:
	word32 edx_46 = Mem43[esi_12 + 4<32>:word32]
	word32 eax_47 = Mem43[edx_46 + 0x18<32>:word32]
	Mem50[esp_13 - 4<i32>:word32] = esi_12
	word32 esp_53
	call eax_47 (retsize: 4;)
		uses: edx:edx_46
		defs: eax:eax_54,ecx:ecx_55,edx:edx_56,esp:esp_53
	esp_13 = esp_53 + 4<32>
l006E11AF:
	branch edi_16 == 0<32> l006E11C4
l006E11B3:
	word32 v14_66 = Mem65[edi_16:word32] + 0xFFFFFFFF<32>
	Mem67[edi_16:word32] = v14_66
	branch v14_66 != 0<32> l006E11C4
l006E11B8:
	word32 ecx_70 = Mem67[edi_16 + 4<32>:word32]
	word32 edx_71 = Mem67[ecx_70 + 0x18<32>:word32]
	Mem74[esp_13 - 4<i32>:word32] = edi_16
	call edx_71 (retsize: 4;)
		uses: ecx:ecx_70,edx:edx_80
		defs: eax:eax_78,ecx:ecx_79,edx:edx_80
l006E11C4:
	ecxOut = ecx_100
	edxOut = edx
	return eax_30
fn006E1160_exit:


word32 fn006E11D0(ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006FF3E0
//      fn00717280
//      fn00718B50
//      fn0071A550
//      fn0071A7D0
//      fn0071AAE0
//      fn0071FB20
//      fn0074EB10
// MayUse: 
// LiveOut: ecx edx
// Trashed: SCZO eax ecx edi edx esi Top
// Preserved: esp
fn006E11D0_entry:
l006E11D0:
	word32 edi_10 = Mem9[0x00A16B7C<p32>:word32]
	word32 ecx_78
	word32 edx_46
	word32 eax_14 = fn006ECAC0(0x8D1F60<32>, out ecx_78, out edx_46)
	word32 edx_79
	word32 ecx_24
	fn006E0E90(edi_10, eax_14, out ecx_24, out edx_79)
	branch eax_14 == 0<32> l006E1203
l006E11F2:
	word32 v10_34 = Mem22[eax_14:word32] + 0xFFFFFFFF<32>
	Mem35[eax_14:word32] = v10_34
	branch v10_34 != 0<32> l006E1203
l006E11F7:
	word32 eax_38 = Mem35[eax_14 + 4<32>:word32]
	call Mem35[eax_38 + 0x18<32>:word32] (retsize: 4;)
		uses: eax:eax_38,Stack +0004:eax_14
		defs: ecx:ecx_44,edx:edx_46
l006E1203:
	edxOut = edx_46
	return ecx_24
fn006E11D0_exit:


word32 fn006E1210(ptr32 & ecxOut, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006DDD30
//      fn006DDD50
//      fn006DDD80
//      fn006DFD20
//      fn006E8430
//      fn006EA9D0
//      fn006EC4F0
//      fn006EC9B0
//      fn006ECAC0
//      fn006F1AA0
//      fn006F2090
//      fn006F2590
//      fn006F2650
//      fn006F31C0
//      fn006FBB90
//      fn006FEEB0
//      fn006FEF90
//      fn006FF010
//      fn00704BA0
//      fn00705050
//      fn007105C0
//      fn00710690
//      fn00710CB0
//      fn00711280
//      fn00711330
//      fn00711400
//      fn00711F50
//      fn007120F0
//      fn00717680
//      fn00717740
//      fn007189B0
//      fn00726840
//      fn00727340
//      fn00727380
//      fn007273D0
//      fn00727420
//      fn007279E0
//      fn00727D50
//      fn00728650
//      fn007286D0
//      fn00728E40
//      fn00729300
//      fn00729810
//      fn00729F50
//      fn0072CC90
//      fn0072CEE0
//      fn0072D130
//      fn0072D3D0
//      fn0072DD60
//      fn007331D0
//      fn007367D0
//      fn00737F70
//      fn00740CC0
//      fn00740DC0
//      fn00742E70
//      fn00742EA0
//      fn00742ED0
//      fn00742F20
//      fn00742FB0
//      fn00743020
//      fn00743060
//      fn007430A0
//      fn00743100
//      fn007431B0
//      fn00743200
//      fn00743290
//      fn00743300
//      fn00743370
//      fn007433E0
//      fn00743430
//      fn00743480
//      fn007434C0
//      fn00743520
//      fn00743560
//      fn007435D0
//      fn00743640
//      fn00743680
//      fn007436E0
//      fn00743710
//      fn00743740
//      fn00743770
//      fn007437D0
//      fn00743880
//      fn00743900
//      fn00743980
//      fn00743A30
//      fn00743A70
//      fn00743AD0
//      fn00743B30
//      fn00743B70
//      fn00743BE0
//      fn00743C60
//      fn00743CC0
//      fn00743D20
//      fn00743D80
//      fn00743E30
//      fn00743EE0
//      fn00743F60
//      fn00743FC0
//      fn00744020
//      fn00744050
//      fn00744090
//      fn007440C0
//      fn00744110
//      fn00744180
//      fn007441C0
//      fn00744200
//      fn00744270
//      fn00752DC0
//      fn00752E30
// MayUse: 
// LiveOut: eax ecx edx
// Trashed: SCZO eax ecx edx Top
// Preserved: esp
fn006E1210_entry:
l006E1210:
	word32 ecx_15
	word32 edx_16
	branch fn006E0FD0(Mem0[Mem0[0x00A6D67C<p32>:word32] + 0x28<32>:word32], Mem0[0x00A188A8<p32>:word32], out ecx_15, out edx_16) != 0<32> l006E1256
l006E122C:
	word32 eax_22 = Mem11[0x00A6C578<p32>:word32]
	branch eax_22 == 0<32> l006E1248
l006E1248:
	ecx_15 = fn006E0F10(Mem11[0x00A188A8<p32>:word32], out edx_16)
l006E1256:
	ecxOut = ecx_15
	edxOut = edx_16
	return <invalid>
l006E1235:
	word32 ecx_47
	word32 edx_48
	fn006E0E90(Mem11[0x00A188A8<p32>:word32], eax_22, out ecx_47, out edx_48)
	ecxOut = ecx_47
	edxOut = edx_48
	return <invalid>
fn006E1210_exit:


void fn006E1260(word32 ebx, word32 ebp, word32 esi, word32 edi, selector es, selector ds, word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E13F0
// MayUse:  cs:[0..15] ds:[0..15] ebp:[0..31] ebx:[0..31] edi:[0..31] es:[0..15] esi:[0..31] fs:[0..15] gs:[0..15] ss:[0..15] Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut:
// Trashed: SCZDOP eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn006E1260_entry:
l006E1260:
	word32 eax_7 = Mem0[0x00A14188<p32>:word32] ^ fp - 0x24<32>
	word32 esi_23 = Mem21[_errno():word32]
	branch esi_23 != 4<32> l006E12A7
l006E12A7:
	branch esi_23 != 0<32> l006E12B2
l006E12B2:
	branch esi_23 <= 0<32> l006E12C9
l006E12AB:
l006E1289:
	word32 edx_35
	word32 ebx_417
	word32 ebp_418
	word32 esi_419
	word32 edi_420
	branch fn0072EC10(out edx_35, out ebx_417, out ebp_418, out esi_419, out edi_420) == 0<32> l006E12B4
l006E12B4:
	branch esi_23 >= Mem26[__sys_nerr():word32] l006E12C9
l006E12C9:
	word32 eax_66 = FormatMessageA(0x1300<32>, 0<32>, esi_23, 0x400<32>, fp - 0x24<32>, 0<32>, 0<32>) + 0xFFFFFFFF<32>
	branch eax_66 != 0<32> l006E1304
l006E1304:
	branch eax_66 <= 0<32> l006E1329
l006E130E:
l006E1311:
	byte cl_78 = Mem77[eax_66 + 0<32>:byte]
	branch cl_78 <= 0x20<8> l006E131E
l006E1319:
	branch cl_78 != 0x2E<8> l006E1329
l006E131E:
	eax_66 = eax_66 - 1<32>
	Mem90[eax_66:byte] = 0<8>
	branch eax_66 > 1<32> l006E1311
l006E12E6:
	sprintf(fp - 0x20<32>, 0x8D1F94<32>, esi_23)
l006E12BE:
	__sys_errlist()
l006E1329:
	word32 eax_135
	branch dwArg08 == 0<32> l006E133F
l006E133F:
	word32 esi_423
	word32 edx_422
	eax_135 = fn006EA200(out edx_422, out esi_423)
l006E132D:
	word32 edx_424
	word32 esi_425
	eax_135 = fn006EA200(out edx_424, out esi_425)
l006E134E:
	branch eax_135 == 0<32> l006E1373
l006E1354:
	word32 ecx_427
	word32 edx_428
	fn006E0E90(dwArg04, eax_135, out ecx_427, out edx_428)
	word32 v15_178 = Mem169[eax_135:word32] + 0xFFFFFFFF<32>
	Mem179[eax_135:word32] = v15_178
	branch v15_178 != 0<32> l006E1373
l006E1367:
	word32 eax_182 = Mem179[eax_135 + 4<32>:word32]
	call Mem179[eax_182 + 0x18<32>:word32] (retsize: 4;)
		uses: eax:eax_182,Stack +0004:eax_158,Stack +000C:dwArg08,Stack +0040:dwArg04,Stack +0044:dwArg08
l006E1373:
	LocalFree(0<32>)
	word32 ecx_426
	fn00694B8E(0<32>, eax_7 ^ fp - 0x24<32>, 0<32>, ebx, ebp, esi, edi, es, ds, ebx, out ecx_426)
	return
l006E1292:
	word32 ecx_421
	fn00694B8E(0<32>, eax_7 ^ fp - 36<i32>, edx_35, ebx, ebp, esi, edi, es, ds, ebx, out ecx_421)
	return
fn006E1260_exit:


void fn006E13F0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006DEEA0
// MayUse: 
// LiveOut:
// Trashed: SCZO eax Top
// Preserved: esp
fn006E13F0_entry:
l006E13F0:
	fn006E1260(ebx, ebp, esi, edi, es, ds, dwArg04, 0<32>)
	return
fn006E13F0_exit:


word32 fn006E1400(word32 ebx, word32 ebp, word32 esi, word32 edi, selector es, selector ds, word32 dwArg04, word32 dwArg08, word32 dwArg0C, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E1520
// MayUse:  cs:[0..15] ds:[0..15] ebp:[0..31] ebx:[0..31] edi:[0..31] es:[0..15] esi:[0..31] fs:[0..15] gs:[0..15] ss:[0..15] Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut: ecx edx
// Trashed: SCZDOP eax ecx edx Top
// Preserved: ebp ebx edi esi esp
fn006E1400_entry:
l006E1400:
	word32 eax_7 = Mem0[0x00A14188<p32>:word32] ^ fp - 0x24<32>
	word32 esi_26 = dwArg08
	branch dwArg08 != 0<32> l006E142E
l006E1426:
	esi_26 = GetLastError()
l006E142E:
	word32 eax_48 = FormatMessageA(0x1300<32>, 0<32>, esi_26, 0x400<32>, fp - 0x24<32>, 0<32>, 0<32>) + 0xFFFFFFFF<32>
	branch eax_48 != 0<32> l006E1469
l006E1469:
	branch eax_48 <= 0<32> l006E148E
l006E1473:
l006E1476:
	byte cl_60 = Mem59[eax_48 + 0<32>:byte]
	branch cl_60 <= 0x20<8> l006E1483
l006E147E:
	branch cl_60 != 0x2E<8> l006E148E
l006E1483:
	eax_48 = eax_48 - 1<32>
	Mem72[eax_48:byte] = 0<8>
	branch eax_48 > 1<32> l006E1476
l006E144B:
	sprintf(fp - 0x20<32>, 0x8D1F94<32>, esi_26)
l006E148E:
	word32 eax_113
	branch dwArg0C == 0<32> l006E14A4
l006E14A4:
	word32 edx_343
	word32 esi_344
	eax_113 = fn006EA200(out edx_343, out esi_344)
l006E1492:
	word32 edx_345
	word32 esi_346
	eax_113 = fn006EA200(out edx_345, out esi_346)
l006E14B3:
	branch eax_113 == 0<32> l006E14D8
l006E14B9:
	word32 edx_348
	word32 ecx_347
	fn006E0E90(dwArg04, eax_113, out ecx_347, out edx_348)
	word32 v16_156 = Mem147[eax_113:word32] + 0xFFFFFFFF<32>
	Mem157[eax_113:word32] = v16_156
	branch v16_156 != 0<32> l006E14D8
l006E14CC:
	word32 eax_160 = Mem157[eax_113 + 4<32>:word32]
	call Mem157[eax_160 + 0x18<32>:word32] (retsize: 4;)
		uses: eax:eax_160,Stack +0004:eax_136,Stack +000C:dwArg08,Stack +0010:dwArg0C,Stack +0040:dwArg04,Stack +0044:dwArg08,Stack +0048:dwArg0C
l006E14D8:
	LocalFree(0<32>)
	word32 ecx_238
	fn00694B8E(0<32>, eax_7 ^ fp - 0x24<32>, 0<32>, ebx, ebp, esi, edi, es, ds, ebx, out ecx_238)
	edxOut = 0<32>
	return ecx_238
fn006E1400_exit:


word32 fn006E1520(word32 dwArg04, word32 dwArg08, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0071A870
//      fn0071A9F0
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: ecx edx
// Trashed: SCZO ecx edi edx esi Top
// Preserved: esp
fn006E1520_entry:
l006E1520:
	word32 esi_15
	branch dwArg08 == 0<32> l006E1537
l006E1537:
	esi_15 = 0<32>
l006E152A:
	word32 edx_115
	word32 ecx_114
	esi_15 = fn006ECAC0(dwArg08, out ecx_114, out edx_115)
l006E1539:
	word32 edx_45
	word32 ecx_44 = fn006E1400(ebx, ebp, esi_15, edi, es, ds, Mem30[0x00A17458<p32>:word32], dwArg04, dwArg08, out edx_45)
	branch esi_15 == 0<32> l006E1565
l006E1554:
	word32 v11_53 = Mem39[esi_15:word32] + 0xFFFFFFFF<32>
	Mem54[esi_15:word32] = v11_53
	branch v11_53 != 0<32> l006E1565
l006E1559:
	word32 edx_57 = Mem54[esi_15 + 4<32>:word32]
	call Mem54[edx_57 + 0x18<32>:word32] (retsize: 4;)
		uses: edx:edx_57,Stack +0004:esi_34,Stack +000C:dwArg08,Stack +0014:dwArg04,Stack +0018:dwArg08
		defs: ecx:ecx_63,edx:edx_64
l006E1565:
	edxOut = edx_45
	return ecx_44
fn006E1520_exit:


word32 fn006E15D0(word32 dwArg04, word32 dwArg08, ptr32 & ecxOut, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00657140
//      fn006DDEB0
//      fn006DE2E0
//      fn006DE330
//      fn006DE430
//      fn006E1DC0
//      fn006E5AD0
//      fn006E5C00
//      fn006E7660
//      fn006E9FA0
//      fn006EA420
//      fn006EA9D0
//      fn006F2090
//      fn006F62D0
//      fn006F6490
//      fn006F66E0
//      fn006F6730
//      fn006F68F0
//      fn006F6D50
//      fn006F6EA0
//      fn006F7890
//      fn006F8050
//      fn006F82C0
//      fn006F8AD0
//      fn006F9540
//      fn00701800
//      fn00701D30
//      fn007020D0
//      fn00702130
//      fn00702190
//      fn007021F0
//      fn00702250
//      fn007022B0
//      fn00702310
//      fn007023D0
//      fn00702450
//      fn007024B0
//      fn00702510
//      fn007025E0
//      fn007027D0
//      fn00702910
//      fn00702970
//      fn007029D0
//      fn00702AF0
//      fn00702C30
//      fn00703120
//      fn00703180
//      fn00703210
//      fn00703300
//      fn00703390
//      fn00703420
//      fn00703520
//      fn00703690
//      fn00703710
//      fn007038E0
//      fn00704220
//      fn00704300
//      fn00704400
//      fn007044F0
//      fn00704560
//      fn00704610
//      fn00704B00
//      fn00704E40
//      fn00706DC0
//      fn00707020
//      fn007072E0
//      fn00707810
//      fn00707950
//      fn00707BD0
//      fn007081C0
//      fn007083E0
//      fn00708DC0
//      fn0070B600
//      fn007120F0
//      fn00717CB0
//      fn00719F20
//      fn0071FB20
//      fn0071FEB0
//      fn00720070
//      fn007251F0
//      fn00726570
//      fn00726760
//      fn00727C90
//      fn00728420
//      fn0072B830
//      fn0072BDC0
//      fn0072E660
//      fn0073BBE0
//      fn0073BE10
//      fn0073BF20
//      fn0073C870
//      fn0073CAE0
//      fn0073E050
//      fn0073E590
//      fn0073E7A0
//      fn0073EF40
//      fn0073F160
//      fn0073F220
//      fn0073F2C0
//      fn0073F5B0
//      fn0073F690
//      fn0073FC30
//      fn00740160
//      fn00747610
//      fn00748190
//      fn0074EB10
//      fn0074EFB0
//      fn0074F9E0
//      fn00752B30
//      fn00753250
//      fn007537F0
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax ecx edx
// Trashed: SCZO eax ecx edx Top
// Preserved: esi esp
fn006E15D0_entry:
l006E15D0:
	word32 eax_16 = fn006F1AA0(dwArg08, fp + 0xC<32>)
	word32 ecx_27
	word32 edx_28
	fn006E0E90(dwArg04, eax_16, out ecx_27, out edx_28)
	branch eax_16 == 0<32> l006E1605
l006E15F4:
	word32 v11_37 = Mem25[eax_16:word32] + 0xFFFFFFFF<32>
	Mem38[eax_16:word32] = v11_37
	branch v11_37 != 0<32> l006E1605
l006E15F9:
	word32 eax_41 = Mem38[eax_16 + 4<32>:word32]
	call Mem38[eax_41 + 0x18<32>:word32] (retsize: 4;)
		uses: eax:eax_41,Stack +0004:eax_16,Stack +000C:dwArg08,Stack +0010:dwArg04,Stack +0014:dwArg08
		defs: ecx:ecx_46,edx:edx_48
l006E1605:
	ecxOut = ecx_27
	edxOut = edx_28
	return 0<32>
fn006E15D0_exit:


word32 fn006E1780()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006FE160
//      fn006FE400
// MayUse: 
// LiveOut: ecx
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn006E1780_entry:
l006E1780:
	word32 eax_6 = Mem0[0x00A6D67C<p32>:word32]
	word32 ebp_13 = Mem12[eax_6 + 0x30<32>:word32]
	word32 esi_17 = Mem16[eax_6 + 0x28<32>:word32]
	word32 edi_24 = Mem23[eax_6 + 0x2C<32>:word32]
	Mem29[eax_6 + 0x28<32>:word32] = 0<32>
	Mem30[eax_6 + 0x2C<32>:word32] = 0<32>
	Mem31[eax_6 + 0x30<32>:word32] = 0<32>
	word32 edx_610
	word32 ecx_34
	word32 eax_33 = fn00715DD0(out ecx_34, out edx_610)
	word32 esp_361 = fp - 0x18<32>
	branch eax_33 == 0<32> l006E1920
l006E17BF:
	word32 edx_611
	word32 esi_612
	word32 edi_613
	fn00731D30(0x8D1FF8<32>, eax_33, out edx_611, out esi_612, out edi_613)
	word32 esp_300 = fp - 0x18<32>
	branch esi_17 == 0<32> l006E18F5
l006E17D5:
	word32 eax_57 = Mem46[esi_17 + 4<32>:word32]
	word32 edi_101 = 0<32>
	branch eax_57 == 0xA1E968<32> l006E182E
l006E17E1:
	branch eax_57 == 0xA15380<32> l006E17FA
l006E17E8:
	word32 ecx_635
	word32 edx_636
	branch fn006D5670(eax_57, 0xA15380<32>, out ecx_635, out edx_636) == 0<32> l006E180D
l006E17FA:
	word32 ecx_633
	word32 edx_634
	branch fn006D5670(esi_17, Mem78[0x00A169F0<p32>:word32], out ecx_633, out edx_634) != 0<32> l006E182E
l006E182E:
	branch Mem98[esi_17 + 4<32>:word32] != 0xA1E968<32> l006E183F
l006E183F:
	edi_101 = Mem98[esi_17 + 0xC<32>:word32]
l006E1837:
	edi_101 = Mem98[esi_17 + 0x10<32>:word32] + 0x14<32>
l006E180D:
	word32 eax_107 = Mem106[esi_17 + 4<32>:word32]
	branch eax_107 == 0xA1B450<32> l006E1829
l006E1817:
	word32 edx_638
	word32 ecx_637
	branch fn006D5670(eax_107, 0xA1B450<32>, out ecx_637, out edx_638) == 0<32> l006E1859
l006E1829:
	edi_101 = esi_17 + 0x14<32>
l006E1842:
	branch edi_101 == 0<32> l006E1859
l006E1846:
	word32 eax_139 = strrchr(edi_101, 0x2E<32>)
	branch eax_139 == 0<32> l006E1859
l006E1856:
	edi_101 = eax_139 + 1<32>
l006E1859:
	word32 edi_640
	word32 edx_639
	word32 eax_174 = fn006DF760(esi_17, 0x8C8598<32>, out edx_639, out edi_640)
	branch eax_174 != 0<32> l006E187D
l006E187D:
	word32 ecx_641
	word32 edx_642
	word32 esi_643
	word32 eax_187 = fn006ECC50(eax_174, out ecx_641, out edx_642, out esi_643)
	branch eax_187 == 0<32> l006E189F
l006E188A:
	word32 esi_653
	word32 edi_654
	word32 edx_652
	fn00731D30(eax_187, eax_33, out edx_652, out esi_653, out edi_654)
	word32 edx_655
	word32 esi_656
	word32 edi_657
	fn00731D30(0x8A6990<32>, eax_33, out edx_655, out esi_656, out edi_657)
l006E186D:
	word32 edx_644
	word32 esi_645
	word32 edi_646
	fn00731D30(0x8BF7CC<32>, eax_33, out edx_644, out esi_645, out edi_646)
l006E189F:
	branch edi_101 != 0<32> l006E18AB
l006E18AB:
l006E18A4:
l006E18AC:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 stackArg8 = <invalid>
	word32 edx_649
	word32 esi_650
	word32 edi_651
	fn00731D30(stackArg4, stackArg8, out edx_649, out esi_650, out edi_651)
	branch edi_24 == 0<32> l006E18DB
l006E18BC:
	branch edi_24 == 0xA163B8<32> l006E18DB
l006E18C4:
	word32 edx_658
	word32 esi_659
	word32 edi_660
	fn00731D30(0x8BAE70<32>, eax_33, out edx_658, out esi_659, out edi_660)
	word32 edx_661
	word32 ebx_662
	word32 esi_663
	fn00731B10(edi_24, es, ds, edi_24, eax_33, 0<32>, out edx_661, out ebx_662, out esi_663)
l006E18DB:
	esp_300 = fp - 0x18<32>
	branch eax_174 == 0<32> l006E18F1
l006E18DF:
	word32 v17_294 = Mem293[eax_174:word32] + 0xFFFFFFFF<32>
	Mem295[eax_174:word32] = v17_294
	branch v17_294 != 0<32> l006E18F1
l006E18E5:
	word32 ecx_298 = Mem295[eax_174 + 4<32>:word32]
	word32 esp_307
	call Mem295[ecx_298 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_298,Stack +0004:eax_174
		defs: esp:esp_307
	esp_300 = esp_307 + 4<32>
l006E18F1:
	ebp_13 = Mem316[esp_300 + 0x14<32>:word32]
l006E18F5:
	word32 esp_319 = esp_300 - 4<i32>
	Mem322[esp_319:word32] = eax_33
	Mem324[esp_319 - 4<i32>:word32] = 0x8D1FF0<32>
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 stackArg8 = <invalid>
	word32 edx_616
	word32 esi_617
	word32 edi_618
	fn00731D30(stackArg4, stackArg8, out edx_616, out esi_617, out edi_618)
	word32 eax_338 = Mem324[esp_319 + 0x20<32>:word32]
	Mem340[esp_319 - 8<i32>:word32] = 0<32>
	Mem342[esp_319 - 12<i32>:word32] = eax_33
	Mem344[esp_319 - 16<i32>:word32] = eax_338
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 stackArg8 = <invalid>
	word32 stackArg12 = <invalid>
	word32 ebx_625
	word32 esi_626
	word32 edx_624
	fn00731B10(edi_24, es, ds, stackArg4, stackArg8, stackArg12, out edx_624, out ebx_625, out esi_626)
	Mem352[esp_319 - 20<i32>:word32] = eax_33
	Mem354[esp_319 - 24<i32>:word32] = 0x8D1FE4<32>
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 stackArg8 = <invalid>
	word32 edx_629
	word32 esi_630
	word32 edi_631
	fn00731D30(stackArg4, stackArg8, out edx_629, out esi_630, out edi_631)
	word32 edx_632
	fn006E1160(out ecx_34, out edx_632)
	esp_361 = esp_319 + 4<32>
l006E1920:
	branch esi_17 == 0<32> l006E1935
l006E1924:
	word32 v13_375 = Mem374[esi_17:word32] + 0xFFFFFFFF<32>
	Mem376[esi_17:word32] = v13_375
	branch v13_375 != 0<32> l006E1935
l006E1929:
	word32 ecx_379 = Mem376[esi_17 + 4<32>:word32]
	word32 edx_380 = Mem376[ecx_379 + 0x18<32>:word32]
	Mem383[esp_361 - 4<i32>:word32] = esi_17
	word32 esp_388
	call edx_380 (retsize: 4;)
		uses: ecx:ecx_379
		defs: ecx:ecx_390,esp:esp_388
	esp_361 = esp_388 + 4<32>
l006E1935:
	branch edi_24 == 0<32> l006E194A
l006E1939:
	word32 v15_401 = Mem400[edi_24:word32] + 0xFFFFFFFF<32>
	Mem402[edi_24:word32] = v15_401
	branch v15_401 != 0<32> l006E194A
l006E193E:
	word32 eax_405 = Mem402[edi_24 + 4<32>:word32]
	word32 ecx_406 = Mem402[eax_405 + 0x18<32>:word32]
	Mem409[esp_361 - 4<i32>:word32] = edi_24
	word32 esp_414
	call ecx_406 (retsize: 4;)
		uses: eax:eax_405
		defs: ecx:ecx_416,esp:esp_414
	esp_361 = esp_414 + 4<32>
l006E194A:
	branch ebp_13 == 0<32> l006E1960
l006E194E:
	word32 v16_427 = Mem426[ebp_13:word32] + 0xFFFFFFFF<32>
	Mem428[ebp_13:word32] = v16_427
	branch v16_427 != 0<32> l006E1960
l006E1954:
	word32 edx_431 = Mem428[ebp_13 + 4<32>:word32]
	word32 eax_432 = Mem428[edx_431 + 0x18<32>:word32]
	Mem435[esp_361 - 4<i32>:word32] = ebp_13
	call eax_432 (retsize: 4;)
		uses: edx:edx_431
		defs: ecx:ecx_442
l006E1960:
	return ecx_34
fn006E1780_exit:


word32 fn006E1970(word32 dwArg04, word32 dwArg08, word32 dwArg0C, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006DDFE0
//      fn006E5960
//      fn006F7890
//      fn00707020
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ecx edx Top
// Preserved: esp
fn006E1970_entry:
l006E1970:
	word32 eax_5 = fn006E7CE0()
	branch eax_5 == 0<32> l006E1998
l006E1979:
	word32 edx_166
	word32 ecx_165
	word32 eax_16 = fn00717230(eax_5, out ecx_165, out edx_166)
	branch eax_16 == 0<32> l006E1998
l006E1986:
	word32 esi_169
	word32 edx_168
	word32 ecx_167
	word32 edi_170
	word32 eax_30 = fn006FD8B0(eax_16, 0x8D2018<32>, out ecx_167, out edx_168, out esi_169, out edi_170)
	branch eax_30 != 0<32> l006E19AD
l006E19AD:
	branch dwArg04 != 0<32> l006E19BF
l006E19B8_1:
l006E19BF:
	word32 ecx_171
	word32 edx_116
	word32 eax_61 = fn00703800(eax_30, 0x8D2004<32>, out ecx_171, out edx_116)
	branch eax_61 != 0<32> l006E19DB
l006E19DB:
	word32 v10_70 = Mem58[eax_61:word32] + 0xFFFFFFFF<32>
	Mem71[eax_61:word32] = v10_70
	branch v10_70 != 0<32> l006E19EC
l006E19E0:
	word32 edx_74 = Mem71[eax_61 + 4<32>:word32]
	call Mem76[edx_74 + 0x18<32>:word32] (retsize: 4;)
		uses: edx:edx_74,Stack +0004:eax_61,Stack +000C:dwArg04,Stack +0010:dwArg08,Stack +0014:dwArg0C
		defs: edx:edx_81
l006E19EC:
	edxOut = edx_116
	return 0<32>
l006E19D7:
	edxOut = edx_116
	return 0xFFFFFFFF<32>
l006E1998:
	word32 edx_104
	fn00716B20(out edx_104)
	edxOut = edx_104
	return 0<32>
fn006E1970_exit:


word32 fn006E19F0(ptr32 & ecxOut, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00747FD0
// MayUse: 
// LiveOut: eax ecx edx
// Trashed: SCZO eax ecx edi edx esi Top
// Preserved: esp
fn006E19F0_entry:
l006E19F0:
	word32 eax_13 = fn006F92B0(0x8D2038<32>)
	word32 esp_153 = fp - 8<32>
	branch eax_13 == 0<32> l006E1A30
l006E1A05:
	word32 esi_236
	word32 edi_237
	word32 ecx_232
	word32 edx_233
	word32 ecx_234
	word32 edx_235
	word32 eax_36 = fn006FD8B0(fn00717230(eax_13, out ecx_232, out edx_233), 0x8D2028<32>, out ecx_234, out edx_235, out esi_236, out edi_237)
	word32 v10_42 = Mem34[eax_13:word32] + 0xFFFFFFFF<32>
	Mem43[eax_13:word32] = v10_42
	esp_153 = fp - 8<32>
	branch v10_42 != 0<32> l006E1A2C
l006E1A20:
	word32 eax_47 = Mem43[eax_13 + 4<32>:word32]
	word32 esp_51
	call Mem43[eax_47 + 0x18<32>:word32] (retsize: 4;)
		uses: eax:eax_47,Stack +0004:eax_13
		defs: esp:esp_51
	esp_153 = esp_51 + 4<32>
l006E1A2C:
	branch eax_36 != 0<32> l006E1A47
l006E1A47:
	word32 ecx_65 = Mem64[esp_153 + 0xC<32>:word32]
	word32 eax_66 = Mem64[esp_153 + 0x20<32>:word32]
	branch ecx_65 != 0<32> l006E1A58
l006E1A51_1:
	ecx_65 = Mem64[0x00A18D40<p32>:word32]
l006E1A58:
	branch eax_66 != 0<32> l006E1A61
l006E1A5C:
	eax_66 = 0xA163B8<32>
l006E1A61:
	word32 edx_80 = Mem64[esp_153 + 0x18<32>:word32]
	word32 esp_81 = esp_153 - 4<i32>
	Mem83[esp_81:word32] = eax_66
	Mem86[esp_81 - 4<i32>:word32] = Mem83[esp_81 + 0x20<32>:word32]
	word32 eax_87 = Mem86[esp_81 + 0x18<32>:word32]
	Mem89[esp_81 - 8<i32>:word32] = edx_80
	Mem91[esp_81 - 12<i32>:word32] = eax_87
	Mem95[esp_81 - 16<i32>:word32] = ecx_65
	Mem98[esp_81 - 20<i32>:word32] = Mem95[esp_81 + 0x14<32>:word32]
	Mem100[esp_81 - 24<i32>:word32] = 0x8D2020<32>
	Mem104[esp_81 - 28<i32>:word32] = eax_36
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 stackArg8 = <invalid>
	word32 edx_114
	word32 ecx_113
	word32 eax_112 = fn00703800(stackArg4, stackArg8, out ecx_113, out edx_114)
	branch eax_112 != 0<32> l006E1A8F
l006E1A8F:
	word32 v13_121 = Mem104[eax_112:word32] + 0xFFFFFFFF<32>
	Mem122[eax_112:word32] = v13_121
	branch v13_121 != 0<32> l006E1AA0
l006E1A94:
	word32 edx_125 = Mem122[eax_112 + 4<32>:word32]
	call Mem127[edx_125 + 0x18<32>:word32] (retsize: 4;)
		uses: edx:edx_125,Stack +0004:eax_112
		defs: ecx:ecx_131,edx:edx_132
l006E1AA0:
	ecxOut = ecx_113
	edxOut = edx_114
	return 0<32>
l006E1A89:
	ecxOut = ecx_113
	edxOut = edx_114
	return 0xFFFFFFFF<32>
l006E1A30:
	word32 esp_156 = esp_153 - 4<i32>
	Mem157[esp_156:word32] = Mem154[esp_153 + 0x10<32>:word32]
	Mem159[esp_156 - 4<i32>:word32] = 0x8D2008<32>
	word32 edx_166
	ecxOut = fn00716B20(out edx_166)
	edxOut = edx_166
	return 0<32>
fn006E19F0_exit:


word32 fn006E1AB0(word32 edx, word32 ebx, word32 ebp, word32 esi, word32 edi, selector es, selector ds, word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E1DE0
//      fn00728360
//      fn0073B870
// MayUse:  cs:[0..15] ds:[0..15] ebp:[0..31] ebx:[0..31] edi:[0..31] edx:[0..31] es:[0..15] esi:[0..31] fs:[0..15] gs:[0..15] ss:[0..15] Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax
// Trashed: SCZDOP eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn006E1AB0_entry:
l006E1AB0:
	word32 eax_7 = Mem0[0x00A14188<p32>:word32] ^ fp - 0x3EC<32>
	branch dwArg04 == 0<32> l006E1BAC
l006E1AD4:
	branch Mem14[dwArg04:byte] == 0<8> l006E1BAC
l006E1ADD:
	branch dwArg08 <= 0<32> l006E1BAC
l006E1BAC:
	word32 ecx_350
	return fn00694B8E(0<32>, eax_7 ^ fp - 0x3EC<32>, edx, ebx, ebp, esi, edi, es, ds, edi, out ecx_350)
l006E1AEC:
	word32 ebp_67
	word32 ebx_68
	word32 edx_105
	word32 eax_66 = fn00659040(ebx, ebp, esi, dwArg08, es, ds, dwArg04, 0x8A7744<32>, out edx_105, out ebx_68, out ebp_67)
	branch eax_66 == 0<32> l006E1B93
l006E1B05:
	word32 ebp_136 = 0<32>
	branch dwArg08 <= 0<32> l006E1B47
l006E1B0C:
	word32 ebx_121 = dwArg08
	ebp_136 = dwArg08
l006E1B11:
	branch fn00731F90(fp - 0x3EC<32>, 0x3E8<32>, eax_66, 0<32>, out edx_105) == 0<32> l006E1B41
l006E1B32:
	branch true l006E1B41
l006E1B3D:
	branch true l006E1B11
l006E1B41:
	ebx_121 = ebx_121 - 1<32>
	branch ebx_121 != 0<32> l006E1B11
l006E1B46:
l006E1B47:
	fclose(eax_66)
	branch ebp_136 != dwArg08 l006E1B93
l006E1B93:
	word32 ecx_351
	return fn00694B8E(0<32>, eax_7 ^ fp - 0x3EC<32>, edx_105, ebx_68, ebp_67, esi, edi, es, ds, edi, out ecx_351)
l006E1B56:
	word32 ecx_197 = fp - 0x3EC<32>
l006E1B60:
	byte al_201 = Mem133[ecx_197:byte]
	branch al_201 == 0x20<8> l006E1B6E
l006E1B66:
	branch al_201 == 9<8> l006E1B6E
l006E1B6A:
	branch al_201 != 0xC<8> l006E1B73
l006E1B73:
	word32 ecx_352
	word32 ecx_353
	word32 edx_227
	return fn00694B8E(fn006ECAC0(ecx_197, out ecx_352, out edx_227), eax_7 ^ fp - 0x3EC<32>, edx_227, ebx_68, ebp_67, esi, edi, es, ds, edi, out ecx_353)
fn006E1AB0_exit:
l006E1B6E:
	ecx_197 = ecx_197 + 1<32>


word32 fn006E1BD0(word32 dwArg04, word32 dwArg08, ptr32 & ebpOut, ptr32 & esiOut, ptr32 & ediOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E1DE0
//      fn006E8D90
//      fn00707020
//      fn00708DC0
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: ebp ebx edi esi
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn006E1BD0_entry:
l006E1BD0:
	word32 ebp_12 = dwArg04
	word32 ebx_13 = Mem11[dwArg04:word32]
	word32 esi_17 = Mem16[dwArg08:word32]
	branch ebx_13 == 0<32> l006E1DB9
l006E1BEB:
l006E1BF0:
	word32 edi_110 = 0<32>
	branch esi_17 != 0<32> l006E1C00
l006E1BF4:
	Mem31[0x00A163B8<p32>:word32] = Mem29[0x00A163B8<p32>:word32] + 1<32>
	esi_17 = 0xA163B8<32>
l006E1C00:
	word32 eax_36 = Mem35[esi_17 + 4<32>:word32]
	branch eax_36 == 0xA1EB98<32> l006E1C1E
l006E1C0A:
	word32 edx_654
	word32 ecx_653
	branch fn006D5670(eax_36, Mem35[0x00A169F0<p32>:word32], out ecx_653, out edx_654) == 0<32> l006E1C2C
l006E1C1E:
	edi_110 = Mem58[esi_17 + 4<32>:word32]
	branch edi_110 != 0xA1EB98<32> l006E1C2C
l006E1C29:
	edi_110 = Mem58[esi_17 + 8<32>:word32]
l006E1C2C:
	word32 esp_105
	word32 eax_68 = Mem67[ebx_13 + 4<32>:word32]
	branch eax_68 == 0xA1E968<32> l006E1C6B
l006E1C36:
	branch eax_68 == 0xA15380<32> l006E1C53
l006E1C3D:
	esp_105 = fp - 0x10<32>
	word32 ecx_657
	word32 edx_658
	branch fn006D5670(eax_68, 0xA15380<32>, out ecx_657, out edx_658) == 0<32> l006E1DB0
l006E1C53:
	esp_105 = fp - 0x10<32>
	word32 edx_656
	word32 ecx_655
	branch fn006D5670(ebx_13, Mem90[0x00A169F0<p32>:word32], out ecx_655, out edx_656) == 0<32> l006E1DB0
l006E1C6B:
	branch edi_110 == 0<32> l006E1C81
l006E1C6F:
	esp_105 = fp - 0x10<32>
	word32 ecx_659
	word32 edx_660
	branch fn00704020(out ecx_659, out edx_660) != 0<32> l006E1D71
l006E1D71:
	branch edi_110 == ebx_13 l006E1DB0
l006E1D75:
	word32 v16_150 = Mem122[ebx_13:word32] + 0xFFFFFFFF<32>
	Mem151[ebx_13:word32] = v16_150
	branch v16_150 != 0<32> l006E1D86
l006E1D7A:
	word32 edx_154 = Mem151[ebx_13 + 4<32>:word32]
	word32 ecx_160
	call Mem151[edx_154 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_160,edx:edx_154,Stack +0004:ebx_65,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +001C:dwArg04,Stack +0020:dwArg08
		defs: ecx:ecx_160
l006E1D86:
	Mem169[edi_110:word32] = Mem167[edi_110:word32] + 1<32>
	Mem175[ebp_12:word32] = edi_110
	Mem179[dwArg08:word32] = esi_17
	return
l006E1C81:
	word32 edi_215
	branch esi_17 != 0xA163B8<32> l006E1C97
l006E1C97:
	word32 eax_191 = Mem189[esi_17 + 4<32>:word32]
	branch eax_191 == 0xA16588<32> l006E1CC2
l006E1CA1:
	word32 ecx_667
	word32 edx_668
	branch fn006D5670(eax_191, 0xA16588<32>, out ecx_667, out edx_668) != 0<32> l006E1CC2
l006E1CC2:
	Mem213[esi_17:word32] = Mem211[esi_17:word32] + 1<32>
	edi_215 = esi_17
l006E1CB3:
	word32 edx_670
	word32 esi_671
	word32 ecx_669
	edi_215 = fn006DFF80(1<32>, out ecx_669, out edx_670, out esi_671)
l006E1C89:
	word32 edx_662
	word32 ecx_661
	edi_215 = fn006DFD20(0<32>, out ecx_661, out edx_662)
l006E1CC7:
	esp_105 = fp - 0x10<32>
	branch edi_215 == 0<32> l006E1CF6
l006E1CCB:
	word32 edi_666
	word32 ecx_663
	word32 edx_664
	word32 esi_665
	word32 eax_264 = fn00707680(ebx_13, dwArg04, dwArg08, out ecx_663, out edx_664, out esi_665, out edi_666)
	word32 v15_270 = Mem257[edi_215:word32] + 0xFFFFFFFF<32>
	Mem271[edi_215:word32] = v15_270
	esp_105 = fp - 0x10<32>
	branch v15_270 != 0<32> l006E1CEA
l006E1CDE:
	word32 eax_275 = Mem271[edi_215 + 4<32>:word32]
	word32 esp_279
	word32 ecx_281
	word32 edx_282
	call Mem271[eax_275 + 0x18<32>:word32] (retsize: 4;)
		uses: eax:eax_275,ecx:ecx_281,edx:edx_282,Stack +0004:edi_244,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +001C:dwArg04,Stack +0020:dwArg08
		defs: ecx:ecx_281,edx:edx_282,esp:esp_279
	esp_105 = esp_279 + 4<32>
l006E1CEA:
	branch eax_264 != 0<32> l006E1D99
l006E1D99:
	word32 v18_293 = Mem292[esi_17:word32] + 0xFFFFFFFF<32>
	Mem294[esi_17:word32] = v18_293
	branch v18_293 != 0<32> l006E1DAA
l006E1D9E:
	word32 ecx_297 = Mem294[esi_17 + 4<32>:word32]
	word32 edx_298 = Mem294[ecx_297 + 0x18<32>:word32]
	Mem301[esp_105 - 4<i32>:word32] = esi_17
	word32 esp_305
	word32 edx_308
	call edx_298 (retsize: 4;)
		uses: ecx:ecx_297,edx:edx_308,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: edx:edx_308,esp:esp_305
	esp_105 = esp_305 + 4<32>
l006E1DAA:
	esi_17 = eax_264
	ebp_12 = Mem316[esp_105 + 0x14<32>:word32]
l006E1DB0:
	word32 eax_320 = Mem319[esp_105 + 0x18<32>:word32]
	Mem324[ebp_12:word32] = ebx_13
	Mem326[eax_320:word32] = esi_17
l006E1DB9:
	return
l006E1CF2:
	ebp_12 = Mem292[esp_105 + 0x14<32>:word32]
l006E1CF6:
	word32 v20_341 = Mem339[ebx_13:word32] + 0xFFFFFFFF<32>
	Mem342[ebx_13:word32] = v20_341
	branch v20_341 != 0<32> l006E1D07
l006E1CFB:
	word32 edx_345 = Mem342[ebx_13 + 4<32>:word32]
	word32 eax_346 = Mem342[edx_345 + 0x18<32>:word32]
	Mem349[esp_105 - 4<i32>:word32] = ebx_13
	word32 esp_354
	word32 ecx_356
	call eax_346 (retsize: 4;)
		uses: ecx:ecx_356,edx:edx_345,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: ecx:ecx_356,esp:esp_354
	esp_105 = esp_354 + 4<32>
l006E1D07:
	word32 v21_364 = Mem363[esi_17:word32] + 0xFFFFFFFF<32>
	Mem365[esi_17:word32] = v21_364
	branch v21_364 != 0<32> l006E1D18
l006E1D0C:
	word32 ecx_368 = Mem365[esi_17 + 4<32>:word32]
	word32 edx_369 = Mem365[ecx_368 + 0x18<32>:word32]
	Mem372[esp_105 - 4<i32>:word32] = esi_17
	word32 esp_377
	word32 edx_380
	call edx_369 (retsize: 4;)
		uses: ecx:ecx_368,edx:edx_380,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: edx:edx_380,esp:esp_377
	esp_105 = esp_377 + 4<32>
l006E1D18:
	word32 edx_389 = Mem385[esp_105 + 0x1C<32>:word32]
	word32 eax_386 = Mem385[0x00A6D67C<p32>:word32]
	word32 ecx_390 = Mem385[edx_389:word32]
	Mem392[ebp_12:word32] = Mem385[eax_386 + 0x28<32>:word32]
	word32 esi_394 = Mem392[esp_105 + 0x18<32>:word32]
	Mem395[esi_394:word32] = Mem392[eax_386 + 0x2C<32>:word32]
	Mem397[edx_389:word32] = Mem395[eax_386 + 0x30<32>:word32]
	Mem400[eax_386 + 0x28<32>:word32] = 0<32>
	Mem401[eax_386 + 0x2C<32>:word32] = 0<32>
	Mem402[eax_386 + 0x30<32>:word32] = 0<32>
	branch ecx_390 == 0<32> l006E1D5F
l006E1D46:
	branch Mem402[edx_389:word32] != 0<32> l006E1D4E
l006E1D4E:
	word32 v22_406 = Mem402[ecx_390:word32] + 0xFFFFFFFF<32>
	Mem407[ecx_390:word32] = v22_406
	branch v22_406 != 0<32> l006E1D5F
l006E1D53:
	word32 eax_410 = Mem407[ecx_390 + 4<32>:word32]
	Mem412[esp_105 - 4<i32>:word32] = ecx_390
	word32 ecx_418
	word32 edx_419
	call Mem412[eax_410 + 0x18<32>:word32] (retsize: 4;)
		uses: eax:eax_410,ecx:ecx_418,edx:edx_419,Stack +0008:dwArg04,Stack +000C:dwArg08
		defs: ecx:ecx_418,edx:edx_419
l006E1D4A:
	Mem424[edx_389:word32] = ecx_390
l006E1D5F:
	ebx_13 = Mem426[ebp_12:word32]
	esi_17 = Mem426[esi_394:word32]
	branch ebx_13 != 0<32> l006E1BF0
l006E1D6C:
	return
fn006E1BD0_exit:


word32 fn006E1DC0(ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006DFD20
//      fn006DFE20
//      fn006DFE60
//      fn006E0B00
//      fn006E5C00
//      fn006EA420
//      fn006EC4F0
//      fn006F2650
//      fn006F2750
//      fn006F2790
//      fn006F2A10
//      fn006F34B0
//      fn006F4F00
//      fn006F9540
//      fn006FBD90
//      fn006FBE60
//      fn006FCC90
//      fn006FCF20
//      fn006FDE60
//      fn007108F0
//      fn007109D0
//      fn00710B80
//      fn007114E0
//      fn00711700
//      fn00717230
//      fn00717900
//      fn00720070
//      fn00725150
//      fn007251F0
//      fn00725DA0
//      fn0072F770
//      fn0072FBB0
//      fn00734BB0
//      fn0073D450
//      fn007503F0
//      fn00750420
// MayUse: 
// LiveOut: ecx edx
// Trashed: SCZO eax ecx edx Top
// Preserved: esp
fn006E1DC0_entry:
l006E1DC0:
	word32 ecx_18
	word32 edx_19
	fn006E15D0(Mem0[0x00A18720<p32>:word32], 0x8D2044<32>, out ecx_18, out edx_19)
	edxOut = edx_19
	return ecx_18
fn006E1DC0_exit:


word32 fn006E1DE0(word32 dwArg08, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00747960
//      fn00747FD0
//      fn00748190
//      fn007486D0
//      fn00748810
//      fn00748E50
//      fn00752B30
//      fn00752CA0
// MayUse:  Stack +0008:[0..31]
// LiveOut: ecx edx
// Trashed: SCZO eax ebx ecx edi edx esi Top
// Preserved: esp
fn006E1DE0_entry:
l006E1DE0:
	word32 eax_7 = Mem0[0x00A6D67C<p32>:word32]
	word32 edx_10 = Mem9[eax_7 + 0x2C<32>:word32]
	word32 ecx_15 = Mem14[eax_7 + 0x30<32>:word32]
	Mem24[eax_7 + 0x28<32>:word32] = 0<32>
	Mem25[eax_7 + 0x2C<32>:word32] = 0<32>
	Mem26[eax_7 + 0x30<32>:word32] = 0<32>
	word32 edi_567
	word32 ebp_565
	word32 esi_566
	fn006E1BD0(fp - 8<32>, fp - 0xC<32>, out ebp_565, out esi_566, out edi_567)
	word32 ecx_568
	word32 edx_569
	word32 eax_45 = fn007050A0(dwArg08, out ecx_568, out edx_569)
	word32 esp_108 = fp - 0x18<32>
	branch eax_45 != 0<32> l006E1E43
l006E1E43:
	esp_108 = fp - 0x18<32>
	word32 ecx_570
	word32 edx_571
	branch fn006DF800(edx_10, 0x8D2094<32>, eax_45, out ecx_570, out edx_571) == 0<32> l006E1E5F
l006E1E5A:
	word32 ecx_574
	word32 edx_575
	fn006E1160(out ecx_574, out edx_575)
l006E1E5F:
	word32 v13_81 = Mem61[eax_45:word32] + 0xFFFFFFFF<32>
	Mem82[eax_45:word32] = v13_81
	branch v13_81 != 0<32> l006E1E70
l006E1E64:
	word32 eax_85 = Mem82[eax_45 + 4<32>:word32]
	word32 esp_93
	call Mem82[eax_85 + 0x18<32>:word32] (retsize: 4;)
		uses: eax:eax_85,Stack +0004:eax_45,Stack +0028:dwArg08
		defs: esp:esp_93
	esp_108 = esp_93 + 4<32>
l006E1E3C:
	word32 ecx_572
	word32 edx_573
	fn006E1160(out ecx_572, out edx_573)
l006E1E70:
	word32 edi_110 = Mem109[esp_108 + 0x1C<32>:word32]
	branch edi_110 == 0<32> l006E1EFC
l006E1E7C:
	word32 esp_114 = esp_108 - 4<i32>
	Mem115[esp_114:word32] = edi_110
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 edx_582
	word32 ecx_581
	word32 eax_120 = fn006ECAC0(stackArg4, out ecx_581, out edx_582)
	word32 esp_126 = esp_114 + 4<32>
	branch eax_120 != 0<32> l006E1E92
l006E1E92:
	word32 edx_130 = Mem115[esp_114 + 0x10<32>:word32]
	Mem132[esp_114:word32] = eax_120
	Mem134[esp_114 - 4<i32>:word32] = 0x8D2088<32>
	Mem136[esp_114 - 8<i32>:word32] = edx_130
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 stackArg8 = <invalid>
	esp_126 = esp_114 + 4<32>
	word32 ecx_585
	word32 edx_586
	branch fn006DF800(stackArg4, stackArg8, dwArg08, out ecx_585, out edx_586) == 0<32> l006E1EAE
l006E1EA9:
	word32 edx_602
	word32 ecx_601
	fn006E1160(out ecx_601, out edx_602)
l006E1EAE:
	word32 v15_156 = Mem136[eax_120:word32] + 0xFFFFFFFF<32>
	Mem157[eax_120:word32] = v15_156
	branch v15_156 != 0<32> l006E1EBF
l006E1EB3:
	word32 eax_160 = Mem157[eax_120 + 4<32>:word32]
	word32 ecx_161 = Mem157[eax_160 + 0x18<32>:word32]
	Mem164[esp_114:word32] = eax_120
	word32 esp_168
	call ecx_161 (retsize: 4;)
		uses: eax:eax_160,Stack +000C:dwArg08
		defs: esp:esp_168
	esp_126 = esp_168 + 4<32>
l006E1E8B:
	word32 ecx_587
	word32 edx_588
	fn006E1160(out ecx_587, out edx_588)
l006E1EBF:
	word32 esp_184 = esp_126 - 4<i32>
	Mem186[esp_184:word32] = dwArg08
	Mem189[esp_184 - 4<i32>:word32] = edi_110
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 stackArg8 = <invalid>
	word32 eax_193 = fn006E1AB0(edx, dwArg08, ebp, eax_120, edi_110, es, ds, stackArg4, stackArg8)
	esp_108 = esp_184 + 4<32>
	branch eax_193 == 0<32> l006E1EFC
l006E1ECF:
	word32 edx_203 = Mem189[esp_184 + 0x10<32>:word32]
	Mem205[esp_184:word32] = eax_193
	Mem207[esp_184 - 4<i32>:word32] = 0x8CEE18<32>
	Mem209[esp_184 - 8<i32>:word32] = edx_203
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 stackArg8 = <invalid>
	esp_108 = esp_184 + 4<32>
	word32 ecx_597
	word32 edx_598
	branch fn006DF800(stackArg4, stackArg8, dwArg08, out ecx_597, out edx_598) == 0<32> l006E1EEB
l006E1EE6:
	word32 edx_600
	word32 ecx_599
	fn006E1160(out ecx_599, out edx_600)
l006E1EEB:
	word32 v14_229 = Mem209[eax_193:word32] + 0xFFFFFFFF<32>
	Mem230[eax_193:word32] = v14_229
	branch v14_229 != 0<32> l006E1EFC
l006E1EF0:
	word32 eax_233 = Mem230[eax_193 + 4<32>:word32]
	word32 ecx_234 = Mem230[eax_233 + 0x18<32>:word32]
	Mem237[esp_184:word32] = eax_193
	word32 esp_241
	call ecx_234 (retsize: 4;)
		uses: eax:eax_233,Stack +000C:dwArg08
		defs: esp:esp_241
	esp_108 = esp_241 + 4<32>
l006E1EFC:
	word32 edx_251 = Mem250[esp_108 + 0xC<32>:word32]
	word32 esp_252 = esp_108 - 4<i32>
	Mem253[esp_252:word32] = 0xA163B8<32>
	Mem255[esp_252 - 4<i32>:word32] = 0x8BC184<32>
	Mem257[esp_252 - 8<i32>:word32] = edx_251
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 stackArg8 = <invalid>
	word32 ecx_578
	word32 edx_579
	branch fn006DF800(stackArg4, stackArg8, dwArg08, out ecx_578, out edx_579) == 0<32> l006E1F1C
l006E1F17:
	word32 edx_604
	word32 ecx_603
	fn006E1160(out ecx_603, out edx_604)
l006E1F1C:
	branch Mem257[esp_252 + 0x14<32>:word32] == Mem257[0x00A178F4<p32>:word32] l006E1FBF
l006E1F2C:
	word32 ecx_284 = Mem257[esp_252 + 0x10<32>:word32]
	Mem286[esp_252:word32] = 0x8D2084<32>
	Mem288[esp_252 - 4<32>:word32] = ecx_284
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 stackArg8 = <invalid>
	word32 esp_299 = esp_252 + 4<32>
	word32 edx_607
	branch fn006DF7C0(stackArg4, stackArg8, out edx_607) != 0<32> l006E1F89
l006E1F42:
	Mem305[esp_252:word32] = Mem288[esp_252 + 0x10<32>:word32]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 edx_612
	word32 edi_613
	word32 eax_307 = fn006DDF70(stackArg4, out edx_612, out edi_613)
	esp_299 = esp_252 + 4<32>
	branch eax_307 == 0<32> l006E1F84
l006E1F84:
	word32 ecx_614
	word32 edx_615
	fn006E1160(out ecx_614, out edx_615)
l006E1F55:
	word32 eax_324 = Mem305[esp_252 + 0x10<32>:word32]
	Mem326[esp_252:word32] = eax_307
	Mem328[esp_252 - 4<i32>:word32] = 0x8D2084<32>
	Mem330[esp_252 - 8<i32>:word32] = eax_324
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 stackArg8 = <invalid>
	esp_299 = esp_252 + 4<32>
	word32 ecx_618
	word32 edx_619
	branch fn006DF800(stackArg4, stackArg8, dwArg08, out ecx_618, out edx_619) == 0<32> l006E1F71
l006E1F6C:
	word32 ecx_620
	word32 edx_621
	fn006E1160(out ecx_620, out edx_621)
l006E1F71:
	word32 v16_350 = Mem330[eax_307:word32] + 0xFFFFFFFF<32>
	Mem351[eax_307:word32] = v16_350
	branch v16_350 != 0<32> l006E1F89
l006E1F76:
	word32 ecx_354 = Mem351[eax_307 + 4<32>:word32]
	word32 edx_355 = Mem351[ecx_354 + 0x18<32>:word32]
	Mem358[esp_252:word32] = eax_307
	word32 esp_362
	call edx_355 (retsize: 4;)
		uses: ecx:ecx_354,Stack +000C:dwArg08
		defs: esp:esp_362
	esp_299 = esp_362 + 4<32>
l006E1F89:
	word32 eax_372 = Mem371[esp_299 + 0xC<32>:word32]
	word32 esp_373 = esp_299 - 4<i32>
	Mem374[esp_373:word32] = 0x8D2070<32>
	Mem376[esp_373 - 4<i32>:word32] = eax_372
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 stackArg8 = <invalid>
	word32 edx_610
	branch fn006DF7C0(stackArg4, stackArg8, out edx_610) != 0<32> l006E1FBF
l006E1F9F:
	word32 ecx_391 = Mem376[esp_373 + 0x10<32>:word32]
	Mem393[esp_373:word32] = 0xA163B8<32>
	Mem395[esp_373 - 4<i32>:word32] = 0x8D2070<32>
	Mem397[esp_373 - 8<i32>:word32] = ecx_391
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 stackArg8 = <invalid>
	word32 edx_625
	word32 ecx_624
	branch fn006DF800(stackArg4, stackArg8, dwArg08, out ecx_624, out edx_625) == 0<32> l006E1FBF
l006E1FBA:
	word32 edx_627
	word32 ecx_626
	fn006E1160(out ecx_626, out edx_627)
l006E1FBF:
	word32 ecx_427
	word32 edx_428
	fn006E0E00(ecx_15, out ecx_427, out edx_428)
	edxOut = edx_428
	return ecx_427
fn006E1DE0_exit:


word32 fn006E3770(word32 dwArg04, word32 dwArg08, ptr32 & ecxOut, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00717CB0
//      fn00719E80
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax ecx edx
// Trashed: SCZO eax ecx edx Top
// Preserved: edi esi esp
fn006E3770_entry:
l006E3770:
	word32 ecx_17
	word32 edx_18
	word32 eax_16 = fn00705120(dwArg08, out ecx_17, out edx_18)
	branch eax_16 != 0<32> l006E378F
l006E378F:
	word32 eax_26 = Mem14[dwArg04 + 0x1C<32>:word32]
	branch eax_26 == 0<32> l006E37AE
l006E3796:
	Mem30[dwArg04 + 0x1C<32>:word32] = 0<32>
	word32 v10_31 = Mem30[eax_26:word32] + 0xFFFFFFFF<32>
	Mem32[eax_26:word32] = v10_31
	branch v10_31 != 0<32> l006E37AE
l006E37A2:
	word32 ecx_35 = Mem32[eax_26 + 4<32>:word32]
	call Mem32[ecx_35 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_35,Stack +0004:eax_26,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0014:dwArg04,Stack +0018:dwArg08
		defs: ecx:ecx_41,edx:edx_42
l006E37AE:
	Mem49[dwArg04 + 0x1C<32>:word32] = eax_16
	ecxOut = ecx_17
	edxOut = edx_18
	return 0<32>
l006E3789:
	ecxOut = ecx_17
	edxOut = edx_18
	return 0xFFFFFFFF<32>
fn006E3770_exit:


word32 fn006E38B0(word32 dwArg04, word32 dwArg08, ptr32 & ecxOut, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00717CB0
//      fn00719E80
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax ecx edx
// Trashed: SCZO eax ecx edx Top
// Preserved: edi esi esp
fn006E38B0_entry:
l006E38B0:
	word32 ecx_17
	word32 edx_18
	word32 eax_16 = fn00705120(dwArg08, out ecx_17, out edx_18)
	branch eax_16 != 0<32> l006E38CF
l006E38CF:
	word32 eax_26 = Mem14[dwArg04 + 0x20<32>:word32]
	branch eax_26 == 0<32> l006E38EE
l006E38D6:
	Mem30[dwArg04 + 0x20<32>:word32] = 0<32>
	word32 v10_31 = Mem30[eax_26:word32] + 0xFFFFFFFF<32>
	Mem32[eax_26:word32] = v10_31
	branch v10_31 != 0<32> l006E38EE
l006E38E2:
	word32 ecx_35 = Mem32[eax_26 + 4<32>:word32]
	call Mem32[ecx_35 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_35,Stack +0004:eax_26,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0014:dwArg04,Stack +0018:dwArg08
		defs: ecx:ecx_41,edx:edx_42
l006E38EE:
	Mem49[dwArg04 + 0x20<32>:word32] = eax_16
	ecxOut = ecx_17
	edxOut = edx_18
	return 0<32>
l006E38C9:
	ecxOut = ecx_17
	edxOut = edx_18
	return 0xFFFFFFFF<32>
fn006E38B0_exit:


word32 fn006E3900(word32 dwArg04, word32 dwArg08, ptr32 & ecxOut, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00717CB0
//      fn00719E80
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax ecx edx
// Trashed: SCZO eax ecx edi edx esi Top
// Preserved: esp
fn006E3900_entry:
l006E3900:
	word32 ecx_17
	word32 edx_18
	word32 eax_16 = fn006ECAC0(dwArg08, out ecx_17, out edx_18)
	branch eax_16 != 0<32> l006E391F
l006E391F:
	word32 eax_26 = Mem14[dwArg04 + 0x24<32>:word32]
	branch eax_26 == 0<32> l006E393E
l006E3926:
	Mem30[dwArg04 + 0x24<32>:word32] = 0<32>
	word32 v10_31 = Mem30[eax_26:word32] + 0xFFFFFFFF<32>
	Mem32[eax_26:word32] = v10_31
	branch v10_31 != 0<32> l006E393E
l006E3932:
	word32 ecx_35 = Mem32[eax_26 + 4<32>:word32]
	call Mem32[ecx_35 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_35,Stack +0004:eax_26,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0014:dwArg04,Stack +0018:dwArg08
		defs: ecx:ecx_41,edx:edx_42
l006E393E:
	Mem49[dwArg04 + 0x24<32>:word32] = eax_16
	ecxOut = ecx_17
	edxOut = edx_18
	return 0<32>
l006E3919:
	ecxOut = ecx_17
	edxOut = edx_18
	return 0xFFFFFFFF<32>
fn006E3900_exit:


word32 fn006E3D10(ptr32 & ecxOut, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00719E80
// MayUse: 
// LiveOut: eax ecx edx
// Trashed: SCZO eax ecx edx Top
// Preserved: esp
fn006E3D10_entry:
l006E3D10:
	word32 ecx_30
	word32 edx_31
	word32 eax_29 = fn00703870(Mem18[0x00A17FB4<p32>:word32], 0x8D3168<32>, out ecx_30, out edx_31)
	ecxOut = ecx_30
	edxOut = edx_31
	return eax_29
fn006E3D10_exit:


word32 fn006E3E50(ptr32 & ecxOut, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00717CB0
// MayUse: 
// LiveOut: eax ecx edx
// Trashed: SCZO eax ecx edx Top
// Preserved: esp
fn006E3E50_entry:
l006E3E50:
	word32 ecx_30
	word32 edx_31
	word32 eax_29 = fn00703870(Mem18[0x00A18044<p32>:word32], 0x8D31F8<32>, out ecx_30, out edx_31)
	ecxOut = ecx_30
	edxOut = edx_31
	return eax_29
fn006E3E50_exit:


void fn006E52A0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E8910
// MayUse: 
// LiveOut:
// Trashed: SCZO eax ecx edx Top
// Preserved: esp
fn006E52A0_entry:
l006E52A0:
	word32 eax_5 = Mem0[0x00A6C578<p32>:word32]
	branch eax_5 == 0<32> l006E52C2
l006E52A9:
	Mem10[eax_5:word32] = Mem0[eax_5:word32] + 0xFFFFFFFF<32>
	word32 eax_11 = Mem10[0x00A6C578<p32>:word32]
	branch Mem10[eax_11:word32] != 0<32> l006E52C2
l006E52B6:
	word32 ecx_14 = Mem10[eax_11 + 4<32>:word32]
	word32 edx_21
	call Mem10[ecx_14 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_14,edx:edx_21,Stack +0004:eax_11
		defs: edx:edx_21
l006E52C2:
	word32 eax_27 = Mem26[0x00A6C570<p32>:word32]
	Mem31[0x00A6C578<p32>:word32] = 0<32>
	_set_invalid_parameter_handler(eax_27)
	return
fn006E52A0_exit:


word32 fn006E54A0(word32 ebx, word32 edi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E5C60
// MayUse:  ebx:[0..31] edi:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx edx Top
// Preserved: esi esp
fn006E54A0_entry:
l006E54A0:
	branch Mem0[edi:word32] != 0<32> l006E54C3
l006E54A5:
	word32 edx_173
	word32 eax_11 = fn006F2650(0<32>, out edx_173)
	Mem19[edi:word32] = eax_11
	branch eax_11 != 0<32> l006E54C3
l006E54C3:
	word32 eax_35 = fn0072E920(ebx, 0<32>)
	branch eax_35 != 0<32> l006E54E4
l006E54E4:
	word32 ecx_174
	word32 edx_175
	branch fn006F2A10(Mem31[edi:word32], eax_35, out ecx_174, out edx_175) == 0<32> l006E5514
l006E5514:
	word32 v14_60 = Mem49[eax_35:word32] + 0xFFFFFFFF<32>
	Mem61[eax_35:word32] = v14_60
	branch v14_60 != 0<32> l006E5525
l006E5519:
	word32 eax_64 = Mem61[eax_35 + 4<32>:word32]
	call Mem61[eax_64 + 0x18<32>:word32] (retsize: 4;)
		uses: eax:eax_64,Stack +0004:eax_35
l006E5525:
	return 0<32>
l006E54F4:
	free(ebx)
	word32 v11_86 = Mem84[eax_35:word32] + 0xFFFFFFFF<32>
	Mem87[eax_35:word32] = v11_86
	branch v11_86 != 0<32> l006E550F
l006E5503:
	word32 ecx_90 = Mem87[eax_35 + 4<32>:word32]
	call Mem87[ecx_90 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_90,Stack +0004:eax_35
l006E550F:
	return 0xFFFFFFFF<32>
l006E54D5:
	free(ebx)
	return 0xFFFFFFFF<32>
l006E54B5:
	free(ebx)
	return 0xFFFFFFFF<32>
fn006E54A0_exit:


word32 fn006E5530(word32 edi, word32 dwArg04, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E7660
// MayUse:  edi:[0..31] Stack +0004:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ebx ecx edx esi Top
// Preserved: ebp edi esp
fn006E5530_entry:
l006E5530:
	branch edi == 0<32> l006E5584
l006E5584:
	edxOut = edx
	return <invalid>
l006E5534:
	branch dwArg04 != 0<32> l006E556F
l006E553D:
	word32 ebx_20 = Mem19[edi + 8<32>:word32]
	word32 esi_24 = 0<32>
	branch ebx_20 <= 0<32> l006E556D
l006E5548:
l006E5550:
	free(fn0072E9C0(Mem30[Mem30[edi + 0xC<32>:word32] + esi_24 * 4<32>:word32], out edx))
	esi_24 = esi_24 + 1<32>
	branch esi_24 < ebx_20 l006E5550
l006E5569:
l006E556D:
l006E556F:
	word32 v14_62 = Mem61[edi:word32] + 0xFFFFFFFF<32>
	Mem63[edi:word32] = v14_62
	branch v14_62 != 0<32> l006E5580
l006E5574:
	word32 edx_66 = Mem63[edi + 4<32>:word32]
	word32 ecx_79
	call Mem63[edx_66 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_79,edx:edx_66,Stack +0004:edi,Stack +0008:dwArg04,Stack +0010:dwArg04
		defs: ecx:ecx_79,edx:edx_80
l006E5580:
	edxOut = edx
	return <invalid>
fn006E5530_exit:


void fn006E5590(word32 ecx, word32 edx, word32 ebx, word32 ebp, word32 esi, word32 edi, selector es, selector ds, word32 dwArg04, word32 dwArg0C)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E7660
// MayUse:  cs:[0..15] ds:[0..15] ebp:[0..31] ebx:[0..31] ecx:[0..31] edi:[0..31] edx:[0..31] es:[0..15] esi:[0..31] fs:[0..15] gs:[0..15] ss:[0..15] Stack +0004:[0..31] Stack +000C:[0..31]
// LiveOut:
// Trashed: SCZDOP eax ecx edx Top
// Preserved: ebp edi esi esp
fn006E5590_entry:
l006E5590:
	word32 eax_7 = Mem0[0x00A14188<p32>:word32] ^ fp - 0x208<32>
	word32 edi_223 = ecx
	word32 esi_25 = fp - 0x204<32>
	word32 eax_253 = fn006E0FC0()
	branch eax_253 != 0<32> l006E56F5
l006E55CC:
	branch ecx != 0<32> l006E56E5
l006E55D4:
	branch dwArg0C == 0<32> l006E5602
l006E55D8:
	fn00724FE0(fp - 0x204<32>, 0x200<32>, 0x8D3610<32>)
	word32 eax_51 = fp - 0x204<32>
l006E55F3:
	eax_51 = eax_452 + 1<32>
	eax_452 = eax_51
	branch Mem44[eax_452:byte] != 0<8> l006E55F3
l006E55FC:
	esi_25 = fp - 0x204<32> + (eax_51 - (fp - 0x203<32>))
l006E5602:
	word32 esi_103
	branch dwArg04 == 0<32> l006E569A
l006E569A:
	fn00724FE0(esi_25, fp - 4<32> - esi_25, 0x8D35EC<32>)
	word32 eax_89 = esi_25
	word32 edx_92 = esi_25 + 1<32>
l006E56B7:
	eax_89 = eax_453 + 1<32>
	eax_453 = eax_89
	branch Mem82[eax_453:byte] != 0<8> l006E56B7
l006E56C0:
	esi_103 = esi_25 + (eax_89 - edx_92)
l006E5611:
	fn00724FE0(esi_25, fp - 4<32> - esi_25, 0x8D3604<32>)
	word32 eax_122 = esi_25
	word32 edi_124 = 0<32>
	word32 edx_127 = esi_25 + 1<32>
l006E5631:
	eax_122 = eax_454 + 1<32>
	eax_454 = eax_122
	branch Mem115[eax_454:byte] != 0<8> l006E5631
l006E563A:
	esi_103 = esi_25 + (eax_122 - edx_127)
	branch Mem115[ebx:word32] <= 0<32> l006E56C4
l006E5646:
	branch edi_124 >= 0x20<32> l006E56C4
l006E564F:
	branch esi_103 - (fp - 0x204<32>) >= 0xDC<32> l006E56C4
l006E565E:
	fn00724FE0(esi_103, fp - 4<32> - esi_103, 0x8D35F8<32>)
	word32 eax_177 = esi_103
	word32 edx_180 = esi_103 + 1<32>
l006E5682:
	eax_177 = eax_455 + 1<32>
	eax_455 = eax_177
	branch Mem170[eax_455:byte] != 0<8> l006E5682
l006E568B:
	edi_124 = edi_124 + 1<32>
	esi_103 = esi_103 + (eax_177 - edx_180)
	branch Mem170[ebx + edi_124 * 4<32>:word32] > 0<32> l006E5646
l006E5698:
l006E56C4:
	fn00724FE0(esi_103, fp - 4<32> - esi_103, 0x8D35E4<32>)
	edi_223 = fp - 0x204<32>
l006E56E5:
	word32 ecx_451
	eax_253 = fn006E0F80(Mem224[0x00A16B7C<p32>:word32], edi_223, out ecx_451, out edx)
l006E56F5:
	word32 ecx_450
	fn00694B8E(eax_253, eax_7 ^ fp - 520<i32>, edx, ebx, ebp, esi, edi, es, ds, ebp, out ecx_450)
	return
fn006E5590_exit:


word32 fn006E5710(word32 dwArg04, word32 dwArg08, word32 dwArg14, word32 dwArg18, word32 dwArg1C, word32 dwArg20, ptr32 & ecxOut, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E6E70
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +0014:[0..31] Stack +0018:[0..31] Stack +001C:[0..31] Stack +0020:[0..31]
// LiveOut: eax ecx edx
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn006E5710_entry:
l006E5710:
	word32 esi_22 = 0<32>
	word32 ebp_23 = 0<32>
	word32 dwLoc04_407 = Mem19[dwArg08:word32]
l006E5730:
	word32 eax_31 = CONVERT(Mem29[dwLoc04_407:byte], byte, int32)
	dwLoc04_407 = dwLoc04_407 + 1<32>
	branch eax_31 != 0x28<32> l006E574F
l006E574F:
	branch eax_31 != 0x29<32> l006E575D
l006E575D:
	branch eax_31 == 0x3A<32> l006E5783
l006E5762:
	branch eax_31 == 0x3B<32> l006E5783
l006E5767:
	branch eax_31 == 0<32> l006E5783
l006E576B:
	branch esi_22 != 0<32> l006E5730
l006E576F:
	branch isalpha(eax_31 & 0xFF<32>) == 0<32> l006E5730
l006E577E:
	ebp_23 = ebp_23 + 1<32>
l006E5754:
	branch esi_22 == 0<32> l006E5783
l006E5783:
	word32 edx_102
	branch fn00704700(dwArg04, out edx_102) == 0<32> l006E58CD
l006E5798:
	word32 eax_93 = Mem77[dwArg04 + 4<32>:word32]
	branch eax_93 == 0xA1B450<32> l006E58CD
l006E57A6:
	word32 ecx_598
	branch fn006D5670(eax_93, 0xA1B450<32>, out ecx_598, out edx_102) != 0<32> l006E58CD
l006E58CD:
	Mem116[dwArg14:word32] = 0<32>
	branch dwArg04 != 0xA163B8<32> l006E58E6
l006E58E6:
	edx_102 = Mem116[dwArg04 + 4<32>:word32]
l006E58DF:
l006E58EC:
	word32 eax_124 = 0x8D3640<32>
	branch dwArg20 != 0<32> l006E58FD
l006E58F8:
	eax_124 = 0x8D361C<32>
l006E58FD:
	fn00724FE0(dwArg18, dwArg1C, eax_124)
	ecxOut = dwLoc04_407
	edxOut = edx_102
	return dwArg18
l006E57BC:
	word32 edx_171
	branch fn00703120(dwArg04, out edx_171) == ebp_23 l006E5801
l006E5801:
	word32 eax_177 = Mem167[dwArg08:word32]
	word32 ebx_178 = 0<32>
	branch ebp_23 > 0<32> l006E581B
l006E581B:
	word32 ecx_599
	word32 edx_600
	word32 eax_195 = fn00703180(dwArg04, ebx_178, out ecx_599, out edx_600)
	branch eax_195 == 0<32> l006E588A
l006E588A:
	word32 edx_206
	word32 ecx_601
	fn006E1160(out ecx_601, out edx_206)
	Mem221[dwArg14:word32] = ebx_178 + 1<32>
	Mem222[dwArg14 + 4<32>:word32] = 0<32>
	strncpy(dwArg18, 0x8D3664<32>, dwArg1C)
	ecxOut = eax_177
	edxOut = edx_206
	return dwArg18
l006E582B:
	word32 ecx_263
	word32 edx_265
	word32 eax_264 = fn006E6E70(fp - 4<32>, dwArg14 + 4<32>, out ecx_263, out edx_265)
	word32 v14_269 = Mem261[eax_195:word32] + 0xFFFFFFFF<32>
	Mem270[eax_195:word32] = v14_269
	branch v14_269 != 0<32> l006E586D
l006E5861:
	word32 edx_274 = Mem270[eax_195 + 4<32>:word32]
	call Mem270[edx_274 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_263,edx:edx_274,Stack +0004:eax_195,Stack +000C:dwArg08,Stack +0020:dwArg04,Stack +0024:dwArg08
		defs: edx:edx_281
l006E586D:
	ebx_178 = ebx_178 + 1<32>
	branch eax_264 != 0<32> l006E58BF
l006E58BF:
	Mem302[dwArg14:word32] = ebx_178
	ecxOut = eax_177
	edxOut = dwArg14
	return eax_264
l006E5874:
	branch ebx_178 < ebp_23 l006E5817
l006E5817:
l006E5878:
	Mem313[dwArg08:word32] = eax_177
	ecxOut = eax_177
	edxOut = edx_265
	return 0<32>
l006E580D:
	Mem327[dwArg08:word32] = eax_177
	ecxOut = eax_177
	edxOut = edx_171
	return 0<32>
l006E57C9:
	Mem343[dwArg14:word32] = 0<32>
	word32 ecx_344 = 0x8D36A0<32>
	branch dwArg20 != 0<32> l006E57E4
l006E57DF:
	ecx_344 = 0x8D3678<32>
l006E57E4:
	fn00724FE0(dwArg18, dwArg1C, ecx_344)
	ecxOut = dwLoc04_407
	edxOut = dwArg1C
	return dwArg18
fn006E5710_exit:
l006E5758:
	esi_22 = esi_22 - 1<32>
l006E5743:
	branch esi_22 != 0<32> l006E574A
l006E5747:
	ebp_23 = ebp_23 + 1<32>
l006E574A:
	esi_22 = esi_22 + 1<32>


word32 fn006E5920(word32 eax, word32 edx, word32 esi, ptr32 & ecxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E5C60
// MayUse:  eax:[0..31] edx:[0..31] esi:[0..31]
// LiveOut: eax ecx
// Trashed: SCZO eax ecx Top
// Preserved: esp
fn006E5920_entry:
l006E5920:
	branch eax != 0xA163B8<32> l006E5940
l006E5940:
	ecxOut = fn00724FE0(esi, edx, 0x8D36C0<32>)
	return <invalid>
l006E5927:
	ecxOut = fn00724FE0(esi, edx, 0x8D36C0<32>)
	return <invalid>
fn006E5920_exit:


word32 fn006E5960(word32 eax)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E5C60
// MayUse:  eax:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx edx Top
// Preserved: esp
fn006E5960_entry:
l006E5960:
	word32 eax_6 = Mem0[eax + 4<32>:word32]
	branch eax_6 == 0xA1E4B8<32> l006E597C
l006E596A:
	word32 ecx_75
	word32 edx_76
	branch fn006D5670(eax_6, 0xA1E4B8<32>, out ecx_75, out edx_76) == 0<32> l006E599C
l006E597C:
	word32 edx_74
	branch fn006E1970(Mem24[0x00A18A34<p32>:word32], 0x8D36DC<32>, 1<32>, out edx_74) == 0<32> l006E599C
l006E599C:
	return 0<32>
l006E5996:
	return 1<32>
fn006E5960_exit:


word32 fn006E59A0(word32 ebx, word32 edi, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E5C60
// MayUse:  ebx:[0..31] edi:[0..31] Stack +0004:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx edx Top
// Preserved: esi esp
fn006E59A0_entry:
l006E59A0:
	word32 eax_24
	word32 esi_10 = Mem9[Mem0[edi + 4<32>:word32] + 0x50<32>:word32]
	branch esi_10 == 0<32> l006E59EA
l006E59AB:
	branch Mem9[esi_10:word32] == 0<32> l006E59EA
l006E59B0:
	word32 eax_16 = Mem9[esi_10 + 8<32>:word32]
	branch eax_16 == 0<32> l006E59EA
l006E59EA:
	Mem22[ebx:word32] = 0x8D3704<32>
	eax_24 = 0xFFFFFFFF<32>
l006E59B7:
	word32 eax_32
	word32 ecx_33
	word32 edx_34
	call eax_16 (retsize: 4;)
		uses: ecx:ecx_33,edx:edx_34,Stack +0008:0<32>
		defs: eax:eax_32,ecx:ecx_33,edx:edx_34
	branch eax_32 == 1<32> l006E59CF
l006E59CF:
	word32 edx_51
	call Mem30[esi_10:word32] (retsize: 4;)
		uses: ecx:dwArg04,edx:edx_51,Stack +0004:edi,Stack +0008:0<32>,Stack +000C:dwArg04,Stack +0018:dwArg04
		defs: eax:eax_49,edx:edx_51
	branch eax_24 >= 0<32> l006E59F3
l006E59F3:
	return eax_24
l006E59E2:
	Mem63[ebx:word32] = 0x8D3720<32>
	return eax_24
l006E59C4:
	Mem66[ebx:word32] = 0x8D3730<32>
	return 0xFFFFFFFF<32>
fn006E59A0_exit:


word32 fn006E5AD0(word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00738CB0
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31] Stack +0010:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx edx Top
// Preserved: edi esi esp
fn006E5AD0_entry:
l006E5AD0:
	word32 eax_8 = Mem6[dwArg04 + 4<32>:word32]
	branch eax_8 == 0xA16588<32> l006E5B08
l006E5ADF:
	word32 edx_341
	word32 ecx_340
	branch fn006D5670(eax_8, 0xA16588<32>, out ecx_340, out edx_341) != 0<32> l006E5B08
l006E5B08:
	word32 edx_28 = Mem27[dwArg04 + 8<32>:word32]
	branch edx_28 >= dwArg0C l006E5B6D
l006E5B6D:
	branch edx_28 <= dwArg10 l006E5BCF
l006E5BCF:
	branch edx_28 <= 0<32> l006E5BF3
l006E5BD3:
	word32 eax_38 = fp + 0x10<32> + 4<32>
	word32 ecx_39 = dwArg04 + 0xC<32>
l006E5BE0:
	Mem54[Mem45[eax_38 + 0<32>:word32]:word32] = Mem45[ecx_39:word32]
	eax_38 = eax_38 + 4<32>
	ecx_39 = ecx_39 + 4<32>
	edx_28 = edx_28 - 1<32>
	branch edx_28 != 0<32> l006E5BE0
l006E5BF2:
l006E5BF3:
	return 1<32>
l006E5B75:
	branch dwArg08 == 0<32> l006E5BA6
l006E5BA6:
	branch dwArg0C == dwArg10 l006E5BB4
l006E5BAF:
l006E5BB4:
	word32 ecx_350
	word32 edx_351
	fn006E15D0(Mem78[0x00A16B7C<p32>:word32], 0x8D3784<32>, out ecx_350, out edx_351)
	return 0<32>
l006E5B7D:
	branch dwArg0C == dwArg10 l006E5B8B
l006E5B86:
l006E5B8B:
	word32 ecx_348
	word32 edx_349
	fn006E15D0(Mem116[0x00A16B7C<p32>:word32], 0x8D37BC<32>, out ecx_348, out edx_349)
	return 0<32>
l006E5B13:
	branch dwArg08 == 0<32> l006E5B47
l006E5B47:
	branch dwArg0C == dwArg10 l006E5B52
l006E5B4D:
l006E5B52:
	word32 ecx_346
	word32 edx_347
	fn006E15D0(Mem150[0x00A16B7C<p32>:word32], 0x8D3784<32>, out ecx_346, out edx_347)
	return 0<32>
l006E5B20:
	branch dwArg0C == dwArg10 l006E5B2B
l006E5B26:
l006E5B2B:
	word32 ecx_344
	word32 edx_345
	fn006E15D0(Mem189[0x00A16B7C<p32>:word32], 0x8D37BC<32>, out ecx_344, out edx_345)
	return 0<32>
l006E5AF1:
	word32 edx_343
	word32 ecx_342
	fn006E0F80(Mem14[0x00A18720<p32>:word32], 0x8D1184<32>, out ecx_342, out edx_343)
	return 0<32>
fn006E5AD0_exit:


word32 fn006E5C00(word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00738CB0
// MayUse:  Stack +0008:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx Top
// Preserved: esp
fn006E5C00_entry:
l006E5C00:
	branch dwArg08 != 0<32> l006E5C0E
l006E5C0E:
	branch Mem0[dwArg08 + 4<32>:word32] == 0xA1D1B8<32> l006E5C2C
l006E5C2C:
	branch fn006FCF20(dwArg08) == 0<32> l006E5C08
l006E5C39:
	word32 ecx_94
	word32 edx_95
	fn006E15D0(Mem12[0x00A16B7C<p32>:word32], 0x8D37F0<32>, out ecx_94, out edx_95)
	return 0<32>
l006E5C17:
	word32 edx_93
	fn006E1DC0(out edx_93)
	return 0<32>
l006E5C08:
	return 1<32>
fn006E5C00_exit:


word32 fn006E5C60(word32 eax, word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10, word32 dwArg14, ptr32 & ecxOut, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E6E70
// MayUse:  eax:[0..31] Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31] Stack +0010:[0..31] Stack +0014:[0..31]
// LiveOut: eax ecx edx
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn006E5C60_entry:
	byte bArg0C_3394 = SLICE(dwArg0C, byte, 0)
l006E5C60:
	word32 ebx_21 = Mem17[dwArg08:word32]
	word32 eax_23 = CONVERT(Mem17[ebx_21:byte], byte, int32)
	word32 dwLoc34_2844 = ebx_21 + 1<32>
	branch eax_23 >u 0xFFFFFF86<32> l006E6D8C
l006E5C8B:
	word32 edi_1351
	word16 si_2595
	word32 edi_1147
	word32 esi_1171
	word32 edi_2168
	switch (eax_23 + 0xFFFFFFBE<32>) { l006E5D2B l006E6D8C l006E612C l006E6D8C l006E6D8C l006E6D8C l006E5E0D l006E5EDA l006E6D8C l006E6018 l006E5FCE l006E6D8C l006E6D8C l006E6B43 l006E6D8C l006E6D8C l006E6D8C l006E6AD7 l006E6D8C l006E6B15 l006E6D8C l006E6D8C l006E6D8C l006E6D8C l006E6D8C l006E6D8C l006E6D8C l006E6D8C l006E6D8C l006E6D8C l006E6D8C l006E6D8C l006E5C99 l006E618F l006E60EA l006E66BF l006E60A8 l006E6D8C l006E5D74 l006E5E43 l006E6D8C l006E5F46 l006E5F10 l006E6D8C l006E5F10 l006E6D8C l006E6D8C l006E6D8C l006E6D8C l006E61E4 l006E6CBC l006E69E6 l006E6D8C l006E6BFB l006E6D8C l006E6D8C l006E6400 }
l006E6400:
	branch Mem27[ebx_21 + 1<32>:byte] != 0x23<8> l006E65B0
l006E65B0:
	Mem33[eax:word32] = Mem27[eax:word32] + 4<32>
	word32 esi_36 = Mem33[Mem33[eax:word32] - 4<32>:word32]
	branch dwArg04 != 0xA163B8<32> l006E65C8
l006E65C8:
	word32 eax_38 = Mem33[dwArg04 + 4<32>:word32]
	branch eax_38 == 0xA1B450<32> l006E6624
l006E65D2:
	word32 edx_3945
	word32 ecx_3944
	branch fn006D5670(eax_38, 0xA1B450<32>, out ecx_3944, out edx_3945) != 0<32> l006E6624
l006E6624:
	Mem59[esi_36:word32] = dwArg04 + 0x14<32>
l006E65E4:
	word32 eax_60 = Mem44[dwArg04 + 4<32>:word32]
	branch eax_60 == 0xA23B20<32> l006E660A
l006E65EE:
	word32 edx_3949
	word32 ecx_3948
	branch fn006D5670(eax_60, 0xA23B20<32>, out ecx_3948, out edx_3949) != 0<32> l006E660A
l006E660A:
	word32 edx_3947
	word32 ecx_3946
	word32 eax_90 = fn0071FC50(dwArg04, 0<32>, out ecx_3946, out edx_3947)
	branch eax_90 == 0<32> l006E62CA
l006E661D:
	Mem101[esi_36:word32] = eax_90 + 0x14<32>
l006E6600:
l006E65C0:
	Mem103[esi_36:word32] = 0<32>
l006E6629:
	branch Mem106[ebx_21 + 1<32>:byte] != 0x23<8> l006E668A
l006E668A:
	word32 eax_110 = Mem106[esi_36:word32]
	branch eax_110 == 0<32> l006E6D6E
l006E6694:
	eax_115 = eax_110
l006E6697:
	word32 eax_115
	eax_115 = eax_4023 + 1<32>
	eax_4023 = eax_115
	branch Mem106[eax_4023:byte] != 0<8> l006E6697
l006E66A0:
	branch eax_115 - (eax_110 + 1<32>) == fn006ECC00(dwArg04) l006E6D6E
l006E66B5:
l006E662E:
	Mem151[eax:word32] = Mem106[eax:word32] + 4<32>
	word32 esi_152 = 0<32>
	branch (bArg0C_3394 & 2<8>) != 0<8> l006E663F
l006E663A:
	esi_152 = Mem151[Mem151[eax:word32] - 4<32>:word32]
l006E663F:
	branch dwArg04 != 0xA163B8<32> l006E6666
l006E6666:
	Mem181[esi_152:word32] = fn006ECC00(dwArg04)
	Mem189[dwArg08:word32] = ebx_21 + 2<32>
	ecxOut = ebx_21 + 2<32>
	edxOut = dwArg08
	return 0<32>
l006E6647:
	Mem200[esi_152:word32] = 0<32>
	Mem207[dwArg08:word32] = ebx_21 + 2<32>
	ecxOut = ebx_21 + 2<32>
	edxOut = dwArg08
	return 0<32>
l006E6409:
	Mem214[eax:word32] = Mem27[eax:word32] + 4<32>
	word32 eax_215 = Mem214[eax:word32]
	word32 ebx_216 = Mem214[eax_215 - 4<32>:word32]
	Mem225[eax:word32] = eax_215 + 4<32>
	word32 ecx_218 = 0<32>
	word32 dwLoc2C_2862 = 0<32>
	word32 dwLoc30_2863 = 0<32>
	branch (dwArg0C & 2<32>) == 0<32> l006E6432
l006E6432:
	dwLoc2C_2862 = Mem225[eax_215:word32]
l006E6429:
	dwLoc30_2863 = Mem225[eax_215:word32]
l006E6439:
	branch dwArg04 != 0xA163B8<32> l006E646A
l006E646A:
	word32 eax_235 = Mem234[dwArg04 + 4<32>:word32]
	branch eax_235 == 0xA1B450<32> l006E6563
l006E6478:
	word32 edx_3951
	word32 ecx_3950
	branch fn006D5670(eax_235, 0xA1B450<32>, out ecx_3950, out edx_3951) != 0<32> l006E6563
l006E6563:
	Mem262[ebx_216:word32] = dwArg04 + 0x14<32>
	branch (dwArg0C & 2<32>) == 0<32> l006E658E
l006E658E:
	Mem272[dwLoc2C_2862:word32] = Mem262[dwArg04 + 8<32>:word32]
	Mem278[dwArg08:word32] = ebx_21 + 2<32>
	ecxOut = ebx_21 + 2<32>
	edxOut = dwArg08
	return 0<32>
l006E656C:
	ecx_218 = Mem262[dwArg04 + 8<32>:word32]
l006E648E:
	word32 eax_285 = Mem242[dwArg04 + 4<32>:word32]
	branch eax_285 == 0xA23B20<32> l006E6503
l006E6498:
	word32 edx_3955
	word32 ecx_3954
	branch fn006D5670(eax_285, 0xA23B20<32>, out ecx_3954, out edx_3955) != 0<32> l006E6503
l006E6503:
	word32 edx_3953
	word32 ecx_3952
	word32 eax_317 = fn0071FC50(dwArg04, 0<32>, out ecx_3952, out edx_3953)
	branch eax_317 == 0<32> l006E62CA
l006E6516:
	Mem329[ebx_216:word32] = eax_317 + 0x14<32>
	branch (dwArg0C & 2<32>) == 0<32> l006E6541
l006E6541:
	Mem337[dwLoc2C_2862:word32] = Mem329[eax_317 + 8<32>:word32]
	Mem344[dwArg08:word32] = ebx_21 + 2<32>
	ecxOut = ebx_21 + 2<32>
	edxOut = dwArg08
	return 0<32>
l006E651F:
	Mem357[dwLoc30_2863:word32] = Mem329[eax_317 + 8<32>:word32]
	Mem363[dwArg08:word32] = ebx_21 + 2<32>
	ecxOut = ebx_21 + 2<32>
	edxOut = dwArg08
	return 0<32>
l006E64AA:
	word32 eax_373 = fn006E59A0(fp - 0x28<32>, dwArg04, ebx_216)
	branch eax_373 < 0<32> l006E6270
l006E64C1:
	branch (dwArg0C & 2<32>) == 0<32> l006E64E4
l006E64E4:
	Mem393[dwLoc2C_2862:word32] = eax_373
	Mem399[dwArg08:word32] = ebx_21 + 2<32>
	ecxOut = ebx_21 + 2<32>
	edxOut = dwArg08
	return 0<32>
l006E64C5:
	Mem411[dwLoc30_2863:word32] = eax_373
	Mem417[dwArg08:word32] = ebx_21 + 2<32>
	ecxOut = ebx_21 + 2<32>
	edxOut = dwArg08
	return 0<32>
l006E6441:
	Mem425[ebx_216:word32] = 0<32>
	branch (dwArg0C & 2<32>) != 0<32> l006E656F
l006E656F:
	Mem435[dwLoc30_2863:word32] = ecx_218
	Mem442[dwArg08:word32] = ebx_21 + 2<32>
	ecxOut = ebx_21 + 2<32>
	edxOut = dwArg08
	return 0<32>
l006E644B:
	Mem454[dwLoc2C_2862:word32] = 0<32>
	Mem460[dwArg08:word32] = ebx_21 + 2<32>
	ecxOut = ebx_21 + 2<32>
	edxOut = dwArg08
	return 0<32>
l006E6BFB:
	Mem467[eax:word32] = Mem27[eax:word32] + 4<32>
	word32 esi_470 = Mem467[Mem467[dwArg04 + 4<32>:word32] + 0x50<32>:word32]
	branch esi_470 == 0<32> l006E6CB2
l006E6C15:
	branch Mem474[esi_470 + 4<32>:word32] == 0<32> l006E6CB2
l006E6C1F:
	word32 eax_478 = Mem474[esi_470 + 8<32>:word32]
	branch eax_478 == 0<32> l006E6CB2
l006E6CB2:
l006E6C2A:
	word32 esp_487
	word32 eax_488
	word32 edx_490
	call eax_478 (retsize: 4;)
		uses: eax:eax_478,edx:edx_490,Stack +0004:dwArg04,Stack +0008:0<32>,Stack +0028:dwLoc28,Stack +0054:dwArg04,Stack +0058:dwArg08,Stack +005C:dwArg0C,Stack +0060:dwArg10,Stack +0064:dwArg14
		defs: eax:eax_488,edx:edx_490,esp:esp_487
	branch eax_488 == 1<32> l006E6C41
l006E6C41:
	word32 eax_496 = Mem486[esp_487 + 0x2C<32>:word32]
	word32 ecx_497 = Mem486[esi_470 + 4<32>:word32]
	Mem499[esp_487 + 4<32>:word32] = eax_496
	Mem501[esp_487:word32] = 0<32>
	Mem503[esp_487 - 4<i32>:word32] = dwArg04
	word32 eax_505
	word32 edx_507
	call ecx_497 (retsize: 4;)
		uses: eax:eax_496,edx:edx_507,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C,Stack +0014:dwArg10,Stack +0018:dwArg14,Stack +FFFFFFDC:dwLoc28
		defs: eax:eax_505,edx:edx_507
	branch eax_505 < 0<32> l006E6BD6
l006E6C55:
	branch Mem503[ebx_21 + 1<32>:byte] != 0x23<8> l006E6D6E
l006E6C5E:
	Mem518[eax:word32] = Mem503[eax:word32] + 4<32>
	word32 edi_519 = Mem518[eax:word32]
	word32 ecx_520 = 0<32>
	word32 edx_521 = 0<32>
	branch (dwArg0C & 2<32>) == 0<32> l006E6C75
l006E6C75:
	ecx_520 = Mem518[edi_519 - 4<32>:word32]
l006E6C70:
	edx_521 = Mem518[edi_519 - 4<32>:word32]
l006E6C78:
	branch (dwArg0C & 2<32>) == 0<32> l006E6C97
l006E6C97:
	Mem541[ecx_520:word32] = eax_505
	Mem548[dwArg08:word32] = ebx_21 + 2<32>
	ecxOut = ebx_21 + 2<32>
	edxOut = dwArg08
	return 0<32>
l006E6C7C:
	Mem558[edx_521:word32] = eax_505
	Mem566[dwArg08:word32] = ebx_21 + 2<32>
	ecxOut = ebx_21 + 2<32>
	edxOut = dwArg08
	return 0<32>
l006E6C37:
l006E69E6:
	branch Mem27[ebx_21 + 1<32>:byte] != 0x23<8> l006E6A9A
l006E6A9A:
	Mem576[eax:word32] = Mem27[eax:word32] + 4<32>
	word32 eax_577 = Mem576[dwArg04 + 4<32>:word32]
	word32 edi_580 = Mem576[Mem576[eax:word32] - 4<32>:word32]
	branch eax_577 == 0xA23B20<32> l006E6ABE
l006E6AAC:
	word32 edx_3959
	word32 ecx_3958
	branch fn006D5670(eax_577, 0xA23B20<32>, out ecx_3958, out edx_3959) == 0<32> l006E6B39
l006E6ABE:
	Mem603[edi_580:word32] = Mem598[dwArg04 + 0xC<32>:word32]
	Mem611[dwArg08:word32] = ebx_21 + 1<32>
	ecxOut = ebx_21 + 1<32>
	edxOut = dwArg08
	return 0<32>
l006E69EF:
	Mem618[eax:word32] = Mem27[eax:word32] + 4<32>
	word32 eax_619 = Mem618[eax:word32]
	word32 ecx_620 = Mem618[eax_619 - 4<32>:word32]
	Mem630[eax:word32] = eax_619 + 4<32>
	word32 dwLoc2C_2918 = 0<32>
	word32 dwLoc28_2919 = 0<32>
	branch (dwArg0C & 2<32>) == 0<32> l006E6A1C
l006E6A1C:
	dwLoc2C_2918 = Mem630[eax_619:word32]
l006E6A13:
	dwLoc28_2919 = Mem630[eax_619:word32]
l006E6A23:
	word32 eax_638 = Mem637[dwArg04 + 4<32>:word32]
	branch eax_638 == 0xA23B20<32> l006E6A49
l006E6A2D:
	word32 edx_3957
	word32 ecx_3956
	branch fn006D5670(eax_638, 0xA23B20<32>, out ecx_3956, out edx_3957) != 0<32> l006E6A49
l006E6A49:
	Mem666[ecx_620:word32] = Mem662[dwArg04 + 0xC<32>:word32]
	branch (dwArg0C & 2<32>) == 0<32> l006E6A78
l006E6A78:
	Mem675[dwLoc2C_2918:word32] = Mem666[dwArg04 + 8<32>:word32]
	Mem683[dwArg08:word32] = ebx_21 + 2<32>
	ecxOut = ebx_21 + 2<32>
	edxOut = dwArg08
	return 0<32>
l006E6A56:
	Mem695[dwLoc28_2919:word32] = Mem666[dwArg04 + 8<32>:word32]
	Mem702[dwArg08:word32] = ebx_21 + 2<32>
	ecxOut = ebx_21 + 2<32>
	edxOut = dwArg08
	return 0<32>
l006E6A3F:
l006E6CBC:
	Mem710[eax:word32] = Mem27[eax:word32] + 4<32>
	word32 eax_714 = Mem710[dwArg04 + 4<32>:word32]
	word32 esi_715 = Mem710[eax_714 + 0x50<32>:word32]
	dwLoc34_2844 = ebx_21 + 2<32>
	branch Mem710[ebx_21 + 1<32>:byte] == 0x23<8> l006E6CE6
l006E6CE6:
	branch (Mem719[eax_714 + 0x54<32>:byte] & 1<8>) == 0<8> l006E6D82
l006E6CF0:
	branch esi_715 == 0<32> l006E6D82
l006E6CF8:
	branch Mem719[esi_715 + 0xC<32>:word32] == 0<32> l006E6D82
l006E6D02:
	word32 eax_729 = Mem719[esi_715 + 8<32>:word32]
	branch eax_729 == 0<32> l006E6D82
l006E6D82:
l006E6D09:
	word32 esp_738
	word32 eax_739
	word32 edx_741
	call eax_729 (retsize: 4;)
		uses: eax:eax_729,edx:edx_741,Stack +0004:dwArg04,Stack +0008:0<32>,Stack +0028:dwLoc28,Stack +0054:dwArg04,Stack +0058:dwArg08,Stack +005C:dwArg0C,Stack +0060:dwArg10,Stack +0064:dwArg14
		defs: eax:eax_739,edx:edx_741,esp:esp_738
	branch eax_739 == 1<32> l006E6D20
l006E6D20:
	word32 edx_747 = Mem737[esp_738 + 0x2C<32>:word32]
	word32 eax_748 = Mem737[esi_715 + 0xC<32>:word32]
	Mem750[esp_738 + 4<32>:word32] = edx_747
	Mem752[esp_738:word32] = 0<32>
	Mem754[esp_738 - 4<i32>:word32] = dwArg04
	word32 eax_756
	call eax_748 (retsize: 4;)
		uses: eax:eax_748,edx:edx_747,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C,Stack +0014:dwArg10,Stack +0018:dwArg14,Stack +FFFFFFDC:dwLoc28
		defs: eax:eax_756
	branch eax_756 < 0<32> l006E6BD6
l006E6D38:
	Mem767[eax:word32] = Mem754[eax:word32] + 4<32>
	word32 edi_768 = Mem767[eax:word32]
	word32 ecx_769 = 0<32>
	word32 edx_770 = 0<32>
	branch (dwArg0C & 2<32>) == 0<32> l006E6D4F
l006E6D4F:
	ecx_769 = Mem767[edi_768 - 4<32>:word32]
l006E6D4A:
	edx_770 = Mem767[edi_768 - 4<32>:word32]
l006E6D52:
	branch (dwArg0C & 2<32>) == 0<32> l006E6D6C
l006E6D6C:
	Mem783[ecx_769:word32] = eax_756
l006E6D56:
	Mem790[edx_770:word32] = eax_756
	Mem796[dwArg08:word32] = ebx_21 + 2<32>
	ecxOut = ebx_21 + 2<32>
	edxOut = dwArg08
	return 0<32>
l006E6D16:
l006E6CDC:
l006E61E4:
	branch Mem27[ebx_21 + 1<32>:byte] != 0x23<8> l006E636E
l006E636E:
	word32 eax_829
	Mem807[eax:word32] = Mem27[eax:word32] + 4<32>
	word32 eax_808 = Mem807[dwArg04 + 4<32>:word32]
	word32 edi_811 = Mem807[Mem807[eax:word32] - 4<32>:word32]
	branch eax_808 == 0xA1B450<32> l006E63D0
l006E6380:
	word32 ecx_3976
	word32 edx_3977
	branch fn006D5670(eax_808, 0xA1B450<32>, out ecx_3976, out edx_3977) != 0<32> l006E63D0
l006E63D0:
	eax_829 = dwArg04 + 0x14<32>
l006E6392:
	word32 eax_830 = Mem816[dwArg04 + 4<32>:word32]
	branch eax_830 == 0xA23B20<32> l006E63B8
l006E639C:
	word32 edx_3981
	word32 ecx_3980
	branch fn006D5670(eax_830, 0xA23B20<32>, out ecx_3980, out edx_3981) != 0<32> l006E63B8
l006E63B8:
	word32 edx_3979
	word32 ecx_3978
	word32 eax_860 = fn0071FC50(dwArg04, 0<32>, out ecx_3978, out edx_3979)
	branch eax_860 == 0<32> l006E62CA
l006E63CB:
	eax_829 = eax_860 + 0x14<32>
l006E63D3:
	Mem874[edi_811:word32] = eax_829
	word32 edx_875 = eax_829 + 1<32>
l006E63D8:
	eax_829 = eax_4024 + 1<32>
	eax_4024 = eax_829
	branch Mem874[eax_4024:byte] != 0<8> l006E63D8
l006E63E1:
	branch eax_829 - edx_875 == fn006ECC00(dwArg04) l006E6D6E
l006E63F6:
l006E61ED:
	Mem912[eax:word32] = Mem27[eax:word32] + 4<32>
	word32 eax_913 = Mem912[eax:word32]
	word32 ebx_914 = Mem912[eax_913 - 4<32>:word32]
	Mem923[eax:word32] = eax_913 + 4<32>
	word32 dwLoc30_2964 = 0<32>
	word32 dwLoc2C_2965 = 0<32>
	branch (dwArg0C & 2<32>) == 0<32> l006E6216
l006E6216:
	dwLoc30_2964 = Mem923[eax_913:word32]
l006E620D:
	dwLoc2C_2965 = Mem923[eax_913:word32]
l006E621D:
	word32 eax_931 = Mem930[dwArg04 + 4<32>:word32]
	branch eax_931 == 0xA1B450<32> l006E6321
l006E622B:
	word32 edx_3983
	word32 ecx_3982
	branch fn006D5670(eax_931, 0xA1B450<32>, out ecx_3982, out edx_3983) != 0<32> l006E6321
l006E6321:
	Mem958[ebx_914:word32] = dwArg04 + 0x14<32>
	branch (dwArg0C & 2<32>) == 0<32> l006E634C
l006E634C:
	Mem967[dwLoc30_2964:word32] = Mem958[dwArg04 + 8<32>:word32]
	Mem974[dwArg08:word32] = ebx_21 + 2<32>
	ecxOut = ebx_21 + 2<32>
	edxOut = dwArg08
	return 0<32>
l006E632A:
	Mem987[dwLoc2C_2965:word32] = Mem958[dwArg04 + 8<32>:word32]
	Mem993[dwArg08:word32] = ebx_21 + 2<32>
	ecxOut = ebx_21 + 2<32>
	edxOut = dwArg08
	return 0<32>
l006E6241:
	word32 eax_999 = Mem938[dwArg04 + 4<32>:word32]
	branch eax_999 == 0xA23B20<32> l006E62BB
l006E624B:
	word32 edx_3987
	word32 ecx_3986
	branch fn006D5670(eax_999, 0xA23B20<32>, out ecx_3986, out edx_3987) != 0<32> l006E62BB
l006E62BB:
	word32 edx_3985
	word32 ecx_3984
	word32 eax_1031 = fn0071FC50(dwArg04, 0<32>, out ecx_3984, out edx_3985)
	branch eax_1031 != 0<32> l006E62D4
l006E62D4:
	Mem1043[ebx_914:word32] = eax_1031 + 0x14<32>
	branch (dwArg0C & 2<32>) == 0<32> l006E62FF
l006E62FF:
	Mem1052[dwLoc30_2964:word32] = Mem1043[eax_1031 + 8<32>:word32]
	Mem1058[dwArg08:word32] = ebx_21 + 2<32>
	ecxOut = ebx_21 + 2<32>
	edxOut = dwArg08
	return 0<32>
l006E62DD:
	Mem1071[dwLoc2C_2965:word32] = Mem1043[eax_1031 + 8<32>:word32]
	Mem1077[dwArg08:word32] = ebx_21 + 2<32>
	ecxOut = ebx_21 + 2<32>
	edxOut = dwArg08
	return 0<32>
l006E62CA:
l006E625D:
	word32 eax_1088 = fn006E59A0(fp - 0x28<32>, dwArg04, ebx_914)
	branch eax_1088 >= 0<32> l006E6279
l006E6279:
	branch (dwArg0C & 2<32>) == 0<32> l006E629C
l006E629C:
	Mem1108[dwLoc30_2964:word32] = eax_1088
	Mem1114[dwArg08:word32] = ebx_21 + 2<32>
	ecxOut = ebx_21 + 2<32>
	edxOut = dwArg08
	return 0<32>
l006E627D:
	Mem1126[dwLoc2C_2965:word32] = eax_1088
	Mem1132[dwArg08:word32] = ebx_21 + 2<32>
	ecxOut = ebx_21 + 2<32>
	edxOut = dwArg08
	return 0<32>
l006E6270:
l006E5F10:
	Mem1144[eax:word32] = Mem27[eax:word32] + 4<32>
	edi_1147 = Mem1144[Mem1144[eax:word32] - 4<32>:word32]
	branch fn006E5960(dwArg04) != 0<32> l006E5F3C
l006E5F23:
	word32 edi_3963
	word32 esi_3962
	word32 edx_3961
	word32 ecx_3960
	word32 eax_1166 = fn007051A0(edi_1147, dwArg04, out ecx_3960, out edx_3961, out esi_3962, out edi_3963)
	esi_1171 = eax_1166
	branch eax_1166 != 0xFFFFFFFF<32> l006E5EC4
l006E5F33:
	branch fn006E0FC0() == 0<32> l006E5EC4
l006E5F3C:
l006E5F46:
	Mem1181[eax:word32] = Mem27[eax:word32] + 4<32>
	word32 eax_1182 = Mem1181[dwArg04 + 4<32>:word32]
	word32 edi_1185 = Mem1181[Mem1181[eax:word32] - 4<32>:word32]
	branch eax_1182 == 0xA1E7E8<32> l006E5FAF
l006E5F58:
	word32 edx_3965
	word32 ecx_3964
	branch fn006D5670(eax_1182, 0xA1E7E8<32>, out ecx_3964, out edx_3965) != 0<32> l006E5FAF
l006E5FAF:
	Mem1220[edi_1185:word32] = fn00705340(edi_1185, dwArg04)
	Mem1227[dwArg08:word32] = ebx_21 + 1<32>
	ecxOut = ebx_21 + 1<32>
	edxOut = dwArg08
	return 0<32>
l006E5F6A:
	word32 eax_1233 = Mem1190[dwArg04 + 4<32>:word32]
	branch eax_1233 == 0xA1F400<32> l006E5F90
l006E5F74:
	word32 edx_3967
	word32 ecx_3966
	branch fn006D5670(eax_1233, 0xA1F400<32>, out ecx_3966, out edx_3967) != 0<32> l006E5F90
l006E5F90:
	Mem1269[edi_1185:word32] = fn00710B80(dwArg04)
	Mem1276[dwArg08:word32] = ebx_21 + 1<32>
	ecxOut = ebx_21 + 1<32>
	edxOut = dwArg08
	return 0<32>
l006E5F86:
l006E5E43:
	Mem1284[eax:word32] = Mem27[eax:word32] + 4<32>
	edi_1147 = Mem1284[Mem1284[eax:word32] - 4<32>:word32]
	branch fn006E5960(dwArg04) != 0<32> l006E5E6F
l006E5E56:
	word32 edi_3971
	word32 esi_3970
	word32 edx_3969
	word32 ecx_3968
	word32 eax_1301 = fn007051A0(edi_1147, dwArg04, out ecx_3968, out edx_3969, out esi_3970, out edi_3971)
	esi_1171 = eax_1301
	branch eax_1301 != 0xFFFFFFFF<32> l006E5E79
l006E5E79:
	branch eax_1301 <= 0x7FFFFFFF<32> l006E5E9E
l006E5E9E:
	branch eax_1301 >= 0x80000000<32> l006E5EC4
l006E5EA6:
	word32 edx_3995
	word32 ecx_3994
	fn006E0F80(Mem1299[0x00A18598<p32>:word32], dwArg04, out ecx_3994, out edx_3995)
l006E5E81:
	word32 edx_3991
	word32 ecx_3990
	fn006E0F80(Mem1299[0x00A18598<p32>:word32], dwArg04, out ecx_3990, out edx_3991)
l006E5E66:
	branch fn006E0FC0() == 0<32> l006E5EC4
l006E5E6F:
l006E5D74:
	Mem1348[eax:word32] = Mem27[eax:word32] + 4<32>
	edi_1351 = Mem1348[Mem1348[eax:word32] - 4<32>:word32]
	branch fn006E5960(dwArg04) != 0<32> l006E5DA0
l006E5D87:
	word32 edi_3975
	word32 esi_3974
	word32 edx_3973
	word32 ecx_3972
	word32 eax_1365 = fn007051A0(edi_1351, dwArg04, out ecx_3972, out edx_3973, out esi_3974, out edi_3975)
	si_2595 = SLICE(eax_1365, word16, 0) (alias)
	branch eax_1365 != 0xFFFFFFFF<32> l006E5DAA
l006E5DAA:
	branch eax_1365 >= 0xFFFF8000<32> l006E5DD0
l006E5DD0:
	branch eax_1365 <= 0x7FFF<32> l006E5DF6
l006E5DD8:
	word32 edx_3993
	word32 ecx_3992
	fn006E0F80(Mem1363[0x00A18598<p32>:word32], dwArg04, out ecx_3992, out edx_3993)
l006E5DB2:
	word32 ecx_3988
	word32 edx_3989
	fn006E0F80(Mem1363[0x00A18598<p32>:word32], dwArg04, out ecx_3988, out edx_3989)
l006E5D97:
	branch fn006E0FC0() == 0<32> l006E5DF6
l006E5DA0:
l006E60A8:
	Mem1412[eax:word32] = Mem27[eax:word32] + 4<32>
	word32 edi_1415 = Mem1412[Mem1412[eax:word32] - 4<32>:word32]
	real64 rRet0
	fn006FF3E0(dwArg04, out rRet0)
	branch fn006E0FC0() == 0<32> l006E60D0
l006E60D0:
	Mem1437[edi_1415:real32] = CONVERT(rRet0, real64, real32)
	Mem1445[dwArg08:word32] = ebx_21 + 1<32>
	ecxOut = ebx_21 + 1<32>
	edxOut = dwArg08
	return 0<32>
l006E60C6:
l006E66BF:
	Mem1453[eax:word32] = Mem27[eax:word32] + 4<32>
	branch Mem1453[Mem1453[eax:word32] - 4<32>:word32] != 0<32> l006E66D2
l006E66CB:
	fn00717C60()
l006E66D2:
	word32 ecx_1469
	byte al_1463 = Mem1453[ebx_21 + 1<32>:byte]
	branch al_1463 != 0x73<8> l006E66DF
l006E66DF:
	branch al_1463 != 0x74<8> l006E69DC
l006E69DC:
l006E66E7:
	ecx_1469 = 0<32>
l006E66D8:
	ecx_1469 = 1<32>
l006E66E9:
	Mem1477[eax:word32] = Mem1453[eax:word32] + 4<32>
	dwLoc34_2844 = ebx_21 + 2<32>
	branch Mem1477[Mem1477[eax:word32] - 4<32>:word32] != 0<32> l006E670A
l006E670A:
	word32 esi_1553
	word32 esp_1549
	branch ecx_1469 != 0<32> l006E6772
l006E670E:
	word32 eax_1495 = Mem1487[dwArg04 + 4<32>:word32]
	branch eax_1495 == 0xA1B450<32> l006E672A
l006E6718:
	word32 edx_4014
	word32 ecx_4013
	branch fn006D5670(eax_1495, 0xA1B450<32>, out ecx_4013, out edx_4014) == 0<32> l006E6772
l006E6772:
	word32 edx_4012
	word32 eax_1527 = fn007203E0(dwArg04, out edx_4012)
	branch eax_1527 != 0<32> l006E678B
l006E678B:
	word32 edx_4016
	word32 ecx_4015
	word32 eax_1544 = fn0071FB20(eax_1527, dwArg04, dwArg08, out ecx_4015, out edx_4016)
	word32 v65_1550 = Mem1542[eax_1527:word32] + 0xFFFFFFFF<32>
	Mem1551[eax_1527:word32] = v65_1550
	esp_1549 = fp - 0x44<32>
	esi_1553 = eax_1544
	branch v65_1550 != 0<32> l006E67AA
l006E679E:
	word32 eax_1555 = Mem1551[eax_1527 + 4<32>:word32]
	word32 esp_1559
	word32 edx_1562
	call Mem1551[eax_1555 + 0x18<32>:word32] (retsize: 4;)
		uses: eax:eax_1555,edx:edx_1562,Stack +0004:eax_1527,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C,Stack +0024:dwLoc28,Stack +0050:dwArg04,Stack +0054:dwArg08,Stack +0058:dwArg0C,Stack +005C:dwArg10,Stack +0060:dwArg14,Stack +FFFFFFDC:dwLoc28
		defs: edx:edx_1562,esp:esp_1559
	esp_1549 = esp_1559 + 4<32>
l006E67AA:
	branch eax_1544 != 0<32> l006E67B8
l006E67B8:
	word32 eax_1572 = Mem1571[eax_1544 + 4<32>:word32]
	branch eax_1572 == 0xA1B450<32> l006E6730
l006E67C6:
	word32 esp_1576 = esp_1549 - 4<i32>
	Mem1577[esp_1576:word32] = 0xA1B450<32>
	Mem1579[esp_1576 - 4<i32>:word32] = eax_1572
	esp_1549 = esp_1576 + 4<32>
	word32 edx_4018
	word32 ecx_4017
	branch fn006D5670(Mem1579[esp_1576 - 4<i32>:word32], Mem1579[esp_1576:word32], out ecx_4017, out edx_4018) != 0<32> l006E6730
l006E67DC:
	word32 v68_1591 = Mem1579[eax_1544:word32] + 0xFFFFFFFF<32>
	Mem1592[eax_1544:word32] = v68_1591
	branch v68_1591 != 0<32> l006E67ED
l006E67E1:
	word32 edx_1595 = Mem1592[eax_1544 + 4<32>:word32]
	word32 eax_1596 = Mem1592[edx_1595 + 0x18<32>:word32]
	Mem1598[esp_1576:word32] = eax_1544
	call eax_1596 (retsize: 4;)
		uses: eax:eax_1596,edx:edx_1595,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C,Stack +0014:dwArg10,Stack +0018:dwArg14,Stack +FFFFFFDC:dwLoc28
l006E67ED:
l006E67AE:
l006E6781:
l006E672A:
	Mem1617[dwArg04:word32] = Mem1615[dwArg04:word32] + 1<32>
	esp_1549 = fp - 0x44<32>
	esi_1553 = dwArg04
l006E6730:
	word32 eax_1691
	word32 ecx_1623 = Mem1622[esp_1549 + 0x10<32>:word32]
	word32 ebx_1626 = Mem1622[esi_1553 + 8<32>:word32]
	Mem1627[esp_1549 + 0x20<32>:word32] = ebx_1626
	branch Mem1622[ecx_1623:byte] != 0x23<8> l006E68F9
l006E68F9:
	word32 eax_1629 = esi_1553 + 0x14<32>
	eax_1631 = eax_1629
l006E6900:
	word32 eax_1631
	eax_1631 = eax_4025 + 1<32>
	eax_4025 = eax_1631
	branch Mem1627[eax_4025:byte] != 0<8> l006E6900
l006E6909:
	branch eax_1631 - (eax_1629 + 1<32>) == ebx_1626 l006E692A
l006E692A:
	Mem1647[esp_1549 + 0x24<32>:word32] = ebx_1626 + 1<32>
	word32 eax_1643 = ebx_1626 + 1<32>
	branch ebx_1626 != 1<32> l006E693A
l006E6935:
	eax_1643 = 1<32>
l006E693A:
	word32 esp_1651 = esp_1549 - 4<i32>
	Mem1653[esp_1651:word32] = eax_1643
	word32 eax_1654 = malloc(Mem1653[esp_1651:size_t])
	Mem1659[Mem1653[esp_1651 + 0x1C<32>:word32]:word32] = eax_1654
	branch eax_1654 != 0<32> l006E696D
l006E696D:
	branch fn006E54A0(eax_1654, Mem1659[esp_1651 + 0x60<32>:word32]) == 0<32> l006E699B
l006E699B:
	word32 edx_1682 = Mem1659[esp_1651 + 0x1C<32>:word32]
	Mem1684[esp_1651:word32] = Mem1659[esp_1651 + 0x28<32>:word32]
	Mem1687[esp_1651 - 4<32>:word32] = esi_1553 + 0x14<32>
	Mem1690[esp_1651 - 8<32>:word32] = Mem1687[edx_1682:word32]
	eax_1691 = memcpy(Mem1690[esp_1651 - 8<32>:(ptr32 void)], Mem1690[esp_1651 - 4<32>:(ptr32 void)], Mem1690[esp_1651:size_t])
l006E697C:
	word32 v74_1694 = Mem1659[esi_1553:word32] + 0xFFFFFFFF<32>
	Mem1695[esi_1553:word32] = v74_1694
	branch v74_1694 != 0<32> l006E688B
l006E6985:
	word32 edx_1698 = Mem1695[esi_1553 + 4<32>:word32]
	word32 eax_1699 = Mem1695[edx_1698 + 0x18<32>:word32]
	Mem1701[esp_1651:word32] = esi_1553
	call eax_1699 (retsize: 4;)
		uses: eax:eax_1699,edx:edx_1698,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C,Stack +0014:dwArg10,Stack +0018:dwArg14,Stack +FFFFFFDC:dwLoc28
l006E694E:
	word32 v73_1711 = Mem1659[esi_1553:word32] + 0xFFFFFFFF<32>
	Mem1712[esi_1553:word32] = v73_1711
	branch v73_1711 != 0<32> l006E6861
l006E6957:
	word32 eax_1715 = Mem1712[esi_1553 + 4<32>:word32]
	word32 ecx_1716 = Mem1712[eax_1715 + 0x18<32>:word32]
	Mem1718[esp_1651:word32] = esi_1553
	word32 edx_1727
	call ecx_1716 (retsize: 4;)
		uses: eax:eax_1715,edx:edx_1727,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C,Stack +0014:dwArg10,Stack +0018:dwArg14,Stack +FFFFFFDC:dwLoc28
		defs: edx:edx_1727
l006E690F:
	word32 v71_1733 = Mem1627[esi_1553:word32] + 0xFFFFFFFF<32>
	Mem1734[esi_1553:word32] = v71_1733
	branch v71_1733 != 0<32> l006E6920
l006E6914:
	word32 eax_1737 = Mem1734[esi_1553 + 4<32>:word32]
	word32 ecx_1738 = Mem1734[eax_1737 + 0x18<32>:word32]
	Mem1740[esp_1549 - 4<i32>:word32] = esi_1553
	word32 edx_1744
	call ecx_1738 (retsize: 4;)
		uses: eax:eax_1737,edx:edx_1744,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C,Stack +0014:dwArg10,Stack +0018:dwArg14,Stack +FFFFFFDC:dwLoc28
		defs: edx:edx_1744
l006E6920:
l006E6744:
	word32 edx_1750 = Mem1627[esp_1549 + 0x50<32>:word32]
	Mem1756[esp_1549 + 0x1C<32>:word32] = 0<32>
	Mem1757[esp_1549 + 0x14<32>:word32] = 0<32>
	Mem1758[esp_1549 + 0x24<32>:word32] = edx_1750 & 2<32>
	word32 eax_1751 = 0<32>
	word32 ecx_1752 = 0<32>
	branch (edx_1750 & 2<32>) == 0<32> l006E67F7
l006E67F7:
	Mem1761[eax:word32] = Mem1758[eax:word32] + 4<32>
	eax_1751 = Mem1761[Mem1761[eax:word32] - 4<32>:word32]
	Mem1765[esp_1549 + 0x1C<32>:word32] = eax_1751
l006E6761:
	Mem1767[eax:word32] = Mem1758[eax:word32] + 4<32>
	ecx_1752 = Mem1767[Mem1767[eax:word32] - 4<32>:word32]
	Mem1771[esp_1549 + 0x14<32>:word32] = ecx_1752
l006E6803:
	Mem1775[esp_1549 + 0x10<32>:word32] = Mem1773[esp_1549 + 0x10<32>:word32] + 1<32>
	branch eax_1751 != 0<32> l006E682B
l006E680C:
	branch ecx_1752 != 0<32> l006E682B
l006E682B:
	word32 edi_1786 = Mem1775[esp_1549 + 0x18<32>:word32]
	branch Mem1775[edi_1786:word32] != 0<32> l006E6895
l006E6895:
	word32 eax_1795
	branch (edx_1750 & 2<32>) == 0<32> l006E689D
l006E689D:
	eax_1795 = Mem1775[eax_1751:word32]
l006E6899:
	eax_1795 = Mem1775[ecx_1752:word32]
l006E689F:
	branch ebx_1626 + 1<32> <= eax_1795 l006E68C1
l006E68A6:
	word32 v69_1809 = Mem1775[esi_1553:word32] + 0xFFFFFFFF<32>
	Mem1810[esi_1553:word32] = v69_1809
	branch v69_1809 != 0<32> l006E68B7
l006E68AB:
	word32 edx_1813 = Mem1810[esi_1553 + 4<32>:word32]
	word32 eax_1814 = Mem1810[edx_1813 + 0x18<32>:word32]
	Mem1817[esp_1549 - 4<i32>:word32] = esi_1553
	call eax_1814 (retsize: 4;)
		uses: eax:eax_1814,edx:edx_1813,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C,Stack +0014:dwArg10,Stack +0018:dwArg14,Stack +FFFFFFDC:dwLoc28
l006E68B7:
l006E6834:
	word32 eax_1834 = ebx_1626 + 1<32>
	branch ebx_1626 != 1<32> l006E6840
l006E683B:
	eax_1834 = 1<32>
l006E6840:
	word32 esp_1840 = esp_1549 - 4<i32>
	Mem1842[esp_1840:word32] = eax_1834
	word32 eax_1843 = malloc(Mem1842[esp_1840:size_t])
	Mem1848[edi_1786:word32] = eax_1843
	branch eax_1843 != 0<32> l006E686B
l006E686B:
	branch fn006E54A0(eax_1843, Mem1848[esp_1840 + 0x60<32>:word32]) == 0<32> l006E68C1
l006E68C1:
	word32 edi_1866 = Mem1865[esp_1549 + 0x20<32>:word32]
	word32 edx_1867 = Mem1865[esp_1549 + 0x18<32>:word32]
	word32 esp_1869 = esp_1549 - 4<i32>
	Mem1870[esp_1869:word32] = edi_1866 + 1<32>
	word32 eax_1871 = Mem1870[edx_1867:word32]
	Mem1875[esp_1869 - 4<i32>:word32] = esi_1553 + 0x14<32>
	Mem1877[esp_1869 - 8<i32>:word32] = eax_1871
	eax_1691 = memcpy(Mem1877[esp_1869 - 8<i32>:(ptr32 void)], Mem1877[esp_1869 - 4<i32>:(ptr32 void)], Mem1877[esp_1869:size_t])
	branch Mem1877[esp_1869 + 0x28<32>:word32] == 0<32> l006E68EE
l006E68EE:
	Mem1883[Mem1877[esp_1869 + 0x20<32>:word32]:word32] = edi_1866
l006E68E3:
	Mem1885[Mem1877[esp_1869 + 0x18<32>:word32]:word32] = edi_1866
l006E69B3:
	word32 v72_1888 = Mem1887[esi_1553:word32] + 0xFFFFFFFF<32>
	Mem1889[esi_1553:word32] = v72_1888
	branch v72_1888 != 0<32> l006E6D6E
l006E69BC:
	word32 ecx_1892 = Mem1889[esi_1553 + 4<32>:word32]
	word32 edx_1893 = Mem1889[ecx_1892 + 0x18<32>:word32]
	Mem1896[esp_1549 - 4<i32>:word32] = esi_1553
	call edx_1893 (retsize: 4;)
		uses: eax:eax_1902,ecx:ecx_1892,edx:dwArg08,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C,Stack +0014:dwArg10,Stack +0018:dwArg14,Stack +FFFFFFDC:dwLoc28
	Mem1920[dwArg08:word32] = ebx_21 + 2<32>
	ecxOut = ebx_21 + 2<32>
	edxOut = dwArg08
	return 0<32>
l006E687A:
	word32 v70_1926 = Mem1848[esi_1553:word32] + 0xFFFFFFFF<32>
	Mem1927[esi_1553:word32] = v70_1926
	branch v70_1926 != 0<32> l006E688B
l006E687F:
	word32 eax_1930 = Mem1927[esi_1553 + 4<32>:word32]
	word32 ecx_1931 = Mem1927[eax_1930 + 0x18<32>:word32]
	Mem1933[esp_1840:word32] = esi_1553
	word32 edx_1937
	call ecx_1931 (retsize: 4;)
		uses: eax:eax_1930,edx:edx_1937,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C,Stack +0014:dwArg10,Stack +0018:dwArg14,Stack +FFFFFFDC:dwLoc28
		defs: edx:edx_1937
l006E688B:
l006E6850:
	word32 v67_1943 = Mem1848[esi_1553:word32] + 0xFFFFFFFF<32>
	Mem1944[esi_1553:word32] = v67_1943
	branch v67_1943 != 0<32> l006E6861
l006E6855:
	word32 ecx_1947 = Mem1944[esi_1553 + 4<32>:word32]
	word32 edx_1948 = Mem1944[ecx_1947 + 0x18<32>:word32]
	Mem1950[esp_1840:word32] = esi_1553
	word32 edx_1955
	call edx_1948 (retsize: 4;)
		uses: eax:eax_1843,ecx:ecx_1947,edx:edx_1955,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C,Stack +0014:dwArg10,Stack +0018:dwArg14,Stack +FFFFFFDC:dwLoc28
		defs: edx:edx_1955
l006E6861:
l006E6810:
	word32 v64_1961 = Mem1775[esi_1553:word32] + 0xFFFFFFFF<32>
	Mem1962[esi_1553:word32] = v64_1961
	branch v64_1961 != 0<32> l006E6821
l006E6815:
	word32 edx_1965 = Mem1962[esi_1553 + 4<32>:word32]
	word32 eax_1966 = Mem1962[edx_1965 + 0x18<32>:word32]
	Mem1968[esp_1549 - 4<i32>:word32] = esi_1553
	call eax_1966 (retsize: 4;)
		uses: eax:eax_1966,edx:edx_1965,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C,Stack +0014:dwArg10,Stack +0018:dwArg14,Stack +FFFFFFDC:dwLoc28
l006E6821:
l006E6700:
l006E60EA:
	Mem1981[eax:word32] = Mem27[eax:word32] + 4<32>
	word32 edi_1984 = Mem1981[Mem1981[eax:word32] - 4<32>:word32]
	real64 rRet0
	fn006FF3E0(dwArg04, out rRet0)
	branch fn006E0FC0() == 0<32> l006E6112
l006E6112:
	Mem2005[edi_1984:real64] = rRet0
	Mem2013[dwArg08:word32] = ebx_21 + 1<32>
	ecxOut = ebx_21 + 1<32>
	edxOut = dwArg08
	return 0<32>
l006E6108:
l006E618F:
	Mem2021[eax:word32] = Mem27[eax:word32] + 4<32>
	word32 eax_2022 = Mem2021[dwArg04 + 4<32>:word32]
	word32 edi_2025 = Mem2021[Mem2021[eax:word32] - 4<32>:word32]
	branch eax_2022 == 0xA1B450<32> l006E61B3
l006E61A1:
	word32 edx_3997
	word32 ecx_3996
	branch fn006D5670(eax_2022, 0xA1B450<32>, out ecx_3996, out edx_3997) == 0<32> l006E61DA
l006E61B3:
	branch fn006ECC00(dwArg04) != 1<32> l006E61DA
l006E61DA:
l006E61C1:
	Mem2063[edi_2025:byte] = Mem2045[dwArg04 + 0x14<32>:byte]
	Mem2071[dwArg08:word32] = ebx_21 + 1<32>
	ecxOut = ebx_21 + 1<32>
	edxOut = dwArg08
	return 0<32>
l006E5C99:
	Mem2078[eax:word32] = Mem27[eax:word32] + 4<32>
	word32 edi_2081 = Mem2078[Mem2078[eax:word32] - 4<32>:word32]
	branch fn006E5960(dwArg04) != 0<32> l006E5CC3
l006E5CAC:
	word32 edi_4001
	word32 edx_3999
	word32 esi_4000
	word32 ecx_3998
	word32 eax_2095 = fn007051A0(edi_2081, dwArg04, out ecx_3998, out edx_3999, out esi_4000, out edi_4001)
	byte al_2110 = SLICE(eax_2095, byte, 0)
	branch eax_2095 != 0xFFFFFFFF<32> l006E5CDF
l006E5CDF:
	branch eax_2095 >= 0<32> l006E5CF9
l006E5CF9:
	branch eax_2095 <= 0xFF<32> l006E5D15
l006E5D15:
	Mem2111[edi_2081:byte] = al_2110
	Mem2118[dwArg08:word32] = ebx_21 + 1<32>
	ecxOut = ebx_21 + 1<32>
	edxOut = dwArg08
	return 0<32>
l006E5D00:
	word32 edx_4007
	word32 ecx_4006
	fn006E0F80(Mem2093[0x00A18598<p32>:word32], dwArg04, out ecx_4006, out edx_4007)
l006E5CBA:
	branch fn006E0FC0() == 0<32> l006E5CE3
l006E5CE3:
	word32 edx_4003
	word32 ecx_4002
	fn006E0F80(Mem2093[0x00A18598<p32>:word32], dwArg04, out ecx_4002, out edx_4003)
l006E5CC3:
l006E6B15:
	Mem2164[eax:word32] = Mem27[eax:word32] + 4<32>
	word32 eax_2165 = Mem2164[dwArg04 + 4<32>:word32]
	edi_2168 = Mem2164[Mem2164[eax:word32] - 4<32>:word32]
	branch eax_2165 == 0xA23B20<32> l006E6AFF
l006E6B27:
	word32 edx_4005
	word32 ecx_4004
	branch fn006D5670(eax_2165, 0xA23B20<32>, out ecx_4004, out edx_4005) != 0<32> l006E6AFF
l006E6B39:
l006E6AD7:
	Mem2187[eax:word32] = Mem27[eax:word32] + 4<32>
	word32 eax_2188 = Mem2187[dwArg04 + 4<32>:word32]
	edi_2168 = Mem2187[Mem2187[eax:word32] - 4<32>:word32]
	branch eax_2188 == 0xA1B450<32> l006E6AFF
l006E6AE9:
	word32 edx_4009
	word32 ecx_4008
	branch fn006D5670(eax_2188, 0xA1B450<32>, out ecx_4008, out edx_4009) == 0<32> l006E63AE
l006E63AE:
l006E6AFF:
	Mem2215[edi_2168:word32] = dwArg04
	Mem2222[dwArg08:word32] = ebx_21 + 1<32>
	ecxOut = ebx_21 + 1<32>
	edxOut = dwArg08
	return 0<32>
l006E6B43:
	word32 esi_2296
	byte al_2228 = Mem27[ebx_21 + 1<32>:byte]
	Mem2230[eax:word32] = Mem27[eax:word32] + 4<32>
	branch al_2228 != 0x21<8> l006E6B77
l006E6B77:
	branch al_2228 != 0x3F<8> l006E6BAF
l006E6BAF:
	branch al_2228 != 0x26<8> l006E6BE0
l006E6BE0:
	Mem2243[Mem2230[Mem2230[eax:word32] - 4<32>:word32]:word32] = dwArg04
	Mem2248[dwArg08:word32] = ebx_21 + 1<32>
	ecxOut = ebx_21 + 1<32>
	edxOut = dwArg08
	return 0<32>
l006E6BB3:
	word32 eax_2254 = Mem2230[eax:word32]
	word32 ecx_2255 = Mem2230[eax_2254 - 4<32>:word32]
	Mem2257[eax:word32] = eax_2254 + 4<32>
	word32 eax_2258 = Mem2257[eax_2254:word32]
	word32 eax_2267
	word32 edx_2269
	call ecx_2255 (retsize: 4;)
		uses: eax:eax_2258,edx:edx_2269,Stack +0004:dwArg04,Stack +0008:eax_2258,Stack +001C:ebx_21 + 2<32>,Stack +0028:dwLoc28,Stack +0054:dwArg04,Stack +0058:dwArg08,Stack +005C:dwArg0C,Stack +0060:dwArg10,Stack +0064:dwArg14
		defs: eax:eax_2267,edx:edx_2269
	dwLoc34_2844 = ebx_21 + 2<32>
	branch eax_2267 != 0<32> l006E6D6E
l006E6D6E:
	Mem2286[dwArg08:word32] = dwLoc34_2844
	ecxOut = dwLoc34_2844
	edxOut = dwArg08
	return 0<32>
l006E6B7B:
	word32 eax_2292 = Mem2230[eax:word32]
	word32 ecx_2293 = Mem2230[eax_2292 - 4<32>:word32]
	Mem2295[eax:word32] = eax_2292 + 4<32>
	word32 eax_2303
	word32 edx_2305
	call ecx_2293 (retsize: 4;)
		uses: eax:eax_2292 + 4<32>,edx:edx_2305,Stack +0004:dwArg04,Stack +0018:ebx_21 + 2<32>,Stack +0024:dwLoc28,Stack +0050:dwArg04,Stack +0054:dwArg08,Stack +0058:dwArg0C,Stack +005C:dwArg10,Stack +0060:dwArg14
		defs: eax:eax_2303,edx:edx_2305
	esi_2296 = Mem2295[eax_2292:word32]
	branch eax_2303 == 0<32> l006E6BD6
l006E6BD6:
l006E6B4C:
	word32 eax_2313 = Mem2230[eax:word32]
	word32 ebx_2314 = Mem2230[eax_2313 - 4<32>:word32]
	Mem2319[eax:word32] = eax_2313 + 4<32>
	esi_2296 = Mem2319[eax_2313:word32]
	word32 edx_4011
	word32 ecx_4010
	branch fn006D5670(Mem2319[dwArg04 + 4<32>:word32], ebx_2314, out ecx_4010, out edx_4011) != 0<32> l006E6B99
l006E6B99:
	Mem2345[esi_2296:word32] = dwArg04
	Mem2350[dwArg08:word32] = ebx_21 + 2<32>
	ecxOut = ebx_21 + 2<32>
	edxOut = dwArg08
	return 0<32>
l006E6B6F:
l006E5FCE:
	Mem2358[eax:word32] = Mem27[eax:word32] + 4<32>
	word32 edi_2360 = Mem2358[eax:word32]
	word32 ebx_2361 = Mem2358[edi_2360 - 4<32>:word32]
	word32 edx_2367
	word32 eax_2365 = fn007114E0(ebx_2361, edi_2360, dwArg04, out edx_2367)
	branch (eax_2365 & edx_2367) != 0xFFFFFFFF<32> l006E5FFF
l006E5FEC:
	branch fn006E0FC0() == 0<32> l006E5FFF
l006E5FFF:
	Mem2387[ebx_2361 + 4<32>:word32] = edx_2367
	Mem2391[ebx_2361:word32] = eax_2365
	Mem2396[dwArg08:word32] = ebx_21 + 1<32>
	ecxOut = ebx_21 + 1<32>
	edxOut = dwArg08
	return 0<32>
l006E5FF5:
l006E6018:
	Mem2404[eax:word32] = Mem27[eax:word32] + 4<32>
	word32 eax_2405 = Mem2404[dwArg04 + 4<32>:word32]
	word32 edi_2408 = Mem2404[Mem2404[eax:word32] - 4<32>:word32]
	branch eax_2405 == 0xA1E7E8<32> l006E6084
l006E602A:
	word32 edx_4020
	word32 ecx_4019
	branch fn006D5670(eax_2405, 0xA1E7E8<32>, out ecx_4019, out edx_4020) != 0<32> l006E6084
l006E6084:
	Mem2443[edi_2408:word32] = fn00705340(edi_2408, dwArg04)
	Mem2444[edi_2408 + 4<32>:word32] = 0<32>
	Mem2452[dwArg08:word32] = ebx_21 + 1<32>
	ecxOut = ebx_21 + 1<32>
	edxOut = dwArg08
	return 0<32>
l006E603C:
	word32 eax_2458 = Mem2413[dwArg04 + 4<32>:word32]
	branch eax_2458 == 0xA1F400<32> l006E6062
l006E6046:
	word32 edx_4022
	word32 ecx_4021
	branch fn006D5670(eax_2458, 0xA1F400<32>, out ecx_4021, out edx_4022) != 0<32> l006E6062
l006E6062:
	word32 edx_2488
	Mem2493[edi_2408:word32] = fn00711700(dwArg04, out edx_2488)
	Mem2494[edi_2408 + 4<32>:word32] = edx_2488
	Mem2502[dwArg08:word32] = ebx_21 + 1<32>
	ecxOut = ebx_21 + 1<32>
	edxOut = dwArg08
	return 0<32>
l006E6058:
l006E5EDA:
	Mem2510[eax:word32] = Mem27[eax:word32] + 4<32>
	edi_1147 = Mem2510[Mem2510[eax:word32] - 4<32>:word32]
	branch fn006E5960(dwArg04) != 0<32> l006E5F06
l006E5EED:
	word32 eax_2527 = fn00705340(edi_1147, dwArg04)
	esi_1171 = eax_2527
	branch eax_2527 != 0xFFFFFFFF<32> l006E5EC4
l006E5EFD:
	branch fn006E0FC0() == 0<32> l006E5EC4
l006E5EC4:
	Mem2546[edi_1147:word32] = esi_1171
	Mem2553[dwArg08:word32] = ebx_21 + 1<32>
	ecxOut = ebx_21 + 1<32>
	edxOut = dwArg08
	return 0<32>
l006E5F06:
l006E5E0D:
	Mem2561[eax:word32] = Mem27[eax:word32] + 4<32>
	edi_1351 = Mem2561[Mem2561[eax:word32] - 4<32>:word32]
	branch fn006E5960(dwArg04) != 0<32> l006E5E39
l006E5E20:
	word32 eax_2578 = fn00705340(edi_1351, dwArg04)
	si_2595 = SLICE(eax_2578, word16, 0) (alias)
	branch eax_2578 != 0xFFFFFFFF<32> l006E5DF6
l006E5E30:
	branch fn006E0FC0() == 0<32> l006E5DF6
l006E5DF6:
	Mem2599[edi_1351:word16] = si_2595
	Mem2606[dwArg08:word32] = ebx_21 + 1<32>
	ecxOut = ebx_21 + 1<32>
	edxOut = dwArg08
	return 0<32>
l006E5E39:
l006E612C:
	Mem2614[eax:word32] = Mem27[eax:word32] + 4<32>
	word32 esi_2617 = Mem2614[Mem2614[eax:word32] - 4<32>:word32]
	word32 eax_2624 = fn007332C0(fp - 0x10<32>, dwArg04)
	word32 ecx_2629 = Mem2622[eax_2624 + 8<32>:word32]
	word32 edx_2630 = Mem2622[eax_2624 + 0xC<32>:word32]
	word32 edi_2631 = Mem2622[eax_2624:word32]
	word32 ebx_2632 = Mem2622[eax_2624 + 4<32>:word32]
	branch fn006E0FC0() == 0<32> l006E6168
l006E6168:
	Mem2644[esi_2617:word32] = edi_2631
	Mem2645[esi_2617 + 4<32>:word32] = ebx_2632
	Mem2646[esi_2617 + 8<32>:word32] = ecx_2629
	Mem2649[esi_2617 + 0xC<32>:word32] = edx_2630
	Mem2655[dwArg08:word32] = ebx_21 + 1<32>
	ecxOut = ebx_21 + 1<32>
	edxOut = dwArg08
	return 0<32>
l006E615E:
l006E6D8C:
	branch dwArg04 != 0xA163B8<32> l006E6D9B
l006E6D9B:
l006E6D94:
l006E6DA1:
	ecxOut = fn00724FE0(dwArg10, dwArg14, 0x8D36C0<32>)
	edxOut = edx
	return dwArg10
l006E5D2B:
	Mem2704[eax:word32] = Mem27[eax:word32] + 4<32>
	word32 edi_2707 = Mem2704[Mem2704[eax:word32] - 4<32>:word32]
	branch fn006E5960(dwArg04) == 0<32> l006E5D45
l006E5D45:
	word32 eax_2721 = fn00705340(edi_2707, dwArg04)
	byte bl_2739 = SLICE(eax_2721, byte, 0)
	branch eax_2721 != 0xFFFFFFFF<32> l006E5D5E
l006E5D55:
	branch fn006E0FC0() != 0<32> l006E5D3E
l006E5D5E:
	Mem2741[edi_2707:byte] = bl_2739
	Mem2748[dwArg08:word32] = ebx_21 + 1<32>
	ecxOut = ebx_21 + 1<32>
	edxOut = dwArg08
	return 0<32>
l006E5D3E:
l006E5CC8:
	word32 ecx_2823
	word32 eax_2822 = fn006E5920(dwArg04, dwArg14, dwArg10, out ecx_2823)
	ecxOut = ecx_2823
	edxOut = dwArg14
	return eax_2822
fn006E5C60_exit:


word32 fn006E6E70(word32 dwArg08, word32 dwArg14, ptr32 & ecxOut, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E5710
//      fn006E7660
// MayUse:  Stack +0008:[0..31] Stack +0014:[0..31]
// LiveOut: eax ecx edx
// Trashed: SCZO eax ecx edx esi Top
// Preserved: esp
fn006E6E70_entry:
l006E6E70:
	word32 edx_132
	word32 ecx_130
	word32 eax_127
	word32 eax_8 = Mem6[dwArg08:word32]
	word32 dwArg08_159 = eax_8
	branch Mem6[eax_8:byte] != 0x28<8> l006E6ECA
l006E6ECA:
	word32 ecx_33
	eax_127 = fn006E5C60(dwArg0C, dwArg04, fp + 8<32>, dwArg10, dwArg18, dwArg1C, out ecx_33, out edx_132)
	branch eax_127 == 0<32> l006E6EC2
l006E6EF8:
	Mem42[dwArg14:word32] = 0<32>
	ecxOut = ecx_33
	edxOut = dwArg14
	return eax_127
l006E6E80:
	eax_127 = fn006E5710(dwArg04, fp + 8<32>, dwArg14, dwArg18, dwArg1C, 0<32>, out ecx_130, out edx_132)
	branch eax_127 != 0<32> l006E6EC8
l006E6EBD:
	dwArg08_159 = eax_8 + 2<32>
l006E6EC2:
	Mem91[dwArg08:word32] = dwArg08_159
	ecx_130 = dwArg08_159
l006E6EC8:
	ecxOut = ecx_130
	edxOut = edx_132
	return eax_127
fn006E6E70_exit:


word32 fn006E7660(word32 ecx, word32 edx, word32 ebx, word32 ebp, word32 esi, word32 edi, selector es, selector ds, word32 dwArg04, word32 dwArg08, ptr32 & ecxOut, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E7C80
//      fn006E7CB0
// MayUse:  cs:[0..15] ds:[0..15] ebp:[0..31] ebx:[0..31] ecx:[0..31] edi:[0..31] edx:[0..31] es:[0..15] esi:[0..31] fs:[0..15] gs:[0..15] ss:[0..15] Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax ecx edx
// Trashed: SCZDOP eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn006E7660_entry:
l006E7660:
	word32 eax_7 = Mem0[0x00A14188<p32>:word32] ^ fp - 0x1A8<32>
	word32 ebx_16 = 0<32>
	word32 edi_24 = dwArg04
	word32 ebp_177 = dwArg08 & 1<32>
	word32 dwLoc01A0_879 = 0<32>
	word32 dwLoc019C_880 = 0<32>
	word32 dwLoc0190_881 = 0xFFFFFFFF<32>
	word32 dwLoc01A8_1048 = 0<32>
l006E76C0:
	word32 esi_287 = CONVERT(Mem41[edi_24:byte], byte, int32)
	edi_24 = edi_24 + 1<32>
	branch esi_287 >u 0x3B<32> l006E7712
l006E76CF:
	switch (esi_287) { l006E7766 l006E7712 l006E7712 l006E7712 l006E7712 l006E7712 l006E7712 l006E7712 l006E7712 l006E7712 l006E7712 l006E7712 l006E7712 l006E7712 l006E7712 l006E7712 l006E7712 l006E7712 l006E7712 l006E7712 l006E7712 l006E7712 l006E7712 l006E7712 l006E7712 l006E7712 l006E7712 l006E7712 l006E7712 l006E7712 l006E7712 l006E7712 l006E7712 l006E7712 l006E7712 l006E7712 l006E7712 l006E7712 l006E7712 l006E7712 l006E76DD l006E76FB l006E7712 l006E7712 l006E7712 l006E7712 l006E7712 l006E7712 l006E7712 l006E7712 l006E7712 l006E7712 l006E7712 l006E7712 l006E7712 l006E7712 l006E7712 l006E7712 l006E775C l006E7762 }
l006E7762:
	dwLoc019C_880 = edi_24
l006E775C:
	dwLoc01A0_879 = edi_24
l006E76FB:
	branch ebx_16 != 0<32> l006E770E
l006E770E:
	ebx_16 = ebx_16 - 1<32>
l006E76FF:
	fn006E86F0(0x8D3E80<32>)
l006E76DD:
	branch ebx_16 != 0<32> l006E76E5
l006E76E1:
	dwLoc01A8_1048 = dwLoc01A8_1048 + 1<32>
l006E76E5:
	ebx_16 = ebx_16 + 1<32>
	branch ebx_16 < 0x1E<32> l006E76C0
l006E76EC:
	fn006E86F0(0x8D3EA0<32>)
l006E7712:
	branch ebx_16 != 0<32> l006E76C0
l006E7716:
	branch esi_287 != 0x4F<32> l006E7721
l006E7721:
	edx = esi_287 & 0xFF<32>
	branch isalpha(esi_287 & 0xFF<32>) == 0<32> l006E7746
l006E7746:
	branch esi_287 != 0x7C<32> l006E76C0
l006E774F:
	dwLoc0190_881 = dwLoc01A8_1048
l006E7737:
	branch esi_287 == 0x65<32> l006E76C0
l006E773C:
	dwLoc01A8_1048 = dwLoc01A8_1048 + 1<32>
l006E771B:
	dwLoc01A8_1048 = dwLoc01A8_1048 + 1<32>
l006E7766:
	branch ebx_16 == 0<32> l006E7777
l006E776A:
	fn006E86F0(0x8D3E60<32>)
l006E7777:
	word32 ecx_135 = dwLoc0190_881
	branch dwLoc0190_881 >= 0<32> l006E7789
l006E7783:
	ecx_135 = dwLoc01A8_1048
	dwLoc0190_881 = dwLoc01A8_1048
l006E7789:
	word32 eax_407
	word32 ecx_155
	word32 ebx_348
	word32 ebx_152 = dwArg04
	word32 dwLoc0198_1056 = dwArg04
	branch (dwArg08 & 1<32>) == 0<32> l006E78D0
l006E78D0:
	ecx_155 = ecx
	word32 eax_156 = Mem153[ecx + 4<32>:word32]
	branch eax_156 == 0xA16588<32> l006E7901
l006E78DE:
	branch fn006D5670(eax_156, 0xA16588<32>, out ecx_155, out edx) != 0<32> l006E7901
l006E7901:
	ebp_177 = Mem175[ecx + 8<32>:word32]
	branch ebp_177 < dwLoc0190_881 l006E79F1
l006E7912:
	branch dwLoc01A8_1048 < ebp_177 l006E79F1
l006E79F1:
	branch dwLoc019C_880 != 0<32> l006E7A75
l006E79F8:
	word32 ecx_190 = dwLoc0190_881
	branch ebp_177 < dwLoc0190_881 l006E7A08
l006E7A06:
	ecx_190 = dwLoc01A8_1048
l006E7A08:
	branch ecx_190 == 1<32> l006E7A17
l006E7A12:
l006E7A17:
	branch ebp_177 < dwLoc0190_881 l006E7A1F
l006E7A1D:
l006E7A1F:
	branch dwLoc0190_881 != dwLoc01A8_1048 l006E7A2A
l006E7A2A:
	branch ebp_177 < dwLoc0190_881 l006E7A38
l006E7A33:
l006E7A23:
l006E7A38:
	branch dwLoc01A0_879 != 0<32> l006E7AA4
l006E7AA4:
l006E7A40:
l006E7A4A:
	fn00724FE0(fp - 0x104<32>, 0x100<32>, 0x8D3D70<32>)
l006E7A75:
l006E791C:
	edi_24 = 0<32>
	branch ebp_177 <= 0<32> l006E7977
l006E7922:
	esi_287 = ecx + 0xC<32>
l006E7925:
	branch Mem290[ebx_152:byte] != 0x7C<8> l006E7931
l006E792A:
	dwLoc0198_1056 = ebx_152 + 1<32>
l006E7931:
	edi_24 = edi_24 + 1<32>
	branch fn006E6E70(dwArg04, fp - 0x184<32>, out ecx_155, out edx) != 0<32> l006E79E1
l006E79E1:
	ebx_348 = fp - 0x184<32>
l006E796C:
	ebx_152 = dwLoc0198_1056
	esi_287 = esi_287 + 4<32>
	branch edi_24 < ebp_177 l006E7925
l006E7977:
	byte al_356 = Mem355[ebx_152:byte]
	branch al_356 == 0<8> l006E786F
l006E7981:
	edx = CONVERT(al_356, byte, word32)
	branch isalpha(edx) != 0<32> l006E786F
l006E7996:
	byte al_369 = Mem363[ebx_152:byte]
	branch al_369 == 0x28<8> l006E786F
l006E79A0:
	branch al_369 == 0x7C<8> l006E786F
l006E79A8:
	branch al_369 == 0x3A<8> l006E786F
l006E79B0:
	branch al_369 == 0x3B<8> l006E786F
l006E79B8:
	word32 ecx_1273
	word32 edx_1274
	fn006E15D0(Mem363[0x00A18720<p32>:word32], dwArg04, out ecx_1273, out edx_1274)
	eax_407 = fn006E5530(0<32>, 0<32>, out edx)
l006E78F0:
l006E7799:
	word32 dwLoc01C4_1031
	branch dwLoc01A8_1048 != 0<32> l006E77F4
l006E77F4:
	branch ecx_135 != 1<32> l006E78C0
l006E77FD:
	branch dwLoc01A8_1048 != ecx_135 l006E78C0
l006E78C0:
l006E7A81:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 stackArg8 = <invalid>
	word32 ecx_1271
	fn006E0F80(stackArg4, stackArg8, out ecx_1271, out edx)
l006E7805:
	branch ecx != 0<32> l006E7835
l006E7835:
	branch fn006E6E70(fp - 0x198<32>, fp - 0x184<32>, out ecx_155, out edx) != 0<32> l006E7895
l006E7895:
	edx = dwLoc0184
	ebx_348 = fp - 0x180<32>
l006E78A4:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	fn006E5590(dwLoc019C_880, edx, ebx_348, ebp_177, esi_287, edi_24, es, ds, stackArg4, dwArg08 & 0xFFFFFFFE<32>)
	eax_407 = fn006E5530(0<32>, 0<32>, out edx)
l006E786F:
	branch true l006E788B
l006E7877:
	Mem570[0<32>:word32] = Mem564[0<32>:word32] + 0xFFFFFFFF<32>
	branch Mem570[0<32>:word32] != 0<32> l006E788B
l006E787F:
	word32 edx_573 = Mem570[4<32>:word32]
	call Mem575[edx_573 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_581,edx:edx_573,Stack +0004:0<32>,Stack +0008:dwArg04,Stack +000C:dwArg08 & 0xFFFFFFFE<32>,Stack +003C:dwLoc0184,Stack +01C4:dwArg04,Stack +01C8:dwArg08 & 0xFFFFFFFE<32>
		defs: edx:edx_588
l006E780C:
	branch dwLoc01A0_879 != 0<32> l006E7827
l006E7827:
	dwLoc01C4_1031 = 0x8D3E1C<32>
l006E7814:
	dwLoc01C4_1031 = 0x8D3E1C<32>
l006E779D:
	branch ecx == dwLoc01A8_1048 l006E788B
l006E788B:
	eax_407 = 1<32>
l006E77A7:
	branch dwLoc01A0_879 != 0<32> l006E77ED
l006E77ED:
l006E77AF:
l006E77B9:
	dwLoc01C4_1031 = 0x8D3E44<32>
l006E77C0:
	fn00724FE0(fp - 0x104<32>, 0x100<32>, dwLoc01C4_1031)
	word32 ecx_1272
	fn006E0F80(Mem636[0x00A16B7C<p32>:word32], fp - 0x104<32>, out ecx_1272, out edx)
l006E7A89:
	eax_407 = 0<32>
l006E7A8B:
	word32 ecx_858
	word32 eax_857 = fn00694B8E(eax_407, eax_7 ^ fp - 424<i32>, edx, ebx, ebp, esi, edi, es, ds, ebx, out ecx_858)
	ecxOut = ecx_858
	edxOut = edx
	return eax_857
fn006E7660_exit:


word32 fn006E7C80(word32 ebx, word32 ebp, word32 esi, word32 edi, selector es, selector ds, word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E7D90
// MayUse:  cs:[0..15] ds:[0..15] ebp:[0..31] ebx:[0..31] edi:[0..31] es:[0..15] esi:[0..31] fs:[0..15] gs:[0..15] ss:[0..15] Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax
// Trashed: SCZDOP eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn006E7C80_entry:
l006E7C80:
	word32 ecx_51
	word32 edx_52
	return fn006E7660(dwArg04, fp - 4<32>, ebx, ebp, esi, edi, es, ds, dwArg08, 0<32>, out ecx_51, out edx_52)
fn006E7C80_exit:


word32 fn006E7CB0(ptr32 & ecxOut, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00717CB0
//      fn00719F20
// MayUse: 
// LiveOut: eax ecx edx
// Trashed: SCZO eax ecx edx Top
// Preserved: esp
fn006E7CB0_entry:
l006E7CB0:
	word32 ecx_17
	word32 edx_19
	word32 eax_18 = fn006E7660(dwArg04, fp - 4<32>, ebx, ebp, esi, edi, es, ds, dwArg08, 2<32>, out ecx_17, out edx_19)
	ecxOut = ecx_17
	edxOut = edx_19
	return eax_18
fn006E7CB0_exit:


word32 fn006E7CE0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E1970
// MayUse: 
// LiveOut: eax
// Trashed: SCZO eax ecx edx Top
// Preserved: esp
fn006E7CE0_entry:
l006E7CE0:
	word32 eax_5 = Mem0[0x00A6C620<p32>:word32]
	branch eax_5 != 0<32> l006E7D45
l006E7CEC:
	fn006E1130(fp - 4<32>, fp - 8<32>, fp - 0xC<32>)
	word32 edx_111
	word32 ecx_110
	word32 eax_29 = fn00715DD0(out ecx_110, out edx_111)
	branch eax_29 == 0<32> l006E7D2A
l006E7D10:
	word32 ecx_114
	word32 edx_115
	word32 esi_116
	word32 edi_117
	word32 eax_43 = fn006FD8B0(eax_29, 0x8D2038<32>, out ecx_114, out edx_115, out esi_116, out edi_117)
	Mem51[0x00A6C620<p32>:word32] = eax_43
	branch eax_43 == 0<32> l006E7D2A
l006E7D27:
	Mem54[eax_43:word32] = Mem51[eax_43:word32] + 1<32>
l006E7D2A:
	word32 ecx_112
	word32 edx_113
	fn006E0E00(dwLoc0C, out ecx_112, out edx_113)
	eax_5 = Mem66[0x00A6C620<p32>:word32]
l006E7D45:
	return eax_5
fn006E7CE0_exit:


word32 fn006E7D90(word32 eax, word32 ecx, word32 edi, selector es, selector ds, word32 dwArg04, word32 dwArg08, word32 dwArg0C)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E8060
// MayUse:  cs:[0..15] ds:[0..15] eax:[0..31] ecx:[0..31] edi:[0..31] es:[0..15] fs:[0..15] gs:[0..15] ss:[0..15] Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut: eax
// Trashed: SCZDOP eax ecx edi edx Top
// Preserved: ebp ebx esi esp
fn006E7D90_entry:
l006E7D90:
	word32 eax_14 = Mem9[edi + 4<32>:word32]
	branch eax_14 == 0xA16588<32> l006E7F41
l006E7DA9:
	word32 ecx_663
	word32 edx_664
	branch fn006D5670(eax_14, 0xA16588<32>, out ecx_663, out edx_664) != 0<32> l006E7F41
l006E7F41:
	return fn006E7C80(eax, dwArg04, ecx, edi, es, ds, edi, 0x8D3EEC<32>)
l006E7DBF:
	word32 edi_98
	word32 edx_665
	word32 eax_96 = fn006DF760(edi, 0x8D2084<32>, out edx_665, out edi_98)
	branch eax_96 == 0<32> l006E7F3B
l006E7DD5:
	Mem112[ecx:word32] = eax_96
	word32 edi_115
	word32 edx_666
	word32 eax_113 = fn006DF760(edi_98, 0x8D2088<32>, out edx_666, out edi_115)
	word32 esi_121 = eax_113
	branch eax_113 == 0<32> l006E7F3B
l006E7DEF:
	word32 esp_138
	branch eax_113 != 0xA163B8<32> l006E7DFF
l006E7DFF:
	word32 ecx_667
	word32 edx_668
	word32 eax_130 = fn006ECC50(eax_113, out ecx_667, out edx_668, out esi_121)
	Mem141[eax:word32] = eax_130
	esp_138 = fp - 0xC<32>
	branch eax_130 == 0<32> l006E7F2A
l006E7DF7:
	Mem143[eax:word32] = 0<32>
l006E7E12:
	word32 v14_146 = Mem145[esi_121:word32] + 0xFFFFFFFF<32>
	Mem147[esi_121:word32] = v14_146
	word32 esp_152 = fp - 0xC<32>
	branch v14_146 != 0<32> l006E7E23
l006E7E17:
	word32 eax_150 = Mem147[esi_121 + 4<32>:word32]
	word32 ecx_151 = Mem147[eax_150 + 0x18<32>:word32]
	word32 esp_165
	call ecx_151 (retsize: 4;)
		uses: eax:eax_150,ecx:ecx_151,Stack +0004:esi_144,Stack +0018:dwArg04,Stack +001C:dwArg08,Stack +0020:dwArg0C
		defs: esp:esp_165
	esp_152 = esp_165 + 4<32>
l006E7E23:
	word32 esp_174 = esp_152 - 4<i32>
	Mem175[esp_174:word32] = 0x8D2094<32>
	Mem178[esp_174 - 4<i32>:word32] = edi_115
	word32 edi_181
	word32 edx_669
	word32 eax_179 = fn006DF760(Mem178[esp_174 - 4<i32>:word32], Mem178[esp_174:word32], out edx_669, out edi_181)
	branch eax_179 == 0<32> l006E7F3B
l006E7E3B:
	Mem193[esp_174:word32] = eax_179
	word32 ecx_195
	word32 edi_197
	word32 esi_198
	word32 edx_670
	word32 eax_194 = fn007051A0(edi_181, Mem193[esp_174:word32], out ecx_195, out edx_670, out esi_198, out edi_197)
	word32 v16_204 = Mem193[esi_198:word32] + 0xFFFFFFFF<32>
	Mem205[esi_198:word32] = v16_204
	word32 esp_203 = esp_174 + 4<32>
	branch v16_204 != 0<32> l006E7E57
l006E7E4B:
	word32 edx_209 = Mem205[esi_198 + 4<32>:word32]
	word32 eax_210 = Mem205[edx_209 + 0x18<32>:word32]
	Mem212[esp_174:word32] = esi_198
	word32 esp_221
	call eax_210 (retsize: 4;)
		uses: eax:eax_210,ecx:ecx_195,edx:edx_209,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C
		defs: esp:esp_221
	esp_203 = esp_221 + 4<32>
l006E7E57:
	branch eax_194 >= 0<32> l006E7E68
l006E7E5B:
	branch fn006E0FC0() != 0<32> l006E7F3B
l006E7E68:
	word32 esp_239 = esp_203 - 4<i32>
	Mem240[esp_239:word32] = 0x8BC184<32>
	Mem244[esp_239 - 4<i32>:word32] = edi_197
	Mem248[dwArg04:word32] = eax_194
	word32 edx_671
	word32 edi_251
	word32 eax_249 = fn006DF760(Mem248[esp_239 - 4<i32>:word32], Mem248[esp_239:word32], out edx_671, out edi_251)
	word32 esp_258 = esp_239 + 4<32>
	branch eax_249 == 0<32> l006E7F3B
l006E7E83:
	branch eax_249 != 0xA163B8<32> l006E7EA8
l006E7EA8:
	Mem265[esp_239:word32] = eax_249
	word32 esi_270
	word32 ecx_672
	word32 edx_673
	word32 eax_266 = fn007051A0(edi_251, Mem265[esp_239:word32], out ecx_672, out edx_673, out esi_270, out edi_251)
	word32 v20_276 = Mem265[esi_270:word32] + 0xFFFFFFFF<32>
	Mem277[esi_270:word32] = v20_276
	esp_258 = esp_239 + 4<32>
	branch v20_276 != 0<32> l006E7EC4
l006E7EB8:
	word32 ecx_281 = Mem277[esi_270 + 4<32>:word32]
	word32 edx_282 = Mem277[ecx_281 + 0x18<32>:word32]
	Mem284[esp_239:word32] = esi_270
	word32 esp_299
	call edx_282 (retsize: 4;)
		uses: eax:eax_266,ecx:ecx_281,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C
		defs: esp:esp_299
	esp_258 = esp_299 + 4<32>
l006E7EC4:
	branch eax_266 >= 0<32> l006E7ED1
l006E7EC8:
	branch fn006E0FC0() != 0<32> l006E7F3B
l006E7ED1:
	Mem321[Mem318[esp_258 + 0x14<32>:word32]:word32] = eax_266
l006E7E8B:
	word32 ecx_322 = Mem248[esp_239 + 0x18<32>:word32]
	Mem323[ecx_322:word32] = 0xFFFFFFFF<32>
	word32 v18_324 = Mem323[eax_249:word32] + 0xFFFFFFFF<32>
	Mem325[eax_249:word32] = v18_324
	branch v18_324 != 0<32> l006E7ED7
l006E7E9A:
	word32 edx_328 = Mem325[eax_249 + 4<32>:word32]
	word32 eax_329 = Mem325[edx_328 + 0x18<32>:word32]
	Mem331[esp_239:word32] = eax_249
	word32 esp_332
	call eax_329 (retsize: 4;)
		uses: eax:eax_329,ecx:ecx_322,edx:edx_328,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C
		defs: esp:esp_332
	esp_258 = esp_332 + 4<32>
l006E7ED7:
	word32 esp_341 = esp_258 - 4<i32>
	Mem342[esp_341:word32] = 0x8CEE18<32>
	Mem347[esp_341 - 4<i32>:word32] = edi_251
	word32 edx_674
	word32 edi_675
	word32 eax_348 = fn006DF760(Mem347[esp_341 - 4<i32>:word32], Mem347[esp_341:word32], out edx_674, out edi_675)
	esi_121 = eax_348
	branch eax_348 == 0<32> l006E7F3B
l006E7EEB:
	word32 ecx_366
	branch eax_348 != 0xA163B8<32> l006E7F17
l006E7F17:
	Mem364[esp_341:word32] = eax_348
	word32 edx_676
	word32 eax_365 = fn006ECC50(Mem364[esp_341:word32], out ecx_366, out edx_676, out esi_121)
	Mem377[Mem364[esp_341 + 0x1C<32>:word32]:word32] = eax_365
	esp_138 = esp_341 + 4<32>
	branch eax_365 != 0<32> l006E7EFD
l006E7F2A:
	word32 v15_381 = Mem380[esi_121:word32] + 0xFFFFFFFF<32>
	Mem382[esi_121:word32] = v15_381
	branch v15_381 != 0<32> l006E7F3B
l006E7F2F:
	word32 eax_385 = Mem382[esi_121 + 4<32>:word32]
	word32 ecx_386 = Mem382[eax_385 + 0x18<32>:word32]
	Mem389[esp_138 - 4<i32>:word32] = esi_121
	call ecx_386 (retsize: 4;)
		uses: eax:eax_385,ecx:ecx_386,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C
l006E7F3B:
	return 0<32>
l006E7EF3:
	ecx_366 = Mem347[esp_341 + 0x1C<32>:word32]
	Mem446[ecx_366:word32] = 0<32>
l006E7EFD:
	word32 v19_449 = Mem448[esi_121:word32] + 0xFFFFFFFF<32>
	Mem450[esi_121:word32] = v19_449
	branch v19_449 != 0<32> l006E7F0E
l006E7F02:
	word32 edx_453 = Mem450[esi_121 + 4<32>:word32]
	word32 eax_454 = Mem450[edx_453 + 0x18<32>:word32]
	Mem457[esp_258 - 4<i32>:word32] = esi_121
	call eax_454 (retsize: 4;)
		uses: eax:eax_454,ecx:ecx_461,edx:edx_453,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C
l006E7F0E:
	return 1<32>
fn006E7D90_exit:


word32 fn006E7F60(word32 eax, word32 ecx, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E8060
// MayUse:  eax:[0..31] ecx:[0..31] Stack +0004:[0..31]
// LiveOut: edx
// Trashed: SCZO eax ecx edx Top
// Preserved: ebp ebx edi esi esp
fn006E7F60_entry:
l006E7F60:
	word32 edi_15 = ecx
	word32 esi_19 = eax
	branch ecx < 0<32> l006E7FD2
l006E7F6F:
	branch ecx <= 0<32> l006E7F86
l006E7F71:
	eax_22 = eax
l006E7F74:
	word32 eax_22
	eax_22 = eax_353 + 1<32>
	eax_353 = eax_22
	branch Mem13[eax_353:byte] != 0<8> l006E7F74
l006E7F7D:
	branch ecx != eax_22 - (eax + 1<32>) l006E7F86
l006E7F83:
	edi_15 = ecx - 1<32>
l006E7F86:
	word32 eax_50 = strchr(eax, 0xA<32>)
	branch eax_50 == 0<32> l006E7FBD
l006E7F99:
l006E7FA0:
	branch eax_50 - esi_19 >= edi_15 l006E7FBD
l006E7FA8:
	esi_19 = eax_50 + 1<32>
	edi_15 = edi_15 - 1<32> + (esi_19 - eax_50)
	eax_50 = strchr(esi_19, 0xA<32>)
	branch eax_50 != 0<32> l006E7FA0
l006E7FBD:
l006E7FC0:
	byte al_86 = Mem77[esi_19:byte]
	branch al_86 == 0x20<8> l006E7FCA
l006E7FC6:
	branch al_86 != 9<8> l006E7FD2
l006E7FD2:
	word32 edx_125
	word32 edx_343
	word32 edi_344
	word32 esi_102
	fn00731D30(0x8D3EF8<32>, dwArg04, out edx_343, out esi_102, out edi_344)
	word32 esi_115
	word32 edx_345
	word32 edi_113
	fn00731D30(esi_102, dwArg04, out edx_345, out esi_115, out edi_113)
	branch Mem111[esi_115:byte] == 0<8> l006E8003
l006E7FEC:
	word32 eax_124 = esi_115
	edx_125 = esi_115 + 1<32>
l006E7FF1:
	eax_124 = eax_354 + 1<32>
	eax_354 = eax_124
	branch Mem111[eax_354:byte] != 0<8> l006E7FF1
l006E7FFA:
	branch Mem111[eax_124 - (esi_115 + 1<32>) - 1<32> + esi_115:byte] == 0xA<8> l006E8011
l006E8003:
	word32 esi_346
	fn00731D30(0x8A6DE8<32>, dwArg04, out edx_125, out esi_346, out edi_113)
l006E8011:
	branch edi_113 == 0xFFFFFFFF<32> l006E8053
l006E8016:
	word32 edx_347
	word32 edi_168
	word32 esi_348
	fn00731D30(0x8D3EF8<32>, dwArg04, out edx_347, out esi_348, out edi_168)
	branch edi_168 <= 1<32> l006E8045
l006E802B:
l006E8030:
	word32 edx_351
	word32 edi_187
	word32 esi_352
	fn00731D30(0x8A695C<32>, dwArg04, out edx_351, out esi_352, out edi_187)
	branch edi_187 > 1<32> l006E8030
l006E8045:
	word32 esi_349
	word32 edi_350
	fn00731D30(0x8D3EF4<32>, dwArg04, out edx_125, out esi_349, out edi_350)
l006E8053:
	return edx_125
fn006E7F60_exit:
l006E7FCA:
	esi_19 = esi_19 + 1<32>


void fn006E8060(word32 ebx, word32 ebp, word32 esi, word32 edi, selector es, selector ds, word32 dwArg04, word32 dwArg08, word32 dwArg0C)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E8D90
// MayUse:  cs:[0..15] ds:[0..15] ebp:[0..31] ebx:[0..31] edi:[0..31] es:[0..15] esi:[0..31] fs:[0..15] gs:[0..15] ss:[0..15] Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut:
// Trashed: SCZDOP eax ecx edx Top
// Preserved: ebp ebx edi esi esp
fn006E8060_entry:
l006E8060:
	word32 edx_1016
	word32 eax_1007
	word32 esp_117
	word32 esi_329
	word32 eax_7 = Mem0[0x00A14188<p32>:word32] ^ fp - 0x30<32>
	word32 ecx_1309
	word32 edx_1310
	word32 eax_31 = fn00715DD0(out ecx_1309, out edx_1310)
	Mem41[dwArg08:word32] = Mem27[dwArg08:word32] + 1<32>
	word32 ebp_116 = 0<32>
	branch eax_31 != 0<32> l006E80EB
l006E80EB:
	word32 edi_344
	word32 ebx_47
	branch fn00707640(out ebx_47, out edi_344) == 0<32> l006E80F9
l006E80F4:
	word32 ecx_1311
	word32 edx_1312
	fn006E1160(out ecx_1311, out edx_1312)
l006E80F9:
	word32 esp_71
	word32 eax_72
	call _iob_func (retsize: 4;)
		uses: Stack +0048:dwArg04,Stack +004C:dwArg08,Stack +0050:dwArg0C
		defs: eax:eax_72,esp:esp_71
	Mem80[esp_71 - 4<i32>:word32] = eax_72 + 0x20<32>
	word32 esp_81
	call MSVCR80.dll!fflush (retsize: 4;)
		uses: eax:eax_72 + 0x20<32>,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C
		defs: esp:esp_81
	branch dwArg0C == 0<32> l006E8128
l006E8110:
	branch dwArg0C == 0xA163B8<32> l006E8128
l006E8118:
	Mem94[esp_81:word32] = ebx_47
	Mem96[esp_81 - 4<i32>:word32] = dwArg0C
	eax_1007 = fn0072FBB0(es, ds, Mem96[esp_81 - 4<i32>:word32], Mem96[esp_81:word32], out edx_1016)
	ebp_116 = eax_1007
	esp_117 = esp_81 + 4<32>
	branch eax_1007 != 0<32> l006E80BA
l006E8128:
	word32 esi_123 = Mem122[esp_81 + 0x14<32>:word32]
	Mem125[esp_81:word32] = 0x8D2070<32>
	Mem127[esp_81 - 4<i32>:word32] = esi_123
	esp_117 = esp_81 + 4<32>
	word32 edx_1313
	branch fn006DF7C0(Mem127[esp_81 - 4<i32>:word32], Mem127[esp_81:word32], out edx_1313) == 0<32> l006E816C
l006E813E:
	Mem141[esp_81:word32] = esp_81 + 0x30<32>
	Mem144[esp_81 - 4<i32>:word32] = esp_81 + 0x24<32>
	Mem147[esp_81 - 8<i32>:word32] = esp_81 + 0x20<32>
	esp_117 = esp_81 + 4<32>
	branch fn006E7D90(esp_81 + 0x28<32>, esp_81 + 0x2C<32>, esi_123, es, ds, Mem147[esp_81 - 8<i32>:word32], Mem147[esp_81 - 4<i32>:word32], Mem147[esp_81:word32]) != 0<32> l006E81BC
l006E81BC:
	Mem173[esp_81:word32] = ebx_47
	Mem175[esp_81 - 4<i32>:word32] = 0x8D3F18<32>
	word32 edi_1316
	word32 edx_1314
	word32 esi_1315
	fn00731D30(Mem175[esp_81 - 4<i32>:word32], Mem175[esp_81:word32], out edx_1314, out esi_1315, out edi_1316)
	word32 eax_185 = Mem175[esp_81 + 0x28<32>:word32]
	Mem190[esp_81:word32] = ebx_47
	branch eax_185 != 0<32> l006E81DA
l006E81DA:
	Mem193[esp_81 - 4<i32>:word32] = eax_185
l006E81D3:
	Mem195[esp_81 - 4<i32>:word32] = 0x8D3F0C<32>
l006E81DB:
	word32 edi_1323
	word32 edx_1321
	word32 esi_1322
	fn00731D30(Mem197[esp_81 - 4<32>:word32], Mem197[esp_81:word32], out edx_1321, out esi_1322, out edi_1323)
	Mem211[esp_81:word32] = ebx_47
	Mem213[esp_81 - 4<32>:word32] = 0x8D3F00<32>
	word32 edx_1324
	word32 esi_1325
	word32 edi_1326
	fn00731D30(Mem213[esp_81 - 4<32>:word32], Mem213[esp_81:word32], out edx_1324, out esi_1325, out edi_1326)
	Mem225[esp_81 - 8<32>:word32] = Mem213[esp_81 + 0x20<32>:word32]
	Mem227[esp_81 - 0xC<32>:word32] = 0x8A8F48<32>
	Mem230[esp_81 - 0x10<32>:word32] = 0xA<32>
	Mem232[esp_81 - 0x14<32>:word32] = esp_81 + 0x34<32>
	fn00724FE0(Mem232[esp_81 - 0x14<32>:word32], Mem232[esp_81 - 0x10<32>:word32], Mem232[esp_81 - 0xC<32>:word32])
	Mem241[esp_81 - 0x18<32>:word32] = ebx_47
	Mem243[esp_81 - 0x1C<32>:word32] = esp_81 + 0x34<32>
	word32 edx_1327
	word32 esi_1328
	word32 edi_1329
	fn00731D30(Mem243[esp_81 - 0x1C<32>:word32], Mem243[esp_81 - 0x18<32>:word32], out edx_1327, out esi_1328, out edi_1329)
	Mem254[esp_81 - 0x20<32>:word32] = ebx_47
	Mem256[esp_81 - 0x24<32>:word32] = 0x8A6DE8<32>
	word32 esi_260
	word32 edi_1330
	fn00731D30(Mem256[esp_81 - 0x24<32>:word32], Mem256[esp_81 - 0x20<32>:word32], out edx_1016, out esi_260, out edi_1330)
	word32 eax_266 = Mem256[esp_81 + 0x30<32>:word32]
	branch eax_266 == 0<32> l006E8232
l006E8225:
	word32 ecx_271 = Mem256[esp_81 + 0x24<32>:word32]
	Mem273[esp_81:word32] = ebx_47
	edx_1016 = fn006E7F60(eax_266, ecx_271, Mem273[esp_81:word32])
l006E8232:
	word32 v16_285 = Mem284[esi_260:word32] + 0xFFFFFFFF<32>
	Mem286[esi_260:word32] = v16_285
	esp_117 = esp_81 + 4<32>
	branch v16_285 != 0<32> l006E8243
l006E8237:
	word32 ecx_289 = Mem286[esi_260 + 4<32>:word32]
	word32 edx_290 = Mem286[ecx_289 + 0x18<32>:word32]
	Mem293[esp_81:word32] = esi_260
	word32 esp_314
	call edx_290 (retsize: 4;)
		uses: ecx:ecx_289,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C
		defs: edx:edx_317,esp:esp_314
	esp_117 = esp_314 + 4<32>
l006E8243:
	Mem325[esp_117 + 0x10<32>:word32] = Mem323[esp_117 + 0x28<32>:word32]
	eax_1007 = fn006E0FC0()
	esi_329 = Mem325[esp_117 + 0x10<32>:word32]
	branch eax_1007 == 0<32> l006E8168
l006E825C:
	ebp_116 = 0xFFFFFFFF<32>
l006E8163:
	word32 edx_1318
	word32 ecx_1317
	fn006E1160(out ecx_1317, out edx_1318)
l006E8168:
	edi_344 = Mem343[esp_117 + 0x14<32>:word32]
l006E816C:
	word32 eax_348 = Mem347[edi_344 + 4<32>:word32]
	branch eax_348 == 0xA1E968<32> l006E8264
l006E817A:
	branch eax_348 == 0xA15380<32> l006E8193
l006E8181:
	word32 esp_354 = esp_117 - 4<i32>
	Mem355[esp_354:word32] = 0xA15380<32>
	Mem357[esp_354 - 4<i32>:word32] = eax_348
	word32 ecx_1333
	word32 edx_1334
	branch fn006D5670(Mem357[esp_354 - 4<i32>:word32], Mem357[esp_354:word32], out ecx_1333, out edx_1334) == 0<32> l006E81AB
l006E8193:
	word32 esp_372 = esp_117 - 4<i32>
	Mem373[esp_372:word32] = Mem369[0x00A169F0<p32>:word32]
	Mem376[esp_372 - 4<i32>:word32] = edi_344
	word32 ecx_1331
	word32 edx_1332
	branch fn006D5670(Mem376[esp_372 - 4<i32>:word32], Mem376[esp_372:word32], out ecx_1331, out edx_1332) != 0<32> l006E8264
l006E8264:
	word32 eax_395
	branch Mem389[edi_344 + 4<32>:word32] != 0xA1E968<32> l006E8279
l006E8279:
	word32 edx_392 = Mem389[edi_344 + 0xC<32>:word32]
	Mem394[esp_117 + 0x14<32>:word32] = edx_392
	eax_395 = edx_392
l006E826D:
	word32 eax_396 = Mem389[edi_344 + 0x10<32>:word32]
	Mem399[esp_117 + 0x14<32>:word32] = eax_396 + 0x14<32>
	eax_395 = eax_396 + 0x14<32>
l006E8282:
	branch eax_395 == 0<32> l006E829D
l006E8286:
	word32 esp_405 = esp_117 - 4<i32>
	Mem406[esp_405:word32] = 0x2E<32>
	Mem408[esp_405 - 4<i32>:word32] = eax_395
	word32 eax_409 = strrchr(Mem408[esp_405 - 4<i32>:(ptr32 charconst )], Mem408[esp_405:int32])
	branch eax_409 == 0<32> l006E829D
l006E8296:
	Mem416[esp_405 + 0x18<32>:word32] = eax_409 + 1<32>
l006E829D:
	word32 esp_418 = esp_117 - 4<i32>
	Mem419[esp_418:word32] = 0x8C8598<32>
	Mem423[esp_418 - 4<i32>:word32] = edi_344
	word32 edx_1338
	word32 edi_1339
	word32 eax_424 = fn006DF760(Mem423[esp_418 - 4<i32>:word32], Mem423[esp_418:word32], out edx_1338, out edi_1339)
	Mem436[esp_418 + 0x1C<32>:word32] = eax_424
	branch eax_424 != 0<32> l006E82C7
l006E82C7:
	Mem439[esp_418:word32] = eax_424
	word32 ecx_1340
	word32 esi_443
	eax_1007 = fn006ECC50(Mem439[esp_418:word32], out ecx_1340, out edx_1016, out esi_443)
	branch eax_1007 == 0<32> l006E8303
l006E82D4:
	word32 edi_452 = 0x8D35A0<32>
	word32 esi_453 = eax_1007
	word32 ecx_454 = 0xB<32>
	edx_1016 = 0<32>
	bool v31_1055 = true
l006E82E2:
	branch ecx_454 == 0<32> l006E82E4
l006E82E2_1:
	v31_1055 = Mem439[esi_1350:byte] == Mem439[edi_1351:byte]
	esi_453 = esi_1350 + 1<i32>
	edi_452 = edi_1351 + 1<i32>
	ecx_454 = ecx_454 - 1<32>
	esi_1350 = esi_453
	edi_1351 = edi_452
	branch Mem439[esi_1350:byte] != Mem439[edi_1351:byte] l006E82E2
l006E82E4:
	branch v31_1055 l006E82FF
l006E82E6:
	Mem482[esp_418:word32] = ebx_47
	Mem486[esp_418 - 4<i32>:word32] = eax_1007
	word32 edx_1343
	word32 esi_1344
	word32 edi_1345
	word32 eax_491 = fn00731D30(Mem486[esp_418 - 4<i32>:word32], Mem486[esp_418:word32], out edx_1343, out esi_1344, out edi_1345)
	Mem497[esp_418 - 8<i32>:word32] = ebx_47
	Mem499[esp_418 - 12<i32>:word32] = 0x8A6990<32>
	word32 esi_1346
	word32 edi_1347
	eax_1007 = fn00731D30(Mem499[esp_418 - 12<i32>:word32], Mem499[esp_418 - 8<i32>:word32], out edx_1016, out esi_1346, out edi_1347)
	ebp_116 = eax_491 + eax_1007
l006E82FF:
	esi_443 = Mem514[esp_117 + 0x18<32>:word32]
l006E8303:
	word32 v18_519 = Mem518[esi_443:word32] + 0xFFFFFFFF<32>
	Mem520[esi_443:word32] = v18_519
	branch v18_519 != 0<32> l006E8314
l006E8308:
	word32 eax_523 = Mem520[esi_443 + 4<32>:word32]
	word32 ecx_524 = Mem520[eax_523 + 0x18<32>:word32]
	Mem527[esp_117 - 4<i32>:word32] = esi_443
	word32 esp_620
	call ecx_524 (retsize: 4;)
		uses: eax:eax_523,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C
		defs: eax:eax_621,edx:edx_623,esp:esp_620
	esp_117 = esp_620 + 4<32>
l006E82B5:
	Mem629[esp_418:word32] = ebx_47
	Mem631[esp_418 - 4<i32>:word32] = 0x8BF7CC<32>
	word32 esi_1341
	word32 edi_1342
	eax_1007 = fn00731D30(Mem631[esp_418 - 4<i32>:word32], Mem631[esp_418:word32], out edx_1016, out esi_1341, out edi_1342)
	esp_117 = esp_418 + 4<32>
	ebp_116 = eax_1007
l006E8314:
	branch ebp_116 != 0<32> l006E80BA
l006E831C:
	word32 eax_650 = Mem649[esp_117 + 0x14<32>:word32]
	word32 esp_653 = esp_117 - 4<i32>
	Mem655[esp_653:word32] = ebx_47
	branch eax_650 != 0<32> l006E832C
l006E832C:
	Mem658[esp_653 - 4<i32>:word32] = eax_650
l006E8325:
	Mem660[esp_653 - 4<i32>:word32] = 0x8BF7CC<32>
l006E832D:
	word32 esp_661 = esp_117 - 8<i32>
	word32 edi_1349
	word32 esi_1348
	eax_1007 = fn00731D30(Mem662[esp_661:word32], Mem662[esp_661 + 4<i32>:word32], out edx_1016, out esi_1348, out edi_1349)
	esi_329 = Mem662[esp_661 + 0x18<32>:word32]
	esp_117 = esp_661 + 8<32>
l006E81AB:
	word32 esp_676 = esp_117 - 4<i32>
	Mem677[esp_676:word32] = 1<32>
	Mem680[esp_676 - 4<i32>:word32] = ebx_47
	Mem683[esp_676 - 8<i32>:word32] = edi_344
	eax_1007 = fn00731B10(edi_344, es, ds, Mem683[esp_676 - 8<i32>:word32], Mem683[esp_676 - 4<i32>:word32], Mem683[esp_676:word32], out edx_1016, out ebx_47, out esi_329)
	esp_117 = esp_676 + 4<32>
l006E8339:
	ebp_116 = eax_1007
	branch eax_1007 != 0<32> l006E80BE
l006E8343:
	branch esi_329 == 0xA163B8<32> l006E83C3
l006E834B:
	word32 esp_714 = esp_117 - 4<i32>
	Mem715[esp_714:word32] = esi_329
	word32 edi_718
	eax_1007 = fn006DDF70(Mem715[esp_714:word32], out edx_1016, out edi_718)
	word32 esi_725 = eax_1007
	esp_117 = esp_714 + 4<32>
	branch eax_1007 != 0<32> l006E8362
l006E8362:
	word32 eax_730 = Mem715[eax_1007 + 4<32>:word32]
	branch eax_730 == 0xA1B450<32> l006E837E
l006E836C:
	Mem734[esp_714:word32] = 0xA1B450<32>
	Mem736[esp_714 - 4<i32>:word32] = eax_730
	word32 ecx_1336
	word32 edx_1337
	branch fn006D5670(Mem736[esp_714 - 4<i32>:word32], Mem736[esp_714:word32], out ecx_1336, out edx_1337) == 0<32> l006E8384
l006E837E:
	branch Mem749[eax_1007 + 8<32>:word32] == 0<32> l006E8398
l006E8384:
	word32 esp_754 = esp_117 - 4<i32>
	Mem759[esp_754:word32] = ebx_47
	Mem761[esp_754 - 4<i32>:word32] = 0x8BAE70<32>
	eax_1007 = fn00731D30(Mem761[esp_754 - 4<i32>:word32], Mem761[esp_754:word32], out edx_1016, out esi_725, out edi_718)
	ebp_116 = eax_1007
	branch eax_1007 != 0<32> l006E83A6
l006E8398:
	word32 esp_777 = esp_117 - 4<i32>
	Mem778[esp_777:word32] = 1<32>
	Mem781[esp_777 - 4<i32>:word32] = ebx_47
	Mem784[esp_777 - 8<i32>:word32] = esi_725
	eax_1007 = fn00731B10(edi_718, es, ds, Mem784[esp_777 - 8<i32>:word32], Mem784[esp_777 - 4<i32>:word32], Mem784[esp_777:word32], out edx_1016, out ebx_47, out esi_725)
	ebp_116 = eax_1007
l006E83A6:
	word32 v17_841 = Mem840[esi_725:word32] + 0xFFFFFFFF<32>
	Mem842[esi_725:word32] = v17_841
	branch v17_841 != 0<32> l006E83B7
l006E83AB:
	word32 edx_845 = Mem842[esi_725 + 4<32>:word32]
	word32 eax_846 = Mem842[edx_845 + 0x18<32>:word32]
	Mem849[esp_117 - 4<i32>:word32] = esi_725
	word32 esp_867
	call eax_846 (retsize: 4;)
		uses: edx:edx_845,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C
		defs: eax:eax_868,edx:edx_870,esp:esp_867
	esp_117 = esp_867 + 4<32>
l006E83B7:
	esi_329 = Mem879[esp_117 + 0x10<32>:word32]
	branch ebp_116 != 0<32> l006E80BE
l006E83C3:
	word32 esp_883 = esp_117 - 4<i32>
	Mem886[esp_883:word32] = ebx_47
	Mem888[esp_883 - 4<i32>:word32] = 0x8A6DE8<32>
	word32 edi_1335
	eax_1007 = fn00731D30(Mem888[esp_883 - 4<i32>:word32], Mem888[esp_883:word32], out edx_1016, out esi_329, out edi_1335)
	esp_117 = esp_883 + 4<32>
	ebp_116 = eax_1007
l006E835A:
	ebp_116 = 0xFFFFFFFF<32>
l006E80A2:
	word32 esp_906
	word32 eax_907
	call _iob_func (retsize: 4;)
		uses: Stack +0004:0x8D3F24<32>,Stack +004C:dwArg04,Stack +0050:dwArg08,Stack +0054:dwArg0C
		defs: eax:eax_907,edx:edx_909,esp:esp_906
	Mem914[esp_906 - 4<i32>:word32] = eax_907 + 0x40<32>
	eax_1007 = fprintf(Mem914[esp_906 - 4<i32>:(ptr32 FILE)], Mem914[esp_906:(ptr32 charconst )], 0<32>)
	esp_117 = esp_906 + 4<32>
l006E80BA:
	esi_329 = Mem919[esp_117 + 0x10<32>:word32]
l006E80BE:
	word32 v13_924 = Mem922[esi_329:word32] + 0xFFFFFFFF<32>
	Mem925[esi_329:word32] = v13_924
	branch v13_924 != 0<32> l006E80CF
l006E80C3:
	word32 ecx_928 = Mem925[esi_329 + 4<32>:word32]
	word32 edx_929 = Mem925[ecx_928 + 0x18<32>:word32]
	Mem932[esp_117 - 4<i32>:word32] = esi_329
	call edx_929 (retsize: 4;)
		uses: ecx:ecx_928,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C
		defs: eax:eax_972,edx:edx_974
l006E80CF:
	branch ebp_116 == 0<32> l006E80DC
l006E80D7:
	word32 ecx_1320
	eax_1007 = fn006E1160(out ecx_1320, out edx_1016)
l006E80DC:
	word32 ecx_1319
	fn00694B8E(eax_1007, eax_7 ^ fp - 48<i32>, edx_1016, ebx, ebp, esi, edi, es, ds, ebx, out ecx_1319)
	return
fn006E8060_exit:


word32 fn006E83E0(word32 dwArg04, word32 dwArg08, word32 dwArg0C)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E9040
//      fn006E90B0
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut: eax
// Trashed: SCZO ecx edi edx Top
// Preserved: esi esp
fn006E83E0_entry:
l006E83E0:
	word32 eax_20 = fn0072E790(dwArg04, edx, ecx, eax)
	branch eax_20 != 0<32> l006E83F9
l006E83F9:
	word32 edx_44
	word32 eax_42 = fn0070BC90(out edx_44)
	word32 v12_48 = Mem40[eax_20:word32] + 0xFFFFFFFF<32>
	Mem49[eax_20:word32] = v12_48
	branch v12_48 != 0<32> l006E8420
l006E8414:
	word32 eax_53 = Mem49[eax_20 + 4<32>:word32]
	word32 ecx_54 = Mem49[eax_53 + 0x18<32>:word32]
	call ecx_54 (retsize: 4;)
		uses: eax:eax_53,ecx:ecx_54,edx:edx_44,Stack +0004:eax_20,Stack +0008:dwArg04,Stack +0014:dwArg04,Stack +0018:dwArg08,Stack +001C:dwArg0C
l006E8420:
	return eax_42
l006E83F7:
	return eax_20
fn006E83E0_exit:


void fn006E8430(word32 eax, word32 esi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E8AC0
//      fn006E8B50
// MayUse:  eax:[0..31] esi:[0..31]
// LiveOut:
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn006E8430_entry:
l006E8430:
	word32 ebx_163
	word32 esp_105 = fp - 0x1C<32>
	word32 eax_18 = Mem15[eax:word32]
	word32 ebp_20 = 0<32>
	branch eax_18 >u 0x19<32> l006E85E7
l006E8452:
	switch (eax_18 - 0xB<32>) { l006E84ED l006E84BF l006E84A1 l006E8459 l006E84E2 l006E85E7 l006E85E7 l006E84F7 l006E850B l006E8528 l006E8515 l006E853C l006E84AB l006E84B5 l006E85E0 }
l006E85E0:
	ebx_163 = 0x8D3F64<32>
l006E84B5:
	ebx_163 = 0x8D4070<32>
l006E84AB:
	ebx_163 = 0x8D4098<32>
l006E853C:
	fn006E1130(fp - 8<32>, fp - 0xC<32>, fp - 4<32>)
	branch dwLoc0C == 0<32> l006E8579
l006E855B:
	word32 edx_556
	word32 edi_557
	word32 eax_52 = fn006DDF70(dwLoc0C, out edx_556, out edi_557)
	ebp_20 = eax_52
	branch eax_52 == 0<32> l006E8579
l006E856A:
	word32 esi_560
	word32 edx_559
	word32 ecx_558
	word32 eax_65 = fn006ECC50(eax_52, out ecx_558, out edx_559, out esi_560)
	ebx_163 = eax_65
	branch eax_65 != 0<32> l006E857E
l006E8579:
	ebx_163 = 0x8D3F9C<32>
l006E857E:
	esp_105 = fp - 0x1C<32>
	branch dwLoc08 == 0<32> l006E859E
l006E8586:
	Mem84[dwLoc08:word32] = Mem77[dwLoc08:word32] + 0xFFFFFFFF<32>
	branch Mem84[dwLoc08:word32] != 0<32> l006E859E
l006E8592:
	word32 edx_88 = Mem84[dwLoc08 + 4<32>:word32]
	word32 eax_91 = Mem90[edx_88 + 0x18<32>:word32]
	word32 esp_99
	call eax_91 (retsize: 4;)
		uses: eax:eax_91,edx:edx_88,Stack +0004:dwLoc08,Stack +0018:dwLoc0C,Stack +001C:dwLoc08,Stack +FFFFFFF8:dwLoc0C
		defs: esp:esp_99
	esp_105 = esp_99 + 4<32>
l006E859E:
	word32 eax_109 = Mem108[esp_105 + 0x10<32>:word32]
	branch eax_109 == 0<32> l006E85BE
l006E85A6:
	Mem114[eax_109:word32] = Mem108[eax_109:word32] + 0xFFFFFFFF<32>
	word32 eax_115 = Mem114[esp_105 + 0x10<32>:word32]
	branch Mem114[eax_115:word32] != 0<32> l006E85BE
l006E85B2:
	word32 ecx_118 = Mem114[eax_115 + 4<32>:word32]
	word32 edx_119 = Mem114[ecx_118 + 0x18<32>:word32]
	Mem121[esp_105 - 4<i32>:word32] = eax_115
	word32 esp_126
	call edx_119 (retsize: 4;)
		uses: eax:eax_115,ecx:ecx_118,Stack +FFFFFFF8:dwLoc0C,Stack +FFFFFFFC:dwLoc08
		defs: esp:esp_126
	esp_105 = esp_126 + 4<32>
l006E85BE:
	word32 eax_136 = Mem135[esp_105 + 0x18<32>:word32]
	branch eax_136 == 0<32> l006E8605
l006E85C6:
	Mem141[eax_136:word32] = Mem135[eax_136:word32] + 0xFFFFFFFF<32>
	word32 eax_142 = Mem141[esp_105 + 0x18<32>:word32]
	branch Mem141[eax_142:word32] != 0<32> l006E8605
l006E85D2:
	word32 ecx_145 = Mem141[eax_142 + 4<32>:word32]
	word32 edx_146 = Mem141[ecx_145 + 0x18<32>:word32]
	Mem148[esp_105 - 4<i32>:word32] = eax_142
	word32 esp_153
	call edx_146 (retsize: 4;)
		uses: eax:eax_142,ecx:ecx_145,Stack +FFFFFFF8:dwLoc0C,Stack +FFFFFFFC:dwLoc08
		defs: esp:esp_153
	esp_105 = esp_153 + 4<32>
l006E8515:
	ebx_163 = 0x8D3FD4<32>
l006E8528:
	ebx_163 = 0x8D3FB4<32>
l006E850B:
	ebx_163 = 0x8D4008<32>
l006E84F7:
	ebx_163 = 0x8D401C<32>
l006E85E7:
	word32 esp_181
	word32 eax_183
	call _iob_func (retsize: 4;)
		uses: eax:eax_18,Stack +0004:0x8D3F58<32>,Stack +0008:eax_18,Stack +001C:dwLoc0C,Stack +0020:dwLoc08
		defs: eax:eax_183,esp:esp_181
	Mem189[esp_181 - 4<i32>:word32] = eax_183 + 0x40<32>
	fprintf(Mem189[esp_181 - 4<i32>:(ptr32 FILE)], Mem189[esp_181:(ptr32 charconst )], 0<32>)
	esp_105 = esp_181 + 8<32>
	ebx_163 = 0x8D3F40<32>
l006E84E2:
l006E84E8_thunk_fn006E1210:
	word32 ecx_563
	word32 edx_564
	fn006E1210(out ecx_563, out edx_564)
	return
l006E8459:
	branch Mem22[eax + 0x18<32>:word32] != 5<32> l006E8472
l006E8472:
	word32 eax_212 = Mem210[eax + 0x14<32>:word32]
	branch eax_212 != 5<32> l006E8484
l006E8484:
	branch eax_212 != 6<32> l006E8493
l006E8493:
	ebx_163 = 0x8D40D0<32>
l006E8489:
	ebx_163 = 0x8D40E0<32>
l006E847A:
	ebx_163 = 0x8D40F4<32>
l006E8468:
	ebx_163 = 0x8D4108<32>
l006E84A1:
	ebx_163 = 0x8D40C0<32>
l006E84BF:
	branch fn006E0FC0() != 0<32> l006E86A2
l006E84CC:
	word32 edx_551
	fn006E0F10(Mem22[0x00A16F88<p32>:word32], out edx_551)
	return
l006E84ED:
	ebx_163 = 0x8D4050<32>
l006E8605:
	word32 eax_249 = Mem248[eax + 0x10<32>:word32]
	word32 ecx_250 = Mem248[eax + 0xC<32>:word32]
	word32 edx_251 = Mem248[eax + 8<32>:word32]
	word32 esp_253 = esp_105 - 4<i32>
	Mem261[esp_253:word32] = esi
	Mem263[esp_253 - 4<i32>:word32] = eax_249
	word32 eax_264 = Mem263[eax + 4<32>:word32]
	Mem266[esp_253 - 8<i32>:word32] = ecx_250
	Mem268[esp_253 - 12<i32>:word32] = edx_251
	Mem270[esp_253 - 16<i32>:word32] = eax_264
	Mem272[esp_253 - 20<i32>:word32] = 0x8D3F38<32>
	word32 edx_552
	word32 esi_553
	word32 eax_278 = fn006EA200(out edx_552, out esi_553)
	word32 eax_283 = Mem272[eax + 0x10<32>:word32]
	branch eax_283 == 0<32> l006E863C
l006E862C:
	Mem289[esp_253 - 4<32>:word32] = eax_283
	word32 ecx_549
	word32 edx_550
	eax_283 = fn007239C0(Mem289[esp_253 - 4<32>:word32], out ecx_549, out edx_550)
	Mem299[eax + 0x10<32>:word32] = 0<32>
l006E863C:
	word32 edi_300 = 0<32>
	branch eax_278 == 0<32> l006E8653
l006E8642:
	Mem307[esp_253 - 4<32>:word32] = eax_278
	Mem310[esp_253 - 8<32>:word32] = ebx_163
	Mem312[esp_253 - 0xC<32>:word32] = 0x8C8040<32>
	word32 edx_554
	word32 esi_555
	eax_283 = fn006EA200(out edx_554, out esi_555)
	edi_300 = eax_283
l006E8653:
	word32 esp_337 = esp_253
	branch ebp_20 == 0<32> l006E8669
l006E8657:
	word32 v15_331 = Mem329[ebp_20:word32] + 0xFFFFFFFF<32>
	Mem332[ebp_20:word32] = v15_331
	branch v15_331 != 0<32> l006E8669
l006E865D:
	word32 ecx_335 = Mem332[ebp_20 + 4<32>:word32]
	word32 edx_336 = Mem332[ecx_335 + 0x18<32>:word32]
	Mem339[esp_253 - 4<i32>:word32] = ebp_20
	word32 esp_345
	call edx_336 (retsize: 4;)
		uses: eax:eax_342,ecx:ecx_335,Stack +FFFFFFF8:dwLoc0C,Stack +FFFFFFFC:dwLoc08
		defs: esp:esp_345
	esp_337 = esp_345 + 4<32>
l006E8669:
	branch eax_278 == 0<32> l006E867E
l006E866D:
	word32 v17_358 = Mem357[eax_278:word32] + 0xFFFFFFFF<32>
	Mem359[eax_278:word32] = v17_358
	branch v17_358 != 0<32> l006E867E
l006E8672:
	word32 eax_362 = Mem359[eax_278 + 4<32>:word32]
	word32 ecx_363 = Mem359[eax_362 + 0x18<32>:word32]
	Mem366[esp_337 - 4<i32>:word32] = eax_278
	word32 esp_371
	call ecx_363 (retsize: 4;)
		uses: eax:eax_362,Stack +FFFFFFF8:dwLoc0C,Stack +FFFFFFFC:dwLoc08
		defs: esp:esp_371
	esp_337 = esp_371 + 4<32>
l006E867E:
	word32 edx_381 = Mem380[esp_337 + 0x10<32>:word32]
	word32 esp_382 = esp_337 - 4<i32>
	Mem384[esp_382:word32] = edi_300
	Mem386[esp_382 - 4<i32>:word32] = edx_381
	word32 ecx_561
	word32 edx_562
	fn006E0E90(Mem386[esp_382 - 4<i32>:word32], Mem386[esp_382:word32], out ecx_561, out edx_562)
	branch edi_300 == 0<32> l006E86A2
l006E8691:
	word32 v19_400 = Mem386[edi_300:word32] + 0xFFFFFFFF<32>
	Mem401[edi_300:word32] = v19_400
	branch v19_400 != 0<32> l006E86A2
l006E8696:
	word32 eax_404 = Mem401[edi_300 + 4<32>:word32]
	word32 ecx_405 = Mem401[eax_404 + 0x18<32>:word32]
	Mem407[esp_382 + 4<32>:word32] = edi_300
	call ecx_405 (retsize: 4;)
		uses: eax:eax_404,Stack +FFFFFFF8:dwLoc0C,Stack +FFFFFFFC:dwLoc08
l006E86A2:
	return
fn006E8430_exit:


void fn006E86F0(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006DFD20
//      fn006E0B00
//      fn006E7660
//      fn006EC890
//      fn006F2650
//      fn006F5DA0
//      fn006F62D0
//      fn006F63A0
//      fn006F6440
//      fn006F6490
//      fn006F70C0
//      fn006F8440
//      fn006F94A0
//      fn006FDCC0
//      fn006FE2A0
//      fn006FE400
//      fn006FEE30
//      fn00706BE0
//      fn00706C20
//      fn00708DC0
//      fn007157B0
//      fn00715B80
//      fn00715BD0
//      fn00725010
//      fn00725DA0
//      fn00727290
//      fn007274B0
//      fn00727910
//      fn00729040
//      fn0072C160
//      fn00734B60
//      fn0073AFB0
//      fn0073B240
//      fn0073B280
//      fn0073B9B0
//      fn0074E980
//      fn007500E0
//      fn00750380
//      fn007540B0
//      fn007544F0
// MayUse:  Stack +0004:[0..31]
// LiveOut:
// Trashed: SCZO eax Top
// Preserved: edi esi esp
fn006E86F0_entry:
l006E86F0:
	word32 eax_16
	call _iob_func (retsize: 4;)
		uses: Stack +0004:0x8D413C<32>,Stack +0008:dwArg04,Stack +0018:dwArg04
		defs: eax:eax_16
	fprintf(eax_16 + 0x40<32>, 0x8D413C<32>, 0<32>)
	OutputDebugStringA(0x8D4124<32>)
	OutputDebugStringA(dwArg04)
	OutputDebugStringA(0x8A6DE8<32>)
	abort()
	return
fn006E86F0_exit:


void fn006E8730()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E8910
// MayUse: 
// LiveOut:
// Trashed: SCZO eax ebx ecx edi edx Top
// Preserved: esi esp
fn006E8730_entry:
l006E8730:
	word32 ecx_168
	word32 edx_169
	word32 eax_9 = fn00715DD0(out ecx_168, out edx_169)
	branch eax_9 == 0<32> l006E879E
l006E8744:
	Mem22[eax_9:word32] = Mem8[eax_9:word32] + 1<32>
	word32 esi_47
	word32 edi_172
	word32 ecx_173
	word32 edx_174
	word32 edi_175
	branch fn00707680(fn00715E50(0<32>, out edi_172), 0<32>, 0<32>, out ecx_173, out edx_174, out esi_47, out edi_175) != 0<32> l006E878D
l006E8764:
	word32 ecx_176
	word32 edx_177
	branch fn006E1110(out ecx_176, out edx_177) != 0<32> l006E8783
l006E8776:
	word32 edx_185
	fn00716B20(out edx_185)
l006E8783:
	word32 ebp_182
	word32 esi_183
	word32 edi_184
	fn006E8D90(ebx, esi_47, edi, es, ds, out ebp_182, out esi_183, out edi_184)
l006E878D:
	word32 v10_95 = Mem94[esi_47:word32] + 0xFFFFFFFF<32>
	Mem96[esi_47:word32] = v10_95
	branch v10_95 != 0<32> l006E879E
l006E8792:
	word32 ecx_99 = Mem96[esi_47 + 4<32>:word32]
	call Mem96[ecx_99 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_99,Stack +0004:esi_47
l006E879E:
	word32 ebx_170
	word32 edi_171
	branch fn00707640(out ebx_170, out edi_171) == 0<32> l006E87AD
l006E87AD:
	return
l006E87A8:
l006E87A8_thunk_fn006E1160:
	word32 ecx_186
	word32 edx_187
	fn006E1160(out ecx_186, out edx_187)
	return
fn006E8730_exit:


word32 fn006E8800(word32 edx, word32 ebx, word32 esi, word32 edi, selector es, selector ds)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006DDEB0
//      fn006DEEA0
//      fn00706DC0
// MayUse:  cs:[0..15] ds:[0..15] ebx:[0..31] edi:[0..31] edx:[0..31] es:[0..15] esi:[0..31] fs:[0..15] gs:[0..15] ss:[0..15]
// LiveOut: eax
// Trashed: SCZDOP eax ecx Top
// Preserved: ebp ebx edi esi esp
fn006E8800_entry:
l006E8800:
	word32 eax_15 = Mem13[fs:0<32>:word32]
	word32 eax_23 = Mem17[0x00A14188<p32>:word32] ^ fp - 4<i32>
	Mem39[fs:0<32>:word32] = fp - 0x14<32>
	fn0082ABF0(0x2000<32>, dwLoc34)
l006E886A:
	Mem55[fs:0x00000000<p32>:word32] = eax_15
	word32 ecx_101
	return fn00694B8E(0<32>, eax_23 ^ fp - 4<i32>, edx, ebx, fp - 4<i32>, esi, edi, es, ds, ebx, out ecx_101)
fn006E8800_exit:


void fn006E8910(selector es, selector ds)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E8C30
// MayUse:  cs:[0..15] ds:[0..15] es:[0..15] fs:[0..15] gs:[0..15] ss:[0..15]
// LiveOut:
// Trashed: SCZDOP ebp ebx edi Top
// Preserved: eax ecx edx esi esp
fn006E8910_entry:
l006E8910:
	branch Mem0[0x00A6C624<p32>:word32] == 0<32> l006E89CF
l006E89CF:
	return
l006E891D:
	fn006E8730()
	Mem18[0x00A6C624<p32>:word32] = 0<32>
	fn0072ECF0()
	word32 esp_10 = fp - 4<i32>
	word32 eax_27 = Mem18[0x00A6C620<p32>:word32]
	branch eax_27 == 0<32> l006E8954
l006E8943:
	word32 v9_31 = Mem18[eax_27:word32] + 0xFFFFFFFF<32>
	Mem32[eax_27:word32] = v9_31
	branch v9_31 != 0<32> l006E8954
l006E8948:
	word32 ecx_35 = Mem32[eax_27 + 4<32>:word32]
	word32 esp_39
	word32 eax_40
	word32 edx_42
	call Mem32[ecx_35 + 0x18<32>:word32] (retsize: 4;)
		uses: eax:eax_40,ecx:ecx_35,edx:edx_42,Stack +0004:eax_27
		defs: eax:eax_40,edx:edx_42,esp:esp_39
	esp_10 = esp_39 + 4<32>
l006E8954:
	Mem47[0x00A6C620<p32>:word32] = 0<32>
	word32 ebp_49 = fn006FEE00()
	word32 esi_63
	word32 edi_64
	word32 ebx_60 = fn006F5DD0(out esi_63, out edi_64)
	fn006F5C20()
	fn007159F0()
	word32 esp_83 = esp_10 - 4<i32>
	Mem84[esp_83:word32] = esi_63
	fn00715A70(Mem84[esp_83:word32])
	fn006E52A0()
	Mem100[esp_83 - 4<i32>:word32] = 0<32>
	word32 ecx_351
	fn007158B0(Mem100[esp_83 - 4<i32>:word32], out ecx_351)
	Mem104[esp_83 - 8<i32>:word32] = esi_63
	fn00715BD0(Mem104[esp_83 - 8<i32>:word32])
	fn0070E820()
	fn0073B5E0()
	fn006F9B70()
	word32 edi_136
	word32 esi_137 = fn006E0CA0(esi_63, edi_64, out edi_136)
	fn006F2610()
	fn00738D80()
	fn006EC950()
	fn00706900()
	fn00700EC0(ebx_60, ebp_49, esi_137, edi_136, es, ds)
	fn0071F9C0(ebp_49)
	word32 esp_145 = <invalid>
	Mem201[esp_145 - 4<i32>:word32] = 0xA2AC58<32>
	fn00737950(Mem201[esp_145 - 4<i32>:word32])
	word32 esi_210 = Mem201[esp_145 + 0xC<32>:word32]
	word32 esp_211 = esp_145 + 0x10<32>
l006E87B0:
	word32 eax_212 = Mem201[0x00A6C62C<p32>:word32]
	branch eax_212 <= 0<32> l006E87DA
l006E87B9:
l006E87C0:
	word32 eax_217 = eax_212 - 1<32>
	Mem219[0x00A6C62C<p32>:word32] = eax_217
	word32 eax_220 = Mem219[eax_217 * 4<32> + 0xA6C598<32>:word32]
	word32 ecx_232
	word32 edx_233
	call eax_220 (retsize: 4;)
		uses: eax:eax_220,ecx:ecx_232,edx:edx_233
		defs: ecx:ecx_232,edx:edx_233,esp:esp_230
	eax_212 = Mem219[0x00A6C62C<p32>:word32]
	branch eax_212 > 0<32> l006E87C0
l006E87DA:
	word32 esp_240 = esp_211 - 4<i32>
	Mem242[esp_240:word32] = esi_210
	Mem247[esp_240 - 4<i32>:word32] = edi_136
	word32 esp_256
	word32 eax_257
	call _iob_func (retsize: 4;)
		uses: eax:eax_284,ecx:ecx_285,edx:edx_286
		defs: eax:eax_257,esp:esp_256
	Mem266[esp_256 - 4<i32>:word32] = eax_257 + 0x20<32>
	call MSVCR80.dll!fflush (retsize: 4;)
		uses: eax:eax_257 + 0x20<32>,ecx:ecx_285,edx:edx_286
	word32 esp_273
	word32 eax_274
	call _iob_func (retsize: 4;)
		uses: eax:eax_284,ecx:ecx_285,edx:edx_286
		defs: eax:eax_274,esp:esp_273
	Mem282[esp_273 - 4<i32>:word32] = eax_274 + 0x40<32>
	word32 eax_284
	word32 ecx_285
	word32 edx_286
	call MSVCR80.dll!fflush (retsize: 4;)
		uses: eax:eax_274 + 0x40<32>,ecx:ecx_285,edx:edx_286
		defs: eax:eax_284,ecx:ecx_285,edx:edx_286
	return
fn006E8910_exit:


word32 fn006E8AC0(word32 dwArg10)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E9040
// MayUse:  Stack +0010:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ebx ecx edi edx esi Top
// Preserved: esp
fn006E8AC0_entry:
l006E8AC0:
	branch dwArg10 == 0<32> l006E8AE8
l006E8AE8:
l006E8ACE:
l006E8AEA:
	word32 eax_57 = fn00740A90(dwArg08, fp - 0x1C<32>)
	branch eax_57 == 0<32> l006E8B33
l006E8B33:
	fn006E8430(fp - 0x1C<32>, eax_57)
	return 0<32>
l006E8B12:
	word32 eax_93 = fn007403E0(edx, dwArg08, es, ds, eax_57, dwArg04)
	fn0073B7F0(eax_57)
	return eax_93
fn006E8AC0_exit:


word32 fn006E8B50(word32 dwArg18, word32 dwArg1C)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E90B0
//      fn006F67C0
// MayUse:  Stack +0018:[0..31] Stack +001C:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ebx ecx edi edx esi Top
// Preserved: esp
fn006E8B50_entry:
l006E8B50:
	branch dwArg18 == 0<32> l006E8B78
l006E8B78:
l006E8B5E:
l006E8B7A:
	word32 eax_63 = fn00740B40(dwArg04, dwArg08, dwArg10, dwArg14, fp - 0x1C<32>)
	branch eax_63 == 0<32> l006E8BCD
l006E8BCD:
	fn006E8430(fp - 0x1C<32>, eax_63)
	branch dwArg1C == 0<32> l006E8BE4
l006E8BDE:
	Mem84[dwArg1C:word32] = dwLoc1C
l006E8BE4:
	return 0<32>
l006E8BAC:
	word32 eax_107 = fn007403E0(dwArg20, dwArg08, es, ds, eax_63, dwArg04)
	fn0073B7F0(eax_63)
	return eax_107
fn006E8B50_exit:


void fn006E8C30(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E8D90
// MayUse:  Stack +0004:[0..31]
// LiveOut:
// Trashed:
// Preserved: esp
// Terminates process
fn006E8C30_exit:
fn006E8C30_entry:
l006E8C30:
	fn006E8910(es, ds)
	exit(dwArg04)


word32 fn006E8D90(word32 ebx, word32 esi, word32 edi, selector es, selector ds, ptr32 & ebpOut, ptr32 & esiOut, ptr32 & ediOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0042DF20
//      fn00657140
//      fn006E8730
// MayUse:  cs:[0..15] ds:[0..15] ebx:[0..31] edi:[0..31] es:[0..15] esi:[0..31] fs:[0..15] gs:[0..15] ss:[0..15]
// LiveOut: ebp ebx edi esi
// Trashed: SCZDOP eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn006E8D90_entry:
	word32 esp_2 = fp
l006E8D90:
	word32 esp_7 = esp_2 - 0x18<32>
	Mem10[esp_7 - 4<i32>:word32] = Mem4[0x00A16E04<p32>:word32]
	word32 esp_17 = esp_7
	word32 ecx_1130
	word32 edx_1131
	branch fn006E1110(out ecx_1130, out edx_1131) == 0<32> l006E8DAA
l006E8DAA:
	Mem23[esp_7 - 4<i32>:word32] = esp_7 + 8<32>
	Mem26[esp_7 - 8<i32>:word32] = esp_7 + 4<32>
	Mem29[esp_7 - 12<i32>:word32] = esp_7
	fn006E1130(Mem29[esp_7 - 12<i32>:word32], Mem29[esp_7 - 8<i32>:word32], Mem29[esp_7 - 4<i32>:word32])
	branch Mem29[esp_7:word32] == 0<32> l006E9035
l006E8DCB:
	Mem42[esp_7 - 4<i32>:word32] = esp_7 + 8<32>
	Mem45[esp_7 - 8<i32>:word32] = esp_7 + 4<32>
	Mem48[esp_7 - 12<i32>:word32] = esp_7
	ebx = fn006E1BD0(Mem48[esp_7 - 12<i32>:word32], Mem48[esp_7 - 8<i32>:word32], out ebp, out esi, out edi)
	word32 eax_60 = Mem48[esp_7:word32]
	branch eax_60 == 0<32> l006E9035
l006E8DEE:
	branch Mem48[esp_7 + 0x1C<32>:word32] == 0<32> l006E8E21
l006E8DF5:
	Mem68[esp_7 - 4<i32>:word32] = eax_60
	Mem70[esp_7 - 8<i32>:word32] = 0x8D4250<32>
	word32 edi_1135
	fn00715E50(Mem70[esp_7 - 4<i32>:word32], out edi_1135)
	Mem82[esp_7 - 12<i32>:word32] = Mem70[esp_7 + 4<32>:word32]
	Mem84[esp_7 - 16<i32>:word32] = 0x8D4244<32>
	word32 edi_1136
	fn00715E50(Mem84[esp_7 - 12<i32>:word32], out edi_1136)
	Mem96[esp_7 - 20<i32>:word32] = Mem84[esp_7 + 8<32>:word32]
	Mem98[esp_7 - 24<i32>:word32] = 0x8D4234<32>
	esi = fn00715E50(Mem98[esp_7 - 20<i32>:word32], out edi)
l006E8E21:
	word32 esp_172
	Mem113[esp_7 - 4<i32>:word32] = esi
	Mem116[esp_7 - 8<i32>:word32] = edi
	Mem118[esp_7 - 12<i32>:word32] = 0x8D4228<32>
	word32 edx_1134
	word32 ecx_1133
	word32 eax_119 = fn00715DD0(out ecx_1133, out edx_1134)
	branch eax_119 == 0<32> l006E8FB2
l006E8FB2:
	Mem132[esp_7 - 0xC<32>:word32] = 0x8D41D4<32>
	word32 edx_1139
	fn00716B20(out edx_1139)
	word32 eax_141 = Mem132[esp_7 + 4<32>:word32]
	word32 ecx_142 = Mem132[esp_7:word32]
	Mem144[esp_7 - 0x10<32>:word32] = Mem132[esp_7 + 8<32>:word32]
	Mem146[esp_7 - 0x14<32>:word32] = eax_141
	Mem148[esp_7 - 0x18<32>:word32] = ecx_142
	fn006E8060(ebx, ebp, eax_119, edi, es, ds, Mem148[esp_7 - 0x18<32>:word32], Mem148[esp_7 - 0x14<32>:word32], Mem148[esp_7 - 0x10<32>:word32])
	esp_172 = esp_7 - 8<32>
l006E8E3A:
	word32 eax_174 = Mem118[esp_7 + 8<32>:word32]
	branch eax_174 != 0<32> l006E8E47
l006E8E42:
	eax_174 = 0xA163B8<32>
l006E8E47:
	bool v37_950
	word32 ecx_181 = Mem118[esp_7:word32]
	Mem184[esp_7 - 0xC<32>:word32] = eax_174
	Mem187[esp_7 - 0x10<32>:word32] = Mem184[esp_7 + 4<32>:word32]
	Mem189[esp_7 - 0x14<32>:word32] = ecx_181
	Mem191[esp_7 - 0x18<32>:word32] = 3<32>
	word32 esi_195
	word32 ecx_1140
	word32 edx_1141
	word32 eax_192 = fn006DFF80(Mem191[esp_7 - 0x18<32>:word32], out ecx_1140, out edx_1141, out esi_195)
	Mem202[esp_7 - 0x1C<32>:word32] = 0<32>
	Mem204[esp_7 - 0x20<32>:word32] = eax_192
	Mem206[esp_7 - 0x24<32>:word32] = esi_195
	word32 edx_1143
	word32 ecx_1142
	word32 eax_207 = fn00707680(Mem206[esp_7 - 0x24<32>:word32], Mem206[esp_7 - 0x20<32>:word32], Mem206[esp_7 - 0x1C<32>:word32], out ecx_1142, out edx_1143, out esi, out edi)
	esp_172 = esp_7 - 8<32>
	branch eax_207 != 0<32> l006E8F8A
l006E8F8A:
	word32 v15_220 = Mem206[eax_207:word32] + 0xFFFFFFFF<32>
	Mem221[eax_207:word32] = v15_220
	v37_950 = v15_220 != 0<32>
l006E8E6F:
	Mem225[esp_7 - 0xC<32>:word32] = Mem206[0x00A16E04<p32>:word32]
	esp_17 = esp_7 - 8<32>
	word32 edx_1153
	word32 ecx_1152
	branch fn006E1110(out ecx_1152, out edx_1153) == 0<32> l006E8E87
l006E8E87:
	Mem238[esp_7 - 0xC<32>:word32] = esp_7 + 0x14<32>
	Mem241[esp_7 - 0x10<32>:word32] = esp_7 + 0x10<32>
	Mem244[esp_7 - 0x14<32>:word32] = esp_7 + 0xC<32>
	fn006E1130(Mem244[esp_7 - 0x14<32>:word32], Mem244[esp_7 - 0x10<32>:word32], Mem244[esp_7 - 0xC<32>:word32])
	Mem254[esp_7 - 0x18<32>:word32] = esp_7 + 0x14<32>
	Mem257[esp_7 - 0x1C<32>:word32] = esp_7 + 0x10<32>
	Mem260[esp_7 - 0x20<32>:word32] = esp_7 + 0xC<32>
	word32 edi_1154
	word32 esi_267
	fn006E1BD0(Mem260[esp_7 - 0x20<32>:word32], Mem260[esp_7 - 0x1C<32>:word32], out ebp, out esi_267, out edi_1154)
	branch Mem260[esp_7 + 0xC<32>:word32] != 0<32> l006E8ECC
l006E8EBE:
	Mem277[0x00A163B8<p32>:word32] = Mem260[0x00A163B8<p32>:word32] + 1<32>
	Mem279[esp_7 + 0xC<32>:word32] = 0xA163B8<32>
l006E8ECC:
	branch Mem281[esp_7 + 0x10<32>:word32] != 0<32> l006E8EE1
l006E8ED3:
	Mem286[0x00A163B8<p32>:word32] = Mem281[0x00A163B8<p32>:word32] + 1<32>
	Mem288[esp_7 + 0x10<32>:word32] = 0xA163B8<32>
l006E8EE1:
	branch fn00707640(out ebx, out edi) == 0<32> l006E8EEF
l006E8EEA:
	word32 ecx_1165
	word32 edx_1166
	fn006E1160(out ecx_1165, out edx_1166)
l006E8EEF:
	word32 esp_316
	word32 eax_317
	call _iob_func (retsize: 4;)
		defs: eax:eax_317,esp:esp_316
	Mem325[esp_316 - 4<i32>:word32] = eax_317 + 0x20<32>
	word32 esp_326
	call MSVCR80.dll!fflush (retsize: 4;)
		uses: eax:eax_317 + 0x20<32>
		defs: esp:esp_326
	Mem333[esp_326 - 4<i32>:word32] = 0x8D420C<32>
	word32 edx_1163
	fn00716B20(out edx_1163)
	word32 ecx_342 = Mem333[esp_326 + 0x1C<32>:word32]
	word32 edx_343 = Mem333[esp_326 + 0x18<32>:word32]
	Mem345[esp_326 - 8<i32>:word32] = Mem333[esp_326 + 0x20<32>:word32]
	Mem347[esp_326 - 12<i32>:word32] = ecx_342
	Mem349[esp_326 - 16<i32>:word32] = edx_343
	fn006E8060(ebx, ebp, esi_267, edi, es, ds, Mem349[esp_326 - 16<i32>:word32], Mem349[esp_326 - 12<i32>:word32], Mem349[esp_326 - 8<i32>:word32])
	Mem392[esp_326 - 20<i32>:word32] = 0x8D41F0<32>
	word32 edx_1164
	fn00716B20(out edx_1164)
	word32 ecx_401 = Mem392[esp_326 + 0x10<32>:word32]
	word32 edx_402 = Mem392[esp_326 + 0xC<32>:word32]
	Mem404[esp_326 - 24<i32>:word32] = Mem392[esp_326 + 0x14<32>:word32]
	Mem406[esp_326 - 28<i32>:word32] = ecx_401
	Mem408[esp_326 - 32<i32>:word32] = edx_402
	fn006E8060(ebx, ebp, esi_267, edi, es, ds, Mem408[esp_326 - 32<i32>:word32], Mem408[esp_326 - 28<i32>:word32], Mem408[esp_326 - 24<i32>:word32])
	word32 eax_418 = Mem408[esp_326 + 0x18<32>:word32]
	Mem420[eax_418:word32] = Mem408[eax_418:word32] + 0xFFFFFFFF<32>
	word32 eax_421 = Mem420[esp_326 + 0x18<32>:word32]
	esp_172 = esp_326 + 4<32>
	branch Mem420[eax_421:word32] != 0<32> l006E8F5A
l006E8F4E:
	word32 ecx_425 = Mem420[eax_421 + 4<32>:word32]
	word32 edx_426 = Mem420[ecx_425 + 0x18<32>:word32]
	Mem428[esp_326:word32] = eax_421
	word32 esp_429
	call edx_426 (retsize: 4;)
		uses: ecx:ecx_425
		defs: esp:esp_429
	esp_172 = esp_429 + 4<32>
l006E8F5A:
	word32 eax_439 = Mem438[esp_172 + 0x18<32>:word32]
	Mem441[eax_439:word32] = Mem438[eax_439:word32] + 0xFFFFFFFF<32>
	word32 eax_442 = Mem441[esp_172 + 0x18<32>:word32]
	branch Mem441[eax_442:word32] != 0<32> l006E8F76
l006E8F6A:
	word32 ecx_445 = Mem441[eax_442 + 4<32>:word32]
	word32 edx_446 = Mem441[ecx_445 + 0x18<32>:word32]
	Mem448[esp_172 - 4<i32>:word32] = eax_442
	word32 esp_450
	call edx_446 (retsize: 4;)
		uses: ecx:ecx_445
		defs: esp:esp_450
	esp_172 = esp_450 + 4<32>
l006E8F76:
	word32 eax_460 = Mem459[esp_172 + 0x1C<32>:word32]
	branch eax_460 == 0<32> l006E8F9B
l006E8F7E:
	Mem465[eax_460:word32] = Mem459[eax_460:word32] + 0xFFFFFFFF<32>
	eax_207 = Mem465[esp_172 + 0x1C<32>:word32]
	v37_950 = Mem465[eax_207:word32] != 0<32>
l006E8F8D:
	branch v37_950 l006E8F9B
l006E8F8F:
	word32 ecx_473 = Mem472[eax_207 + 4<32>:word32]
	word32 edx_474 = Mem472[ecx_473 + 0x18<32>:word32]
	Mem477[esp_172 - 4<i32>:word32] = eax_207
	word32 esp_480
	call edx_474 (retsize: 4;)
		uses: ecx:ecx_473
		defs: esp:esp_480
	esp_172 = esp_480 + 4<32>
l006E8F9B:
	branch edi == 0<32> l006E8FD3
l006E8F9F:
	word32 v18_496 = Mem495[edi:word32] + 0xFFFFFFFF<32>
	Mem497[edi:word32] = v18_496
	branch v18_496 != 0<32> l006E8FD3
l006E8FA4:
	word32 eax_500 = Mem497[edi + 4<32>:word32]
	word32 ecx_501 = Mem497[eax_500 + 0x18<32>:word32]
	Mem504[esp_172 - 4<i32>:word32] = edi
	word32 esp_506
	call ecx_501 (retsize: 4;)
		uses: eax:eax_500
		defs: esp:esp_506
	esp_172 = esp_506 + 4<32>
l006E8FD3:
	word32 eax_516 = Mem515[esp_172 + 8<32>:word32]
	branch eax_516 == 0<32> l006E8FF3
l006E8FDB:
	Mem521[eax_516:word32] = Mem515[eax_516:word32] + 0xFFFFFFFF<32>
	word32 eax_522 = Mem521[esp_172 + 8<32>:word32]
	branch Mem521[eax_522:word32] != 0<32> l006E8FF3
l006E8FE7:
	word32 edx_525 = Mem521[eax_522 + 4<32>:word32]
	Mem527[esp_172 - 4<i32>:word32] = eax_522
	word32 esp_530
	call Mem527[edx_525 + 0x18<32>:word32] (retsize: 4;)
		uses: edx:edx_525
		defs: esp:esp_530
	esp_172 = esp_530 + 4<32>
l006E8FF3:
	word32 eax_540 = Mem539[esp_172 + 0xC<32>:word32]
	branch eax_540 == 0<32> l006E9013
l006E8FFB:
	Mem545[eax_540:word32] = Mem539[eax_540:word32] + 0xFFFFFFFF<32>
	word32 eax_546 = Mem545[esp_172 + 0xC<32>:word32]
	branch Mem545[eax_546:word32] != 0<32> l006E9013
l006E9007:
	word32 ecx_549 = Mem545[eax_546 + 4<32>:word32]
	word32 edx_550 = Mem545[ecx_549 + 0x18<32>:word32]
	Mem552[esp_172 - 4<i32>:word32] = eax_546
	word32 esp_554
	call edx_550 (retsize: 4;)
		uses: ecx:ecx_549
		defs: esp:esp_554
	esp_172 = esp_554 + 4<32>
l006E9013:
	word32 eax_564 = Mem563[esp_172 + 0x10<32>:word32]
	branch eax_564 == 0<32> l006E9033
l006E901B:
	Mem569[eax_564:word32] = Mem563[eax_564:word32] + 0xFFFFFFFF<32>
	word32 eax_570 = Mem569[esp_172 + 0x10<32>:word32]
	branch Mem569[eax_570:word32] != 0<32> l006E9033
l006E9027:
	word32 ecx_573 = Mem569[eax_570 + 4<32>:word32]
	word32 edx_574 = Mem569[ecx_573 + 0x18<32>:word32]
	Mem576[esp_172 - 4<i32>:word32] = eax_570
	word32 esp_578
	call edx_574 (retsize: 4;)
		uses: ecx:ecx_573
		defs: esp:esp_578
	esp_172 = esp_578 + 4<32>
l006E9033:
	edi = Mem587[esp_172:word32]
	esi = Mem587[esp_172 + 4<i32>:word32]
l006E9035:
	ebpOut = ebp
	esiOut = esi
	ediOut = edi
	return ebx
fn006E8D90_exit:
l006E8E82:
l006E8DA5:
l006E8C50:
	word32 esp_596 = esp_17 - 0xC<32>
	Mem601[esp_596 - 4<i32>:word32] = ebx
	Mem605[esp_596 - 8<i32>:word32] = edi
	Mem608[esp_596 - 12<i32>:word32] = esp_596 + 4<32>
	Mem611[esp_596 - 16<i32>:word32] = esp_596
	Mem614[esp_596 - 20<i32>:word32] = esp_596 + 8<32>
	fn006E1130(Mem614[esp_596 - 20<i32>:word32], Mem614[esp_596 - 16<i32>:word32], Mem614[esp_596 - 12<i32>:word32])
	word32 ebx_1132
	word32 edi_630
	branch fn00707640(out ebx_1132, out edi_630) == 0<32> l006E8C7C
l006E8C77:
	word32 edx_1138
	word32 ecx_1137
	fn006E1160(out ecx_1137, out edx_1138)
l006E8C7C:
	word32 esp_650
	word32 eax_651
	call _iob_func (retsize: 4;)
		defs: eax:eax_651,esp:esp_650
	Mem659[esp_650 - 4<i32>:word32] = eax_651 + 0x20<32>
	word32 esp_660
	call MSVCR80.dll!fflush (retsize: 4;)
		uses: eax:eax_651 + 0x20<32>
		defs: esp:esp_660
	word32 eax_666 = Mem659[esp_660 + 0xC<32>:word32]
	word32 esp_667 = esp_660 + 4<32>
	branch eax_666 == 0<32> l006E8D68
l006E8C9D:
	branch eax_666 == 0xA163B8<32> l006E8D68
l006E8CA8:
	word32 esp_713
	Mem678[esp_660:word32] = esi
	branch Mem659[eax_666 + 4<32>:word32] == 0xA1EB98<32> l006E8CCD
l006E8CB2:
	word32 edx_681 = Mem678[eax_666 + 4<32>:word32]
	Mem683[esp_660 - 4<i32>:word32] = Mem678[0x00A169F0<p32>:word32]
	Mem685[esp_660 - 8<i32>:word32] = edx_681
	word32 edx_1151
	word32 ecx_1150
	branch fn006D5670(Mem685[esp_660 - 8<i32>:word32], Mem685[esp_660 - 4<i32>:word32], out ecx_1150, out edx_1151) == 0<32> l006E8D0C
l006E8CC9:
	eax_666 = Mem685[esp_660 + 0xC<32>:word32]
l006E8CCD:
	Mem700[esp_660 - 4<i32>:word32] = 0x8D2D4C<32>
	Mem703[esp_660 - 8<i32>:word32] = eax_666
	word32 edx_1149
	word32 eax_704 = fn006DF760(Mem703[esp_660 - 8<i32>:word32], Mem703[esp_660 - 4<i32>:word32], out edx_1149, out edi_630)
	esp_713 = esp_660
	branch eax_704 == 0<32> l006E8D0C
l006E8D0C:
	esp_713 = esp_660
	eax_666 = Mem718[esp_660 + 0xC<32>:word32]
l006E8CE1:
	word32 eax_720 = Mem703[esp_660 + 0xC<32>:word32]
	Mem722[eax_720:word32] = Mem703[eax_720:word32] + 0xFFFFFFFF<32>
	word32 eax_723 = Mem722[esp_660 + 0xC<32>:word32]
	branch Mem722[eax_723:word32] != edi_630 l006E8CFC
l006E8CF0:
	word32 ecx_726 = Mem722[eax_723 + 4<32>:word32]
	word32 edx_727 = Mem722[ecx_726 + 0x18<32>:word32]
	Mem729[esp_660 - 4<i32>:word32] = eax_723
	word32 esp_731
	call edx_727 (retsize: 4;)
		uses: ecx:ecx_726
		defs: esp:esp_731
	esp_713 = esp_731 + 4<32>
l006E8CFC:
	Mem743[esp_713 + 0xC<32>:word32] = eax_704
	eax_666 = eax_704
	branch eax_704 == 0xA163B8<32> l006E8D67
l006E8D0A:
l006E8D10:
	branch Mem746[eax_666 + 4<32>:word32] == 0xA1E7E8<32> l006E8D58
l006E8D19:
	word32 eax_749 = Mem746[eax_666 + 4<32>:word32]
	word32 esp_751 = esp_713 - 4<i32>
	Mem752[esp_751:word32] = 0xA1E7E8<32>
	Mem754[esp_751 - 4<i32>:word32] = eax_749
	word32 ecx_1159
	word32 edx_1160
	branch fn006D5670(Mem754[esp_751 - 4<i32>:word32], Mem754[esp_751:word32], out ecx_1159, out edx_1160) != 0<32> l006E8D54
l006E8D54:
	eax_666 = Mem754[esp_751 + 0x10<32>:word32]
l006E8D58:
	word32 esp_768 = esp_713 - 4<i32>
	Mem770[esp_768:word32] = eax_666
	esp_713 = esp_768 + 4<32>
	word32 edx_1156
	word32 ecx_1155
	word32 esi_1157
	word32 edi_1158
	edi_630 = fn007051A0(edi_630, Mem770[esp_768:word32], out ecx_1155, out edx_1156, out esi_1157, out edi_1158)
l006E8D2E:
	Mem789[esp_751:word32] = 1<32>
	word32 esp_793
	word32 eax_794
	call _iob_func (retsize: 4;)
		defs: eax:eax_794,esp:esp_793
	word32 ecx_799 = Mem789[esp_793 + 0x10<32>:word32]
	Mem803[esp_793 - 4<i32>:word32] = eax_794 + 0x40<32>
	Mem805[esp_793 - 8<i32>:word32] = ecx_799
	word32 edx_1161
	fn006DEFC0(out edx_1161)
	Mem814[esp_793 - 12<i32>:word32] = 0x8A6DE8<32>
	word32 edx_1162
	fn00716B20(out edx_1162)
	esp_713 = esp_793 + 4<32>
	edi_630 = 1<32>
l006E8D63:
	eax_666 = Mem826[esp_713 + 0xC<32>:word32]
l006E8D67:
	esi = Mem829[esp_713:word32]
	esp_667 = esp_713 + 4<i32>
l006E8D68:
	word32 esp_835 = esp_667 - 4<i32>
	Mem836[esp_835:word32] = Mem833[esp_667 + 0xC<32>:word32]
	Mem840[esp_835 - 4<i32>:word32] = eax_666
	Mem843[esp_835 - 8<i32>:word32] = Mem840[esp_835 + 0x14<32>:word32]
	word32 edx_1145
	word32 ecx_1144
	fn006E0E00(Mem843[esp_835:word32], out ecx_1144, out edx_1145)
	word32 edx_1147
	word32 ecx_1146
	fn006E1160(out ecx_1146, out edx_1147)
	Mem864[esp_835:word32] = edi_630
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	fn006E8C30(stackArg4)
	edi = Mem864[esp_835:word32]
	ebx = Mem864[esp_835 + 4<i32>:word32]
	int3()
	int3()
	int3()
	int3()
	int3()
	int3()
	int3()
	int3()
	esp_2 = esp_835 + 8<i32>


word32 fn006E9040()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0070BCC0
// MayUse: 
// LiveOut: eax
// Trashed: SCZO eax ebx ecx edi edx esi Top
// Preserved: esp
fn006E9040_entry:
l006E9040:
	word32 ebx_10 = 0<32>
	word32 eax_14 = fn00740CC0()
	branch eax_14 != 0<32> l006E9052
l006E9052:
	word32 eax_41 = fn006E8AC0(dwArg14)
	branch eax_41 == 0<32> l006E9092
l006E9074:
	ebx_10 = fn006E83E0(eax_41, dwArg0C, dwArg10)
l006E9092:
	fn00740D60(eax_14)
	return ebx_10
l006E904F:
	return eax_14
fn006E9040_exit:


word32 fn006E90B0(word32 dwArg04, word32 dwArg18)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0070BCC0
// MayUse:  Stack +0004:[0..31] Stack +0018:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn006E90B0_entry:
l006E90B0:
	word32 eax_8 = fn00740CC0()
	branch eax_8 != 0<32> l006E90BE
l006E90BE:
	word32 eax_48 = fn006E8B50(dwArg1C, 0<32>)
	branch dwArg18 == 0<32> l006E90FB
l006E90ED:
	fclose(dwArg04)
l006E90FB:
	branch eax_48 != 0<32> l006E910F
l006E910F:
	word32 eax_85 = fn006E83E0(eax_48, dwArg10, dwArg14)
	fn00740D60(eax_8)
	return eax_85
l006E90FF:
	fn00740D60(eax_8)
	return 0<32>
l006E90BC:
	return eax_8
fn006E90B0_exit:


word32 fn006E98A0(word32 eax, word32 edi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E9BD0
//      fn006EA190
// MayUse:  eax:[0..31] edi:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx edx Top
// Preserved: esi esp
fn006E98A0_entry:
l006E98A0:
	word32 esi_16 = eax
	word32 eax_107 = 0<32>
	word32 edx_10 = 0<32>
l006E98A7:
	branch edx_10 > 0<32> l006E98B2
l006E98AB:
	branch CONVERT(Mem6[esi_16:byte], byte, int32) == edi l006E9902
l006E98B2:
	word32 ecx_24 = CONVERT(Mem6[esi_16:byte], byte, int32)
	branch ecx_24 >u 0x7D<32> l006E98DF
l006E98BA:
	switch (CONVERT(Mem6[ecx_24 + 0x6E9918<32>:byte], byte, word32)) { l006E98EB l006E98DF l006E98DF l006E98DF l006E98DF l006E98DF l006E98DF l006E98DF l006E98DF l006E98E6 l006E98DF l006E98DF l006E98DF l006E98DF l006E98DF l006E98DF l006E98DF l006E98DF l006E98DF l006E98DF l006E98DF l006E98DF l006E98DF l006E98DF l006E98DF l006E98DF l006E98DF l006E98DF l006E98DF l006E98DF l006E98DF l006E98DF l006E98E6 l006E98DF l006E98DF l006E98E6 l006E98DF l006E98DF l006E98E6 l006E98DF l006E98C8 l006E98D7 l006E98DF l006E98DF l006E98E6 l006E98DF l006E98DF l006E98DF l006E98DF l006E98DF l006E98DF l006E98DF l006E98DF l006E98DF l006E98DF l006E98DF l006E98DF l006E98DF l006E98E6 l006E98DF l006E98DF l006E98DF l006E98DF l006E98DF l006E98DF l006E98DF l006E98DF l006E98DF l006E98DF l006E98DF l006E98DF l006E98DF l006E98DF l006E98DF l006E98DF l006E98DF l006E98DF l006E98DF l006E98DF l006E98DF l006E98DF l006E98DF l006E98DF l006E98DF l006E98DF l006E98DF l006E98DF l006E98DF l006E98DF l006E98DF l006E98DF l006E98C8 l006E98DF l006E98D7 l006E98DF l006E98DF l006E98DF l006E98DF l006E98DF l006E98DF l006E98DF l006E98DF l006E98DF l006E98DF l006E98DF l006E98DF l006E98DF l006E98DF l006E98DF l006E98DF l006E98DF l006E98DF l006E98DF l006E98DF l006E98DF l006E98DF l006E98DF l006E98DF l006E98DF l006E98DF l006E98DF l006E98DF l006E98DF l006E98C8 l006E98DF l006E98D7 }
l006E98D7:
	edx_10 = edx_10 - 1<32>
	esi_16 = esi_16 + 1<32>
l006E98C8:
	branch edx_10 != 0<32> l006E98CF
l006E98CC:
	eax_107 = eax_107 + 1<32>
l006E98CF:
	edx_10 = edx_10 + 1<32>
	esi_16 = esi_16 + 1<32>
l006E98DF:
	branch edx_10 != 0<32> l006E98E6
l006E98E3:
	eax_107 = eax_107 + 1<32>
l006E98E6:
	esi_16 = esi_16 + 1<32>
l006E98EB:
	word32 ecx_136
	word32 edx_137
	fn006E0F80(Mem6[0x00A18720<p32>:word32], 0x8D4508<32>, out ecx_136, out edx_137)
	eax_107 = 0xFFFFFFFF<32>
l006E9902:
	return eax_107
fn006E98A0_exit:


word32 fn006E99A0(word32 dwArg04, word32 dwArg0C, word32 dwArg10)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E9BD0
// MayUse:  Stack +0004:[0..31] Stack +000C:[0..31] Stack +0010:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn006E99A0_entry:
l006E99A0:
	word32 ebp_105 = 0<32>
	branch dwArg10 >= 0<32> l006E99B7
l006E99B7:
	word32 ecx_442
	word32 edx_443
	word32 eax_16 = fn006FDCC0(out ecx_442, out edx_443)
	word32 edx_21 = eax_16
	branch eax_16 == 0<32> l006E99AF
l006E99C6:
	word32 esp_114 = fp - 0x18<32>
	branch dwArg10 <= 0<32> l006E9A7A
l006E99D4:
	word32 edi_36 = Mem35[esp_114 + 0x2C<32>:word32]
	word32 ebx_37 = Mem35[esp_114 + 0x20<32>:word32]
	word32 eax_38 = Mem35[esp_114 + 0x1C<32>:word32]
	word32 esp_39 = esp_114 - 4<i32>
	Mem40[esp_39:word32] = edi_36
	Mem42[esp_39 - 4<i32>:word32] = ebx_37
	Mem44[esp_39 - 8<i32>:word32] = eax_38
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 stackArg8 = <invalid>
	word32 stackArg12 = <invalid>
	word32 eax_49 = fn006E9BD0(stackArg4, stackArg8, stackArg12)
	word32 esi_54 = eax_49
	branch eax_49 != 0<32> l006E9A01
l006E99F1:
	Mem61[0x00A163B8<p32>:word32] = Mem44[0x00A163B8<p32>:word32] + 1<32>
	ebp_105 = 1<32>
	esi_54 = 0xA163B8<32>
l006E9A01:
	word32 ecx_66 = Mem65[esp_39 + 0x20<32>:word32]
	Mem69[esp_39:word32] = edi_36
	Mem72[esp_39 - 4<32>:word32] = ebx_37
	Mem74[esp_39 - 8<i32>:word32] = ecx_66
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 stackArg8 = <invalid>
	word32 stackArg12 = <invalid>
	word32 eax_79 = fn006E9BD0(stackArg4, stackArg8, stackArg12)
	word32 edi_84 = eax_79
	branch eax_79 != 0<32> l006E9A26
l006E9A16:
	Mem91[0x00A163B8<p32>:word32] = Mem74[0x00A163B8<p32>:word32] + 1<32>
	ebp_105 = 1<32>
	edi_84 = 0xA163B8<32>
l006E9A26:
	word32 edx_96 = Mem95[esp_39 + 0x14<32>:word32]
	Mem99[esp_39:word32] = edi_84
	Mem102[esp_39 - 4<32>:word32] = esi_54
	Mem104[esp_39 - 8<i32>:word32] = edx_96
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 stackArg8 = <invalid>
	word32 stackArg12 = <invalid>
	word32 edi_456
	word32 ebx_455
	word32 edx_454
	word32 ecx_453
	word32 eax_109 = fn006FBD90(stackArg4, stackArg8, stackArg12, out ecx_453, out edx_454, out ebx_455, out edi_456)
	word32 v18_115 = Mem104[esi_54:word32] + 0xFFFFFFFF<32>
	Mem116[esi_54:word32] = v18_115
	esp_114 = esp_39 + 4<32>
	branch v18_115 != 0<32> l006E9A48
l006E9A3C:
	word32 eax_120 = Mem116[esi_54 + 4<32>:word32]
	word32 ecx_121 = Mem116[eax_120 + 0x18<32>:word32]
	Mem123[esp_39:word32] = esi_54
	word32 esp_124
	word32 edx_126
	word32 ecx_127
	call ecx_121 (retsize: 4;)
		uses: eax:eax_120,ecx:ecx_127,edx:edx_126,Stack +0014:dwArg10
		defs: ecx:ecx_127,edx:edx_126,esp:esp_124
	esp_114 = esp_124 + 4<32>
l006E9A48:
	word32 v19_134 = Mem133[edi_84:word32] + 0xFFFFFFFF<32>
	Mem135[edi_84:word32] = v19_134
	branch v19_134 != 0<32> l006E9A59
l006E9A4D:
	word32 edx_138 = Mem135[edi_84 + 4<32>:word32]
	word32 eax_139 = Mem135[edx_138 + 0x18<32>:word32]
	Mem142[esp_114 - 4<i32>:word32] = edi_84
	word32 esp_147
	word32 ecx_150
	call eax_139 (retsize: 4;)
		uses: ecx:ecx_150,edx:edx_138,Stack +0014:dwArg10
		defs: ecx:ecx_150,esp:esp_147
	esp_114 = esp_147 + 4<32>
l006E9A59:
	branch eax_109 < 0<32> l006E9AC6
l006E9A5D:
	branch ebp_105 != 0<32> l006E9AC6
l006E9AC6:
	word32 eax_167 = Mem166[esp_114 + 0x10<32>:word32]
	word32 v20_168 = Mem166[eax_167:word32] + 0xFFFFFFFF<32>
	Mem169[eax_167:word32] = v20_168
	branch v20_168 != 0<32> l006E9ADB
l006E9ACF:
	word32 ecx_172 = Mem169[eax_167 + 4<32>:word32]
	word32 edx_173 = Mem169[ecx_172 + 0x18<32>:word32]
	Mem175[esp_114 - 4<i32>:word32] = eax_167
	word32 edx_186
	call edx_173 (retsize: 4;)
		uses: ecx:ecx_172,edx:edx_186,Stack +0014:dwArg10
		defs: edx:edx_186
l006E9ADB:
	return 0<32>
l006E9A61:
	word32 eax_205 = Mem166[esp_114 + 0x14<32>:word32]
	Mem208[esp_114 + 0x14<32>:word32] = eax_205 + 2<32>
	branch eax_205 + 2<32> < Mem166[esp_114 + 0x28<32>:word32] l006E99D4
l006E9A76:
	edx_21 = Mem208[esp_114 + 0x10<32>:word32]
l006E9A7A:
	word32 eax_214 = Mem212[dwArg04:word32]
	word32 esp_211 = fp - 24<i32>
	branch CONVERT(Mem212[eax_214:byte], byte, int32) == dwArg0C l006E9AE5
l006E9AE5:
	branch dwArg0C == 0<32> l006E9AEE
l006E9AE9:
	Mem224[dwArg04:word32] = eax_214 + 1<32>
l006E9AEE:
	return edx_21
l006E9A8B:
	word32 v17_240 = Mem212[edx_21:word32] + 0xFFFFFFFF<32>
	Mem241[edx_21:word32] = v17_240
	branch v17_240 != 0<32> l006E9A9C
l006E9A90:
	word32 eax_244 = Mem241[edx_21 + 4<32>:word32]
	word32 esp_251
	word32 edx_253
	word32 ecx_254
	call Mem241[eax_244 + 0x18<32>:word32] (retsize: 4;)
		uses: eax:eax_244,ecx:ecx_254,edx:edx_253,Stack +0004:edx_234,Stack +0014:dwArg10,Stack +0024:dwArg04,Stack +002C:dwArg0C,Stack +0030:dwArg10
		defs: ecx:ecx_254,edx:edx_253,esp:esp_251
	esp_211 = esp_251 + 4<32>
l006E9A9C:
	word32 edx_260 = Mem259[0x00A18720<p32>:word32]
	word32 esp_262 = esp_211 - 4<i32>
	Mem263[esp_262:word32] = 0x8D4524<32>
	Mem265[esp_262 - 4<i32>:word32] = edx_260
	Mem266[esp_262 + 0x14<32>:word32] = 0<32>
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_458
	word32 edx_459
	fn006E0F80(stackArg4, dwArg04, out ecx_458, out edx_459)
	return eax_16
l006E99AF:
	return 0<32>
fn006E99A0_exit:


word32 fn006E9B00(word32 edi, word32 dwArg04, word32 dwArg0C)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E9BD0
// MayUse:  edi:[0..31] Stack +0004:[0..31] Stack +000C:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ebp ebx ecx edx esi Top
// Preserved: esp
fn006E9B00_entry:
l006E9B00:
	word32 ebp_45 = 0<32>
	branch edi >= 0<32> l006E9B0B
l006E9B0B:
	word32 edx_282
	word32 eax_18 = fn006F2650(edi, out edx_282)
	branch eax_18 != 0<32> l006E9B1E
l006E9B1E:
	word32 esi_31 = 0<32>
	branch edi <= 0<32> l006E9B83
l006E9B25:
l006E9B30:
	word32 eax_51 = fn006E9BD0(dwArg04, dwArg08, dwArg10)
	branch eax_51 != 0<32> l006E9B5B
l006E9B4B:
	Mem62[0x00A163B8<p32>:word32] = Mem44[0x00A163B8<p32>:word32] + 1<32>
	ebp_45 = 1<32>
	eax_51 = 0xA163B8<32>
l006E9B5B:
	Mem70[Mem66[eax_18 + 0xC<32>:word32] + esi_31 * 4<32>:word32] = eax_51
	esi_31 = esi_31 + 1<32>
	branch esi_31 < edi l006E9B30
l006E9B68:
	branch ebp_45 == 0<32> l006E9B83
l006E9B83:
	word32 eax_83 = Mem81[dwArg04:word32]
	word32 esp_123 = fp - 12<i32>
	branch CONVERT(Mem81[eax_83:byte], byte, int32) == dwArg0C l006E9BBE
l006E9BBE:
	branch dwArg0C == 0<32> l006E9BC7
l006E9BC2:
	Mem93[dwArg04:word32] = eax_83 + 1<32>
l006E9BC7:
	return eax_18
l006E9B94:
	word32 v15_105 = Mem81[eax_18:word32] + 0xFFFFFFFF<32>
	Mem106[eax_18:word32] = v15_105
	branch v15_105 != 0<32> l006E9BA5
l006E9B99:
	word32 ecx_109 = Mem106[eax_18 + 4<32>:word32]
	word32 esp_117
	word32 edx_119
	call Mem106[ecx_109 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_109,edx:edx_119,Stack +0004:eax_18,Stack +0018:dwArg04,Stack +0020:dwArg0C
		defs: edx:edx_119,esp:esp_117
	esp_123 = esp_117 + 4<32>
l006E9BA5:
	word32 eax_126 = Mem125[0x00A18720<p32>:word32]
	word32 esp_128 = esp_123 - 4<i32>
	Mem129[esp_128:word32] = 0x8D4524<32>
	Mem131[esp_128 - 4<i32>:word32] = eax_126
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ecx_284
	word32 edx_285
	fn006E0F80(stackArg4, dwArg04, out ecx_284, out edx_285)
	return 0<32>
l006E9B6C:
	word32 v17_153 = Mem70[eax_18:word32] + 0xFFFFFFFF<32>
	Mem154[eax_18:word32] = v17_153
	branch v17_153 != 0<32> l006E9B7D
l006E9B71:
	word32 edx_157 = Mem154[eax_18 + 4<32>:word32]
	word32 ecx_164
	call Mem154[edx_157 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_164,edx:edx_157,Stack +0004:eax_18,Stack +0018:dwArg04,Stack +0020:dwArg0C
		defs: ecx:ecx_164
l006E9B7D:
	return 0<32>
l006E9B1B:
	return eax_18
l006E9B07:
	return 0<32>
fn006E9B00_exit:


word32 fn006E9BD0(word32 dwArg04, word32 dwArg08, word32 dwArg0C)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E99A0
//      fn006E9B00
//      fn006EA0A0
//      fn006EA190
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx edi edx esi FPU -1 Top
// Preserved: esp
fn006E9BD0_entry:
l006E9BD0:
	word32 eax_8 = Mem6[dwArg04:word32]
	word32 ecx_9 = CONVERT(Mem6[eax_8:byte], byte, int32)
	Mem11[dwArg04:word32] = eax_8 + 1<32>
	word32 eax_12 = ecx_9 - 9<32>
	branch ecx_9 >u 0x7B<32> l006E9C10
l006E9BE8:
l006E9BF0:
	switch (CONVERT(Mem19[eax_12 + 0x6E9F20<32>:byte], byte, word32)) { l006E9BFE l006E9C10 l006E9C10 l006E9C10 l006E9C10 l006E9C10 l006E9C10 l006E9C10 l006E9C10 l006E9C10 l006E9C10 l006E9C10 l006E9C10 l006E9C10 l006E9C10 l006E9C10 l006E9C10 l006E9C10 l006E9C10 l006E9C10 l006E9C10 l006E9C10 l006E9C10 l006E9BFE l006E9C10 l006E9C10 l006E9C10 l006E9C10 l006E9C10 l006E9C10 l006E9C10 l006E9C29 l006E9C10 l006E9C10 l006E9C10 l006E9BFE l006E9C10 l006E9C10 l006E9C10 l006E9C10 l006E9C10 l006E9C10 l006E9C10 l006E9C10 l006E9C10 l006E9C10 l006E9C10 l006E9C10 l006E9C10 l006E9BFE l006E9C10 l006E9C10 l006E9C10 l006E9C10 l006E9C10 l006E9C10 l006E9C10 l006E9C96 l006E9C10 l006E9DB6 l006E9C10 l006E9C10 l006E9C10 l006E9CAE l006E9CC6 l006E9C10 l006E9D1B l006E9CFF l006E9C10 l006E9E77 l006E9E77 l006E9C10 l006E9C10 l006E9C10 l006E9E77 l006E9C10 l006E9C10 l006E9C10 l006E9C10 l006E9C10 l006E9C10 l006E9C10 l006E9C4D l006E9C10 l006E9C10 l006E9C10 l006E9C10 l006E9C10 l006E9C10 l006E9C96 l006E9DE8 l006E9D99 l006E9C10 l006E9D99 l006E9C10 l006E9C96 l006E9C96 l006E9C10 l006E9CC6 l006E9CE7 l006E9C10 l006E9CE7 l006E9C10 l006E9C10 l006E9C10 l006E9C10 l006E9E0A l006E9C10 l006E9D37 l006E9C10 l006E9C10 l006E9C10 l006E9C10 l006E9E0A l006E9C72 }
l006E9C72:
	return fn006E99A0(dwArg04, 0x7D<32>, fn006E98A0(Mem19[dwArg04:word32], 0x7D<32>))
l006E9D37:
	word32 ecx_100
	Mem58[dwArg08:word32] = Mem19[dwArg08:word32] + 4<32>
	word32 edx_60 = Mem58[Mem58[dwArg08:word32] - 4<32>:word32]
	word32 ecx_61 = Mem58[dwArg04:word32]
	branch Mem58[ecx_61:byte] != 0x23<8> l006E9D59
l006E9D59:
	ecx_100 = 0xFFFFFFFF<32>
l006E9D4A:
	Mem68[dwArg04:word32] = ecx_61 + 1<32>
	Mem70[dwArg08:word32] = Mem68[dwArg08:word32] + 4<32>
	ecx_100 = Mem70[Mem70[dwArg08:word32] - 4<32>:word32]
l006E9D5C:
	branch edx_60 != 0<32> l006E9D6F
l006E9D6F:
	branch ecx_100 >= 0<32> l006E9D8C
l006E9D73:
	ecx_100 = 0<32>
	word32 eax_86 = edx_60
	branch Mem83[edx_60:word16] == 0<16> l006E9D8C
l006E9D7C:
l006E9D80:
	eax_86 = eax_86 + 2<32>
	ecx_100 = ecx_100 + 1<32>
	branch Mem83[eax_86:word16] != 0<16> l006E9D80
l006E9D8C:
	word32 edx_953
	return fn00717A20(edx_60, ecx_100, out edx_953)
l006E9E0A:
	word32 eax_139
	Mem132[dwArg08:word32] = Mem19[dwArg08:word32] + 4<32>
	word32 edi_134 = Mem132[Mem132[dwArg08:word32] - 4<32>:word32]
	word32 ecx_136 = Mem132[dwArg04:word32]
	branch Mem132[ecx_136:byte] != 0x23<8> l006E9E2C
l006E9E2C:
	eax_139 = 0xFFFFFFFF<32>
l006E9E1D:
	Mem143[dwArg04:word32] = ecx_136 + 1<32>
	Mem145[dwArg08:word32] = Mem143[dwArg08:word32] + 4<32>
	eax_139 = Mem145[Mem145[dwArg08:word32] - 4<32>:word32]
l006E9E2F:
	branch edi_134 == 0<32> l006E9D60
l006E9D60:
	Mem157[0x00A163B8<p32>:word32] = Mem154[0x00A163B8<p32>:word32] + 1<32>
	return 0xA163B8<32>
l006E9E37:
	branch eax_139 >= 0<32> l006E9E6A
l006E9E3B:
	word32 eax_169 = edi_134
l006E9E40:
	eax_169 = eax_960 + 1<32>
	eax_960 = eax_169
	branch Mem155[eax_960:byte] != 0<8> l006E9E40
l006E9E49:
	eax_139 = eax_169 - (edi_134 + 1<32>)
	branch eax_139 <=u 0x7FFFFFFF<32> l006E9E6A
l006E9E6A:
	word32 edx_950
	word32 ecx_949
	return fn006EC9B0(edi_134, eax_139, out ecx_949, out edx_950)
l006E9E52:
	word32 edx_952
	word32 ecx_951
	fn006E0F80(Mem155[0x00A18598<p32>:word32], 0x8D4564<32>, out ecx_951, out edx_952)
	return 0<32>
l006E9CE7:
	Mem233[dwArg08:word32] = Mem19[dwArg08:word32] + 4<32>
	word32 ecx_947
	word32 edx_948
	return fn007050A0(Mem233[Mem233[dwArg08:word32] - 4<32>:word32], out ecx_947, out edx_948)
l006E9D99:
	Mem258[dwArg08:word32] = Mem19[dwArg08:word32] + 8<32>
	word32 edx_946
	return fn006FF060(Mem258[Mem258[dwArg08:word32] - 8<32>:real64], out edx_946)
l006E9DE8:
	Mem283[dwArg08:word32] = Mem19[dwArg08:word32] + 4<32>
	word32 ecx_944
	word32 edx_945
	return fn006EC9B0(fp + 4<32>, 1<32>, out ecx_944, out edx_945)
l006E9C4D:
	return fn006E9B00(fn006E98A0(Mem307[dwArg04:word32], 0x5D<32>), dwArg04, 0x5D<32>)
l006E9E77:
	branch Mem19[Mem19[dwArg04:word32]:byte] != 0x26<8> l006E9E9E
l006E9E9E:
	Mem344[dwArg08:word32] = Mem19[dwArg08:word32] + 4<32>
	word32 edi_346 = Mem344[Mem344[dwArg08:word32] - 4<32>:word32]
	branch edi_346 == 0<32> l006E9EBA
l006E9EBA:
	branch fn006E0FC0() != 0<32> l006E9ED6
l006E9EC3:
	word32 edx_959
	word32 ecx_958
	fn006E0F80(Mem344[0x00A18720<p32>:word32], 0x8D4540<32>, out ecx_958, out edx_959)
l006E9EAA:
	branch Mem344[Mem344[dwArg04:word32] - 1<32>:byte] == 0x4E<8> l006E9ED6
l006E9ED6:
	return edi_346
l006E9EB2:
	Mem380[edi_346:word32] = Mem344[edi_346:word32] + 1<32>
	return edi_346
l006E9E82:
	Mem388[dwArg08:word32] = Mem19[dwArg08:word32] + 4<32>
	word32 ecx_389 = Mem388[dwArg08:word32]
	word32 edx_390 = Mem388[ecx_389 - 4<32>:word32]
	Mem392[dwArg08:word32] = ecx_389 + 4<32>
	word32 ecx_393 = Mem392[ecx_389:word32]
	Mem395[dwArg04:word32] = Mem392[dwArg04:word32] + 1<32>
	word32 eax_401
	word32 edx_403
	call edx_390 (retsize: 4;)
		uses: ecx:ecx_393,edx:edx_403,Stack +0004:ecx_393,Stack +0014:dwArg04,Stack +0018:dwArg08,Stack +001C:dwArg0C
		defs: eax:eax_401,edx:edx_403
	return eax_401
l006E9CFF:
	Mem414[dwArg08:word32] = Mem19[dwArg08:word32] + 8<32>
	word32 eax_416 = Mem414[dwArg08:word32]
	return fn00711330(Mem414[eax_416 - 8<32>:word32], Mem414[eax_416 - 4<32>:word32])
l006E9D1B:
	Mem437[dwArg08:word32] = Mem19[dwArg08:word32] + 8<32>
	word32 eax_439 = Mem437[dwArg08:word32]
	return fn00711400(Mem437[eax_439 - 8<32>:word32], Mem437[eax_439 - 4<32>:word32])
l006E9CC6:
	Mem462[dwArg08:word32] = Mem19[dwArg08:word32] + 4<32>
	word32 esi_465 = Mem462[Mem462[dwArg08:word32] - 4<32>:word32]
	branch esi_465 <=u fn00705040() l006E9CA3
l006E9CDC:
	word32 edx_957
	return fn00710730(esi_465, out edx_957)
l006E9CAE:
	Mem490[dwArg08:word32] = Mem19[dwArg08:word32] + 4<32>
	word32 ecx_942
	word32 edx_943
	return fn007050A0(Mem490[Mem490[dwArg08:word32] - 4<32>:word32], out ecx_942, out edx_943)
l006E9DB6:
	Mem510[dwArg08:word32] = Mem19[dwArg08:word32] + 4<32>
	word32 eax_512 = Mem510[Mem510[dwArg08:word32] - 4<32>:word32]
	word32 edx_941
	return fn007331D0(Mem510[eax_512:word32], Mem517[eax_512 + 4<32>:word32], Mem519[eax_512 + 8<32>:word32], Mem519[eax_512 + 0xC<32>:word32], out edx_941)
l006E9C96:
	Mem541[dwArg08:word32] = Mem19[dwArg08:word32] + 4<32>
l006E9CA3:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 edx_956
	word32 ecx_955
	return fn007050A0(stackArg4, out ecx_955, out edx_956)
l006E9C29:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg20 = <invalid>
	return fn006EA0A0(dwArg04, dwArg04, 0x29<32>, fn006E98A0(Mem19[dwArg04:word32], 0x29<32>), stackArg20)
l006E9BFE:
	word32 eax_603 = Mem19[dwArg04:word32]
	word32 ecx_604 = CONVERT(Mem19[eax_603:byte], byte, int32)
	Mem606[dwArg04:word32] = eax_603 + 1<32>
	eax_12 = ecx_604 - 9<32>
	branch ecx_604 <=u 0x7B<32> l006E9BF0
l006E9C10:
	word32 edx_939
	word32 ecx_938
	fn006E0F80(Mem610[0x00A18720<p32>:word32], 0x8D4588<32>, out ecx_938, out edx_939)
	return 0<32>
fn006E9BD0_exit:


word32 fn006E9FA0(word32 dwArg04, word32 dwArg08, word32 dwArg0C)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006EA080
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx edi edx esi Top
// Preserved: esp
fn006E9FA0_entry:
l006E9FA0:
	word32 eax_8 = Mem6[dwArg04 + 4<32>:word32]
	branch eax_8 == 0xA215C0<32> l006E9FD9
l006E9FAF:
	word32 edx_248
	word32 ecx_247
	branch fn006D5670(eax_8, 0xA215C0<32>, out ecx_247, out edx_248) != 0<32> l006E9FD9
l006E9FD9:
	branch dwArg0C != 0<32> l006EA005
l006EA005:
	word32 ecx_251
	word32 edx_252
	word32 eax_40 = fn00717230(dwArg04, out ecx_251, out edx_252)
	branch eax_40 != 0<32> l006EA033
l006EA033:
	word32 ecx_255
	word32 edx_256
	word32 esi_257
	branch fn006FD8F0(eax_40, dwArg04, dwArg0C, out ecx_255, out edx_256, out esi_257) != 0<32> l006EA02D
l006EA046:
	word32 v12_66 = Mem55[dwArg0C:word32] + 0xFFFFFFFF<32>
	Mem67[dwArg0C:word32] = v12_66
	branch v12_66 != 0<32> l006EA057
l006EA04B:
	word32 edx_70 = Mem67[dwArg0C + 4<32>:word32]
	word32 ecx_76
	call Mem67[edx_70 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_76,edx:edx_70,Stack +0004:dwArg0C,Stack +0008:dwArg04,Stack +0010:dwArg0C,Stack +0014:dwArg04,Stack +0018:dwArg08,Stack +001C:dwArg0C
		defs: ecx:ecx_76
l006EA057:
	return 0<32>
l006EA012:
	fn00717280(dwArg04)
	word32 ecx_258
	word32 edx_259
	fn006E15D0(Mem92[0x00A18720<p32>:word32], dwArg04, out ecx_258, out edx_259)
l006EA02D:
	return 0xFFFFFFFF<32>
l006E9FE2:
	branch fn006E0FC0() != 0<32> l006E9FFF
l006E9FEB:
	word32 edx_254
	word32 ecx_253
	fn006E0F80(Mem30[0x00A16B7C<p32>:word32], 0x8D45CC<32>, out ecx_253, out edx_254)
l006E9FFF:
	return 0xFFFFFFFF<32>
l006E9FC1:
	word32 edx_250
	word32 ecx_249
	fn006E0F80(Mem14[0x00A16B7C<p32>:word32], 0x8D45F8<32>, out ecx_249, out edx_250)
	return 0xFFFFFFFF<32>
fn006E9FA0_exit:


word32 fn006EA080()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0074F9E0
// MayUse: 
// LiveOut: eax
// Trashed: SCZO eax Top
// Preserved: esp
fn006EA080_entry:
l006EA080:
	word32 ecx_30
	word32 edx_31
	fn006ECAC0(dwArg0C, out ecx_30, out edx_31)
l006EA091_thunk_fn006E9FA0:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 stackArg8 = <invalid>
	return fn006E9FA0(stackArg4, stackArg8, dwArg0C)
fn006EA080_exit:


word32 fn006EA0A0(word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10, word32 dwArg14)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E9BD0
//      fn006EA190
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31] Stack +0010:[0..31] Stack +0014:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn006EA0A0_entry:
l006EA0A0:
	word32 esi_10 = dwArg10
	word32 dwLoc04_209 = 0<32>
	branch dwArg10 >= 0<32> l006EA0B7
l006EA0B7:
	word32 ecx_324
	word32 edx_325
	word32 eax_22 = fn006DFD20(dwArg10, out ecx_324, out edx_325)
	word32 edi_106 = eax_22
	branch eax_22 == 0<32> l006EA16F
l006EA0CF:
	branch dwArg10 <= 0<32> l006EA139
l006EA0D3:
	word32 edi_42 = eax_22 + 0xC<32>
l006EA0E0:
	word32 eax_61 = fn006E9BD0(dwArg04, dwArg08, dwArg14)
	branch eax_61 != 0<32> l006EA107
l006EA0F3:
	Mem71[0x00A163B8<p32>:word32] = Mem54[0x00A163B8<p32>:word32] + 1<32>
	dwLoc04_209 = 1<32>
	eax_61 = 0xA163B8<32>
l006EA107:
	Mem77[edi_42:word32] = eax_61
	edi_42 = edi_42 + 4<32>
	esi_10 = esi_10 - 1<32>
	branch esi_10 != 0<32> l006EA0E0
l006EA111:
	branch dwLoc04_209 == 0<32> l006EA135
l006EA135:
	edi_106 = dwArg10
l006EA139:
	word32 eax_94 = Mem92[dwArg04:word32]
	word32 esp_134 = fp - 12<i32>
	branch CONVERT(Mem92[eax_94:byte], byte, int32) == dwArg0C l006EA175
l006EA175:
	branch dwArg0C == 0<32> l006EA17E
l006EA179:
	Mem104[dwArg04:word32] = eax_94 + 1<32>
l006EA17E:
	return edi_106
l006EA14A:
	word32 v16_116 = Mem92[edi_106:word32] + 0xFFFFFFFF<32>
	Mem117[edi_106:word32] = v16_116
	branch v16_116 != 0<32> l006EA15B
l006EA14F:
	word32 eax_120 = Mem117[edi_106 + 4<32>:word32]
	word32 ecx_121 = Mem117[eax_120 + 0x18<32>:word32]
	word32 esp_128
	word32 edx_131
	call ecx_121 (retsize: 4;)
		uses: eax:eax_120,ecx:ecx_121,edx:edx_131,Stack +0004:edi_106,Stack +0014:dwArg10,Stack +0018:dwArg04,Stack +001C:dwArg08,Stack +0020:dwArg0C,Stack +0024:dwArg10,Stack +0028:dwArg14
		defs: edx:edx_131,esp:esp_128
	esp_134 = esp_128 + 4<32>
l006EA15B:
	word32 edx_137 = Mem136[0x00A18720<p32>:word32]
	word32 esp_139 = esp_134 - 4<i32>
	Mem140[esp_139:word32] = 0x8D4524<32>
	Mem142[esp_139 - 4<i32>:word32] = edx_137
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 edx_328
	word32 ecx_327
	fn006E0F80(stackArg4, dwArg04, out ecx_327, out edx_328)
l006EA16F:
	return 0<32>
l006EA11A:
	word32 v17_169 = Mem77[dwArg10:word32] + 0xFFFFFFFF<32>
	Mem170[dwArg10:word32] = v17_169
	branch v17_169 != 0<32> l006EA12F
l006EA123:
	word32 ecx_173 = Mem170[dwArg10 + 4<32>:word32]
	word32 edx_180
	call Mem170[ecx_173 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_173,edx:edx_180,Stack +0004:dwArg10,Stack +0014:dwArg10,Stack +0018:dwArg04,Stack +001C:dwArg08,Stack +0020:dwArg0C,Stack +0024:dwArg10,Stack +0028:dwArg14
		defs: edx:edx_180
l006EA12F:
	return 0<32>
l006EA0B2:
	return 0<32>
fn006EA0A0_exit:


word32 fn006EA190()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006EA200
//      fn006EA240
//      fn006EA260
// MayUse: 
// LiveOut: eax
// Trashed: SCZO eax ecx edx Top
// Preserved: edi esp
fn006EA190_entry:
l006EA190:
	word32 eax_14 = fn006E98A0(eax, 0<32>)
	branch eax_14 >= 0<32> l006EA1B2
l006EA1B2:
	branch eax_14 != 0<32> l006EA1C4
l006EA1C4:
	branch eax_14 != 1<32> l006EA1E0
l006EA1E0:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg20 = <invalid>
	return fn006EA0A0(fp - 4<32>, fp - 8<32>, 0<32>, eax_14, stackArg20)
l006EA1CA:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg12 = <invalid>
	return fn006E9BD0(fp - 4<32>, fp - 8<32>, stackArg12)
l006EA1B4:
	Mem67[0x00A163B8<p32>:word32] = Mem22[0x00A163B8<p32>:word32] + 1<32>
	return 0xA163B8<32>
l006EA1AC:
	return 0<32>
fn006EA190_exit:


word32 fn006EA200(ptr32 & edxOut, ptr32 & esiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00651DD0
//      fn006E1260
//      fn006E1400
//      fn006E8430
//      fn006F8960
//      fn006F9120
//      fn00728360
//      fn0072EC10
//      fn0073B830
//      fn0073B870
//      fn0073C100
//      fn0073CAE0
//      fn0073DBD0
//      fn0073EB70
//      fn0073F9D0
//      fn0073FAF0
//      fn0073FC30
// MayUse: 
// LiveOut: eax edx esi
// Trashed: SCZO eax esi Top
// Preserved: esp
fn006EA200_entry:
l006EA200:
	word32 eax_15 = fn006EA190()
	edxOut = <invalid>
	esiOut = esi
	return eax_15
fn006EA200_exit:


void fn006EA240()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00703800
//      fn007038E0
// MayUse: 
// LiveOut:
// Trashed: SCZO eax esi Top
// Preserved: esp
fn006EA240_entry:
l006EA240:
	fn006EA190()
	return
fn006EA240_exit:


void fn006EA260()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00703870
// MayUse: 
// LiveOut:
// Trashed: SCZO eax esi Top
// Preserved: esp
fn006EA260_entry:
l006EA260:
	fn006EA190()
	return
fn006EA260_exit:


word32 fn006EA420(word32 dwArg04, word32 dwArg08, word32 dwArg0C, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006ECC00
//      fn006ECC50
//      fn006F1AA0
//      fn0070BCC0
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ecx edx Top
// Preserved: edi esi esp
fn006EA420_entry:
l006EA420:
	branch dwArg08 != 0<32> l006EA440
l006EA440:
	word32 esi_14 = dwArg04
	word32 eax_15 = Mem13[dwArg04 + 4<32>:word32]
	branch eax_15 == 0xA1B450<32> l006EA4AF
l006EA44F:
	word32 ecx_251
	branch fn006D5670(eax_15, 0xA1B450<32>, out ecx_251, out edx) != 0<32> l006EA4AF
l006EA461:
	word32 eax_33 = Mem21[dwArg04 + 4<32>:word32]
	branch eax_33 == 0xA23B20<32> l006EA49E
l006EA46B:
	word32 ecx_253
	word32 edx_254
	branch fn006D5670(eax_33, 0xA23B20<32>, out ecx_253, out edx_254) != 0<32> l006EA49E
l006EA49E:
	word32 ecx_252
	word32 eax_60 = fn0071FC50(dwArg04, 0<32>, out ecx_252, out edx)
	esi_14 = eax_60
	branch eax_60 == 0<32> l006EA4F4
l006EA4AF:
	word32 eax_76 = esi_14 + 0x14<32>
	Mem78[dwArg08:word32] = eax_76
	branch dwArg0C == 0<32> l006EA4C6
l006EA4C6:
	edx = eax_76 + 1<32>
	eax_82 = eax_76
l006EA4D0:
	word32 eax_82
	eax_82 = eax_257 + 1<32>
	eax_257 = eax_82
	branch Mem78[eax_257:byte] != 0<8> l006EA4D0
l006EA4D9:
	branch eax_82 - (eax_76 + 1<32>) == Mem78[esi_14 + 8<32>:word32] l006EA4C1
l006EA4E0:
	word32 ecx_256
	fn006E0F80(Mem78[0x00A16B7C<p32>:word32], dwArg04, out ecx_256, out edx)
l006EA4F4:
	edxOut = edx
	return 0xFFFFFFFF<32>
l006EA4BC:
	Mem122[dwArg0C:word32] = Mem78[esi_14 + 8<32>:word32]
l006EA4C1:
	edxOut = edx
	return 0<32>
l006EA47D:
	word32 edx_144
	word32 ecx_255
	fn006E15D0(Mem39[0x00A16B7C<p32>:word32], 0x8D484C<32>, out ecx_255, out edx_144)
	edxOut = edx_144
	return 0xFFFFFFFF<32>
l006EA429:
	word32 edx_162
	fn006E1DC0(out edx_162)
	edxOut = edx_162
	return 0xFFFFFFFF<32>
fn006EA420_exit:


word32 fn006EA9D0(word32 dwArg04, word32 dwArg08, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006EC440
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: ebp edi esp
fn006EA9D0_entry:
l006EA9D0:
	word32 eax_8 = Mem6[dwArg08 + 4<32>:word32]
	branch eax_8 == 0xA1B450<32> l006EAA3D
l006EA9E2:
	word32 ecx_448
	branch fn006D5670(eax_8, 0xA1B450<32>, out ecx_448, out edx) != 0<32> l006EAA3D
l006EAA3D:
	word32 eax_36 = Mem34[dwArg04 + 8<32>:word32]
	branch eax_36 == 0<32> l006EAA4F
l006EAA49:
	branch Mem34[dwArg08 + 8<32>:word32] != 0<32> l006EAA6F
l006EAA4F:
	branch Mem34[dwArg04 + 4<32>:word32] != 0xA1B450<32> l006EAA6F
l006EAA54:
	branch Mem34[dwArg08 + 4<32>:word32] != 0xA1B450<32> l006EAA6F
l006EAA6F:
	word32 ebp_64 = Mem59[dwArg08 + 8<32>:word32] + eax_36
	branch ebp_64 >= 0<32> l006EAA96
l006EAA96:
	word32 ecx_452
	word32 edx_453
	word32 eax_71 = fn00723860(ebp_64 + 0x18<32>, out ecx_452, out edx_453)
	branch eax_71 != 0<32> l006EAAB1
l006EAAB1:
	Mem83[eax_71 + 8<32>:word32] = ebp_64
	Mem84[eax_71 + 4<32>:word32] = 0xA1B450<32>
	Mem85[eax_71:word32] = 1<32>
	Mem86[eax_71 + 0xC<32>:word32] = 0xFFFFFFFF<32>
	Mem87[eax_71 + 0x10<32>:word32] = 0<32>
	word32 eax_89 = Mem87[dwArg04 + 8<32>:word32]
	word32 ecx_102 = eax_71 + 0x14<32>
	branch eax_89 <u 0x10<32> l006EAAEA
l006EAAEA:
	branch eax_89 <=u 0<32> l006EAB03
l006EAAEE:
	word32 edx_98 = dwArg04 + 0x14<32> - (eax_71 + 0x14<32>)
	word32 ebp_100 = eax_89
l006EAAF2:
	Mem105[ecx_102:byte] = Mem103[edx_98 + ecx_102:byte]
	ecx_102 = ecx_102 + 1<32>
	ebp_100 = ebp_100 - 1<32>
	branch ebp_100 != 0<32> l006EAAF2
l006EAAFF:
l006EAADD:
	memcpy(eax_71 + 0x14<32>, dwArg04 + 0x14<32>, eax_89)
l006EAB03:
	word32 ecx_128 = Mem124[dwArg08 + 8<32>:word32]
	word32 eax_132 = Mem124[dwArg04 + 8<32>:word32] + 0x14<32> + eax_71
	word32 edx_133 = dwArg08 + 0x14<32>
	branch ecx_128 <u 0x10<32> l006EAB2C
l006EAB2C:
	branch ecx_128 <=u 0<32> l006EAB41
l006EAB30:
	edx_133 = dwArg08 + 0x14<32> - eax_132
	word32 edi_141 = ecx_128
l006EAB34:
	Mem146[eax_132:byte] = Mem144[edx_133 + eax_132:byte]
	eax_132 = eax_132 + 1<32>
	edi_141 = edi_141 - 1<32>
	branch edi_141 != 0<32> l006EAB34
l006EAB41:
	Mem157[eax_71 + 0x14<32> + ebp_64:byte] = 0<8>
	edxOut = edx_133
	return eax_71
l006EAB15:
	memcpy(eax_132, dwArg08 + 0x14<32>, ecx_128)
	Mem179[eax_71 + 0x14<32> + ebp_64:byte] = 0<8>
	edxOut = dwArg08 + 0x14<32>
	return eax_71
l006EAAA8:
l006EAAAC_thunk_fn006E1210:
	word32 edx_203
	word32 ecx_455
	word32 eax_201 = fn006E1210(out ecx_455, out edx_203)
	edxOut = edx_203
	return eax_201
l006EAA7B:
	word32 edx_215
	word32 ecx_454
	fn006E0F80(Mem66[0x00A18598<p32>:word32], 0x8D48B0<32>, out ecx_454, out edx_215)
	edxOut = edx_215
	return 0<32>
l006EAA59:
	branch eax_36 != 0<32> l006EAA66
l006EAA66:
	Mem234[dwArg04:word32] = Mem34[dwArg04:word32] + 1<32>
	edxOut = edx
	return dwArg04
l006EAA5D:
	Mem244[dwArg08:word32] = Mem34[dwArg08:word32] + 1<32>
	edxOut = edx
	return dwArg08
l006EA9F0:
	word32 eax_253 = Mem18[dwArg08 + 4<32>:word32]
	branch eax_253 == 0xA23B20<32> l006EAA2C
l006EA9FA:
	word32 ecx_449
	word32 edx_450
	branch fn006D5670(eax_253, 0xA23B20<32>, out ecx_449, out edx_450) != 0<32> l006EAA2C
l006EAA2C:
	word32 edx_286
	word32 eax_284 = fn00721290(dwArg04, dwArg08, out edx_286)
	edxOut = edx_286
	return eax_284
l006EAA0C:
	word32 edx_307
	word32 ecx_451
	fn006E15D0(Mem259[0x00A16B7C<p32>:word32], 0x8D48D0<32>, out ecx_451, out edx_307)
	edxOut = edx_307
	return 0<32>
fn006EA9D0_exit:


word32 fn006EC440(word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006EC4C0
//      fn00708410
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: edx
// Trashed: SCZO eax ecx edi edx esi Top
// Preserved: esp
fn006EC440_entry:
l006EC440:
	word32 eax_8 = Mem6[dwArg04:word32]
	branch eax_8 == 0<32> l006EC4BA
l006EC44B:
	branch dwArg08 == 0<32> l006EC49B
l006EC454:
	word32 eax_19 = Mem14[eax_8 + 4<32>:word32]
	branch eax_19 == 0xA1B450<32> l006EC470
l006EC45E:
	word32 ecx_194
	branch fn006D5670(eax_19, 0xA1B450<32>, out ecx_194, out edx) == 0<32> l006EC49B
l006EC49B:
	word32 eax_39 = Mem38[dwArg04:word32]
	Mem41[eax_39:word32] = Mem38[eax_39:word32] + 0xFFFFFFFF<32>
	word32 eax_42 = Mem41[dwArg04:word32]
	branch Mem41[eax_42:word32] != 0<32> l006EC4B3
l006EC4A7:
	word32 ecx_45 = Mem41[eax_42 + 4<32>:word32]
	call Mem41[ecx_45 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_45,edx:edx_55,Stack +0004:eax_42,Stack +0014:dwArg04,Stack +0018:dwArg08
		defs: edx:edx_55
l006EC4B3:
	Mem61[dwArg04:word32] = 0<32>
l006EC4BA:
	return edx
l006EC470:
	word32 edx_100
	word32 eax_80 = fn006EA9D0(Mem70[dwArg04:word32], dwArg08, out edx_100)
	word32 eax_86 = Mem77[dwArg04:word32]
	Mem88[eax_86:word32] = Mem77[eax_86:word32] + 0xFFFFFFFF<32>
	word32 eax_89 = Mem88[dwArg04:word32]
	branch Mem88[eax_89:word32] != 0<32> l006EC496
l006EC48A:
	word32 ecx_93 = Mem88[eax_89 + 4<32>:word32]
	call Mem88[ecx_93 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_93,edx:edx_100,Stack +0004:eax_89,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0014:dwArg04,Stack +0018:dwArg08
		defs: edx:edx_100
l006EC496:
	Mem107[dwArg04:word32] = eax_80
	return edx_100
fn006EC440_exit:


word32 fn006EC4C0(word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0073D660
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: edx
// Trashed: SCZO eax ecx edx Top
// Preserved: esi esp
fn006EC4C0_entry:
l006EC4C0:
	word32 edx_17 = fn006EC440(dwArg04, dwArg08)
	branch dwArg08 == 0<32> l006EC4E8
l006EC4D7:
	word32 v9_24 = Mem13[dwArg08:word32] + 0xFFFFFFFF<32>
	Mem25[dwArg08:word32] = v9_24
	branch v9_24 != 0<32> l006EC4E8
l006EC4DC:
	word32 ecx_28 = Mem25[dwArg08 + 4<32>:word32]
	call Mem25[ecx_28 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_28,Stack +0004:dwArg08,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg04,Stack +0014:dwArg08
		defs: edx:edx_35
l006EC4E8:
	return edx_17
fn006EC4C0_exit:


word32 fn006EC4F0(word32 dwArg04, word32 dwArg08, ptr32 & ecxOut, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006F1AA0
//      fn006F2090
//      fn00708410
//      fn007189B0
//      fn0071A060
//      fn0071A9F0
//      fn007286D0
//      fn007288B0
//      fn0072A350
//      fn00735640
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax ecx edx
// Trashed: SCZO eax ebx ecx edi edx esi Top
// Preserved: esp
fn006EC4F0_entry:
l006EC4F0:
	word32 esi_11 = Mem10[dwArg04:word32]
	word32 eax_12 = Mem10[esi_11 + 4<32>:word32]
	branch eax_12 == 0xA1B450<32> l006EC515
l006EC503:
	word32 ecx_205
	word32 edx_206
	branch fn006D5670(eax_12, 0xA1B450<32>, out ecx_205, out edx_206) == 0<32> l006EC56D
l006EC515:
	branch Mem34[esi_11:word32] != 1<32> l006EC56D
l006EC51A:
	branch dwArg08 < 0<32> l006EC56D
l006EC522:
	branch Mem34[esi_11 + 0x10<32>:word32] != 0<32> l006EC56D
l006EC56D:
	Mem46[dwArg04:word32] = 0<32>
	word32 v12_48 = Mem46[esi_11:word32] + 0xFFFFFFFF<32>
	Mem49[esi_11:word32] = v12_48
	word32 esp_54 = fp - 0xC<32>
	branch v12_48 != 0<32> l006EC584
l006EC578:
	word32 ecx_52 = Mem49[esi_11 + 4<32>:word32]
	word32 esp_61
	call Mem49[ecx_52 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_52,Stack +0004:esi_11,Stack +0018:dwArg04,Stack +001C:dwArg08
		defs: esp:esp_61
	esp_54 = esp_61 + 4<32>
l006EC584:
	word32 esp_70 = esp_54 - 4<i32>
	Mem71[esp_70:word32] = 0x100D<32>
	Mem73[esp_70 - 4<i32>:word32] = 0x8D487C<32>
	word32 edx_81
	ecxOut = fn006E1DC0(out edx_81)
	edxOut = edx_81
	return 0xFFFFFFFF<32>
l006EC528:
	word32 ecx_100
	word32 edx_101
	word32 eax_99 = fn00723B60(esi_11, dwArg08 + 0x18<32>, out ecx_100, out edx_101)
	Mem109[dwArg04:word32] = eax_99
	branch eax_99 != 0<32> l006EC550
l006EC550:
	Mem111[eax_99:word32] = 1<32>
	word32 eax_112 = Mem111[dwArg04:word32]
	Mem113[eax_112 + 8<32>:word32] = dwArg08
	Mem114[eax_112 + 0x14<32> + dwArg08:byte] = 0<8>
	Mem119[eax_112 + 0xC<32>:word32] = 0xFFFFFFFF<32>
	ecxOut = ecx_100
	edxOut = edx_101
	return 0<32>
l006EC53B:
	word32 ecx_207
	word32 edx_208
	fn007239C0(esi_11, out ecx_207, out edx_208)
	word32 ecx_138
	word32 edx_139
	fn006E1210(out ecx_138, out edx_139)
	ecxOut = ecx_138
	edxOut = edx_139
	return 0xFFFFFFFF<32>
fn006EC4F0_exit:


word32 fn006EC890(word32 dwArg04, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006DE430
//      fn006EC9B0
//      fn006ECAC0
//      fn006F1A70
//      fn006F1AA0
//      fn006F2090
//      fn006FD8F0
//      fn00734B60
//      fn00734BB0
//      fn007367D0
//      fn0073C870
//      fn0074EB10
// MayUse:  Stack +0004:[0..31]
// LiveOut: ecx edx
// Trashed: SCZO eax ebx ecx edx esi Top
// Preserved: edi esp
fn006EC890_entry:
l006EC890:
	word32 esi_11 = Mem10[dwArg04:word32]
	branch esi_11 == 0<32> l006EC8B8
l006EC89C:
	word32 eax_15 = Mem10[esi_11 + 4<32>:word32]
	branch eax_15 == 0xA1B450<32> l006EC8C5
l006EC8A6:
	branch fn006D5670(eax_15, 0xA1B450<32>, out ecx, out edx) != 0<32> l006EC8C5
l006EC8B8:
	fn006E86F0(0x8D4C0C<32>)
l006EC8C5:
	branch Mem45[esi_11 + 4<32>:word32] != 0xA1B450<32> l006EC94B
l006EC8CE:
	branch Mem45[esi_11 + 0x10<32>:word32] != 0<32> l006EC94B
l006EC8D4:
	word32 eax_50 = Mem45[0x00A6C638<p32>:word32]
	branch eax_50 != 0<32> l006EC8F2
l006EC8DD:
	word32 edx_267
	word32 ecx_266
	eax_50 = fn006FDCC0(out ecx_266, out edx_267)
	Mem67[0x00A6C638<p32>:word32] = eax_50
	branch eax_50 != 0<32> l006EC8F2
l006EC8F2:
	word32 ecx_151
	word32 edx_152
	word32 eax_85 = fn006FBCC0(eax_50, dwArg04, out ecx_151, out edx_152)
	branch eax_85 == 0<32> l006EC924
l006EC924:
	word32 ebx_268
	word32 edi_269
	branch fn006FBD90(Mem81[0x00A6C638<p32>:word32], dwArg04, esi_11, out ecx, out edx, out ebx_268, out edi_269) >= 0<32> l006EC940
l006EC940:
	Mem113[esi_11:word32] = Mem101[esi_11:word32] + 0xFFFFFFFE<32>
	Mem115[esi_11 + 0x10<32>:word32] = 1<32>
l006EC94B:
	edxOut = edx
	return ecx
l006EC938:
l006EC93B_thunk_fn006E1160:
	word32 ecx_131
	word32 edx_132
	fn006E1160(out ecx_131, out edx_132)
	edxOut = edx_132
	return ecx_131
l006EC903:
	Mem138[eax_85:word32] = Mem81[eax_85:word32] + 1<32>
	word32 eax_139 = Mem138[dwArg04:word32]
	Mem141[eax_139:word32] = Mem138[eax_139:word32] + 0xFFFFFFFF<32>
	word32 eax_142 = Mem141[dwArg04:word32]
	branch Mem141[eax_142:word32] != 0<32> l006EC91E
l006EC912:
	word32 ecx_145 = Mem141[eax_142 + 4<32>:word32]
	call Mem141[ecx_145 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_145,edx:edx_152,Stack +0004:eax_142,Stack +0008:dwArg04,Stack +0018:dwArg04
		defs: ecx:ecx_151,edx:edx_152
l006EC91E:
	Mem159[dwArg04:word32] = eax_85
	edxOut = edx_152
	return ecx_151
l006EC8EB:
l006EC8ED_thunk_fn006E1160:
	word32 ecx_172
	word32 edx_173
	fn006E1160(out ecx_172, out edx_173)
	edxOut = edx_173
	return ecx_172
fn006EC890_exit:


void fn006EC950()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E8910
// MayUse: 
// LiveOut:
// Trashed: SCZO eax ecx edx Top
// Preserved: esi esp
fn006EC950_entry:
l006EC950:
	word32 esi_35 = 0xA6C640<32>
l006EC956:
	word32 eax_10 = Mem9[esi_35:word32]
	branch eax_10 == 0<32> l006EC972
l006EC95C:
	Mem15[eax_10:word32] = Mem9[eax_10:word32] + 0xFFFFFFFF<32>
	word32 eax_16 = Mem15[esi_35:word32]
	branch Mem15[eax_16:word32] != 0<32> l006EC972
l006EC966:
	word32 ecx_19 = Mem15[eax_16 + 4<32>:word32]
	word32 edx_28
	call Mem15[ecx_19 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_19,edx:edx_28,Stack +0004:eax_16
		defs: edx:edx_28
l006EC972:
	Mem34[esi_35:word32] = 0<32>
	esi_35 = esi_35 + 4<32>
	branch esi_35 < 0xA6CA40<32> l006EC956
l006EC983:
	word32 eax_38 = Mem34[0x00A6C63C<p32>:word32]
	branch eax_38 == 0<32> l006EC99E
l006EC98D:
	word32 v13_45 = Mem34[eax_38:word32] + 0xFFFFFFFF<32>
	Mem46[eax_38:word32] = v13_45
	branch v13_45 != 0<32> l006EC99E
l006EC992:
	word32 ecx_49 = Mem46[eax_38 + 4<32>:word32]
	word32 edx_57
	call Mem46[ecx_49 + 0x18<32>:word32] (retsize: 4;)
		uses: ecx:ecx_49,edx:edx_57,Stack +0004:eax_38
		defs: edx:edx_57
l006EC99E:
	Mem62[0x00A6C63C<p32>:word32] = 0<32>
	return
fn006EC950_exit:


word32 fn006EC9B0(word32 dwArg04, word32 dwArg08, ptr32 & ecxOut, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E9BD0
//      fn007120F0
//      fn007189B0
//      fn0071A060
//      fn0071A9F0
//      fn00726150
//      fn00726930
//      fn00728650
//      fn0072A740
//      fn0072A940
//      fn007367D0
//      fn0073C870
//      fn0073D2A0
//      fn0073D450
//      fn00748470
//      fn0074E0B0
//      fn007533F0
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax ecx edx
// Trashed: SCZO eax ebx ecx edi edx esi Top
// Preserved: ebp esp
fn006EC9B0_entry:
l006EC9B0:
	branch dwArg08 != 0<32> l006EC9CD
l006EC9CD:
	branch dwArg08 != 1<32> l006EC9E9
l006EC9D2:
	branch dwArg04 == 0<32> l006EC9E9
l006EC9D6:
	word32 eax_21 = Mem10[CONVERT(Mem10[dwArg04:byte], byte, word32) * 4<32> + 0xA6C640<32>:word32]
	branch eax_21 == 0<32> l006EC9E9
l006EC9E4:
	Mem26[eax_21:word32] = Mem10[eax_21:word32] + dwArg08
	ecxOut = ecx
	edxOut = edx
	return eax_21
l006EC9BE:
	word32 eax_32 = Mem10[0x00A6C63C<p32>:word32]
	branch eax_32 == 0<32> l006EC9E9
l006EC9E9:
	word32 ecx_129
	word32 edx_133
	word32 eax_45 = fn00723860(dwArg08 + 0x18<32>, out ecx_129, out edx_133)
	word24 edx_24_8_235 = SLICE(edx_133, word24, 8)
	branch eax_45 != 0<32> l006ECA04
l006ECA04:
	Mem60[eax_45 + 8<32>:word32] = dwArg08
	Mem61[eax_45 + 4<32>:word32] = 0xA1B450<32>
	Mem62[eax_45:word32] = 1<32>
	Mem63[eax_45 + 0xC<32>:word32] = 0xFFFFFFFF<32>
	Mem64[eax_45 + 0x10<32>:word32] = 0<32>
	branch dwArg04 == 0<32> l006ECA54
l006ECA26:
	word32 eax_67 = eax_45 + 0x14<32>
	branch dwArg08 <u 0x10<32> l006ECA3B
l006ECA3B:
	branch dwArg08 <=u 0<32> l006ECA54
l006ECA3F:
	ecx_129 = dwArg04 - (eax_45 + 0x14<32>)
	word32 ebp_80 = dwArg08
l006ECA46:
	byte dl_84 = Mem83[ecx_129 + eax_67:byte]
	Mem85[eax_67:byte] = dl_84
	eax_67 = eax_67 + 1<32>
	ebp_80 = ebp_80 - 1<32>
	edx_133 = SEQ(edx_24_8_235, dl_84) (alias)
	branch ebp_80 != 0<32> l006ECA46
l006ECA53:
l006ECA2E:
	memcpy(eax_45 + 0x14<32>, dwArg04, dwArg08)
l006ECA54:
	Mem109[eax_45 + 0x14<32> + dwArg08:byte] = 0<8>
	branch dwArg08 != 0<32> l006ECA81
l006ECA81:
	branch dwArg08 != 1<32> l006ECAAB
l006ECA86:
	branch dwArg04 == 0<32> l006ECAAB
l006ECA8A:
	word32 edx_283
	ecx_129 = fn006EC890(fp + 8<32>, out edx_283)
	edx_133 = CONVERT(Mem122[dwArg04:byte], byte, word32)
	Mem135[edx_133 * 4<32> + 0xA6C640<32>:word32] = eax_45
	Mem138[eax_45:word32] = Mem135[eax_45:word32] + dwArg08
l006ECAAB:
	ecxOut = ecx_129
	edxOut = edx_133
	return eax_45
l006ECA5D:
	word32 edx_157
	word32 ecx_156 = fn006EC890(fp + 8<32>, out edx_157)
	Mem163[eax_45:word32] = Mem153[eax_45:word32] + 1<32>
	Mem165[0x00A6C63C<p32>:word32] = eax_45
	ecxOut = ecx_156
	edxOut = edx_157
	return eax_45
l006EC9FC:
l006EC9FF_thunk_fn006E1210:
	word32 ecx_181
	word32 edx_182
	word32 eax_180 = fn006E1210(out ecx_181, out edx_182)
	ecxOut = ecx_181
	edxOut = edx_182
	return eax_180
l006EC9C7:
	Mem186[eax_32:word32] = Mem10[eax_32:word32] + 1<32>
	ecxOut = ecx
	edxOut = edx
	return eax_32
fn006EC9B0_exit:


word32 fn006ECAC0(word32 dwArg04, ptr32 & ecxOut, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006DDEB0
//      fn006E0F80
//      fn006E11D0
//      fn006E1520
//      fn006E1AB0
//      fn006E1DE0
//      fn006E3900
//      fn006EA080
//      fn006F1A70
//      fn006F2790
//      fn006F6490
//      fn006F8960
//      fn006F92B0
//      fn006FD8B0
//      fn006FD8F0
//      fn006FD950
//      fn006FDCC0
//      fn006FE400
//      fn00703B60
//      fn00703D00
//      fn00717180
//      fn007272E0
//      fn00728BE0
//      fn0072B360
//      fn0072D830
//      fn0072E660
//      fn00731D30
//      fn00738BB0
//      fn0074E140
// MayUse:  Stack +0004:[0..31]
// LiveOut: eax ecx edx
// Trashed: SCZO eax ecx edx esi Top
// Preserved: ebp ebx edi esp
fn006ECAC0_entry:
l006ECAC0:
	word32 dwLoc04_245 = ecx
	word32 eax_11 = dwArg04
l006ECAD0:
	eax_11 = eax_343 + 1<32>
	eax_343 = eax_11
	branch Mem14[eax_343:byte] != 0<8> l006ECAD0
l006ECAD9:
	word32 eax_25 = eax_11 - (dwArg04 + 1<32>)
	branch eax_25 <=u 0x7FFFFFFF<32> l006ECAFE
l006ECAFE:
	branch eax_25 != 0<32> l006ECB12
l006ECB12:
	branch eax_25 != 1<32> l006ECB2B
l006ECB17:
	word32 eax_36 = Mem14[CONVERT(Mem14[dwArg04:byte], byte, word32) * 4<32> + 0xA6C640<32>:word32]
	branch eax_36 == 0<32> l006ECB2B
l006ECB25:
	Mem41[eax_36:word32] = Mem14[eax_36:word32] + eax_25
	ecxOut = ecx
	edxOut = dwArg04 + 1<32>
	return eax_36
l006ECB02:
	word32 eax_50 = Mem14[0x00A6C63C<p32>:word32]
	branch eax_50 == 0<32> l006ECB2B
l006ECB2B:
	word32 ecx_342
	word32 edx_150
	word32 eax_64 = fn00723860(eax_25 + 0x18<32>, out ecx_342, out edx_150)
	branch eax_64 != 0<32> l006ECB49
l006ECB49:
	Mem78[eax_64 + 8<32>:word32] = eax_25
	Mem79[eax_64 + 4<32>:word32] = 0xA1B450<32>
	Mem80[eax_64:word32] = 1<32>
	Mem81[eax_64 + 0xC<32>:word32] = 0xFFFFFFFF<32>
	Mem82[eax_64 + 0x10<32>:word32] = 0<32>
	word32 eax_101 = eax_64 + 0x14<32>
	branch eax_25 <u 0xF<32> l006ECB7F
l006ECB7F:
	branch eax_25 <=u 1<32> l006ECB9E
l006ECB83:
	edx_150 = dwArg04 - (eax_64 + 0x14<32>)
	word32 ebp_106 = eax_25 + 1<32>
l006ECB90:
	Mem104[eax_101:byte] = Mem102[edx_150 + eax_101:byte]
	eax_101 = eax_101 + 1<32>
	ebp_106 = ebp_106 - 1<32>
	branch ebp_106 != 0<32> l006ECB90
l006ECB9D:
l006ECB72:
	memcpy(eax_64 + 0x14<32>, dwArg04, eax_25 + 1<32>)
l006ECB9E:
	branch eax_25 != 0<32> l006ECBC7
l006ECBC7:
	branch eax_25 != 1<32> l006ECBED
l006ECBCC:
	fn006EC890(fp - 4<32>, out edx_150)
	Mem155[CONVERT(Mem135[dwArg04:byte], byte, word32) * 4<32> + 0xA6C640<32>:word32] = eax_64
	Mem158[eax_64:word32] = Mem155[eax_64:word32] + eax_25
	dwLoc04_245 = eax_64
l006ECBED:
	ecxOut = dwLoc04_245
	edxOut = edx_150
	return eax_64
l006ECBA2:
	word32 edx_180
	fn006EC890(fp - 4<32>, out edx_180)
	Mem186[eax_64:word32] = Mem176[eax_64:word32] + 1<32>
	Mem188[0x00A6C63C<p32>:word32] = eax_64
	ecxOut = eax_64
	edxOut = edx_180
	return eax_64
l006ECB3E:
l006ECB44_thunk_fn006E1210:
	word32 ecx_207
	word32 edx_209
	word32 eax_208 = fn006E1210(out ecx_207, out edx_209)
	ecxOut = ecx_207
	edxOut = edx_209
	return eax_208
l006ECB0B:
	Mem213[eax_50:word32] = Mem14[eax_50:word32] + 1<32>
	ecxOut = ecx
	edxOut = dwArg04 + 1<32>
	return eax_50
l006ECAE5:
	word32 edx_232
	word32 ecx_341
	fn006E0F80(Mem14[0x00A18598<p32>:word32], 0x8D4C3C<32>, out ecx_341, out edx_232)
	ecxOut = ecx
	edxOut = edx_232
	return 0<32>
fn006ECAC0_exit:


word32 fn006ECC00(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn006E5C60
//      fn006F7890
//      fn0071A9F0
//      fn00726930
//      fn00735550
//      fn00735640
//      fn0073D2A0
//      fn00755020
// MayUse:  Stack +0004:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx edx esi Top
// Preserved: esp
fn006ECC00_entry:
l006ECC00:
	word32 eax_11 = Mem9[dwArg04 + 4<32>:word32]
	branch eax_11 == 0xA1B450<32> l006ECC46
l006ECC10:
	word32 ecx_106
	word32 edx_107
	branch fn006D5670(eax_11, 0xA1B450<32>, out ecx_106, out edx_107) != 0<32> l006ECC46
l006ECC46:
	return Mem30[dwArg04 + 8<32>:word32]
l006ECC22:
	word32 edx_108
	branch fn006EA420(dwArg04, fp - 4<32>, fp + 4<32>, out edx_108) == 0<32> l006ECC3F
l006ECC3F:
	return dwArg04
l006ECC39:
	return 0xFFFFFFFF<32>
fn006ECC00_exit:


word32 fn006ECC50(word32 dwArg04, ptr32 & ecxOut, ptr32 & edxOut, ptr32 & esiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn00656570
//      fn00657140
//      fn006E1780
//      fn006E7D90
//      fn006E8060
//      fn006E8430
//      fn006F2090
//      fn006F7890
//      fn006FE400
//      fn00707750
//      fn00707950
//      fn007081C0
//      fn007083E0
//      fn0070B600
//      fn0070BCC0
//      fn00717280
//      fn007173A0
//      fn00726150
//      fn00726930
//      fn0072F830
//      fn0072FB30
//      fn00735550
//      fn0073D2A0
//      fn00748190
//      fn00752B30
//      fn007533F0
//      fn007537F0
//      fn00753A60
//      fn00755020
// MayUse:  Stack +0004:[0..31]
// LiveOut: eax ecx edx esi
// Trashed: SCZO eax ecx edx esi Top
// Preserved: esp
fn006ECC50_entry:
l006ECC50:
	word32 eax_11 = Mem9[dwArg04 + 4<32>:word32]
	branch eax_11 == 0xA1B450<32> l006ECC92
l006ECC60:
	word32 ecx_103
	branch fn006D5670(eax_11, 0xA1B450<32>, out ecx_103, out edx) != 0<32> l006ECC92
l006ECC92:
	ecxOut = <invalid>
	edxOut = edx
	esiOut = <invalid>
	return dwArg04 + 0x14<32>
l006ECC72:
	word32 edx_49
	word32 eax_56 = ~(0<32> - (fn006EA420(dwArg04, fp + 4<32>, fp - 4<32>, out edx_49) == 0<32>)) & dwArg04
	ecxOut = <invalid>
	edxOut = edx_49
	esiOut = <invalid>
	return eax_56
fn006ECC50_exit:


