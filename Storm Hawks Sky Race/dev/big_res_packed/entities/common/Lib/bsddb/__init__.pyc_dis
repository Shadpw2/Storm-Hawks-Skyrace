# Embedded file name: /entities/common/Lib/bsddb/__init__.py
"""Support for BerkeleyDB 3.3 through 4.4 with a simple interface.

For the full featured object oriented interface use the bsddb.db module
instead.  It mirrors the Sleepycat BerkeleyDB C API.
"""
try:
    if __name__ == 'bsddb3':
        import _pybsddb
        _bsddb = _pybsddb
        from bsddb3.dbutils import DeadlockWrap as _DeadlockWrap
    else:
        import _bsddb
        from bsddb.dbutils import DeadlockWrap as _DeadlockWrap
except ImportError:
    import sys
    del sys.modules[__name__]
    raise

db = _db = _bsddb
__version__ = db.__version__
error = db.DBError
import sys, os
if sys.version >= '2.3':
    import UserDict
    from weakref import ref
    exec "\nclass _iter_mixin(UserDict.DictMixin):\n    def _make_iter_cursor(self):\n        cur = _DeadlockWrap(self.db.cursor)\n        key = id(cur)\n        self._cursor_refs[key] = ref(cur, self._gen_cref_cleaner(key))\n        return cur\n\n    def _gen_cref_cleaner(self, key):\n        # use generate the function for the weakref callback here\n        # to ensure that we do not hold a strict reference to cur\n        # in the callback.\n        return lambda ref: self._cursor_refs.pop(key, None)\n\n    def __iter__(self):\n        try:\n            cur = self._make_iter_cursor()\n\n            # FIXME-20031102-greg: race condition.  cursor could\n            # be closed by another thread before this call.\n\n            # since we're only returning keys, we call the cursor\n            # methods with flags=0, dlen=0, dofs=0\n            key = _DeadlockWrap(cur.first, 0,0,0)[0]\n            yield key\n\n            next = cur.next\n            while 1:\n                try:\n                    key = _DeadlockWrap(next, 0,0,0)[0]\n                    yield key\n                except _bsddb.DBCursorClosedError:\n                    cur = self._make_iter_cursor()\n                    # FIXME-20031101-greg: race condition.  cursor could\n                    # be closed by another thread before this call.\n                    _DeadlockWrap(cur.set, key,0,0,0)\n                    next = cur.next\n        except _bsddb.DBNotFoundError:\n            return\n        except _bsddb.DBCursorClosedError:\n            # the database was modified during iteration.  abort.\n            return\n\n    def iteritems(self):\n        if not self.db:\n            return\n        try:\n            cur = self._make_iter_cursor()\n\n            # FIXME-20031102-greg: race condition.  cursor could\n            # be closed by another thread before this call.\n\n            kv = _DeadlockWrap(cur.first)\n            key = kv[0]\n            yield kv\n\n            next = cur.next\n            while 1:\n                try:\n                    kv = _DeadlockWrap(next)\n                    key = kv[0]\n                    yield kv\n                except _bsddb.DBCursorClosedError:\n                    cur = self._make_iter_cursor()\n                    # FIXME-20031101-greg: race condition.  cursor could\n                    # be closed by another thread before this call.\n                    _DeadlockWrap(cur.set, key,0,0,0)\n                    next = cur.next\n        except _bsddb.DBNotFoundError:\n            return\n        except _bsddb.DBCursorClosedError:\n            # the database was modified during iteration.  abort.\n            return\n"
else:

    class _iter_mixin:
        pass


class _DBWithCursor(_iter_mixin):
    """
    A simple wrapper around DB that makes it look like the bsddbobject in
    the old module.  It uses a cursor as needed to provide DB traversal.
    """

    def __init__(self, db):
        self.db = db
        self.db.set_get_returns_none(0)
        self.dbc = None
        self.saved_dbc_key = None
        self._cursor_refs = {}
        return

    def __del__(self):
        self.close()

    def _checkCursor(self):
        if self.dbc is None:
            self.dbc = _DeadlockWrap(self.db.cursor)
            if self.saved_dbc_key is not None:
                _DeadlockWrap(self.dbc.set, self.saved_dbc_key)
                self.saved_dbc_key = None
        return

    def _closeCursors(self, save = 1):
        if self.dbc:
            c = self.dbc
            self.dbc = None
            if save:
                try:
                    self.saved_dbc_key = _DeadlockWrap(c.current, 0, 0, 0)[0]
                except db.DBError:
                    pass

            _DeadlockWrap(c.close)
            del c
        for cref in self._cursor_refs.values():
            c = cref()
            if c is not None:
                _DeadlockWrap(c.close)

        return

    def _checkOpen(self):
        if self.db is None:
            raise error, 'BSDDB object has already been closed'
        return

    def isOpen(self):
        return self.db is not None

    def __len__(self):
        self._checkOpen()
        return _DeadlockWrap(lambda : len(self.db))

    def __getitem__(self, key):
        self._checkOpen()
        return _DeadlockWrap(lambda : self.db[key])

    def __setitem__(self, key, value):
        self._checkOpen()
        self._closeCursors()

        def wrapF():
            self.db[key] = value

        _DeadlockWrap(wrapF)

    def __delitem__(self, key):
        self._checkOpen()
        self._closeCursors()

        def wrapF():
            del self.db[key]

        _DeadlockWrap(wrapF)

    def close(self):
        self._closeCursors(save=0)
        if self.dbc is not None:
            _DeadlockWrap(self.dbc.close)
        v = 0
        if self.db is not None:
            v = _DeadlockWrap(self.db.close)
        self.dbc = None
        self.db = None
        return v

    def keys(self):
        self._checkOpen()
        return _DeadlockWrap(self.db.keys)

    def has_key(self, key):
        self._checkOpen()
        return _DeadlockWrap(self.db.has_key, key)

    def set_location(self, key):
        self._checkOpen()
        self._checkCursor()
        return _DeadlockWrap(self.dbc.set_range, key)

    def next(self):
        self._checkOpen()
        self._checkCursor()
        rv = _DeadlockWrap(self.dbc.next)
        return rv

    def previous(self):
        self._checkOpen()
        self._checkCursor()
        rv = _DeadlockWrap(self.dbc.prev)
        return rv

    def first(self):
        self._checkOpen()
        self.saved_dbc_key = None
        self._checkCursor()
        rv = _DeadlockWrap(self.dbc.first)
        return rv

    def last(self):
        self._checkOpen()
        self.saved_dbc_key = None
        self._checkCursor()
        rv = _DeadlockWrap(self.dbc.last)
        return rv

    def sync(self):
        self._checkOpen()
        return _DeadlockWrap(self.db.sync)


def hashopen(file, flag = 'c', mode = 438, pgsize = None, ffactor = None, nelem = None, cachesize = None, lorder = None, hflags = 0):
    flags = _checkflag(flag, file)
    e = _openDBEnv(cachesize)
    d = db.DB(e)
    d.set_flags(hflags)
    if pgsize is not None:
        d.set_pagesize(pgsize)
    if lorder is not None:
        d.set_lorder(lorder)
    if ffactor is not None:
        d.set_h_ffactor(ffactor)
    if nelem is not None:
        d.set_h_nelem(nelem)
    d.open(file, db.DB_HASH, flags, mode)
    return _DBWithCursor(d)


def btopen(file, flag = 'c', mode = 438, btflags = 0, cachesize = None, maxkeypage = None, minkeypage = None, pgsize = None, lorder = None):
    flags = _checkflag(flag, file)
    e = _openDBEnv(cachesize)
    d = db.DB(e)
    if pgsize is not None:
        d.set_pagesize(pgsize)
    if lorder is not None:
        d.set_lorder(lorder)
    d.set_flags(btflags)
    if minkeypage is not None:
        d.set_bt_minkey(minkeypage)
    if maxkeypage is not None:
        d.set_bt_maxkey(maxkeypage)
    d.open(file, db.DB_BTREE, flags, mode)
    return _DBWithCursor(d)


def rnopen(file, flag = 'c', mode = 438, rnflags = 0, cachesize = None, pgsize = None, lorder = None, rlen = None, delim = None, source = None, pad = None):
    flags = _checkflag(flag, file)
    e = _openDBEnv(cachesize)
    d = db.DB(e)
    if pgsize is not None:
        d.set_pagesize(pgsize)
    if lorder is not None:
        d.set_lorder(lorder)
    d.set_flags(rnflags)
    if delim is not None:
        d.set_re_delim(delim)
    if rlen is not None:
        d.set_re_len(rlen)
    if source is not None:
        d.set_re_source(source)
    if pad is not None:
        d.set_re_pad(pad)
    d.open(file, db.DB_RECNO, flags, mode)
    return _DBWithCursor(d)


def _openDBEnv(cachesize):
    e = db.DBEnv()
    if cachesize is not None:
        if cachesize >= 20480:
            e.set_cachesize(0, cachesize)
        else:
            raise error, 'cachesize must be >= 20480'
    e.set_lk_detect(db.DB_LOCK_DEFAULT)
    e.open('.', db.DB_PRIVATE | db.DB_CREATE | db.DB_THREAD | db.DB_INIT_LOCK | db.DB_INIT_MPOOL)
    return e


def _checkflag(flag, file):
    if flag == 'r':
        flags = db.DB_RDONLY
    elif flag == 'rw':
        flags = 0
    elif flag == 'w':
        flags = db.DB_CREATE
    elif flag == 'c':
        flags = db.DB_CREATE
    elif flag == 'n':
        flags = db.DB_CREATE
        if file is not None and os.path.isfile(file):
            os.unlink(file)
    else:
        raise error, "flags should be one of 'r', 'w', 'c' or 'n'"
    return flags | db.DB_THREAD


try:
    import thread
    del thread
    if db.version() < (3, 3, 0):
        db.DB_THREAD = 0
except ImportError:
    db.DB_THREAD = 0