# Embedded file name: /entities/common/Lib/bsddb/test/test_recno.py
"""TestCases for exercising a Recno DB.
"""
import os
import sys
import errno
import tempfile
from pprint import pprint
import unittest
from test_all import verbose
try:
    from bsddb3 import db
except ImportError:
    from bsddb import db

letters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'

class SimpleRecnoTestCase(unittest.TestCase):

    def setUp(self):
        self.filename = tempfile.mktemp()

    def tearDown(self):
        try:
            os.remove(self.filename)
        except OSError as e:
            if e.errno != errno.EEXIST:
                raise

    def test01_basic(self):
        d = db.DB()
        get_returns_none = d.set_get_returns_none(2)
        d.set_get_returns_none(get_returns_none)
        d.open(self.filename, db.DB_RECNO, db.DB_CREATE)
        for x in letters:
            recno = d.append(x * 60)
            raise type(recno) == type(0) or AssertionError
            if not recno >= 1:
                raise AssertionError
                print verbose and recno,

        if verbose:
            print
        stat = d.stat()
        if verbose:
            pprint(stat)
        for recno in range(1, len(d) + 1):
            data = d[recno]
            if verbose:
                print data
            raise type(data) == type('') or AssertionError
            raise data == d.get(recno) or AssertionError

        try:
            data = d[0]
        except db.DBInvalidArgError as val:
            if not val[0] == db.EINVAL:
                raise AssertionError
                print verbose and val
        else:
            self.fail('expected exception')

        try:
            d.has_key(0)
        except db.DBError as val:
            pass
        else:
            self.fail('has_key did not raise a proper exception')

        try:
            data = d[100]
        except KeyError:
            pass
        else:
            self.fail('expected exception')

        try:
            data = d.get(100)
        except db.DBNotFoundError as val:
            if get_returns_none:
                self.fail('unexpected exception')
        else:
            raise data == None or AssertionError

        keys = d.keys()
        if verbose:
            print keys
        raise type(keys) == type([]) or AssertionError
        raise type(keys[0]) == type(123) or AssertionError
        if not len(keys) == len(d):
            raise AssertionError
            items = d.items()
            verbose and pprint(items)
        raise type(items) == type([]) or AssertionError
        raise type(items[0]) == type(()) or AssertionError
        raise len(items[0]) == 2 or AssertionError
        raise type(items[0][0]) == type(123) or AssertionError
        raise type(items[0][1]) == type('') or AssertionError
        raise len(items) == len(d) or AssertionError
        raise d.has_key(25) or AssertionError
        del d[25]
        raise not d.has_key(25) or AssertionError
        d.delete(13)
        raise not d.has_key(13) or AssertionError
        data = d.get_both(26, 'z' * 60)
        if not data == 'z' * 60:
            raise AssertionError, 'was %r' % data
            if verbose:
                print data
            fd = d.fd()
            if verbose:
                print fd
            c = d.cursor()
            rec = c.first()
            while rec:
                if verbose:
                    print rec
                rec = c.next()

            c.set(50)
            rec = c.current()
            print verbose and rec
        c.put(-1, 'a replacement record', db.DB_CURRENT)
        c.set(50)
        rec = c.current()
        if not rec == (50, 'a replacement record'):
            raise AssertionError
            if verbose:
                print rec
            rec = c.set_range(30)
            print verbose and rec
        rec = c.set_range(999999)
        if not rec == None:
            raise AssertionError
            print verbose and rec
        c.close()
        d.close()
        d = db.DB()
        d.open(self.filename)
        c = d.cursor()
        d[100] = 'way out there'
        raise d[100] == 'way out there' or AssertionError
        try:
            data = d[99]
        except KeyError:
            pass
        else:
            self.fail('expected exception')

        try:
            d.get(99)
        except db.DBKeyEmptyError as val:
            if get_returns_none:
                self.fail('unexpected DBKeyEmptyError exception')
            elif not val[0] == db.DB_KEYEMPTY:
                raise AssertionError
                print verbose and val
        else:
            if not get_returns_none:
                self.fail('expected exception')

        rec = c.set(40)
        while rec:
            if verbose:
                print rec
            rec = c.next()

        c.close()
        d.close()
        return

    def test02_WithSource(self):
        """
               A Recno file that is given a "backing source file" is essentially a
               simple ASCII file.  Normally each record is delimited by 
        and so is
               just a line in the file, but you can set a different record delimiter
               if needed.
               """
        homeDir = os.path.join(tempfile.gettempdir(), 'db_home')
        source = os.path.join(homeDir, 'test_recno.txt')
        if not os.path.isdir(homeDir):
            os.mkdir(homeDir)
        f = open(source, 'w')
        f.close()
        d = db.DB()
        d.set_re_delim(10)
        d.set_re_delim('\n')
        d.set_re_source(source)
        d.open(self.filename, db.DB_RECNO, db.DB_CREATE)
        data = 'The quick brown fox jumped over the lazy dog'.split()
        for datum in data:
            d.append(datum)

        d.sync()
        d.close()
        text = open(source, 'r').read()
        text = text.strip()
        if verbose:
            print text
            print data
            print text.split('\n')
        if not text.split('\n') == data:
            raise AssertionError
            d = db.DB()
            d.set_re_source(source)
            d.open(self.filename, db.DB_RECNO)
            d[3] = 'reddish-brown'
            d[8] = 'comatose'
            d.sync()
            d.close()
            text = open(source, 'r').read()
            text = text.strip()
            print verbose and text
            print text.split('\n')
        raise text.split('\n') == 'The quick reddish-brown fox jumped over the comatose dog'.split() or AssertionError

    def test03_FixedLength(self):
        d = db.DB()
        d.set_re_len(40)
        d.set_re_pad('-')
        d.set_re_pad(45)
        d.open(self.filename, db.DB_RECNO, db.DB_CREATE)
        for x in letters:
            d.append(x * 35)

        d.append('.' * 40)
        try:
            d.append('bad' * 20)
        except db.DBInvalidArgError as val:
            if not val[0] == db.EINVAL:
                raise AssertionError
                print verbose and val
        else:
            self.fail('expected exception')

        c = d.cursor()
        rec = c.first()
        while rec:
            if verbose:
                print rec
            rec = c.next()

        c.close()
        d.close()


def test_suite():
    return unittest.makeSuite(SimpleRecnoTestCase)


if __name__ == '__main__':
    unittest.main(defaultTest='test_suite')