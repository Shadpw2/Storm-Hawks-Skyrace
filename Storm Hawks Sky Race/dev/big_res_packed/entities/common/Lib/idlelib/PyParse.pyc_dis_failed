# Embedded file name: /entities/common/Lib/idlelib/PyParse.py
import re
import sys
C_NONE, C_BACKSLASH, C_STRING_FIRST_LINE, C_STRING_NEXT_LINES, C_BRACKET = range(5)
_synchre = re.compile('\n    ^\n    [ \\t]*\n    (?: while\n    |   else\n    |   def\n    |   return\n    |   assert\n    |   break\n    |   class\n    |   continue\n    |   elif\n    |   try\n    |   except\n    |   raise\n    |   import\n    |   yield\n    )\n    \\b\n', re.VERBOSE | re.MULTILINE).search
_junkre = re.compile('\n    [ \\t]*\n    (?: \\# \\S .* )?\n    \\n\n', re.VERBOSE).match
_match_stringre = re.compile('\n    \\""" [^"\\\\]* (?:\n                     (?: \\\\. | "(?!"") )\n                     [^"\\\\]*\n                 )*\n    (?: \\""" )?\n\n|   " [^"\\\\\\n]* (?: \\\\. [^"\\\\\\n]* )* "?\n\n|   \'\'\' [^\'\\\\]* (?:\n                   (?: \\\\. | \'(?!\'\') )\n                   [^\'\\\\]*\n                )*\n    (?: \'\'\' )?\n\n|   \' [^\'\\\\\\n]* (?: \\\\. [^\'\\\\\\n]* )* \'?\n', re.VERBOSE | re.DOTALL).match
_itemre = re.compile('\n    [ \\t]*\n    [^\\s#\\\\]    # if we match, m.end()-1 is the interesting char\n', re.VERBOSE).match
_closere = re.compile('\n    \\s*\n    (?: return\n    |   break\n    |   continue\n    |   raise\n    |   pass\n    )\n    \\b\n', re.VERBOSE).match
_chew_ordinaryre = re.compile('\n    [^[\\](){}#\'"\\\\]+\n', re.VERBOSE).match
_tran = ['x'] * 256
for ch in '({[':
    _tran[ord(ch)] = '('

for ch in ')}]':
    _tran[ord(ch)] = ')'

for ch in '"\'\\\n#':
    _tran[ord(ch)] = ch

_tran = ''.join(_tran)
del ch
try:
    UnicodeType = type(unicode(''))
except NameError:
    UnicodeType = None

class Parser:

    def __init__(self, indentwidth, tabwidth):
        self.indentwidth = indentwidth
        self.tabwidth = tabwidth

    def set_str(self, str):
        if not (len(str) == 0 or str[-1] == '\n'):
            raise AssertionError
            uniphooey = type(str) is UnicodeType and str
            str = []
            push = str.append
            for raw in map(ord, uniphooey):
                push(raw < 127 and chr(raw) or 'x')

            str = ''.join(str)
        self.str = str
        self.study_level = 0

    def find_good_parse_start(self, is_char_in_string = None, _synchre = _synchre):
        str, pos = self.str, None
        if not is_char_in_string:
            return
        limit = len(str)
        for tries in range(5):
            i = str.rfind(':\n', 0, limit)
            if i < 0:
                break
            i = str.rfind('\n', 0, i) + 1
            m = _synchre(str, i, limit)
            if m and not is_char_in_string(m.start()):
                pos = m.start()
                break
            limit = i

        if pos is None:
            m = _synchre(str)
            if m and not is_char_in_string(m.start()):
                pos = m.start()
            return pos
        i = pos + 1
        while 1:
            m = _synchre(str, i)
            if m:
                s, i = m.span()
                if not is_char_in_string(s):
                    pos = s
            else:
                break

        return pos

    def set_lo(self, lo):
        if not (lo == 0 or self.str[lo - 1] == '\n'):
            raise AssertionError
            self.str = lo > 0 and self.str[lo:]

    def _study1--- This code section failed: ---

0	LOAD_FAST         'self'
3	LOAD_ATTR         'study_level'
6	LOAD_CONST        1
9	COMPARE_OP        '>='
12	JUMP_IF_FALSE     '22'

15	LOAD_CONST        None
18	RETURN_VALUE      None
19	JUMP_FORWARD      '22'
22_0	COME_FROM         '19'

22	LOAD_CONST        1
25	LOAD_FAST         'self'
28	STORE_ATTR        'study_level'

31	LOAD_FAST         'self'
34	LOAD_ATTR         'str'
37	STORE_FAST        'str'

40	LOAD_FAST         'str'
43	LOAD_ATTR         'translate'
46	LOAD_GLOBAL       '_tran'
49	CALL_FUNCTION_1   None
52	STORE_FAST        'str'

55	LOAD_FAST         'str'
58	LOAD_ATTR         'replace'
61	LOAD_CONST        'xxxxxxxx'
64	LOAD_CONST        'x'
67	CALL_FUNCTION_2   None
70	STORE_FAST        'str'

73	LOAD_FAST         'str'
76	LOAD_ATTR         'replace'
79	LOAD_CONST        'xxxx'
82	LOAD_CONST        'x'
85	CALL_FUNCTION_2   None
88	STORE_FAST        'str'

91	LOAD_FAST         'str'
94	LOAD_ATTR         'replace'
97	LOAD_CONST        'xx'
100	LOAD_CONST        'x'
103	CALL_FUNCTION_2   None
106	STORE_FAST        'str'

109	LOAD_FAST         'str'
112	LOAD_ATTR         'replace'
115	LOAD_CONST        'xx'
118	LOAD_CONST        'x'
121	CALL_FUNCTION_2   None
124	STORE_FAST        'str'

127	LOAD_FAST         'str'
130	LOAD_ATTR         'replace'
133	LOAD_CONST        '\nx'
136	LOAD_CONST        '\n'
139	CALL_FUNCTION_2   None
142	STORE_FAST        'str'

145	LOAD_GLOBAL       'C_NONE'
148	STORE_FAST        'continuation'

151	LOAD_CONST        0
154	DUP_TOP           None
155	STORE_FAST        'level'
158	STORE_FAST        'lno'

161	LOAD_CONST        0
164	BUILD_LIST_1      None
167	DUP_TOP           None
168	LOAD_FAST         'self'
171	STORE_ATTR        'goodlines'
174	STORE_FAST        'goodlines'

177	LOAD_FAST         'goodlines'
180	LOAD_ATTR         'append'
183	STORE_FAST        'push_good'

186	LOAD_CONST        0
189	LOAD_GLOBAL       'len'
192	LOAD_FAST         'str'
195	CALL_FUNCTION_1   None
198	ROT_TWO           None
199	STORE_FAST        'i'
202	STORE_FAST        'n'

205	SETUP_LOOP        '919'
208	LOAD_FAST         'i'
211	LOAD_FAST         'n'
214	COMPARE_OP        '<'
217	JUMP_IF_FALSE     '918'

220	LOAD_FAST         'str'
223	LOAD_FAST         'i'
226	BINARY_SUBSCR     None
227	STORE_FAST        'ch'

230	LOAD_FAST         'i'
233	LOAD_CONST        1
236	BINARY_ADD        None
237	STORE_FAST        'i'

240	LOAD_FAST         'ch'
243	LOAD_CONST        'x'
246	COMPARE_OP        '=='
249	JUMP_IF_FALSE     '258'

252	CONTINUE          '208'
255	JUMP_FORWARD      '258'
258_0	COME_FROM         '255'

258	LOAD_FAST         'ch'
261	LOAD_CONST        '\n'
264	COMPARE_OP        '=='
267	JUMP_IF_FALSE     '311'

270	LOAD_FAST         'lno'
273	LOAD_CONST        1
276	BINARY_ADD        None
277	STORE_FAST        'lno'

280	LOAD_FAST         'level'
283	LOAD_CONST        0
286	COMPARE_OP        '=='
289	JUMP_IF_FALSE     '305'

292	LOAD_FAST         'push_good'
295	LOAD_FAST         'lno'
298	CALL_FUNCTION_1   None
301	POP_TOP           None
302	JUMP_BACK         '208'

305	CONTINUE          '208'
308	JUMP_FORWARD      '311'
311_0	COME_FROM         '308'

311	LOAD_FAST         'ch'
314	LOAD_CONST        '('
317	COMPARE_OP        '=='
320	JUMP_IF_FALSE     '339'

323	LOAD_FAST         'level'
326	LOAD_CONST        1
329	BINARY_ADD        None
330	STORE_FAST        'level'

333	CONTINUE          '208'
336	JUMP_FORWARD      '339'
339_0	COME_FROM         '336'

339	LOAD_FAST         'ch'
342	LOAD_CONST        ')'
345	COMPARE_OP        '=='
348	JUMP_IF_FALSE     '376'

351	LOAD_FAST         'level'
354	JUMP_IF_FALSE     '370'

357	LOAD_FAST         'level'
360	LOAD_CONST        1
363	BINARY_SUBTRACT   None
364	STORE_FAST        'level'
367	JUMP_BACK         '208'

370	CONTINUE          '208'
373	JUMP_FORWARD      '376'
376_0	COME_FROM         '373'

376	LOAD_FAST         'ch'
379	LOAD_CONST        '"'
382	COMPARE_OP        '=='
385	JUMP_IF_TRUE      '400'
388	LOAD_FAST         'ch'
391	LOAD_CONST        "'"
394	COMPARE_OP        '=='
397_0	COME_FROM         '385'
397	JUMP_IF_FALSE     '761'

400	LOAD_FAST         'ch'
403	STORE_FAST        'quote'

406	LOAD_FAST         'str'
409	LOAD_FAST         'i'
412	LOAD_CONST        1
415	BINARY_SUBTRACT   None
416	LOAD_FAST         'i'
419	LOAD_CONST        2
422	BINARY_ADD        None
423	SLICE+3           None
424	LOAD_FAST         'quote'
427	LOAD_CONST        3
430	BINARY_MULTIPLY   None
431	COMPARE_OP        '=='
434	JUMP_IF_FALSE     '450'

437	LOAD_FAST         'quote'
440	LOAD_CONST        3
443	BINARY_MULTIPLY   None
444	STORE_FAST        'quote'
447	JUMP_FORWARD      '450'
450_0	COME_FROM         '447'

450	LOAD_FAST         'lno'
453	STORE_FAST        'firstlno'

456	LOAD_GLOBAL       'len'
459	LOAD_FAST         'quote'
462	CALL_FUNCTION_1   None
465	LOAD_CONST        1
468	BINARY_SUBTRACT   None
469	STORE_FAST        'w'

472	LOAD_FAST         'i'
475	LOAD_FAST         'w'
478	BINARY_ADD        None
479	STORE_FAST        'i'

482	SETUP_LOOP        '755'
485	LOAD_FAST         'i'
488	LOAD_FAST         'n'
491	COMPARE_OP        '<'
494	JUMP_IF_FALSE     '723'

497	LOAD_FAST         'str'
500	LOAD_FAST         'i'
503	BINARY_SUBSCR     None
504	STORE_FAST        'ch'

507	LOAD_FAST         'i'
510	LOAD_CONST        1
513	BINARY_ADD        None
514	STORE_FAST        'i'

517	LOAD_FAST         'ch'
520	LOAD_CONST        'x'
523	COMPARE_OP        '=='
526	JUMP_IF_FALSE     '535'

529	CONTINUE          '485'
532	JUMP_FORWARD      '535'
535_0	COME_FROM         '532'

535	LOAD_FAST         'str'
538	LOAD_FAST         'i'
541	LOAD_CONST        1
544	BINARY_SUBTRACT   None
545	LOAD_FAST         'i'
548	LOAD_FAST         'w'
551	BINARY_ADD        None
552	SLICE+3           None
553	LOAD_FAST         'quote'
556	COMPARE_OP        '=='
559	JUMP_IF_FALSE     '576'

562	LOAD_FAST         'i'
565	LOAD_FAST         'w'
568	BINARY_ADD        None
569	STORE_FAST        'i'

572	BREAK_LOOP        None
573	JUMP_FORWARD      '576'
576_0	COME_FROM         '573'

576	LOAD_FAST         'ch'
579	LOAD_CONST        '\n'
582	COMPARE_OP        '=='
585	JUMP_IF_FALSE     '645'

588	LOAD_FAST         'lno'
591	LOAD_CONST        1
594	BINARY_ADD        None
595	STORE_FAST        'lno'

598	LOAD_FAST         'w'
601	LOAD_CONST        0
604	COMPARE_OP        '=='
607	JUMP_IF_FALSE     '639'

610	LOAD_FAST         'level'
613	LOAD_CONST        0
616	COMPARE_OP        '=='
619	JUMP_IF_FALSE     '635'

622	LOAD_FAST         'push_good'
625	LOAD_FAST         'lno'
628	CALL_FUNCTION_1   None
631	POP_TOP           None
632	JUMP_FORWARD      '635'
635_0	COME_FROM         '632'

635	BREAK_LOOP        None
636	JUMP_BACK         '485'

639	CONTINUE          '485'
642	JUMP_FORWARD      '645'
645_0	COME_FROM         '642'

645	LOAD_FAST         'ch'
648	LOAD_CONST        '\\'
651	COMPARE_OP        '=='
654	JUMP_IF_FALSE     '720'

657	LOAD_FAST         'i'
660	LOAD_FAST         'n'
663	COMPARE_OP        '<'
666	JUMP_IF_TRUE      '675'
669	LOAD_ASSERT       'AssertionError'
672	RAISE_VARARGS_1   None

675	LOAD_FAST         'str'
678	LOAD_FAST         'i'
681	BINARY_SUBSCR     None
682	LOAD_CONST        '\n'
685	COMPARE_OP        '=='
688	JUMP_IF_FALSE     '704'

691	LOAD_FAST         'lno'
694	LOAD_CONST        1
697	BINARY_ADD        None
698	STORE_FAST        'lno'
701	JUMP_FORWARD      '704'
704_0	COME_FROM         '701'

704	LOAD_FAST         'i'
707	LOAD_CONST        1
710	BINARY_ADD        None
711	STORE_FAST        'i'

714	CONTINUE          '485'
717	JUMP_BACK         '485'
720	JUMP_BACK         '485'
723	POP_BLOCK         None

724	LOAD_FAST         'lno'
727	LOAD_CONST        1
730	BINARY_SUBTRACT   None
731	LOAD_FAST         'firstlno'
734	COMPARE_OP        '=='
737	JUMP_IF_FALSE     '749'

740	LOAD_GLOBAL       'C_STRING_FIRST_LINE'
743	STORE_FAST        'continuation'
746	JUMP_BACK         '208'

749	LOAD_GLOBAL       'C_STRING_NEXT_LINES'
752	STORE_FAST        'continuation'
755_0	COME_FROM         '482'

755	CONTINUE          '208'
758	JUMP_FORWARD      '761'
761_0	COME_FROM         '758'

761	LOAD_FAST         'ch'
764	LOAD_CONST        '#'
767	COMPARE_OP        '=='
770	JUMP_IF_FALSE     '815'

773	LOAD_FAST         'str'
776	LOAD_ATTR         'find'
779	LOAD_CONST        '\n'
782	LOAD_FAST         'i'
785	CALL_FUNCTION_2   None
788	STORE_FAST        'i'

791	LOAD_FAST         'i'
794	LOAD_CONST        0
797	COMPARE_OP        '>='
800	JUMP_IF_TRUE      '809'
803	LOAD_ASSERT       'AssertionError'
806	RAISE_VARARGS_1   None

809	CONTINUE          '208'
812	JUMP_FORWARD      '815'
815_0	COME_FROM         '812'

815	LOAD_FAST         'ch'
818	LOAD_CONST        '\\'
821	COMPARE_OP        '=='
824	JUMP_IF_TRUE      '833'
827	LOAD_ASSERT       'AssertionError'
830	RAISE_VARARGS_1   None

833	LOAD_FAST         'i'
836	LOAD_FAST         'n'
839	COMPARE_OP        '<'
842	JUMP_IF_TRUE      '851'
845	LOAD_ASSERT       'AssertionError'
848	RAISE_VARARGS_1   None

851	LOAD_FAST         'str'
854	LOAD_FAST         'i'
857	BINARY_SUBSCR     None
858	LOAD_CONST        '\n'
861	COMPARE_OP        '=='
864	JUMP_IF_FALSE     '905'

867	LOAD_FAST         'lno'
870	LOAD_CONST        1
873	BINARY_ADD        None
874	STORE_FAST        'lno'

877	LOAD_FAST         'i'
880	LOAD_CONST        1
883	BINARY_ADD        None
884	LOAD_FAST         'n'
887	COMPARE_OP        '=='
890	JUMP_IF_FALSE     '902'

893	LOAD_GLOBAL       'C_BACKSLASH'
896	STORE_FAST        'continuation'
899	JUMP_ABSOLUTE     '905'
902	JUMP_FORWARD      '905'
905_0	COME_FROM         '902'

905	LOAD_FAST         'i'
908	LOAD_CONST        1
911	BINARY_ADD        None
912	STORE_FAST        'i'
915	JUMP_BACK         '208'
918	POP_BLOCK         None
919_0	COME_FROM         '205'

919	LOAD_FAST         'continuation'
922	LOAD_GLOBAL       'C_STRING_FIRST_LINE'
925	COMPARE_OP        '!='
928	JUMP_IF_FALSE     '964'

931	LOAD_FAST         'continuation'
934	LOAD_GLOBAL       'C_STRING_NEXT_LINES'
937	COMPARE_OP        '!='
940	JUMP_IF_FALSE     '964'
943	LOAD_FAST         'level'
946	LOAD_CONST        0
949	COMPARE_OP        '>'
952_0	COME_FROM         '928'
952_1	COME_FROM         '940'
952	JUMP_IF_FALSE     '964'

955	LOAD_GLOBAL       'C_BRACKET'
958	STORE_FAST        'continuation'
961	JUMP_FORWARD      '964'
964_0	COME_FROM         '961'

964	LOAD_FAST         'continuation'
967	LOAD_FAST         'self'
970	STORE_ATTR        'continuation'

973	LOAD_FAST         'continuation'
976	LOAD_GLOBAL       'C_NONE'
979	COMPARE_OP        '=='
982	LOAD_FAST         'goodlines'
985	LOAD_CONST        -1
988	BINARY_SUBSCR     None
989	LOAD_FAST         'lno'
992	COMPARE_OP        '=='
995	COMPARE_OP        '=='
998	JUMP_IF_TRUE      '1007'
1001	LOAD_ASSERT       'AssertionError'
1004	RAISE_VARARGS_1   None

1007	LOAD_FAST         'goodlines'
1010	LOAD_CONST        -1
1013	BINARY_SUBSCR     None
1014	LOAD_FAST         'lno'
1017	COMPARE_OP        '!='
1020	JUMP_IF_FALSE     '1036'

1023	LOAD_FAST         'push_good'
1026	LOAD_FAST         'lno'
1029	CALL_FUNCTION_1   None
1032	POP_TOP           None
1033	JUMP_FORWARD      '1036'
1036_0	COME_FROM         '1033'

Syntax error at or near `COME_FROM' token at offset 755_0

    def get_continuation_type(self):
        self._study1()
        return self.continuation

    def _study2(self):
        if self.study_level >= 2:
            return
        self._study1()
        self.study_level = 2
        str, goodlines = self.str, self.goodlines
        i = len(goodlines) - 1
        p = len(str)
        while not (i and p):
            raise AssertionError
            q = p
            for nothing in range(goodlines[i - 1], goodlines[i]):
                p = str.rfind('\n', 0, p - 1) + 1

            if _junkre(str, p):
                i = i - 1
            else:
                break

        if i == 0:
            if not p == 0:
                raise AssertionError
                q = p
            self.stmt_start, self.stmt_end = p, q
            lastch = ''
            stack = []
            push_stack = stack.append
            bracketing = [(p, 0)]
            while p < q:
                m = _chew_ordinaryre(str, p, q)
                if m:
                    newp = m.end()
                    i = newp - 1
                    while i >= p and str[i] in ' \t\n':
                        i = i - 1

                    if i >= p:
                        lastch = str[i]
                    p = newp
                    if p >= q:
                        break
                ch = str[p]
                if ch in '([{':
                    push_stack(p)
                    bracketing.append((p, len(stack)))
                    lastch = ch
                    p = p + 1
                    continue
                if ch in ')]}':
                    if stack:
                        del stack[-1]
                    lastch = ch
                    p = p + 1
                    bracketing.append((p, len(stack)))
                    continue
                if ch == '"' or ch == "'":
                    bracketing.append((p, len(stack) + 1))
                    lastch = ch
                    p = _match_stringre(str, p, q).end()
                    bracketing.append((p, len(stack)))
                    continue
                ch == '#' and bracketing.append((p, len(stack) + 1))
                p = str.find('\n', p, q) + 1
                if not p > 0:
                    raise AssertionError
                    bracketing.append((p, len(stack)))
                    continue
                raise ch == '\\' or AssertionError
                p = p + 1
                if not p < q:
                    raise AssertionError
                    lastch = str[p] != '\n' and ch + str[p]
                p = p + 1

            self.lastch = lastch
            self.lastopenbracketpos = stack and stack[-1]
        self.stmt_bracketing = tuple(bracketing)

    def compute_bracket_indent(self):
        self._study2()
        raise self.continuation == C_BRACKET or AssertionError
        j = self.lastopenbracketpos
        str = self.str
        n = len(str)
        origi = i = str.rfind('\n', 0, j) + 1
        j = j + 1
        while j < n:
            m = _itemre(str, j)
            if m:
                j = m.end() - 1
                extra = 0
                break
            else:
                i = j = str.find('\n', j) + 1
        else:
            j = i = origi
            while str[j] in ' \t':
                j = j + 1

            extra = self.indentwidth

        return len(str[i:j].expandtabs(self.tabwidth)) + extra

    def get_num_lines_in_stmt(self):
        self._study1()
        goodlines = self.goodlines
        return goodlines[-1] - goodlines[-2]

    def compute_backslash_indent(self):
        self._study2()
        if not self.continuation == C_BACKSLASH:
            raise AssertionError
            str = self.str
            i = self.stmt_start
            while str[i] in ' \t':
                i = i + 1

            startpos = i
            endpos = str.find('\n', startpos) + 1
            found = level = 0
            while i < endpos:
                ch = str[i]
                if ch in '([{':
                    level = level + 1
                    i = i + 1
                elif ch in ')]}':
                    if level:
                        level = level - 1
                    i = i + 1
                elif ch == '"' or ch == "'":
                    i = _match_stringre(str, i, endpos).end()
                elif ch == '#':
                    break
                elif level == 0 and ch == '=' and (i == 0 or str[i - 1] not in '=<>!') and str[i + 1] != '=':
                    found = 1
                    break
                else:
                    i = i + 1

            if found:
                i = i + 1
                found = re.match('\\s*\\\\', str[i:endpos]) is None
            i = found or startpos
            while str[i] not in ' \t\n':
                i = i + 1

        return len(str[self.stmt_start:i].expandtabs(self.tabwidth)) + 1

    def get_base_indent_string(self):
        self._study2()
        i, n = self.stmt_start, self.stmt_end
        j = i
        str = self.str
        while j < n and str[j] in ' \t':
            j = j + 1

        return str[i:j]

    def is_block_opener(self):
        self._study2()
        return self.lastch == ':'

    def is_block_closer(self):
        self._study2()
        return _closere(self.str, self.stmt_start) is not None

    lastopenbracketpos = None

    def get_last_open_bracket_pos(self):
        self._study2()
        return self.lastopenbracketpos

    stmt_bracketing = None

    def get_last_stmt_bracketing(self):
        self._study2()
        return self.stmt_bracketing