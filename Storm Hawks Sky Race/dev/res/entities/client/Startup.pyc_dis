# Embedded file name: /Startup.py
import BigWorld, GUI

class Console:

    def __init__(self):
        con = GUI.Console()
        con.textureName = 'foo'
        con.position = (0, 0, 0.1)
        con.colour = (163, 238, 238, 255)
        con.lineColour = con.colour
        con.visible = 1
        con.editEnable = 0
        GUI.addRoot(con)
        GUI.reSort()
        self.con = con
        self.numLines = 4
        self.lines = []

    def addChatMsg(self, msg):
        self.lines = (self.lines + [msg])[-4:]
        con = self.con
        con.clear()
        height = con.visibleHeight() - len(self.lines) - 1
        for line in self.lines:
            con.cursor = (0, height)
            height += 1
            con.prints(' ' + line)


class Startup(object):
    """A hack to use the BigWorld GUI system for the loading screen, because
    things relying on our own code won't work very reliably before init() is
    called."""
    factoryString = 'Startup.Startup'

    def __init__(self, component = None):
        self.component = component
        x = 800.0 / 1024
        y = 600.0 / 1024
        o = 0.0
        component.mapping = ((o, o),
         (o, y),
         (x, y),
         (x, o))

    def fade(self):
        GUI.delRoot(self.display.con)
        c = self.component
        for x in c.children:
            c.delChild(x[0])

        fader = c.fader
        fader.mode = 'ALL'
        fader.speed = 1
        fader.value = 0
        BigWorld.callback(1, lambda : GUI.delRoot(c))

    def addMessage(self, str):
        self.display.addChatMsg(str)

    def setProgress(self, value):
        clipper = self.component.bar.clipper
        clipper.value = value
        clipper.reset()

    def onLoad(self, section):
        self.display = Console()

    def focus(self, state):
        pass

    def handleKeyEvent(self, down, key, modifiers):
        return 0

    def handleMouseEvent(self, dx, dy, dz):
        return 0

    def handleAxisEvent(self, axis, value, dTime):
        return 0

    def onSave(self, section):
        pass

    def onBound(self):
        pass