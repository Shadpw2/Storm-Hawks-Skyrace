# Embedded file name: /entities/client/Bitcasters/CharacterModel.py
import BigWorld, CharCreationColours
from AnimationWrapper import AnimationWrapper
COLOURS = dict(((x, getattr(CharCreationColours, x)) for x in ('eyeColour', 'skinColour', 'hairColour1', 'hairColour2', 'clothesColour1', 'clothesColour2')))

def path(species, gender, folder, part):
    g = gender[0]
    return 'characters/%(species)s/%(gender)s/models/%(folder)s/char_%(species)s_%(g)s_%(part)s.model' % locals()


class FakeHair:
    """A proxy for hair models whose "matter" fails a boolean test (so that we 
    can attach None to the 'head' node instead of the FakeHair instance, 
    triggering an exception) and silently ignores requests to set dye colours."""

    def __init__(self):

        class FakeHairdye(object):

            def __nonzero__(self):
                return False

        self.hair_texture = FakeHairdye()


def make_hair(species, gender, hair):
    if hair == 0:
        return FakeHair()
    result = BigWorld.Model(path(species, gender, 'hair', 'hair%03d' % hair))
    result.hair_texture = 'custom'
    return result


def make_armour(species, gender, armourPiece):
    return BigWorld.Model(path(species, gender, 'armour', armourPiece))


def make_vehicle(name, modelname):
    return BigWorld.Model('vehicles/%(name)s/models/%(modelname)s.model' % locals())


def takeModelFrom(owner, hp = 'model'):
    """Remove the model attached to the named hardpoint (or other attribute of the entity) and return it."""
    result = getattr(owner, hp)
    setattr(owner, hp, None)
    return result


def giveModelTo(model, owner, hp = 'model'):
    """Attach the provided model to the named hardpoint (or other attribute of the entity). Return what was replaced, if anything."""
    result = takeModelFrom(owner, hp)
    setattr(owner, hp, model)
    return result


class Vehicle(object):

    def __init__(self, pose, name, modelname):
        self.pose = pose
        self.model = make_vehicle(name, modelname)

    def _getOn(self, value):
        return self._on

    def _setOn(self, value):
        self._on = value
        if value:
            self._turnOn()
        else:
            self._turnOff()

    on = property(_getOn, _setOn)


class Skyride(Vehicle):

    def __init__(self):
        Vehicle.__init__(self, 'onbike_idle001', 'Air Skimmer III Standard', 'skim_as3-standard_rig')
        self._jets = [ ('_'.join((name, side)), BigWorld.Model('vehicles/vfx/vfx-skim-%s001.model' % name), action) for name, side, action in (('pipejet', 'L', 'mediumspeed'),
         ('pipejet', 'R', 'mediumspeed'),
         ('thrustjet', 'L', 'mediumspeed'),
         ('thrustjet', 'R', 'mediumspeed')) ]

    def _turnOn(self):
        for hp, mod, action in self._jets:
            setattr(self.model, hp, mod)
            mod.action(action)()

    def _turnOff(self):
        for jet in self._jets:
            setattr(self.model, jet[0], None)

        return


def translateColour(value, which):
    colourset = COLOURS[which]
    value = value / 256.0 * (len(colourset) - 1)
    low = colourset[int(value)] + (1,)
    high = colourset[int(value) + 1] + (1,)
    frac = value - int(value)
    return tuple(((low[i] + (high[i] - low[i]) * frac) / 255 for i in range(4)))


class CharacterModel(object):

    def __init__(self, entity, species, gender, hair):
        self._armour = {}
        self._entity = entity
        self._dyemapping = {}
        self._particleData = eval(file('entities/client/particles.bpf').read())
        self._highlight = False
        self._species = species
        self._gender = gender
        self._hairID = hair
        self._vehicle = None
        self._fixModel()
        return

    def setVehicle(self, aVehicle):
        v = self._vehicle
        if v:
            v.model.base = None
            v.on = False
        result = v
        self._vehicle = aVehicle
        self._fixVehicle()
        return result

    def _fixVehicle(self):
        v = self._vehicle
        if v:
            self._entity.model = v.model
            v.on = True
            v.model.base = self._body
            self._body.action(v.pose)()
        else:
            self._entity.model = None
            self._entity.model = self._body
        return

    def _fixModel(self):
        if self.emoting():
            BigWorld.cancelCallback(self._fixface)
            del self._fixface
        m = BigWorld.Model(path(self._species, ('female', 'male')[self._gender], 'body', 'body'), path(self._species, ('female', 'male')[self._gender], 'body', 'head'))
        m.headtext_skinned = 'Normal'
        self._body = m
        self._fixVehicle()
        h = make_hair(self._species, ('female', 'male')[self._gender], self._hairID)
        self._hair = h
        self._body.head = h if h.hair_texture else None
        self.fix_dyes_for_bodyparts('hair')
        return

    def translateColour(self, which):
        value = getattr(self, which)
        tmp = translateColour(value, which)
        if self._highlight:
            tmp = tuple(((x + 1.0) / 2 for x in tmp))
        return tmp

    def apply_dye(self, bodypart, colourchannel, name):
        if self._gender == 0:
            if bodypart == 'body':
                self._body.shirt.__setattr__(colourchannel, self.translateColour(name))
                self._body.gloves.__setattr__(colourchannel, self.translateColour(name))
                self._body.pants.__setattr__(colourchannel, self.translateColour(name))
                self._body.boots.__setattr__(colourchannel, self.translateColour(name))
            else:
                {'head': self._body.headtext_skinned,
                 'hair': self._hair.hair_texture}[bodypart].__setattr__(colourchannel, self.translateColour(name))
        else:
            {'body': self._body.bodytext_skinned,
             'head': self._body.headtext_skinned,
             'hair': self._hair.hair_texture}[bodypart].__setattr__(colourchannel, self.translateColour(name))

    def _getHighlight(self):
        return self._highlight

    def _setHighlight(self, value):
        self._highlight = value
        self.fix_dyes_for_bodyparts('body', 'head', 'hair')

    highlight = property(_getHighlight, _setHighlight)

    def bindColour(self, colourname, initial_value, *affected_dyes):
        self._dyemapping[colourname] = affected_dyes
        self.__setattr__(colourname, initial_value)

    def __setattr__(self, name, value):
        object.__setattr__(self, name, value)
        if not (name.startswith('_') or hasattr(CharacterModel, name)):
            for dye in self._dyemapping[name]:
                bodypart, colourchannel = dye
                self.apply_dye(bodypart, colourchannel, name)

    def fix_dyes_for_bodyparts(self, *bodyparts):
        for colour in self._dyemapping:
            for dye in self._dyemapping[colour]:
                bodypart, colourchannel = dye
                if bodypart in bodyparts:
                    self.apply_dye(bodypart, colourchannel, colour)

    def _getHair(self):
        return self._hairID

    def _setHair(self, hair):
        h = make_hair(self._species, ('female', 'male')[self._gender], hair)
        self._hair = h
        self._body.head = h if h.hair_texture else None
        self._hairID = hair
        self.fix_dyes_for_bodyparts('hair')
        return

    hair = property(_getHair, _setHair)

    def _getClothes(self):
        return self._clothes

    def _setClothes(self, clothes):
        self._clothes = clothes
        self._fixClothes()

    clothes = property(_getClothes, _setClothes)

    def _fixClothes(self):
        clothes = self._clothes + 1
        if self._gender == 1:
            self._body.bodytext_skinned = 'outfit%03d' % clothes
        else:
            self._body.shirt = 'shirt %03d' % clothes
            self._body.gloves = 'gloves %03d' % clothes
            self._body.pants = 'pants %03d' % clothes
            self._body.boots = 'boots %03d' % clothes
        self.fix_dyes_for_bodyparts('body', 'head')

    def _getGender(self):
        return self._gender

    def _setGender(self, gender):
        self._gender = gender
        self._stripArmour()
        self._fixModel()
        self._fixClothes()
        self._fixArmour()
        self.fix_dyes_for_bodyparts('body', 'head', 'hair')

    gender = property(_getGender, _setGender)

    def _getArmour(self):
        return self._armour

    def _setArmour(self, armour):
        self._stripArmour()
        self._armour = armour
        self._fixArmour()

    armour = property(_getArmour, _setArmour)

    def _stripArmour(self):
        for clothing_item_data in self._armour.values():
            for location in clothing_item_data:
                try:
                    setattr(self._body, location, None)
                except:
                    pass

        return

    def _fixArmour(self):
        for clothing_item_name, clothing_item_data in self._armour.items():
            for location, colour in clothing_item_data.items():
                try:
                    armour = make_armour(self._species, ('female', 'male')[self._gender], 'armr001_' + location)
                    setattr(self._body, location, armour)
                    setattr(getattr(self._body, location), clothing_item_name, colour)
                except:
                    pass

    def emoting(self):
        return hasattr(self, '_fixface')

    def emote(self, emotion, time):

        def stopEmoting():
            del self._fixface
            self._body.headtext_skinned = 'Normal'
            self.fix_dyes_for_bodyparts('head')

        if self.emoting():
            BigWorld.cancelCallback(self._fixface)
        self._fixface = BigWorld.callback(time, stopEmoting)
        self._body.headtext_skinned = emotion
        self.fix_dyes_for_bodyparts('head')

    def gesture(self, name):
        """Create an AnimationWrapper object for the gesture."""
        return AnimationWrapper(self, self._particleData.get(name, {'name': name,
         'emotion': 'Normal',
         'particles': ()}))


def HumanCharacter(entity, hair, dyes, gender = 1):
    cm = CharacterModel(entity, 'human', gender, hair)
    cm.hair = hair
    cm.clothes = 0
    cm.bindColour('eyeColour', 128, ('head', 'eyeColour'))
    cm.bindColour('skinColour', 128, ('body', 'skinColour'), ('head', 'skinColour'))
    cm.bindColour('hairColour1', 128, ('head', 'hairColour1'), ('hair', 'hairColour1'))
    cm.bindColour('hairColour2', 128, ('hair', 'hairColour2'))
    cm.bindColour('clothesColour1', 128, ('body', 'clothesColour01'))
    cm.bindColour('clothesColour2', 128, ('body', 'clothesColour02'))
    for colour, value in dyes.items():
        setattr(cm, colour, value)

    return cm